/*-----------------------
 * Site:  Kingnet - ./ - start
 * Author: Clearlove 7*
 * Updated: 2017-09-27 22:41
 * Version: 1.0.0
 * -----------------------*/
define('angular', [], function () {
    (function (O, W, v) {
        'use strict';
        function H(a) {
            return function () {
                var b = arguments[0], d;
                d = '[' + (a ? a + ':' : '') + b + '] http://errors.angularjs.org/1.5.0/' + (a ? a + '/' : '') + b;
                for (b = 1; b < arguments.length; b++) {
                    d = d + (1 == b ? '?' : '&') + 'p' + (b - 1) + '=';
                    var c = encodeURIComponent, e;
                    e = arguments[b];
                    e = 'function' == typeof e ? e.toString().replace(/ \{[\s\S]*$/, '') : 'undefined' == typeof e ? 'undefined' : 'string' != typeof e ? JSON.stringify(e) : e;
                    d += c(e);
                }
                return Error(d);
            };
        }
        function Ca(a) {
            if (null == a || Za(a))
                return !1;
            if (L(a) || F(a) || C && a instanceof C)
                return !0;
            var b = 'length' in Object(a) && a.length;
            return N(b) && (0 <= b && (b - 1 in a || a instanceof Array) || 'function' == typeof a.item);
        }
        function n(a, b, d) {
            var c, e;
            if (a)
                if (D(a))
                    for (c in a)
                        'prototype' == c || 'length' == c || 'name' == c || a.hasOwnProperty && !a.hasOwnProperty(c) || b.call(d, a[c], c, a);
                else if (L(a) || Ca(a)) {
                    var f = 'object' !== typeof a;
                    c = 0;
                    for (e = a.length; c < e; c++)
                        (f || c in a) && b.call(d, a[c], c, a);
                } else if (a.forEach && a.forEach !== n)
                    a.forEach(b, d, a);
                else if (qc(a))
                    for (c in a)
                        b.call(d, a[c], c, a);
                else if ('function' === typeof a.hasOwnProperty)
                    for (c in a)
                        a.hasOwnProperty(c) && b.call(d, a[c], c, a);
                else
                    for (c in a)
                        sa.call(a, c) && b.call(d, a[c], c, a);
            return a;
        }
        function rc(a, b, d) {
            for (var c = Object.keys(a).sort(), e = 0; e < c.length; e++)
                b.call(d, a[c[e]], c[e]);
            return c;
        }
        function sc(a) {
            return function (b, d) {
                a(d, b);
            };
        }
        function Yd() {
            return ++pb;
        }
        function Qb(a, b, d) {
            for (var c = a.$$hashKey, e = 0, f = b.length; e < f; ++e) {
                var g = b[e];
                if (E(g) || D(g))
                    for (var h = Object.keys(g), k = 0, l = h.length; k < l; k++) {
                        var m = h[k], r = g[m];
                        d && E(r) ? V(r) ? a[m] = new Date(r.valueOf()) : $a(r) ? a[m] = new RegExp(r) : r.nodeName ? a[m] = r.cloneNode(!0) : Rb(r) ? a[m] = r.clone() : (E(a[m]) || (a[m] = L(r) ? [] : {}), Qb(a[m], [r], !0)) : a[m] = r;
                    }
            }
            c ? a.$$hashKey = c : delete a.$$hashKey;
            return a;
        }
        function T(a) {
            return Qb(a, wa.call(arguments, 1), !1);
        }
        function Zd(a) {
            return Qb(a, wa.call(arguments, 1), !0);
        }
        function ca(a) {
            return parseInt(a, 10);
        }
        function Sb(a, b) {
            return T(Object.create(a), b);
        }
        function B() {
        }
        function ab(a) {
            return a;
        }
        function ba(a) {
            return function () {
                return a;
            };
        }
        function tc(a) {
            return D(a.toString) && a.toString !== ga;
        }
        function x(a) {
            return 'undefined' === typeof a;
        }
        function y(a) {
            return 'undefined' !== typeof a;
        }
        function E(a) {
            return null !== a && 'object' === typeof a;
        }
        function qc(a) {
            return null !== a && 'object' === typeof a && !uc(a);
        }
        function F(a) {
            return 'string' === typeof a;
        }
        function N(a) {
            return 'number' === typeof a;
        }
        function V(a) {
            return '[object Date]' === ga.call(a);
        }
        function D(a) {
            return 'function' === typeof a;
        }
        function $a(a) {
            return '[object RegExp]' === ga.call(a);
        }
        function Za(a) {
            return a && a.window === a;
        }
        function bb(a) {
            return a && a.$evalAsync && a.$watch;
        }
        function Na(a) {
            return 'boolean' === typeof a;
        }
        function $d(a) {
            return a && N(a.length) && ae.test(ga.call(a));
        }
        function Rb(a) {
            return !(!a || !(a.nodeName || a.prop && a.attr && a.find));
        }
        function be(a) {
            var b = {};
            a = a.split(',');
            var d;
            for (d = 0; d < a.length; d++)
                b[a[d]] = !0;
            return b;
        }
        function ra(a) {
            return G(a.nodeName || a[0] && a[0].nodeName);
        }
        function cb(a, b) {
            var d = a.indexOf(b);
            0 <= d && a.splice(d, 1);
            return d;
        }
        function Oa(a, b) {
            function d(a, b) {
                var d = b.$$hashKey, e;
                if (L(a)) {
                    e = 0;
                    for (var f = a.length; e < f; e++)
                        b.push(c(a[e]));
                } else if (qc(a))
                    for (e in a)
                        b[e] = c(a[e]);
                else if (a && 'function' === typeof a.hasOwnProperty)
                    for (e in a)
                        a.hasOwnProperty(e) && (b[e] = c(a[e]));
                else
                    for (e in a)
                        sa.call(a, e) && (b[e] = c(a[e]));
                d ? b.$$hashKey = d : delete b.$$hashKey;
                return b;
            }
            function c(a) {
                if (!E(a))
                    return a;
                var b = f.indexOf(a);
                if (-1 !== b)
                    return g[b];
                if (Za(a) || bb(a))
                    throw Da('cpws');
                var b = !1, c = e(a);
                c === v && (c = L(a) ? [] : Object.create(uc(a)), b = !0);
                f.push(a);
                g.push(c);
                return b ? d(a, c) : c;
            }
            function e(a) {
                switch (ga.call(a)) {
                case '[object Int8Array]':
                case '[object Int16Array]':
                case '[object Int32Array]':
                case '[object Float32Array]':
                case '[object Float64Array]':
                case '[object Uint8Array]':
                case '[object Uint8ClampedArray]':
                case '[object Uint16Array]':
                case '[object Uint32Array]':
                    return new a.constructor(c(a.buffer));
                case '[object ArrayBuffer]':
                    if (!a.slice) {
                        var b = new ArrayBuffer(a.byteLength);
                        new Uint8Array(b).set(new Uint8Array(a));
                        return b;
                    }
                    return a.slice(0);
                case '[object Boolean]':
                case '[object Number]':
                case '[object String]':
                case '[object Date]':
                    return new a.constructor(a.valueOf());
                case '[object RegExp]':
                    return b = new RegExp(a.source, a.toString().match(/[^\/]*$/)[0]), b.lastIndex = a.lastIndex, b;
                }
                if (D(a.cloneNode))
                    return a.cloneNode(!0);
            }
            var f = [], g = [];
            if (b) {
                if ($d(b) || '[object ArrayBuffer]' === ga.call(b))
                    throw Da('cpta');
                if (a === b)
                    throw Da('cpi');
                L(b) ? b.length = 0 : n(b, function (a, c) {
                    '$$hashKey' !== c && delete b[c];
                });
                f.push(a);
                g.push(b);
                return d(a, b);
            }
            return c(a);
        }
        function na(a, b) {
            if (L(a)) {
                b = b || [];
                for (var d = 0, c = a.length; d < c; d++)
                    b[d] = a[d];
            } else if (E(a))
                for (d in b = b || {}, a)
                    if ('$' !== d.charAt(0) || '$' !== d.charAt(1))
                        b[d] = a[d];
            return b || a;
        }
        function oa(a, b) {
            if (a === b)
                return !0;
            if (null === a || null === b)
                return !1;
            if (a !== a && b !== b)
                return !0;
            var d = typeof a, c;
            if (d == typeof b && 'object' == d)
                if (L(a)) {
                    if (!L(b))
                        return !1;
                    if ((d = a.length) == b.length) {
                        for (c = 0; c < d; c++)
                            if (!oa(a[c], b[c]))
                                return !1;
                        return !0;
                    }
                } else {
                    if (V(a))
                        return V(b) ? oa(a.getTime(), b.getTime()) : !1;
                    if ($a(a))
                        return $a(b) ? a.toString() == b.toString() : !1;
                    if (bb(a) || bb(b) || Za(a) || Za(b) || L(b) || V(b) || $a(b))
                        return !1;
                    d = Z();
                    for (c in a)
                        if ('$' !== c.charAt(0) && !D(a[c])) {
                            if (!oa(a[c], b[c]))
                                return !1;
                            d[c] = !0;
                        }
                    for (c in b)
                        if (!(c in d) && '$' !== c.charAt(0) && y(b[c]) && !D(b[c]))
                            return !1;
                    return !0;
                }
            return !1;
        }
        function db(a, b, d) {
            return a.concat(wa.call(b, d));
        }
        function vc(a, b) {
            var d = 2 < arguments.length ? wa.call(arguments, 2) : [];
            return !D(b) || b instanceof RegExp ? b : d.length ? function () {
                return arguments.length ? b.apply(a, db(d, arguments, 0)) : b.apply(a, d);
            } : function () {
                return arguments.length ? b.apply(a, arguments) : b.call(a);
            };
        }
        function ce(a, b) {
            var d = b;
            'string' === typeof a && '$' === a.charAt(0) && '$' === a.charAt(1) ? d = v : Za(b) ? d = '$WINDOW' : b && W === b ? d = '$DOCUMENT' : bb(b) && (d = '$SCOPE');
            return d;
        }
        function eb(a, b) {
            if (x(a))
                return v;
            N(b) || (b = b ? 2 : null);
            return JSON.stringify(a, ce, b);
        }
        function wc(a) {
            return F(a) ? JSON.parse(a) : a;
        }
        function xc(a, b) {
            a = a.replace(de, '');
            var d = Date.parse('Jan 01, 1970 00:00:00 ' + a) / 60000;
            return isNaN(d) ? b : d;
        }
        function Tb(a, b, d) {
            d = d ? -1 : 1;
            var c = a.getTimezoneOffset();
            b = xc(b, c);
            d *= b - c;
            a = new Date(a.getTime());
            a.setMinutes(a.getMinutes() + d);
            return a;
        }
        function ta(a) {
            a = C(a).clone();
            try {
                a.empty();
            } catch (b) {
            }
            var d = C('<div>').append(a).html();
            try {
                return a[0].nodeType === Pa ? G(d) : d.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function (a, b) {
                    return '<' + G(b);
                });
            } catch (c) {
                return G(d);
            }
        }
        function yc(a) {
            try {
                return decodeURIComponent(a);
            } catch (b) {
            }
        }
        function zc(a) {
            var b = {};
            n((a || '').split('&'), function (a) {
                var c, e, f;
                a && (e = a = a.replace(/\+/g, '%20'), c = a.indexOf('='), -1 !== c && (e = a.substring(0, c), f = a.substring(c + 1)), e = yc(e), y(e) && (f = y(f) ? yc(f) : !0, sa.call(b, e) ? L(b[e]) ? b[e].push(f) : b[e] = [
                    b[e],
                    f
                ] : b[e] = f));
            });
            return b;
        }
        function Ub(a) {
            var b = [];
            n(a, function (a, c) {
                L(a) ? n(a, function (a) {
                    b.push(ha(c, !0) + (!0 === a ? '' : '=' + ha(a, !0)));
                }) : b.push(ha(c, !0) + (!0 === a ? '' : '=' + ha(a, !0)));
            });
            return b.length ? b.join('&') : '';
        }
        function qb(a) {
            return ha(a, !0).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
        }
        function ha(a, b) {
            return encodeURIComponent(a).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%20/g, b ? '%20' : '+');
        }
        function ee(a, b) {
            var d, c, e = Qa.length;
            for (c = 0; c < e; ++c)
                if (d = Qa[c] + b, F(d = a.getAttribute(d)))
                    return d;
            return null;
        }
        function fe(a, b) {
            var d, c, e = {};
            n(Qa, function (b) {
                b += 'app';
                !d && a.hasAttribute && a.hasAttribute(b) && (d = a, c = a.getAttribute(b));
            });
            n(Qa, function (b) {
                b += 'app';
                var e;
                !d && (e = a.querySelector('[' + b.replace(':', '\\:') + ']')) && (d = e, c = e.getAttribute(b));
            });
            d && (e.strictDi = null !== ee(d, 'strict-di'), b(d, c ? [c] : [], e));
        }
        function Ac(a, b, d) {
            E(d) || (d = {});
            d = T({ strictDi: !1 }, d);
            var c = function () {
                    a = C(a);
                    if (a.injector()) {
                        var c = a[0] === W ? 'document' : ta(a);
                        throw Da('btstrpd', c.replace(/</, '&lt;').replace(/>/, '&gt;'));
                    }
                    b = b || [];
                    b.unshift([
                        '$provide',
                        function (b) {
                            b.value('$rootElement', a);
                        }
                    ]);
                    d.debugInfoEnabled && b.push([
                        '$compileProvider',
                        function (a) {
                            a.debugInfoEnabled(!0);
                        }
                    ]);
                    b.unshift('ng');
                    c = fb(b, d.strictDi);
                    c.invoke([
                        '$rootScope',
                        '$rootElement',
                        '$compile',
                        '$injector',
                        function (a, b, c, d) {
                            a.$apply(function () {
                                b.data('$injector', d);
                                c(b)(a);
                            });
                        }
                    ]);
                    return c;
                }, e = /^NG_ENABLE_DEBUG_INFO!/, f = /^NG_DEFER_BOOTSTRAP!/;
            O && e.test(O.name) && (d.debugInfoEnabled = !0, O.name = O.name.replace(e, ''));
            if (O && !f.test(O.name))
                return c();
            O.name = O.name.replace(f, '');
            ia.resumeBootstrap = function (a) {
                n(a, function (a) {
                    b.push(a);
                });
                return c();
            };
            D(ia.resumeDeferredBootstrap) && ia.resumeDeferredBootstrap();
        }
        function ge() {
            O.name = 'NG_ENABLE_DEBUG_INFO!' + O.name;
            O.location.reload();
        }
        function he(a) {
            a = ia.element(a).injector();
            if (!a)
                throw Da('test');
            return a.get('$$testability');
        }
        function Bc(a, b) {
            b = b || '_';
            return a.replace(ie, function (a, c) {
                return (c ? b : '') + a.toLowerCase();
            });
        }
        function je() {
            var a;
            if (!Cc) {
                var b = rb();
                (ua = x(b) ? O.jQuery : b ? O[b] : v) && ua.fn.on ? (C = ua, T(ua.fn, {
                    scope: Ra.scope,
                    isolateScope: Ra.isolateScope,
                    controller: Ra.controller,
                    injector: Ra.injector,
                    inheritedData: Ra.inheritedData
                }), a = ua.cleanData, ua.cleanData = function (b) {
                    for (var c, e = 0, f; null != (f = b[e]); e++)
                        (c = ua._data(f, 'events')) && c.$destroy && ua(f).triggerHandler('$destroy');
                    a(b);
                }) : C = U;
                ia.element = C;
                Cc = !0;
            }
        }
        function sb(a, b, d) {
            if (!a)
                throw Da('areq', b || '?', d || 'required');
            return a;
        }
        function Sa(a, b, d) {
            d && L(a) && (a = a[a.length - 1]);
            sb(D(a), b, 'not a function, got ' + (a && 'object' === typeof a ? a.constructor.name || 'Object' : typeof a));
            return a;
        }
        function Ta(a, b) {
            if ('hasOwnProperty' === a)
                throw Da('badname', b);
        }
        function Dc(a, b, d) {
            if (!b)
                return a;
            b = b.split('.');
            for (var c, e = a, f = b.length, g = 0; g < f; g++)
                c = b[g], a && (a = (e = a)[c]);
            return !d && D(a) ? vc(e, a) : a;
        }
        function tb(a) {
            for (var b = a[0], d = a[a.length - 1], c, e = 1; b !== d && (b = b.nextSibling); e++)
                if (c || a[e] !== b)
                    c || (c = C(wa.call(a, 0, e))), c.push(b);
            return c || a;
        }
        function Z() {
            return Object.create(null);
        }
        function ke(a) {
            function b(a, b, c) {
                return a[b] || (a[b] = c());
            }
            var d = H('$injector'), c = H('ng');
            a = b(a, 'angular', Object);
            a.$$minErr = a.$$minErr || H;
            return b(a, 'module', function () {
                var a = {};
                return function (f, g, h) {
                    if ('hasOwnProperty' === f)
                        throw c('badname', 'module');
                    g && a.hasOwnProperty(f) && (a[f] = null);
                    return b(a, f, function () {
                        function a(b, d, e, f) {
                            f || (f = c);
                            return function () {
                                f[e || 'push']([
                                    b,
                                    d,
                                    arguments
                                ]);
                                return K;
                            };
                        }
                        function b(a, d) {
                            return function (b, e) {
                                e && D(e) && (e.$$moduleName = f);
                                c.push([
                                    a,
                                    d,
                                    arguments
                                ]);
                                return K;
                            };
                        }
                        if (!g)
                            throw d('nomod', f);
                        var c = [], e = [], s = [], I = a('$injector', 'invoke', 'push', e), K = {
                                _invokeQueue: c,
                                _configBlocks: e,
                                _runBlocks: s,
                                requires: g,
                                name: f,
                                provider: b('$provide', 'provider'),
                                factory: b('$provide', 'factory'),
                                service: b('$provide', 'service'),
                                value: a('$provide', 'value'),
                                constant: a('$provide', 'constant', 'unshift'),
                                decorator: b('$provide', 'decorator'),
                                animation: b('$animateProvider', 'register'),
                                filter: b('$filterProvider', 'register'),
                                controller: b('$controllerProvider', 'register'),
                                directive: b('$compileProvider', 'directive'),
                                component: b('$compileProvider', 'component'),
                                config: I,
                                run: function (a) {
                                    s.push(a);
                                    return this;
                                }
                            };
                        h && I(h);
                        return K;
                    });
                };
            });
        }
        function le(a) {
            T(a, {
                bootstrap: Ac,
                copy: Oa,
                extend: T,
                merge: Zd,
                equals: oa,
                element: C,
                forEach: n,
                injector: fb,
                noop: B,
                bind: vc,
                toJson: eb,
                fromJson: wc,
                identity: ab,
                isUndefined: x,
                isDefined: y,
                isString: F,
                isFunction: D,
                isObject: E,
                isNumber: N,
                isElement: Rb,
                isArray: L,
                version: me,
                isDate: V,
                lowercase: G,
                uppercase: ub,
                callbacks: { counter: 0 },
                getTestability: he,
                $$minErr: H,
                $$csp: Ea,
                reloadWithDebugInfo: ge
            });
            Vb = ke(O);
            Vb('ng', ['ngLocale'], [
                '$provide',
                function (a) {
                    a.provider({ $$sanitizeUri: ne });
                    a.provider('$compile', Ec).directive({
                        a: oe,
                        input: Fc,
                        textarea: Fc,
                        form: pe,
                        script: qe,
                        select: re,
                        style: se,
                        option: te,
                        ngBind: ue,
                        ngBindHtml: ve,
                        ngBindTemplate: we,
                        ngClass: xe,
                        ngClassEven: ye,
                        ngClassOdd: ze,
                        ngCloak: Ae,
                        ngController: Be,
                        ngForm: Ce,
                        ngHide: De,
                        ngIf: Ee,
                        ngInclude: Fe,
                        ngInit: Ge,
                        ngNonBindable: He,
                        ngPluralize: Ie,
                        ngRepeat: Je,
                        ngShow: Ke,
                        ngStyle: Le,
                        ngSwitch: Me,
                        ngSwitchWhen: Ne,
                        ngSwitchDefault: Oe,
                        ngOptions: Pe,
                        ngTransclude: Qe,
                        ngModel: Re,
                        ngList: Se,
                        ngChange: Te,
                        pattern: Gc,
                        ngPattern: Gc,
                        required: Hc,
                        ngRequired: Hc,
                        minlength: Ic,
                        ngMinlength: Ic,
                        maxlength: Jc,
                        ngMaxlength: Jc,
                        ngValue: Ue,
                        ngModelOptions: Ve
                    }).directive({ ngInclude: We }).directive(vb).directive(Kc);
                    a.provider({
                        $anchorScroll: Xe,
                        $animate: Ye,
                        $animateCss: Ze,
                        $$animateJs: $e,
                        $$animateQueue: af,
                        $$AnimateRunner: bf,
                        $$animateAsyncRun: cf,
                        $browser: df,
                        $cacheFactory: ef,
                        $controller: ff,
                        $document: gf,
                        $exceptionHandler: hf,
                        $filter: Lc,
                        $$forceReflow: jf,
                        $interpolate: kf,
                        $interval: lf,
                        $http: mf,
                        $httpParamSerializer: nf,
                        $httpParamSerializerJQLike: of,
                        $httpBackend: pf,
                        $xhrFactory: qf,
                        $location: rf,
                        $log: sf,
                        $parse: tf,
                        $rootScope: uf,
                        $q: vf,
                        $$q: wf,
                        $sce: xf,
                        $sceDelegate: yf,
                        $sniffer: zf,
                        $templateCache: Af,
                        $templateRequest: Bf,
                        $$testability: Cf,
                        $timeout: Df,
                        $window: Ef,
                        $$rAF: Ff,
                        $$jqLite: Gf,
                        $$HashMap: Hf,
                        $$cookieReader: If
                    });
                }
            ]);
        }
        function gb(a) {
            return a.replace(Jf, function (a, d, c, e) {
                return e ? c.toUpperCase() : c;
            }).replace(Kf, 'Moz$1');
        }
        function Mc(a) {
            a = a.nodeType;
            return 1 === a || !a || 9 === a;
        }
        function Nc(a, b) {
            var d, c, e = b.createDocumentFragment(), f = [];
            if (Wb.test(a)) {
                d = d || e.appendChild(b.createElement('div'));
                c = (Lf.exec(a) || [
                    '',
                    ''
                ])[1].toLowerCase();
                c = da[c] || da._default;
                d.innerHTML = c[1] + a.replace(Mf, '<$1></$2>') + c[2];
                for (c = c[0]; c--;)
                    d = d.lastChild;
                f = db(f, d.childNodes);
                d = e.firstChild;
                d.textContent = '';
            } else
                f.push(b.createTextNode(a));
            e.textContent = '';
            e.innerHTML = '';
            n(f, function (a) {
                e.appendChild(a);
            });
            return e;
        }
        function Oc(a, b) {
            var d = a.parentNode;
            d && d.replaceChild(b, a);
            b.appendChild(a);
        }
        function U(a) {
            if (a instanceof U)
                return a;
            var b;
            F(a) && (a = X(a), b = !0);
            if (!(this instanceof U)) {
                if (b && '<' != a.charAt(0))
                    throw Xb('nosel');
                return new U(a);
            }
            if (b) {
                b = W;
                var d;
                a = (d = Nf.exec(a)) ? [b.createElement(d[1])] : (d = Nc(a, b)) ? d.childNodes : [];
            }
            Pc(this, a);
        }
        function Yb(a) {
            return a.cloneNode(!0);
        }
        function wb(a, b) {
            b || hb(a);
            if (a.querySelectorAll)
                for (var d = a.querySelectorAll('*'), c = 0, e = d.length; c < e; c++)
                    hb(d[c]);
        }
        function Qc(a, b, d, c) {
            if (y(c))
                throw Xb('offargs');
            var e = (c = xb(a)) && c.events, f = c && c.handle;
            if (f)
                if (b) {
                    var g = function (b) {
                        var c = e[b];
                        y(d) && cb(c || [], d);
                        y(d) && c && 0 < c.length || (a.removeEventListener(b, f, !1), delete e[b]);
                    };
                    n(b.split(' '), function (a) {
                        g(a);
                        yb[a] && g(yb[a]);
                    });
                } else
                    for (b in e)
                        '$destroy' !== b && a.removeEventListener(b, f, !1), delete e[b];
        }
        function hb(a, b) {
            var d = a.ng339, c = d && ib[d];
            c && (b ? delete c.data[b] : (c.handle && (c.events.$destroy && c.handle({}, '$destroy'), Qc(a)), delete ib[d], a.ng339 = v));
        }
        function xb(a, b) {
            var d = a.ng339, d = d && ib[d];
            b && !d && (a.ng339 = d = ++Of, d = ib[d] = {
                events: {},
                data: {},
                handle: v
            });
            return d;
        }
        function Zb(a, b, d) {
            if (Mc(a)) {
                var c = y(d), e = !c && b && !E(b), f = !b;
                a = (a = xb(a, !e)) && a.data;
                if (c)
                    a[b] = d;
                else {
                    if (f)
                        return a;
                    if (e)
                        return a && a[b];
                    T(a, b);
                }
            }
        }
        function zb(a, b) {
            return a.getAttribute ? -1 < (' ' + (a.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + b + ' ') : !1;
        }
        function Ab(a, b) {
            b && a.setAttribute && n(b.split(' '), function (b) {
                a.setAttribute('class', X((' ' + (a.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').replace(' ' + X(b) + ' ', ' ')));
            });
        }
        function Bb(a, b) {
            if (b && a.setAttribute) {
                var d = (' ' + (a.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ');
                n(b.split(' '), function (a) {
                    a = X(a);
                    -1 === d.indexOf(' ' + a + ' ') && (d += a + ' ');
                });
                a.setAttribute('class', X(d));
            }
        }
        function Pc(a, b) {
            if (b)
                if (b.nodeType)
                    a[a.length++] = b;
                else {
                    var d = b.length;
                    if ('number' === typeof d && b.window !== b) {
                        if (d)
                            for (var c = 0; c < d; c++)
                                a[a.length++] = b[c];
                    } else
                        a[a.length++] = b;
                }
        }
        function Rc(a, b) {
            return Cb(a, '$' + (b || 'ngController') + 'Controller');
        }
        function Cb(a, b, d) {
            9 == a.nodeType && (a = a.documentElement);
            for (b = L(b) ? b : [b]; a;) {
                for (var c = 0, e = b.length; c < e; c++)
                    if (y(d = C.data(a, b[c])))
                        return d;
                a = a.parentNode || 11 === a.nodeType && a.host;
            }
        }
        function Sc(a) {
            for (wb(a, !0); a.firstChild;)
                a.removeChild(a.firstChild);
        }
        function $b(a, b) {
            b || wb(a);
            var d = a.parentNode;
            d && d.removeChild(a);
        }
        function Pf(a, b) {
            b = b || O;
            if ('complete' === b.document.readyState)
                b.setTimeout(a);
            else
                C(b).on('load', a);
        }
        function Tc(a, b) {
            var d = Db[b.toLowerCase()];
            return d && Uc[ra(a)] && d;
        }
        function Qf(a, b) {
            var d = function (c, d) {
                c.isDefaultPrevented = function () {
                    return c.defaultPrevented;
                };
                var f = b[d || c.type], g = f ? f.length : 0;
                if (g) {
                    if (x(c.immediatePropagationStopped)) {
                        var h = c.stopImmediatePropagation;
                        c.stopImmediatePropagation = function () {
                            c.immediatePropagationStopped = !0;
                            c.stopPropagation && c.stopPropagation();
                            h && h.call(c);
                        };
                    }
                    c.isImmediatePropagationStopped = function () {
                        return !0 === c.immediatePropagationStopped;
                    };
                    var k = f.specialHandlerWrapper || Rf;
                    1 < g && (f = na(f));
                    for (var l = 0; l < g; l++)
                        c.isImmediatePropagationStopped() || k(a, c, f[l]);
                }
            };
            d.elem = a;
            return d;
        }
        function Rf(a, b, d) {
            d.call(a, b);
        }
        function Sf(a, b, d) {
            var c = b.relatedTarget;
            c && (c === a || Tf.call(a, c)) || d.call(a, b);
        }
        function Gf() {
            this.$get = function () {
                return T(U, {
                    hasClass: function (a, b) {
                        a.attr && (a = a[0]);
                        return zb(a, b);
                    },
                    addClass: function (a, b) {
                        a.attr && (a = a[0]);
                        return Bb(a, b);
                    },
                    removeClass: function (a, b) {
                        a.attr && (a = a[0]);
                        return Ab(a, b);
                    }
                });
            };
        }
        function Fa(a, b) {
            var d = a && a.$$hashKey;
            if (d)
                return 'function' === typeof d && (d = a.$$hashKey()), d;
            d = typeof a;
            return d = 'function' == d || 'object' == d && null !== a ? a.$$hashKey = d + ':' + (b || Yd)() : d + ':' + a;
        }
        function Ua(a, b) {
            if (b) {
                var d = 0;
                this.nextUid = function () {
                    return ++d;
                };
            }
            n(a, this.put, this);
        }
        function Vc(a) {
            a = a.toString().replace(Uf, '');
            return a.match(Vf) || a.match(Wf);
        }
        function Xf(a) {
            return (a = Vc(a)) ? 'function(' + (a[1] || '').replace(/[\s\r\n]+/, ' ') + ')' : 'fn';
        }
        function fb(a, b) {
            function d(a) {
                return function (b, c) {
                    if (E(b))
                        n(b, sc(a));
                    else
                        return a(b, c);
                };
            }
            function c(a, b) {
                Ta(a, 'service');
                if (D(b) || L(b))
                    b = s.instantiate(b);
                if (!b.$get)
                    throw Ga('pget', a);
                return r[a + 'Provider'] = b;
            }
            function e(a, b) {
                return function () {
                    var c = t.invoke(b, this);
                    if (x(c))
                        throw Ga('undef', a);
                    return c;
                };
            }
            function f(a, b, d) {
                return c(a, { $get: !1 !== d ? e(a, b) : b });
            }
            function g(a) {
                sb(x(a) || L(a), 'modulesToLoad', 'not an array');
                var b = [], c;
                n(a, function (a) {
                    function d(a) {
                        var b, c;
                        b = 0;
                        for (c = a.length; b < c; b++) {
                            var e = a[b], f = s.get(e[0]);
                            f[e[1]].apply(f, e[2]);
                        }
                    }
                    if (!m.get(a)) {
                        m.put(a, !0);
                        try {
                            F(a) ? (c = Vb(a), b = b.concat(g(c.requires)).concat(c._runBlocks), d(c._invokeQueue), d(c._configBlocks)) : D(a) ? b.push(s.invoke(a)) : L(a) ? b.push(s.invoke(a)) : Sa(a, 'module');
                        } catch (e) {
                            throw L(a) && (a = a[a.length - 1]), e.message && e.stack && -1 == e.stack.indexOf(e.message) && (e = e.message + '\n' + e.stack), Ga('modulerr', a, e.stack || e.message || e);
                        }
                    }
                });
                return b;
            }
            function h(a, c) {
                function d(b, e) {
                    if (a.hasOwnProperty(b)) {
                        if (a[b] === k)
                            throw Ga('cdep', b + ' <- ' + l.join(' <- '));
                        return a[b];
                    }
                    try {
                        return l.unshift(b), a[b] = k, a[b] = c(b, e);
                    } catch (f) {
                        throw a[b] === k && delete a[b], f;
                    } finally {
                        l.shift();
                    }
                }
                function e(a, c, f) {
                    var g = [];
                    a = fb.$$annotate(a, b, f);
                    for (var h = 0, k = a.length; h < k; h++) {
                        var l = a[h];
                        if ('string' !== typeof l)
                            throw Ga('itkn', l);
                        g.push(c && c.hasOwnProperty(l) ? c[l] : d(l, f));
                    }
                    return g;
                }
                return {
                    invoke: function (a, b, c, d) {
                        'string' === typeof c && (d = c, c = null);
                        c = e(a, c, d);
                        L(a) && (a = a[a.length - 1]);
                        d = 11 >= xa ? !1 : 'function' === typeof a && /^(?:class\s|constructor\()/.test(Function.prototype.toString.call(a));
                        return d ? (c.unshift(null), new (Function.prototype.bind.apply(a, c))()) : a.apply(b, c);
                    },
                    instantiate: function (a, b, c) {
                        var d = L(a) ? a[a.length - 1] : a;
                        a = e(a, b, c);
                        a.unshift(null);
                        return new (Function.prototype.bind.apply(d, a))();
                    },
                    get: d,
                    annotate: fb.$$annotate,
                    has: function (b) {
                        return r.hasOwnProperty(b + 'Provider') || a.hasOwnProperty(b);
                    }
                };
            }
            b = !0 === b;
            var k = {}, l = [], m = new Ua([], !0), r = {
                    $provide: {
                        provider: d(c),
                        factory: d(f),
                        service: d(function (a, b) {
                            return f(a, [
                                '$injector',
                                function (a) {
                                    return a.instantiate(b);
                                }
                            ]);
                        }),
                        value: d(function (a, b) {
                            return f(a, ba(b), !1);
                        }),
                        constant: d(function (a, b) {
                            Ta(a, 'constant');
                            r[a] = b;
                            I[a] = b;
                        }),
                        decorator: function (a, b) {
                            var c = s.get(a + 'Provider'), d = c.$get;
                            c.$get = function () {
                                var a = t.invoke(d, c);
                                return t.invoke(b, null, { $delegate: a });
                            };
                        }
                    }
                }, s = r.$injector = h(r, function (a, b) {
                    ia.isString(b) && l.push(b);
                    throw Ga('unpr', l.join(' <- '));
                }), I = {}, K = h(I, function (a, b) {
                    var c = s.get(a + 'Provider', b);
                    return t.invoke(c.$get, c, v, a);
                }), t = K;
            r.$injectorProvider = { $get: ba(K) };
            var p = g(a), t = K.get('$injector');
            t.strictDi = b;
            n(p, function (a) {
                a && t.invoke(a);
            });
            return t;
        }
        function Xe() {
            var a = !0;
            this.disableAutoScrolling = function () {
                a = !1;
            };
            this.$get = [
                '$window',
                '$location',
                '$rootScope',
                function (b, d, c) {
                    function e(a) {
                        var b = null;
                        Array.prototype.some.call(a, function (a) {
                            if ('a' === ra(a))
                                return b = a, !0;
                        });
                        return b;
                    }
                    function f(a) {
                        if (a) {
                            a.scrollIntoView();
                            var c;
                            c = g.yOffset;
                            D(c) ? c = c() : Rb(c) ? (c = c[0], c = 'fixed' !== b.getComputedStyle(c).position ? 0 : c.getBoundingClientRect().bottom) : N(c) || (c = 0);
                            c && (a = a.getBoundingClientRect().top, b.scrollBy(0, a - c));
                        } else
                            b.scrollTo(0, 0);
                    }
                    function g(a) {
                        a = F(a) ? a : d.hash();
                        var b;
                        a ? (b = h.getElementById(a)) ? f(b) : (b = e(h.getElementsByName(a))) ? f(b) : 'top' === a && f(null) : f(null);
                    }
                    var h = b.document;
                    a && c.$watch(function () {
                        return d.hash();
                    }, function (a, b) {
                        a === b && '' === a || Pf(function () {
                            c.$evalAsync(g);
                        });
                    });
                    return g;
                }
            ];
        }
        function jb(a, b) {
            if (!a && !b)
                return '';
            if (!a)
                return b;
            if (!b)
                return a;
            L(a) && (a = a.join(' '));
            L(b) && (b = b.join(' '));
            return a + ' ' + b;
        }
        function Yf(a) {
            F(a) && (a = a.split(' '));
            var b = Z();
            n(a, function (a) {
                a.length && (b[a] = !0);
            });
            return b;
        }
        function Ha(a) {
            return E(a) ? a : {};
        }
        function Zf(a, b, d, c) {
            function e(a) {
                try {
                    a.apply(null, wa.call(arguments, 1));
                } finally {
                    if (K--, 0 === K)
                        for (; t.length;)
                            try {
                                t.pop()();
                            } catch (b) {
                                d.error(b);
                            }
                }
            }
            function f() {
                z = null;
                g();
                h();
            }
            function g() {
                a: {
                    try {
                        p = m.state;
                        break a;
                    } catch (a) {
                    }
                    p = void 0;
                }
                p = x(p) ? null : p;
                oa(p, $) && (p = $);
                $ = p;
            }
            function h() {
                if (u !== k.url() || w !== p)
                    u = k.url(), w = p, n(A, function (a) {
                        a(k.url(), p);
                    });
            }
            var k = this, l = a.location, m = a.history, r = a.setTimeout, s = a.clearTimeout, I = {};
            k.isMock = !1;
            var K = 0, t = [];
            k.$$completeOutstandingRequest = e;
            k.$$incOutstandingRequestCount = function () {
                K++;
            };
            k.notifyWhenNoOutstandingRequests = function (a) {
                0 === K ? a() : t.push(a);
            };
            var p, w, u = l.href, la = b.find('base'), z = null;
            g();
            w = p;
            k.url = function (b, d, e) {
                x(e) && (e = null);
                l !== a.location && (l = a.location);
                m !== a.history && (m = a.history);
                if (b) {
                    var f = w === e;
                    if (u === b && (!c.history || f))
                        return k;
                    var h = u && Ia(u) === Ia(b);
                    u = b;
                    w = e;
                    if (!c.history || h && f) {
                        if (!h || z)
                            z = b;
                        d ? l.replace(b) : h ? (d = l, e = b.indexOf('#'), e = -1 === e ? '' : b.substr(e), d.hash = e) : l.href = b;
                        l.href !== b && (z = b);
                    } else
                        m[d ? 'replaceState' : 'pushState'](e, '', b), g(), w = p;
                    return k;
                }
                return z || l.href.replace(/%27/g, '\'');
            };
            k.state = function () {
                return p;
            };
            var A = [], Q = !1, $ = null;
            k.onUrlChange = function (b) {
                if (!Q) {
                    if (c.history)
                        C(a).on('popstate', f);
                    C(a).on('hashchange', f);
                    Q = !0;
                }
                A.push(b);
                return b;
            };
            k.$$applicationDestroyed = function () {
                C(a).off('hashchange popstate', f);
            };
            k.$$checkUrlChange = h;
            k.baseHref = function () {
                var a = la.attr('href');
                return a ? a.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
            };
            k.defer = function (a, b) {
                var c;
                K++;
                c = r(function () {
                    delete I[c];
                    e(a);
                }, b || 0);
                I[c] = !0;
                return c;
            };
            k.defer.cancel = function (a) {
                return I[a] ? (delete I[a], s(a), e(B), !0) : !1;
            };
        }
        function df() {
            this.$get = [
                '$window',
                '$log',
                '$sniffer',
                '$document',
                function (a, b, d, c) {
                    return new Zf(a, c, b, d);
                }
            ];
        }
        function ef() {
            this.$get = function () {
                function a(a, c) {
                    function e(a) {
                        a != r && (s ? s == a && (s = a.n) : s = a, f(a.n, a.p), f(a, r), r = a, r.n = null);
                    }
                    function f(a, b) {
                        a != b && (a && (a.p = b), b && (b.n = a));
                    }
                    if (a in b)
                        throw H('$cacheFactory')('iid', a);
                    var g = 0, h = T({}, c, { id: a }), k = Z(), l = c && c.capacity || Number.MAX_VALUE, m = Z(), r = null, s = null;
                    return b[a] = {
                        put: function (a, b) {
                            if (!x(b)) {
                                if (l < Number.MAX_VALUE) {
                                    var c = m[a] || (m[a] = { key: a });
                                    e(c);
                                }
                                a in k || g++;
                                k[a] = b;
                                g > l && this.remove(s.key);
                                return b;
                            }
                        },
                        get: function (a) {
                            if (l < Number.MAX_VALUE) {
                                var b = m[a];
                                if (!b)
                                    return;
                                e(b);
                            }
                            return k[a];
                        },
                        remove: function (a) {
                            if (l < Number.MAX_VALUE) {
                                var b = m[a];
                                if (!b)
                                    return;
                                b == r && (r = b.p);
                                b == s && (s = b.n);
                                f(b.n, b.p);
                                delete m[a];
                            }
                            a in k && (delete k[a], g--);
                        },
                        removeAll: function () {
                            k = Z();
                            g = 0;
                            m = Z();
                            r = s = null;
                        },
                        destroy: function () {
                            m = h = k = null;
                            delete b[a];
                        },
                        info: function () {
                            return T({}, h, { size: g });
                        }
                    };
                }
                var b = {};
                a.info = function () {
                    var a = {};
                    n(b, function (b, e) {
                        a[e] = b.info();
                    });
                    return a;
                };
                a.get = function (a) {
                    return b[a];
                };
                return a;
            };
        }
        function Af() {
            this.$get = [
                '$cacheFactory',
                function (a) {
                    return a('templates');
                }
            ];
        }
        function Ec(a, b) {
            function d(a, b, c) {
                var d = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/, e = {};
                n(a, function (a, f) {
                    var g = a.match(d);
                    if (!g)
                        throw ja('iscp', b, f, a, c ? 'controller bindings definition' : 'isolate scope definition');
                    e[f] = {
                        mode: g[1][0],
                        collection: '*' === g[2],
                        optional: '?' === g[3],
                        attrName: g[4] || f
                    };
                });
                return e;
            }
            function c(a) {
                var b = a.charAt(0);
                if (!b || b !== G(b))
                    throw ja('baddir', a);
                if (a !== a.trim())
                    throw ja('baddir', a);
            }
            var e = {}, f = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/, g = /(([\w\-]+)(?:\:([^;]+))?;?)/, h = be('ngSrc,ngSrcset,src,srcset'), k = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/, l = /^(on[a-z]+|formaction)$/;
            this.directive = function s(b, f) {
                Ta(b, 'directive');
                F(b) ? (c(b), sb(f, 'directiveFactory'), e.hasOwnProperty(b) || (e[b] = [], a.factory(b + 'Directive', [
                    '$injector',
                    '$exceptionHandler',
                    function (a, c) {
                        var f = [];
                        n(e[b], function (e, g) {
                            try {
                                var h = a.invoke(e);
                                D(h) ? h = { compile: ba(h) } : !h.compile && h.link && (h.compile = ba(h.link));
                                h.priority = h.priority || 0;
                                h.index = g;
                                h.name = h.name || b;
                                h.require = h.require || h.controller && h.name;
                                h.restrict = h.restrict || 'EA';
                                var k = h, l = h, m = h.name, s = {
                                        isolateScope: null,
                                        bindToController: null
                                    };
                                E(l.scope) && (!0 === l.bindToController ? (s.bindToController = d(l.scope, m, !0), s.isolateScope = {}) : s.isolateScope = d(l.scope, m, !1));
                                E(l.bindToController) && (s.bindToController = d(l.bindToController, m, !0));
                                if (E(s.bindToController)) {
                                    var P = l.controller, S = l.controllerAs;
                                    if (!P)
                                        throw ja('noctrl', m);
                                    if (!Wc(P, S))
                                        throw ja('noident', m);
                                }
                                var ma = k.$$bindings = s;
                                E(ma.isolateScope) && (h.$$isolateBindings = ma.isolateScope);
                                h.$$moduleName = e.$$moduleName;
                                f.push(h);
                            } catch (K) {
                                c(K);
                            }
                        });
                        return f;
                    }
                ])), e[b].push(f)) : n(b, sc(s));
                return this;
            };
            this.component = function (a, b) {
                function c(a) {
                    function e(b) {
                        return D(b) || L(b) ? function (c, d) {
                            return a.invoke(b, this, {
                                $element: c,
                                $attrs: d
                            });
                        } : b;
                    }
                    var f = b.template || b.templateUrl ? b.template : '';
                    return {
                        controller: d,
                        controllerAs: Wc(b.controller) || b.controllerAs || '$ctrl',
                        template: e(f),
                        templateUrl: e(b.templateUrl),
                        transclude: b.transclude,
                        scope: {},
                        bindToController: b.bindings || {},
                        restrict: 'E',
                        require: b.require
                    };
                }
                var d = b.controller || function () {
                };
                n(b, function (a, b) {
                    '$' === b.charAt(0) && (c[b] = a);
                });
                c.$inject = ['$injector'];
                return this.directive(a, c);
            };
            this.aHrefSanitizationWhitelist = function (a) {
                return y(a) ? (b.aHrefSanitizationWhitelist(a), this) : b.aHrefSanitizationWhitelist();
            };
            this.imgSrcSanitizationWhitelist = function (a) {
                return y(a) ? (b.imgSrcSanitizationWhitelist(a), this) : b.imgSrcSanitizationWhitelist();
            };
            var m = !0;
            this.debugInfoEnabled = function (a) {
                return y(a) ? (m = a, this) : m;
            };
            this.$get = [
                '$injector',
                '$interpolate',
                '$exceptionHandler',
                '$templateRequest',
                '$parse',
                '$controller',
                '$rootScope',
                '$sce',
                '$animate',
                '$$sanitizeUri',
                function (a, b, c, d, p, w, u, la, z, A) {
                    function Q(a, b, c) {
                        ba.innerHTML = '<span ' + b + '>';
                        b = ba.firstChild.attributes;
                        var d = b[0];
                        b.removeNamedItem(d.name);
                        d.value = c;
                        a.attributes.setNamedItem(d);
                    }
                    function $(a, b) {
                        try {
                            a.addClass(b);
                        } catch (c) {
                        }
                    }
                    function M(a, b, c, d, e) {
                        a instanceof C || (a = C(a));
                        for (var f = /\S+/, g = 0, h = a.length; g < h; g++) {
                            var k = a[g];
                            k.nodeType === Pa && k.nodeValue.match(f) && Oc(k, a[g] = W.createElement('span'));
                        }
                        var l = P(a, b, a, c, d, e);
                        M.$$addScopeClass(a);
                        var m = null;
                        return function (b, c, d) {
                            sb(b, 'scope');
                            e && e.needsNewScope && (b = b.$parent.$new());
                            d = d || {};
                            var f = d.parentBoundTranscludeFn, g = d.transcludeControllers;
                            d = d.futureParentElement;
                            f && f.$$boundTransclude && (f = f.$$boundTransclude);
                            m || (m = (d = d && d[0]) ? 'foreignobject' !== ra(d) && ga.call(d).match(/SVG/) ? 'svg' : 'html' : 'html');
                            d = 'html' !== m ? C(U(m, C('<div>').append(a).html())) : c ? Ra.clone.call(a) : a;
                            if (g)
                                for (var h in g)
                                    d.data('$' + h + 'Controller', g[h].instance);
                            M.$$addScopeInfo(d, b);
                            c && c(d, b);
                            l && l(b, d, d, f);
                            return d;
                        };
                    }
                    function P(a, b, c, d, e, f) {
                        function g(a, c, d, e) {
                            var f, k, l, m, p, s, u;
                            if (A)
                                for (u = Array(c.length), m = 0; m < h.length; m += 3)
                                    f = h[m], u[f] = c[f];
                            else
                                u = c;
                            m = 0;
                            for (p = h.length; m < p;)
                                k = u[h[m++]], c = h[m++], f = h[m++], c ? (c.scope ? (l = a.$new(), M.$$addScopeInfo(C(k), l)) : l = a, s = c.transcludeOnThisElement ? S(a, c.transclude, e) : !c.templateOnThisElement && e ? e : !e && b ? S(a, b) : null, c(f, l, k, d, s)) : f && f(a, k.childNodes, v, e);
                        }
                        for (var h = [], k, l, m, p, A, s = 0; s < a.length; s++) {
                            k = new na();
                            l = ma(a[s], [], k, 0 === s ? d : v, e);
                            (f = l.length ? y(l, a[s], k, b, c, null, [], [], f) : null) && f.scope && M.$$addScopeClass(k.$$element);
                            k = f && f.terminal || !(m = a[s].childNodes) || !m.length ? null : P(m, f ? (f.transcludeOnThisElement || !f.templateOnThisElement) && f.transclude : b);
                            if (f || k)
                                h.push(s, f, k), p = !0, A = A || f;
                            f = null;
                        }
                        return p ? g : null;
                    }
                    function S(a, b, c) {
                        var d = function (d, e, f, g, h) {
                                d || (d = a.$new(!1, h), d.$$transcluded = !0);
                                return b(d, e, {
                                    parentBoundTranscludeFn: c,
                                    transcludeControllers: f,
                                    futureParentElement: g
                                });
                            }, e = d.$$slots = Z(), f;
                        for (f in b.$$slots)
                            e[f] = b.$$slots[f] ? S(a, b.$$slots[f], c) : null;
                        return d;
                    }
                    function ma(a, b, c, d, e) {
                        var h = c.$attr, k;
                        switch (a.nodeType) {
                        case 1:
                            H(b, va(ra(a)), 'E', d, e);
                            for (var l, m, p, s = a.attributes, A = 0, u = s && s.length; A < u; A++) {
                                var t = !1, w = !1;
                                l = s[A];
                                k = l.name;
                                m = X(l.value);
                                l = va(k);
                                if (p = pa.test(l))
                                    k = k.replace(Xc, '').substr(8).replace(/_(.)/g, function (a, b) {
                                        return b.toUpperCase();
                                    });
                                (l = l.match(ua)) && O(l[1]) && (t = k, w = k.substr(0, k.length - 5) + 'end', k = k.substr(0, k.length - 6));
                                l = va(k.toLowerCase());
                                h[l] = k;
                                if (p || !c.hasOwnProperty(l))
                                    c[l] = m, Tc(a, l) && (c[l] = !0);
                                Y(a, b, m, l, p);
                                H(b, l, 'A', d, e, t, w);
                            }
                            a = a.className;
                            E(a) && (a = a.animVal);
                            if (F(a) && '' !== a)
                                for (; k = g.exec(a);)
                                    l = va(k[2]), H(b, l, 'C', d, e) && (c[l] = X(k[3])), a = a.substr(k.index + k[0].length);
                            break;
                        case Pa:
                            if (11 === xa)
                                for (; a.parentNode && a.nextSibling && a.nextSibling.nodeType === Pa;)
                                    a.nodeValue += a.nextSibling.nodeValue, a.parentNode.removeChild(a.nextSibling);
                            N(b, a.nodeValue);
                            break;
                        case 8:
                            try {
                                if (k = f.exec(a.nodeValue))
                                    l = va(k[1]), H(b, l, 'M', d, e) && (c[l] = X(k[2]));
                            } catch (M) {
                            }
                        }
                        b.sort(ya);
                        return b;
                    }
                    function q(a, b, c) {
                        var d = [], e = 0;
                        if (b && a.hasAttribute && a.hasAttribute(b)) {
                            do {
                                if (!a)
                                    throw ja('uterdir', b, c);
                                1 == a.nodeType && (a.hasAttribute(b) && e++, a.hasAttribute(c) && e--);
                                d.push(a);
                                a = a.nextSibling;
                            } while (0 < e);
                        } else
                            d.push(a);
                        return C(d);
                    }
                    function Yc(a, b, c) {
                        return function (d, e, f, g, h) {
                            e = q(e[0], b, c);
                            return a(d, e, f, g, h);
                        };
                    }
                    function ac(a, b, c, d, e, f) {
                        if (a)
                            return M(b, c, d, e, f);
                        var g;
                        return function () {
                            g || (g = M(b, c, d, e, f), b = c = f = null);
                            return g.apply(this, arguments);
                        };
                    }
                    function y(a, b, d, e, f, g, h, l, m) {
                        function p(a, b, c, d) {
                            if (a) {
                                c && (a = Yc(a, c, d));
                                a.require = J.require;
                                a.directiveName = H;
                                if (P === J || J.$$isolateScope)
                                    a = ca(a, { isolateScope: !0 });
                                h.push(a);
                            }
                            if (b) {
                                c && (b = Yc(b, c, d));
                                b.require = J.require;
                                b.directiveName = H;
                                if (P === J || J.$$isolateScope)
                                    b = ca(b, { isolateScope: !0 });
                                l.push(b);
                            }
                        }
                        function s(a, b, c, d) {
                            var e;
                            if (F(b)) {
                                var f = b.match(k);
                                b = b.substring(f[0].length);
                                var g = f[1] || f[3], f = '?' === f[2];
                                '^^' === g ? c = c.parent() : e = (e = d && d[b]) && e.instance;
                                if (!e) {
                                    var h = '$' + b + 'Controller';
                                    e = g ? c.inheritedData(h) : c.data(h);
                                }
                                if (!e && !f)
                                    throw ja('ctreq', b, a);
                            } else if (L(b))
                                for (e = [], g = 0, f = b.length; g < f; g++)
                                    e[g] = s(a, b[g], c, d);
                            else
                                E(b) && (e = {}, n(b, function (b, f) {
                                    e[f] = s(a, b, c, d);
                                }));
                            return e || null;
                        }
                        function A(a, b, c, d, e, f) {
                            var g = Z(), h;
                            for (h in d) {
                                var k = d[h], l = {
                                        $scope: k === P || k.$$isolateScope ? e : f,
                                        $element: a,
                                        $attrs: b,
                                        $transclude: c
                                    }, m = k.controller;
                                '@' == m && (m = b[k.name]);
                                l = w(m, l, !0, k.controllerAs);
                                g[k.name] = l;
                                B || a.data('$' + k.name + 'Controller', l.instance);
                            }
                            return g;
                        }
                        function u(a, c, e, f, g) {
                            function k(a, b, c, d) {
                                var e;
                                bb(a) || (d = c, c = b, b = a, a = v);
                                B && (e = ma);
                                c || (c = B ? z.parent() : z);
                                if (d) {
                                    var f = g.$$slots[d];
                                    if (f)
                                        return f(a, b, e, c, Eb);
                                    if (x(f))
                                        throw ja('noslot', d, ta(z));
                                } else
                                    return g(a, b, e, c, Eb);
                            }
                            var m, p, t, w, ma, S, z, Ja;
                            b === e ? (f = d, z = d.$$element) : (z = C(e), f = new na(z, d));
                            t = c;
                            P ? w = c.$new(!0) : Q && (t = c.$parent);
                            g && (S = k, S.$$boundTransclude = g, S.isSlotFilled = function (a) {
                                return !!g.$$slots[a];
                            });
                            I && (ma = A(z, f, S, I, w, c));
                            P && (M.$$addScopeInfo(z, w, !0, !($ && ($ === P || $ === P.$$originalDirective))), M.$$addScopeClass(z, !0), w.$$isolateBindings = P.$$isolateBindings, (Ja = ia(c, f, w, w.$$isolateBindings, P)) && w.$on('$destroy', Ja));
                            for (p in ma) {
                                Ja = I[p];
                                var K = ma[p], la = Ja.$$bindings.bindToController;
                                K.identifier && la && (m = ia(t, f, K.instance, la, Ja));
                                var q = K();
                                q !== K.instance && (K.instance = q, z.data('$' + Ja.name + 'Controller', q), m && m(), m = ia(t, f, K.instance, la, Ja));
                            }
                            n(I, function (a, b) {
                                var c = a.require;
                                a.bindToController && !L(c) && E(c) && T(ma[b].instance, s(b, c, z, ma));
                            });
                            n(ma, function (a) {
                                D(a.instance.$onInit) && a.instance.$onInit();
                            });
                            m = 0;
                            for (p = h.length; m < p; m++)
                                t = h[m], ka(t, t.isolateScope ? w : c, z, f, t.require && s(t.directiveName, t.require, z, ma), S);
                            var Eb = c;
                            P && (P.template || null === P.templateUrl) && (Eb = w);
                            a && a(Eb, e.childNodes, v, g);
                            for (m = l.length - 1; 0 <= m; m--)
                                t = l[m], ka(t, t.isolateScope ? w : c, z, f, t.require && s(t.directiveName, t.require, z, ma), S);
                        }
                        m = m || {};
                        for (var t = -Number.MAX_VALUE, Q = m.newScopeDirective, I = m.controllerDirectives, P = m.newIsolateScopeDirective, $ = m.templateDirective, S = m.nonTlbTranscludeDirective, z = !1, la = !1, B = m.hasElementTranscludeDirective, ea = d.$$element = C(b), J, H, G, ya = e, O, N = !1, Fb = !1, fa, R = 0, Va = a.length; R < Va; R++) {
                            J = a[R];
                            var Y = J.$$start, ba = J.$$end;
                            Y && (ea = q(b, Y, ba));
                            G = v;
                            if (t > J.priority)
                                break;
                            if (fa = J.scope)
                                J.templateUrl || (E(fa) ? (Wa('new/isolated scope', P || Q, J, ea), P = J) : Wa('new/isolated scope', P, J, ea)), Q = Q || J;
                            H = J.name;
                            if (!N && (J.replace && (J.templateUrl || J.template) || J.transclude && !J.$$tlb)) {
                                for (fa = R + 1; N = a[fa++];)
                                    if (N.transclude && !N.$$tlb || N.replace && (N.templateUrl || N.template)) {
                                        Fb = !0;
                                        break;
                                    }
                                N = !0;
                            }
                            !J.templateUrl && J.controller && (fa = J.controller, I = I || Z(), Wa('\'' + H + '\' controller', I[H], J, ea), I[H] = J);
                            if (fa = J.transclude)
                                if (z = !0, J.$$tlb || (Wa('transclusion', S, J, ea), S = J), 'element' == fa)
                                    B = !0, t = J.priority, G = ea, ea = d.$$element = C(W.createComment(' ' + H + ': ' + d[H] + ' ')), b = ea[0], aa(f, wa.call(G, 0), b), ya = ac(Fb, G, e, t, g && g.name, { nonTlbTranscludeDirective: S });
                                else {
                                    var V = Z();
                                    G = C(Yb(b)).contents();
                                    if (E(fa)) {
                                        G = [];
                                        var ha = Z(), da = Z();
                                        n(fa, function (a, b) {
                                            var c = '?' === a.charAt(0);
                                            a = c ? a.substring(1) : a;
                                            ha[a] = b;
                                            V[b] = null;
                                            da[b] = c;
                                        });
                                        n(ea.contents(), function (a) {
                                            var b = ha[va(ra(a))];
                                            b ? (da[b] = !0, V[b] = V[b] || [], V[b].push(a)) : G.push(a);
                                        });
                                        n(da, function (a, b) {
                                            if (!a)
                                                throw ja('reqslot', b);
                                        });
                                        for (var ga in V)
                                            V[ga] && (V[ga] = ac(Fb, V[ga], e));
                                    }
                                    ea.empty();
                                    ya = ac(Fb, G, e, v, v, { needsNewScope: J.$$isolateScope || J.$$newScope });
                                    ya.$$slots = V;
                                }
                            if (J.template)
                                if (la = !0, Wa('template', $, J, ea), $ = J, fa = D(J.template) ? J.template(ea, d) : J.template, fa = qa(fa), J.replace) {
                                    g = J;
                                    G = Wb.test(fa) ? Zc(U(J.templateNamespace, X(fa))) : [];
                                    b = G[0];
                                    if (1 != G.length || 1 !== b.nodeType)
                                        throw ja('tplrt', H, '');
                                    aa(f, ea, b);
                                    Va = { $attr: {} };
                                    fa = ma(b, [], Va);
                                    var oa = a.splice(R + 1, a.length - (R + 1));
                                    (P || Q) && $c(fa, P, Q);
                                    a = a.concat(fa).concat(oa);
                                    ad(d, Va);
                                    Va = a.length;
                                } else
                                    ea.html(fa);
                            if (J.templateUrl)
                                la = !0, Wa('template', $, J, ea), $ = J, J.replace && (g = J), u = $f(a.splice(R, a.length - R), ea, d, f, z && ya, h, l, {
                                    controllerDirectives: I,
                                    newScopeDirective: Q !== J && Q,
                                    newIsolateScopeDirective: P,
                                    templateDirective: $,
                                    nonTlbTranscludeDirective: S
                                }), Va = a.length;
                            else if (J.compile)
                                try {
                                    O = J.compile(ea, d, ya), D(O) ? p(null, O, Y, ba) : O && p(O.pre, O.post, Y, ba);
                                } catch (pa) {
                                    c(pa, ta(ea));
                                }
                            J.terminal && (u.terminal = !0, t = Math.max(t, J.priority));
                        }
                        u.scope = Q && !0 === Q.scope;
                        u.transcludeOnThisElement = z;
                        u.templateOnThisElement = la;
                        u.transclude = ya;
                        m.hasElementTranscludeDirective = B;
                        return u;
                    }
                    function $c(a, b, c) {
                        for (var d = 0, e = a.length; d < e; d++)
                            a[d] = Sb(a[d], {
                                $$isolateScope: b,
                                $$newScope: c
                            });
                    }
                    function H(b, d, f, g, h, k, l) {
                        if (d === h)
                            return null;
                        h = null;
                        if (e.hasOwnProperty(d)) {
                            var m;
                            d = a.get(d + 'Directive');
                            for (var p = 0, A = d.length; p < A; p++)
                                try {
                                    m = d[p], (x(g) || g > m.priority) && -1 != m.restrict.indexOf(f) && (k && (m = Sb(m, {
                                        $$start: k,
                                        $$end: l
                                    })), b.push(m), h = m);
                                } catch (t) {
                                    c(t);
                                }
                        }
                        return h;
                    }
                    function O(b) {
                        if (e.hasOwnProperty(b))
                            for (var c = a.get(b + 'Directive'), d = 0, f = c.length; d < f; d++)
                                if (b = c[d], b.multiElement)
                                    return !0;
                        return !1;
                    }
                    function ad(a, b) {
                        var c = b.$attr, d = a.$attr, e = a.$$element;
                        n(a, function (d, e) {
                            '$' != e.charAt(0) && (b[e] && b[e] !== d && (d += ('style' === e ? ';' : ' ') + b[e]), a.$set(e, d, !0, c[e]));
                        });
                        n(b, function (b, f) {
                            'class' == f ? ($(e, b), a['class'] = (a['class'] ? a['class'] + ' ' : '') + b) : 'style' == f ? (e.attr('style', e.attr('style') + ';' + b), a.style = (a.style ? a.style + ';' : '') + b) : '$' == f.charAt(0) || a.hasOwnProperty(f) || (a[f] = b, d[f] = c[f]);
                        });
                    }
                    function $f(a, b, c, e, f, g, h, k) {
                        var l = [], m, p, s = b[0], A = a.shift(), u = Sb(A, {
                                templateUrl: null,
                                transclude: null,
                                replace: null,
                                $$originalDirective: A
                            }), w = D(A.templateUrl) ? A.templateUrl(b, c) : A.templateUrl, Q = A.templateNamespace;
                        b.empty();
                        d(w).then(function (d) {
                            var t, I;
                            d = qa(d);
                            if (A.replace) {
                                d = Wb.test(d) ? Zc(U(Q, X(d))) : [];
                                t = d[0];
                                if (1 != d.length || 1 !== t.nodeType)
                                    throw ja('tplrt', A.name, w);
                                d = { $attr: {} };
                                aa(e, b, t);
                                var M = ma(t, [], d);
                                E(A.scope) && $c(M, !0);
                                a = M.concat(a);
                                ad(c, d);
                            } else
                                t = s, b.html(d);
                            a.unshift(u);
                            m = y(a, t, c, f, b, A, g, h, k);
                            n(e, function (a, c) {
                                a == t && (e[c] = b[0]);
                            });
                            for (p = P(b[0].childNodes, f); l.length;) {
                                d = l.shift();
                                I = l.shift();
                                var z = l.shift(), K = l.shift(), M = b[0];
                                if (!d.$$destroyed) {
                                    if (I !== s) {
                                        var la = I.className;
                                        k.hasElementTranscludeDirective && A.replace || (M = Yb(t));
                                        aa(z, C(I), M);
                                        $(C(M), la);
                                    }
                                    I = m.transcludeOnThisElement ? S(d, m.transclude, K) : K;
                                    m(p, d, M, e, I);
                                }
                            }
                            l = null;
                        });
                        return function (a, b, c, d, e) {
                            a = e;
                            b.$$destroyed || (l ? l.push(b, c, d, a) : (m.transcludeOnThisElement && (a = S(b, m.transclude, e)), m(p, b, c, d, a)));
                        };
                    }
                    function ya(a, b) {
                        var c = b.priority - a.priority;
                        return 0 !== c ? c : a.name !== b.name ? a.name < b.name ? -1 : 1 : a.index - b.index;
                    }
                    function Wa(a, b, c, d) {
                        function e(a) {
                            return a ? ' (module: ' + a + ')' : '';
                        }
                        if (b)
                            throw ja('multidir', b.name, e(b.$$moduleName), c.name, e(c.$$moduleName), a, ta(d));
                    }
                    function N(a, c) {
                        var d = b(c, !0);
                        d && a.push({
                            priority: 0,
                            compile: function (a) {
                                a = a.parent();
                                var b = !!a.length;
                                b && M.$$addBindingClass(a);
                                return function (a, c) {
                                    var e = c.parent();
                                    b || M.$$addBindingClass(e);
                                    M.$$addBindingInfo(e, d.expressions);
                                    a.$watch(d, function (a) {
                                        c[0].nodeValue = a;
                                    });
                                };
                            }
                        });
                    }
                    function U(a, b) {
                        a = G(a || 'html');
                        switch (a) {
                        case 'svg':
                        case 'math':
                            var c = W.createElement('div');
                            c.innerHTML = '<' + a + '>' + b + '</' + a + '>';
                            return c.childNodes[0].childNodes;
                        default:
                            return b;
                        }
                    }
                    function R(a, b) {
                        if ('srcdoc' == b)
                            return la.HTML;
                        var c = ra(a);
                        if ('xlinkHref' == b || 'form' == c && 'action' == b || 'img' != c && ('src' == b || 'ngSrc' == b))
                            return la.RESOURCE_URL;
                    }
                    function Y(a, c, d, e, f) {
                        var g = R(a, e);
                        f = h[e] || f;
                        var k = b(d, !0, g, f);
                        if (k) {
                            if ('multiple' === e && 'select' === ra(a))
                                throw ja('selmulti', ta(a));
                            c.push({
                                priority: 100,
                                compile: function () {
                                    return {
                                        pre: function (a, c, h) {
                                            c = h.$$observers || (h.$$observers = Z());
                                            if (l.test(e))
                                                throw ja('nodomevents');
                                            var m = h[e];
                                            m !== d && (k = m && b(m, !0, g, f), d = m);
                                            k && (h[e] = k(a), (c[e] || (c[e] = [])).$$inter = !0, (h.$$observers && h.$$observers[e].$$scope || a).$watch(k, function (a, b) {
                                                'class' === e && a != b ? h.$updateClass(a, b) : h.$set(e, a);
                                            }));
                                        }
                                    };
                                }
                            });
                        }
                    }
                    function aa(a, b, c) {
                        var d = b[0], e = b.length, f = d.parentNode, g, h;
                        if (a)
                            for (g = 0, h = a.length; g < h; g++)
                                if (a[g] == d) {
                                    a[g++] = c;
                                    h = g + e - 1;
                                    for (var k = a.length; g < k; g++, h++)
                                        h < k ? a[g] = a[h] : delete a[g];
                                    a.length -= e - 1;
                                    a.context === d && (a.context = c);
                                    break;
                                }
                        f && f.replaceChild(c, d);
                        a = W.createDocumentFragment();
                        for (g = 0; g < e; g++)
                            a.appendChild(b[g]);
                        C.hasData(d) && (C.data(c, C.data(d)), C(d).off('$destroy'));
                        C.cleanData(a.querySelectorAll('*'));
                        for (g = 1; g < e; g++)
                            delete b[g];
                        b[0] = c;
                        b.length = 1;
                    }
                    function ca(a, b) {
                        return T(function () {
                            return a.apply(null, arguments);
                        }, a, b);
                    }
                    function ka(a, b, d, e, f, g) {
                        try {
                            a(b, d, e, f, g);
                        } catch (h) {
                            c(h, ta(d));
                        }
                    }
                    function ia(a, c, d, e, f) {
                        var g = [];
                        n(e, function (e, h) {
                            var k = e.attrName, l = e.optional, m, A, s, t;
                            switch (e.mode) {
                            case '@':
                                l || sa.call(c, k) || (d[h] = c[k] = void 0);
                                c.$observe(k, function (a) {
                                    F(a) && (d[h] = a);
                                });
                                c.$$observers[k].$$scope = a;
                                m = c[k];
                                F(m) ? d[h] = b(m)(a) : Na(m) && (d[h] = m);
                                break;
                            case '=':
                                if (!sa.call(c, k)) {
                                    if (l)
                                        break;
                                    c[k] = void 0;
                                }
                                if (l && !c[k])
                                    break;
                                A = p(c[k]);
                                t = A.literal ? oa : function (a, b) {
                                    return a === b || a !== a && b !== b;
                                };
                                s = A.assign || function () {
                                    m = d[h] = A(a);
                                    throw ja('nonassign', c[k], k, f.name);
                                };
                                m = d[h] = A(a);
                                l = function (b) {
                                    t(b, d[h]) || (t(b, m) ? s(a, b = d[h]) : d[h] = b);
                                    return m = b;
                                };
                                l.$stateful = !0;
                                l = e.collection ? a.$watchCollection(c[k], l) : a.$watch(p(c[k], l), null, A.literal);
                                g.push(l);
                                break;
                            case '<':
                                if (!sa.call(c, k)) {
                                    if (l)
                                        break;
                                    c[k] = void 0;
                                }
                                if (l && !c[k])
                                    break;
                                A = p(c[k]);
                                d[h] = A(a);
                                l = a.$watch(A, function (a) {
                                    d[h] = a;
                                }, A.literal);
                                g.push(l);
                                break;
                            case '&':
                                A = c.hasOwnProperty(k) ? p(c[k]) : B;
                                if (A === B && l)
                                    break;
                                d[h] = function (b) {
                                    return A(a, b);
                                };
                            }
                        });
                        return g.length && function () {
                            for (var a = 0, b = g.length; a < b; ++a)
                                g[a]();
                        };
                    }
                    var V = /^\w/, ba = W.createElement('div'), na = function (a, b) {
                            if (b) {
                                var c = Object.keys(b), d, e, f;
                                d = 0;
                                for (e = c.length; d < e; d++)
                                    f = c[d], this[f] = b[f];
                            } else
                                this.$attr = {};
                            this.$$element = a;
                        };
                    na.prototype = {
                        $normalize: va,
                        $addClass: function (a) {
                            a && 0 < a.length && z.addClass(this.$$element, a);
                        },
                        $removeClass: function (a) {
                            a && 0 < a.length && z.removeClass(this.$$element, a);
                        },
                        $updateClass: function (a, b) {
                            var c = bd(a, b);
                            c && c.length && z.addClass(this.$$element, c);
                            (c = bd(b, a)) && c.length && z.removeClass(this.$$element, c);
                        },
                        $set: function (a, b, d, e) {
                            var f = Tc(this.$$element[0], a), g = cd[a], h = a;
                            f ? (this.$$element.prop(a, b), e = f) : g && (this[g] = b, h = g);
                            this[a] = b;
                            e ? this.$attr[a] = e : (e = this.$attr[a]) || (this.$attr[a] = e = Bc(a, '-'));
                            f = ra(this.$$element);
                            if ('a' === f && ('href' === a || 'xlinkHref' === a) || 'img' === f && 'src' === a)
                                this[a] = b = A(b, 'src' === a);
                            else if ('img' === f && 'srcset' === a) {
                                for (var f = '', g = X(b), k = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/, k = /\s/.test(g) ? k : /(,)/, g = g.split(k), k = Math.floor(g.length / 2), l = 0; l < k; l++)
                                    var m = 2 * l, f = f + A(X(g[m]), !0), f = f + (' ' + X(g[m + 1]));
                                g = X(g[2 * l]).split(/\s/);
                                f += A(X(g[0]), !0);
                                2 === g.length && (f += ' ' + X(g[1]));
                                this[a] = b = f;
                            }
                            !1 !== d && (null === b || x(b) ? this.$$element.removeAttr(e) : V.test(e) ? this.$$element.attr(e, b) : Q(this.$$element[0], e, b));
                            (a = this.$$observers) && n(a[h], function (a) {
                                try {
                                    a(b);
                                } catch (d) {
                                    c(d);
                                }
                            });
                        },
                        $observe: function (a, b) {
                            var c = this, d = c.$$observers || (c.$$observers = Z()), e = d[a] || (d[a] = []);
                            e.push(b);
                            u.$evalAsync(function () {
                                e.$$inter || !c.hasOwnProperty(a) || x(c[a]) || b(c[a]);
                            });
                            return function () {
                                cb(e, b);
                            };
                        }
                    };
                    var ha = b.startSymbol(), da = b.endSymbol(), qa = '{{' == ha && '}}' == da ? ab : function (a) {
                            return a.replace(/\{\{/g, ha).replace(/}}/g, da);
                        }, pa = /^ngAttr[A-Z]/, ua = /^(.+)Start$/;
                    M.$$addBindingInfo = m ? function (a, b) {
                        var c = a.data('$binding') || [];
                        L(b) ? c = c.concat(b) : c.push(b);
                        a.data('$binding', c);
                    } : B;
                    M.$$addBindingClass = m ? function (a) {
                        $(a, 'ng-binding');
                    } : B;
                    M.$$addScopeInfo = m ? function (a, b, c, d) {
                        a.data(c ? d ? '$isolateScopeNoTemplate' : '$isolateScope' : '$scope', b);
                    } : B;
                    M.$$addScopeClass = m ? function (a, b) {
                        $(a, b ? 'ng-isolate-scope' : 'ng-scope');
                    } : B;
                    return M;
                }
            ];
        }
        function va(a) {
            return gb(a.replace(Xc, ''));
        }
        function bd(a, b) {
            var d = '', c = a.split(/\s+/), e = b.split(/\s+/), f = 0;
            a:
                for (; f < c.length; f++) {
                    for (var g = c[f], h = 0; h < e.length; h++)
                        if (g == e[h])
                            continue a;
                    d += (0 < d.length ? ' ' : '') + g;
                }
            return d;
        }
        function Zc(a) {
            a = C(a);
            var b = a.length;
            if (1 >= b)
                return a;
            for (; b--;)
                8 === a[b].nodeType && ag.call(a, b, 1);
            return a;
        }
        function Wc(a, b) {
            if (b && F(b))
                return b;
            if (F(a)) {
                var d = dd.exec(a);
                if (d)
                    return d[3];
            }
        }
        function ff() {
            var a = {}, b = !1;
            this.register = function (b, c) {
                Ta(b, 'controller');
                E(b) ? T(a, b) : a[b] = c;
            };
            this.allowGlobals = function () {
                b = !0;
            };
            this.$get = [
                '$injector',
                '$window',
                function (d, c) {
                    function e(a, b, c, d) {
                        if (!a || !E(a.$scope))
                            throw H('$controller')('noscp', d, b);
                        a.$scope[b] = c;
                    }
                    return function (f, g, h, k) {
                        var l, m, r;
                        h = !0 === h;
                        k && F(k) && (r = k);
                        if (F(f)) {
                            k = f.match(dd);
                            if (!k)
                                throw bg('ctrlfmt', f);
                            m = k[1];
                            r = r || k[3];
                            f = a.hasOwnProperty(m) ? a[m] : Dc(g.$scope, m, !0) || (b ? Dc(c, m, !0) : v);
                            Sa(f, m, !0);
                        }
                        if (h)
                            return h = (L(f) ? f[f.length - 1] : f).prototype, l = Object.create(h || null), r && e(g, r, l, m || f.name), T(function () {
                                var a = d.invoke(f, l, g, m);
                                a !== l && (E(a) || D(a)) && (l = a, r && e(g, r, l, m || f.name));
                                return l;
                            }, {
                                instance: l,
                                identifier: r
                            });
                        l = d.instantiate(f, g, m);
                        r && e(g, r, l, m || f.name);
                        return l;
                    };
                }
            ];
        }
        function gf() {
            this.$get = [
                '$window',
                function (a) {
                    return C(a.document);
                }
            ];
        }
        function hf() {
            this.$get = [
                '$log',
                function (a) {
                    return function (b, d) {
                        a.error.apply(a, arguments);
                    };
                }
            ];
        }
        function bc(a) {
            return E(a) ? V(a) ? a.toISOString() : eb(a) : a;
        }
        function nf() {
            this.$get = function () {
                return function (a) {
                    if (!a)
                        return '';
                    var b = [];
                    rc(a, function (a, c) {
                        null === a || x(a) || (L(a) ? n(a, function (a, d) {
                            b.push(ha(c) + '=' + ha(bc(a)));
                        }) : b.push(ha(c) + '=' + ha(bc(a))));
                    });
                    return b.join('&');
                };
            };
        }
        function of() {
            this.$get = function () {
                return function (a) {
                    function b(a, e, f) {
                        null === a || x(a) || (L(a) ? n(a, function (a, c) {
                            b(a, e + '[' + (E(a) ? c : '') + ']');
                        }) : E(a) && !V(a) ? rc(a, function (a, c) {
                            b(a, e + (f ? '' : '[') + c + (f ? '' : ']'));
                        }) : d.push(ha(e) + '=' + ha(bc(a))));
                    }
                    if (!a)
                        return '';
                    var d = [];
                    b(a, '', !0);
                    return d.join('&');
                };
            };
        }
        function cc(a, b) {
            if (F(a)) {
                var d = a.replace(cg, '').trim();
                if (d) {
                    var c = b('Content-Type');
                    (c = c && 0 === c.indexOf(ed)) || (c = (c = d.match(dg)) && eg[c[0]].test(d));
                    c && (a = wc(d));
                }
            }
            return a;
        }
        function fd(a) {
            var b = Z(), d;
            F(a) ? n(a.split('\n'), function (a) {
                d = a.indexOf(':');
                var e = G(X(a.substr(0, d)));
                a = X(a.substr(d + 1));
                e && (b[e] = b[e] ? b[e] + ', ' + a : a);
            }) : E(a) && n(a, function (a, d) {
                var f = G(d), g = X(a);
                f && (b[f] = b[f] ? b[f] + ', ' + g : g);
            });
            return b;
        }
        function gd(a) {
            var b;
            return function (d) {
                b || (b = fd(a));
                return d ? (d = b[G(d)], void 0 === d && (d = null), d) : b;
            };
        }
        function hd(a, b, d, c) {
            if (D(c))
                return c(a, b, d);
            n(c, function (c) {
                a = c(a, b, d);
            });
            return a;
        }
        function mf() {
            var a = this.defaults = {
                    transformResponse: [cc],
                    transformRequest: [function (a) {
                            return E(a) && '[object File]' !== ga.call(a) && '[object Blob]' !== ga.call(a) && '[object FormData]' !== ga.call(a) ? eb(a) : a;
                        }],
                    headers: {
                        common: { Accept: 'application/json, text/plain, */*' },
                        post: na(dc),
                        put: na(dc),
                        patch: na(dc)
                    },
                    xsrfCookieName: 'XSRF-TOKEN',
                    xsrfHeaderName: 'X-XSRF-TOKEN',
                    paramSerializer: '$httpParamSerializer'
                }, b = !1;
            this.useApplyAsync = function (a) {
                return y(a) ? (b = !!a, this) : b;
            };
            var d = !0;
            this.useLegacyPromiseExtensions = function (a) {
                return y(a) ? (d = !!a, this) : d;
            };
            var c = this.interceptors = [];
            this.$get = [
                '$httpBackend',
                '$$cookieReader',
                '$cacheFactory',
                '$rootScope',
                '$q',
                '$injector',
                function (e, f, g, h, k, l) {
                    function m(b) {
                        function c(a) {
                            var b = T({}, a);
                            b.data = hd(a.data, a.headers, a.status, f.transformResponse);
                            a = a.status;
                            return 200 <= a && 300 > a ? b : k.reject(b);
                        }
                        function e(a, b) {
                            var c, d = {};
                            n(a, function (a, e) {
                                D(a) ? (c = a(b), null != c && (d[e] = c)) : d[e] = a;
                            });
                            return d;
                        }
                        if (!E(b))
                            throw H('$http')('badreq', b);
                        if (!F(b.url))
                            throw H('$http')('badreq', b.url);
                        var f = T({
                            method: 'get',
                            transformRequest: a.transformRequest,
                            transformResponse: a.transformResponse,
                            paramSerializer: a.paramSerializer
                        }, b);
                        f.headers = function (b) {
                            var c = a.headers, d = T({}, b.headers), f, g, h, c = T({}, c.common, c[G(b.method)]);
                            a:
                                for (f in c) {
                                    g = G(f);
                                    for (h in d)
                                        if (G(h) === g)
                                            continue a;
                                    d[f] = c[f];
                                }
                            return e(d, na(b));
                        }(b);
                        f.method = ub(f.method);
                        f.paramSerializer = F(f.paramSerializer) ? l.get(f.paramSerializer) : f.paramSerializer;
                        var g = [
                                function (b) {
                                    var d = b.headers, e = hd(b.data, gd(d), v, b.transformRequest);
                                    x(e) && n(d, function (a, b) {
                                        'content-type' === G(b) && delete d[b];
                                    });
                                    x(b.withCredentials) && !x(a.withCredentials) && (b.withCredentials = a.withCredentials);
                                    return r(b, e).then(c, c);
                                },
                                v
                            ], h = k.when(f);
                        for (n(K, function (a) {
                                (a.request || a.requestError) && g.unshift(a.request, a.requestError);
                                (a.response || a.responseError) && g.push(a.response, a.responseError);
                            }); g.length;) {
                            b = g.shift();
                            var m = g.shift(), h = h.then(b, m);
                        }
                        d ? (h.success = function (a) {
                            Sa(a, 'fn');
                            h.then(function (b) {
                                a(b.data, b.status, b.headers, f);
                            });
                            return h;
                        }, h.error = function (a) {
                            Sa(a, 'fn');
                            h.then(null, function (b) {
                                a(b.data, b.status, b.headers, f);
                            });
                            return h;
                        }) : (h.success = id('success'), h.error = id('error'));
                        return h;
                    }
                    function r(c, d) {
                        function g(a, c, d, e) {
                            function f() {
                                l(c, a, d, e);
                            }
                            K && (200 <= a && 300 > a ? K.put(S, [
                                a,
                                c,
                                fd(d),
                                e
                            ]) : K.remove(S));
                            b ? h.$applyAsync(f) : (f(), h.$$phase || h.$apply());
                        }
                        function l(a, b, d, e) {
                            b = -1 <= b ? b : 0;
                            (200 <= b && 300 > b ? A.resolve : A.reject)({
                                data: a,
                                status: b,
                                headers: gd(d),
                                config: c,
                                statusText: e
                            });
                        }
                        function r(a) {
                            l(a.data, a.status, na(a.headers()), a.statusText);
                        }
                        function z() {
                            var a = m.pendingRequests.indexOf(c);
                            -1 !== a && m.pendingRequests.splice(a, 1);
                        }
                        var A = k.defer(), Q = A.promise, K, M, P = c.headers, S = s(c.url, c.paramSerializer(c.params));
                        m.pendingRequests.push(c);
                        Q.then(z, z);
                        !c.cache && !a.cache || !1 === c.cache || 'GET' !== c.method && 'JSONP' !== c.method || (K = E(c.cache) ? c.cache : E(a.cache) ? a.cache : I);
                        K && (M = K.get(S), y(M) ? M && D(M.then) ? M.then(r, r) : L(M) ? l(M[1], M[0], na(M[2]), M[3]) : l(M, 200, {}, 'OK') : K.put(S, Q));
                        x(M) && ((M = jd(c.url) ? f()[c.xsrfCookieName || a.xsrfCookieName] : v) && (P[c.xsrfHeaderName || a.xsrfHeaderName] = M), e(c.method, S, d, g, P, c.timeout, c.withCredentials, c.responseType));
                        return Q;
                    }
                    function s(a, b) {
                        0 < b.length && (a += (-1 == a.indexOf('?') ? '?' : '&') + b);
                        return a;
                    }
                    var I = g('$http');
                    a.paramSerializer = F(a.paramSerializer) ? l.get(a.paramSerializer) : a.paramSerializer;
                    var K = [];
                    n(c, function (a) {
                        K.unshift(F(a) ? l.get(a) : l.invoke(a));
                    });
                    m.pendingRequests = [];
                    (function (a) {
                        n(arguments, function (a) {
                            m[a] = function (b, c) {
                                return m(T({}, c || {}, {
                                    method: a,
                                    url: b
                                }));
                            };
                        });
                    }('get', 'delete', 'head', 'jsonp'));
                    (function (a) {
                        n(arguments, function (a) {
                            m[a] = function (b, c, d) {
                                return m(T({}, d || {}, {
                                    method: a,
                                    url: b,
                                    data: c
                                }));
                            };
                        });
                    }('post', 'put', 'patch'));
                    m.defaults = a;
                    return m;
                }
            ];
        }
        function qf() {
            this.$get = function () {
                return function () {
                    return new O.XMLHttpRequest();
                };
            };
        }
        function pf() {
            this.$get = [
                '$browser',
                '$window',
                '$document',
                '$xhrFactory',
                function (a, b, d, c) {
                    return fg(a, c, a.defer, b.angular.callbacks, d[0]);
                }
            ];
        }
        function fg(a, b, d, c, e) {
            function f(a, b, d) {
                var f = e.createElement('script'), m = null;
                f.type = 'text/javascript';
                f.src = a;
                f.async = !0;
                m = function (a) {
                    f.removeEventListener('load', m, !1);
                    f.removeEventListener('error', m, !1);
                    e.body.removeChild(f);
                    f = null;
                    var g = -1, I = 'unknown';
                    a && ('load' !== a.type || c[b].called || (a = { type: 'error' }), I = a.type, g = 'error' === a.type ? 404 : 200);
                    d && d(g, I);
                };
                f.addEventListener('load', m, !1);
                f.addEventListener('error', m, !1);
                e.body.appendChild(f);
                return m;
            }
            return function (e, h, k, l, m, r, s, I) {
                function K() {
                    w && w();
                    u && u.abort();
                }
                function t(b, c, e, f, g) {
                    y(z) && d.cancel(z);
                    w = u = null;
                    b(c, e, f, g);
                    a.$$completeOutstandingRequest(B);
                }
                a.$$incOutstandingRequestCount();
                h = h || a.url();
                if ('jsonp' == G(e)) {
                    var p = '_' + (c.counter++).toString(36);
                    c[p] = function (a) {
                        c[p].data = a;
                        c[p].called = !0;
                    };
                    var w = f(h.replace('JSON_CALLBACK', 'angular.callbacks.' + p), p, function (a, b) {
                        t(l, a, c[p].data, '', b);
                        c[p] = B;
                    });
                } else {
                    var u = b(e, h);
                    u.open(e, h, !0);
                    n(m, function (a, b) {
                        y(a) && u.setRequestHeader(b, a);
                    });
                    u.onload = function () {
                        var a = u.statusText || '', b = 'response' in u ? u.response : u.responseText, c = 1223 === u.status ? 204 : u.status;
                        0 === c && (c = b ? 200 : 'file' == za(h).protocol ? 404 : 0);
                        t(l, c, b, u.getAllResponseHeaders(), a);
                    };
                    e = function () {
                        t(l, -1, null, null, '');
                    };
                    u.onerror = e;
                    u.onabort = e;
                    s && (u.withCredentials = !0);
                    if (I)
                        try {
                            u.responseType = I;
                        } catch (la) {
                            if ('json' !== I)
                                throw la;
                        }
                    u.send(x(k) ? null : k);
                }
                if (0 < r)
                    var z = d(K, r);
                else
                    r && D(r.then) && r.then(K);
            };
        }
        function kf() {
            var a = '{{', b = '}}';
            this.startSymbol = function (b) {
                return b ? (a = b, this) : a;
            };
            this.endSymbol = function (a) {
                return a ? (b = a, this) : b;
            };
            this.$get = [
                '$parse',
                '$exceptionHandler',
                '$sce',
                function (d, c, e) {
                    function f(a) {
                        return '\\\\\\' + a;
                    }
                    function g(c) {
                        return c.replace(r, a).replace(s, b);
                    }
                    function h(a, b, c, d) {
                        var e;
                        return e = a.$watch(function (a) {
                            e();
                            return d(a);
                        }, b, c);
                    }
                    function k(f, k, r, p) {
                        function s(a) {
                            try {
                                var b = a;
                                a = r ? e.getTrusted(r, b) : e.valueOf(b);
                                var d;
                                if (p && !y(a))
                                    d = a;
                                else if (null == a)
                                    d = '';
                                else {
                                    switch (typeof a) {
                                    case 'string':
                                        break;
                                    case 'number':
                                        a = '' + a;
                                        break;
                                    default:
                                        a = eb(a);
                                    }
                                    d = a;
                                }
                                return d;
                            } catch (g) {
                                c(Ka.interr(f, g));
                            }
                        }
                        if (!f.length || -1 === f.indexOf(a)) {
                            var u;
                            k || (k = g(f), u = ba(k), u.exp = f, u.expressions = [], u.$$watchDelegate = h);
                            return u;
                        }
                        p = !!p;
                        var n, z, A = 0, Q = [], $ = [];
                        u = f.length;
                        for (var M = [], P = []; A < u;)
                            if (-1 != (n = f.indexOf(a, A)) && -1 != (z = f.indexOf(b, n + l)))
                                A !== n && M.push(g(f.substring(A, n))), A = f.substring(n + l, z), Q.push(A), $.push(d(A, s)), A = z + m, P.push(M.length), M.push('');
                            else {
                                A !== u && M.push(g(f.substring(A)));
                                break;
                            }
                        r && 1 < M.length && Ka.throwNoconcat(f);
                        if (!k || Q.length) {
                            var S = function (a) {
                                for (var b = 0, c = Q.length; b < c; b++) {
                                    if (p && x(a[b]))
                                        return;
                                    M[P[b]] = a[b];
                                }
                                return M.join('');
                            };
                            return T(function (a) {
                                var b = 0, d = Q.length, e = Array(d);
                                try {
                                    for (; b < d; b++)
                                        e[b] = $[b](a);
                                    return S(e);
                                } catch (g) {
                                    c(Ka.interr(f, g));
                                }
                            }, {
                                exp: f,
                                expressions: Q,
                                $$watchDelegate: function (a, b) {
                                    var c;
                                    return a.$watchGroup($, function (d, e) {
                                        var f = S(d);
                                        D(b) && b.call(this, f, d !== e ? c : f, a);
                                        c = f;
                                    });
                                }
                            });
                        }
                    }
                    var l = a.length, m = b.length, r = new RegExp(a.replace(/./g, f), 'g'), s = new RegExp(b.replace(/./g, f), 'g');
                    k.startSymbol = function () {
                        return a;
                    };
                    k.endSymbol = function () {
                        return b;
                    };
                    return k;
                }
            ];
        }
        function lf() {
            this.$get = [
                '$rootScope',
                '$window',
                '$q',
                '$$q',
                '$browser',
                function (a, b, d, c, e) {
                    function f(f, k, l, m) {
                        function r() {
                            s ? f.apply(null, I) : f(p);
                        }
                        var s = 4 < arguments.length, I = s ? wa.call(arguments, 4) : [], K = b.setInterval, t = b.clearInterval, p = 0, w = y(m) && !m, u = (w ? c : d).defer(), n = u.promise;
                        l = y(l) ? l : 0;
                        n.$$intervalId = K(function () {
                            w ? e.defer(r) : a.$evalAsync(r);
                            u.notify(p++);
                            0 < l && p >= l && (u.resolve(p), t(n.$$intervalId), delete g[n.$$intervalId]);
                            w || a.$apply();
                        }, k);
                        g[n.$$intervalId] = u;
                        return n;
                    }
                    var g = {};
                    f.cancel = function (a) {
                        return a && a.$$intervalId in g ? (g[a.$$intervalId].reject('canceled'), b.clearInterval(a.$$intervalId), delete g[a.$$intervalId], !0) : !1;
                    };
                    return f;
                }
            ];
        }
        function ec(a) {
            a = a.split('/');
            for (var b = a.length; b--;)
                a[b] = qb(a[b]);
            return a.join('/');
        }
        function kd(a, b) {
            var d = za(a);
            b.$$protocol = d.protocol;
            b.$$host = d.hostname;
            b.$$port = ca(d.port) || gg[d.protocol] || null;
        }
        function ld(a, b) {
            var d = '/' !== a.charAt(0);
            d && (a = '/' + a);
            var c = za(a);
            b.$$path = decodeURIComponent(d && '/' === c.pathname.charAt(0) ? c.pathname.substring(1) : c.pathname);
            b.$$search = zc(c.search);
            b.$$hash = decodeURIComponent(c.hash);
            b.$$path && '/' != b.$$path.charAt(0) && (b.$$path = '/' + b.$$path);
        }
        function pa(a, b) {
            if (0 === b.indexOf(a))
                return b.substr(a.length);
        }
        function Ia(a) {
            var b = a.indexOf('#');
            return -1 == b ? a : a.substr(0, b);
        }
        function kb(a) {
            return a.replace(/(#.+)|#$/, '$1');
        }
        function fc(a, b, d) {
            this.$$html5 = !0;
            d = d || '';
            kd(a, this);
            this.$$parse = function (a) {
                var d = pa(b, a);
                if (!F(d))
                    throw Gb('ipthprfx', a, b);
                ld(d, this);
                this.$$path || (this.$$path = '/');
                this.$$compose();
            };
            this.$$compose = function () {
                var a = Ub(this.$$search), d = this.$$hash ? '#' + qb(this.$$hash) : '';
                this.$$url = ec(this.$$path) + (a ? '?' + a : '') + d;
                this.$$absUrl = b + this.$$url.substr(1);
            };
            this.$$parseLinkUrl = function (c, e) {
                if (e && '#' === e[0])
                    return this.hash(e.slice(1)), !0;
                var f, g;
                y(f = pa(a, c)) ? (g = f, g = y(f = pa(d, f)) ? b + (pa('/', f) || f) : a + g) : y(f = pa(b, c)) ? g = b + f : b == c + '/' && (g = b);
                g && this.$$parse(g);
                return !!g;
            };
        }
        function gc(a, b, d) {
            kd(a, this);
            this.$$parse = function (c) {
                var e = pa(a, c) || pa(b, c), f;
                x(e) || '#' !== e.charAt(0) ? this.$$html5 ? f = e : (f = '', x(e) && (a = c, this.replace())) : (f = pa(d, e), x(f) && (f = e));
                ld(f, this);
                c = this.$$path;
                var e = a, g = /^\/[A-Z]:(\/.*)/;
                0 === f.indexOf(e) && (f = f.replace(e, ''));
                g.exec(f) || (c = (f = g.exec(c)) ? f[1] : c);
                this.$$path = c;
                this.$$compose();
            };
            this.$$compose = function () {
                var b = Ub(this.$$search), e = this.$$hash ? '#' + qb(this.$$hash) : '';
                this.$$url = ec(this.$$path) + (b ? '?' + b : '') + e;
                this.$$absUrl = a + (this.$$url ? d + this.$$url : '');
            };
            this.$$parseLinkUrl = function (b, d) {
                return Ia(a) == Ia(b) ? (this.$$parse(b), !0) : !1;
            };
        }
        function md(a, b, d) {
            this.$$html5 = !0;
            gc.apply(this, arguments);
            this.$$parseLinkUrl = function (c, e) {
                if (e && '#' === e[0])
                    return this.hash(e.slice(1)), !0;
                var f, g;
                a == Ia(c) ? f = c : (g = pa(b, c)) ? f = a + d + g : b === c + '/' && (f = b);
                f && this.$$parse(f);
                return !!f;
            };
            this.$$compose = function () {
                var b = Ub(this.$$search), e = this.$$hash ? '#' + qb(this.$$hash) : '';
                this.$$url = ec(this.$$path) + (b ? '?' + b : '') + e;
                this.$$absUrl = a + d + this.$$url;
            };
        }
        function Hb(a) {
            return function () {
                return this[a];
            };
        }
        function nd(a, b) {
            return function (d) {
                if (x(d))
                    return this[a];
                this[a] = b(d);
                this.$$compose();
                return this;
            };
        }
        function rf() {
            var a = '', b = {
                    enabled: !1,
                    requireBase: !0,
                    rewriteLinks: !0
                };
            this.hashPrefix = function (b) {
                return y(b) ? (a = b, this) : a;
            };
            this.html5Mode = function (a) {
                return Na(a) ? (b.enabled = a, this) : E(a) ? (Na(a.enabled) && (b.enabled = a.enabled), Na(a.requireBase) && (b.requireBase = a.requireBase), Na(a.rewriteLinks) && (b.rewriteLinks = a.rewriteLinks), this) : b;
            };
            this.$get = [
                '$rootScope',
                '$browser',
                '$sniffer',
                '$rootElement',
                '$window',
                function (d, c, e, f, g) {
                    function h(a, b, d) {
                        var e = l.url(), f = l.$$state;
                        try {
                            c.url(a, b, d), l.$$state = c.state();
                        } catch (g) {
                            throw l.url(e), l.$$state = f, g;
                        }
                    }
                    function k(a, b) {
                        d.$broadcast('$locationChangeSuccess', l.absUrl(), a, l.$$state, b);
                    }
                    var l, m;
                    m = c.baseHref();
                    var r = c.url(), s;
                    if (b.enabled) {
                        if (!m && b.requireBase)
                            throw Gb('nobase');
                        s = r.substring(0, r.indexOf('/', r.indexOf('//') + 2)) + (m || '/');
                        m = e.history ? fc : md;
                    } else
                        s = Ia(r), m = gc;
                    var I = s.substr(0, Ia(s).lastIndexOf('/') + 1);
                    l = new m(s, I, '#' + a);
                    l.$$parseLinkUrl(r, r);
                    l.$$state = c.state();
                    var n = /^\s*(javascript|mailto):/i;
                    f.on('click', function (a) {
                        if (b.rewriteLinks && !a.ctrlKey && !a.metaKey && !a.shiftKey && 2 != a.which && 2 != a.button) {
                            for (var e = C(a.target); 'a' !== ra(e[0]);)
                                if (e[0] === f[0] || !(e = e.parent())[0])
                                    return;
                            var h = e.prop('href'), k = e.attr('href') || e.attr('xlink:href');
                            E(h) && '[object SVGAnimatedString]' === h.toString() && (h = za(h.animVal).href);
                            n.test(h) || !h || e.attr('target') || a.isDefaultPrevented() || !l.$$parseLinkUrl(h, k) || (a.preventDefault(), l.absUrl() != c.url() && (d.$apply(), g.angular['ff-684208-preventDefault'] = !0));
                        }
                    });
                    kb(l.absUrl()) != kb(r) && c.url(l.absUrl(), !0);
                    var t = !0;
                    c.onUrlChange(function (a, b) {
                        x(pa(I, a)) ? g.location.href = a : (d.$evalAsync(function () {
                            var c = l.absUrl(), e = l.$$state, f;
                            a = kb(a);
                            l.$$parse(a);
                            l.$$state = b;
                            f = d.$broadcast('$locationChangeStart', a, c, b, e).defaultPrevented;
                            l.absUrl() === a && (f ? (l.$$parse(c), l.$$state = e, h(c, !1, e)) : (t = !1, k(c, e)));
                        }), d.$$phase || d.$digest());
                    });
                    d.$watch(function () {
                        var a = kb(c.url()), b = kb(l.absUrl()), f = c.state(), g = l.$$replace, m = a !== b || l.$$html5 && e.history && f !== l.$$state;
                        if (t || m)
                            t = !1, d.$evalAsync(function () {
                                var b = l.absUrl(), c = d.$broadcast('$locationChangeStart', b, a, l.$$state, f).defaultPrevented;
                                l.absUrl() === b && (c ? (l.$$parse(a), l.$$state = f) : (m && h(b, g, f === l.$$state ? null : l.$$state), k(a, f)));
                            });
                        l.$$replace = !1;
                    });
                    return l;
                }
            ];
        }
        function sf() {
            var a = !0, b = this;
            this.debugEnabled = function (b) {
                return y(b) ? (a = b, this) : a;
            };
            this.$get = [
                '$window',
                function (d) {
                    function c(a) {
                        a instanceof Error && (a.stack ? a = a.message && -1 === a.stack.indexOf(a.message) ? 'Error: ' + a.message + '\n' + a.stack : a.stack : a.sourceURL && (a = a.message + '\n' + a.sourceURL + ':' + a.line));
                        return a;
                    }
                    function e(a) {
                        var b = d.console || {}, e = b[a] || b.log || B;
                        a = !1;
                        try {
                            a = !!e.apply;
                        } catch (k) {
                        }
                        return a ? function () {
                            var a = [];
                            n(arguments, function (b) {
                                a.push(c(b));
                            });
                            return e.apply(b, a);
                        } : function (a, b) {
                            e(a, null == b ? '' : b);
                        };
                    }
                    return {
                        log: e('log'),
                        info: e('info'),
                        warn: e('warn'),
                        error: e('error'),
                        debug: function () {
                            var c = e('debug');
                            return function () {
                                a && c.apply(b, arguments);
                            };
                        }()
                    };
                }
            ];
        }
        function Xa(a, b) {
            if ('__defineGetter__' === a || '__defineSetter__' === a || '__lookupGetter__' === a || '__lookupSetter__' === a || '__proto__' === a)
                throw ka('isecfld', b);
            return a;
        }
        function hg(a) {
            return a + '';
        }
        function Aa(a, b) {
            if (a) {
                if (a.constructor === a)
                    throw ka('isecfn', b);
                if (a.window === a)
                    throw ka('isecwindow', b);
                if (a.children && (a.nodeName || a.prop && a.attr && a.find))
                    throw ka('isecdom', b);
                if (a === Object)
                    throw ka('isecobj', b);
            }
            return a;
        }
        function od(a, b) {
            if (a) {
                if (a.constructor === a)
                    throw ka('isecfn', b);
                if (a === ig || a === jg || a === kg)
                    throw ka('isecff', b);
            }
        }
        function Ib(a, b) {
            if (a && (a === 0 .constructor || a === (!1).constructor || a === ''.constructor || a === {}.constructor || a === [].constructor || a === Function.constructor))
                throw ka('isecaf', b);
        }
        function lg(a, b) {
            return 'undefined' !== typeof a ? a : b;
        }
        function pd(a, b) {
            return 'undefined' === typeof a ? b : 'undefined' === typeof b ? a : a + b;
        }
        function R(a, b) {
            var d, c;
            switch (a.type) {
            case q.Program:
                d = !0;
                n(a.body, function (a) {
                    R(a.expression, b);
                    d = d && a.expression.constant;
                });
                a.constant = d;
                break;
            case q.Literal:
                a.constant = !0;
                a.toWatch = [];
                break;
            case q.UnaryExpression:
                R(a.argument, b);
                a.constant = a.argument.constant;
                a.toWatch = a.argument.toWatch;
                break;
            case q.BinaryExpression:
                R(a.left, b);
                R(a.right, b);
                a.constant = a.left.constant && a.right.constant;
                a.toWatch = a.left.toWatch.concat(a.right.toWatch);
                break;
            case q.LogicalExpression:
                R(a.left, b);
                R(a.right, b);
                a.constant = a.left.constant && a.right.constant;
                a.toWatch = a.constant ? [] : [a];
                break;
            case q.ConditionalExpression:
                R(a.test, b);
                R(a.alternate, b);
                R(a.consequent, b);
                a.constant = a.test.constant && a.alternate.constant && a.consequent.constant;
                a.toWatch = a.constant ? [] : [a];
                break;
            case q.Identifier:
                a.constant = !1;
                a.toWatch = [a];
                break;
            case q.MemberExpression:
                R(a.object, b);
                a.computed && R(a.property, b);
                a.constant = a.object.constant && (!a.computed || a.property.constant);
                a.toWatch = [a];
                break;
            case q.CallExpression:
                d = a.filter ? !b(a.callee.name).$stateful : !1;
                c = [];
                n(a.arguments, function (a) {
                    R(a, b);
                    d = d && a.constant;
                    a.constant || c.push.apply(c, a.toWatch);
                });
                a.constant = d;
                a.toWatch = a.filter && !b(a.callee.name).$stateful ? c : [a];
                break;
            case q.AssignmentExpression:
                R(a.left, b);
                R(a.right, b);
                a.constant = a.left.constant && a.right.constant;
                a.toWatch = [a];
                break;
            case q.ArrayExpression:
                d = !0;
                c = [];
                n(a.elements, function (a) {
                    R(a, b);
                    d = d && a.constant;
                    a.constant || c.push.apply(c, a.toWatch);
                });
                a.constant = d;
                a.toWatch = c;
                break;
            case q.ObjectExpression:
                d = !0;
                c = [];
                n(a.properties, function (a) {
                    R(a.value, b);
                    d = d && a.value.constant;
                    a.value.constant || c.push.apply(c, a.value.toWatch);
                });
                a.constant = d;
                a.toWatch = c;
                break;
            case q.ThisExpression:
                a.constant = !1;
                a.toWatch = [];
                break;
            case q.LocalsExpression:
                a.constant = !1, a.toWatch = [];
            }
        }
        function qd(a) {
            if (1 == a.length) {
                a = a[0].expression;
                var b = a.toWatch;
                return 1 !== b.length ? b : b[0] !== a ? b : v;
            }
        }
        function rd(a) {
            return a.type === q.Identifier || a.type === q.MemberExpression;
        }
        function sd(a) {
            if (1 === a.body.length && rd(a.body[0].expression))
                return {
                    type: q.AssignmentExpression,
                    left: a.body[0].expression,
                    right: { type: q.NGValueParameter },
                    operator: '='
                };
        }
        function td(a) {
            return 0 === a.body.length || 1 === a.body.length && (a.body[0].expression.type === q.Literal || a.body[0].expression.type === q.ArrayExpression || a.body[0].expression.type === q.ObjectExpression);
        }
        function ud(a, b) {
            this.astBuilder = a;
            this.$filter = b;
        }
        function vd(a, b) {
            this.astBuilder = a;
            this.$filter = b;
        }
        function Jb(a) {
            return 'constructor' == a;
        }
        function hc(a) {
            return D(a.valueOf) ? a.valueOf() : mg.call(a);
        }
        function tf() {
            var a = Z(), b = Z();
            this.$get = [
                '$filter',
                function (d) {
                    function c(c, f, r) {
                        var u, n, z;
                        r = r || K;
                        switch (typeof c) {
                        case 'string':
                            z = c = c.trim();
                            var A = r ? b : a;
                            u = A[z];
                            if (!u) {
                                ':' === c.charAt(0) && ':' === c.charAt(1) && (n = !0, c = c.substring(2));
                                u = r ? I : s;
                                var Q = new ic(u);
                                u = new jc(Q, d, u).parse(c);
                                u.constant ? u.$$watchDelegate = l : n ? u.$$watchDelegate = u.literal ? k : h : u.inputs && (u.$$watchDelegate = g);
                                r && (u = e(u));
                                A[z] = u;
                            }
                            return m(u, f);
                        case 'function':
                            return m(c, f);
                        default:
                            return m(B, f);
                        }
                    }
                    function e(a) {
                        function b(c, d, e, f) {
                            var g = K;
                            K = !0;
                            try {
                                return a(c, d, e, f);
                            } finally {
                                K = g;
                            }
                        }
                        if (!a)
                            return a;
                        b.$$watchDelegate = a.$$watchDelegate;
                        b.assign = e(a.assign);
                        b.constant = a.constant;
                        b.literal = a.literal;
                        for (var c = 0; a.inputs && c < a.inputs.length; ++c)
                            a.inputs[c] = e(a.inputs[c]);
                        b.inputs = a.inputs;
                        return b;
                    }
                    function f(a, b) {
                        return null == a || null == b ? a === b : 'object' === typeof a && (a = hc(a), 'object' === typeof a) ? !1 : a === b || a !== a && b !== b;
                    }
                    function g(a, b, c, d, e) {
                        var g = d.inputs, h;
                        if (1 === g.length) {
                            var k = f, g = g[0];
                            return a.$watch(function (a) {
                                var b = g(a);
                                f(b, k) || (h = d(a, v, v, [b]), k = b && hc(b));
                                return h;
                            }, b, c, e);
                        }
                        for (var l = [], m = [], r = 0, s = g.length; r < s; r++)
                            l[r] = f, m[r] = null;
                        return a.$watch(function (a) {
                            for (var b = !1, c = 0, e = g.length; c < e; c++) {
                                var k = g[c](a);
                                if (b || (b = !f(k, l[c])))
                                    m[c] = k, l[c] = k && hc(k);
                            }
                            b && (h = d(a, v, v, m));
                            return h;
                        }, b, c, e);
                    }
                    function h(a, b, c, d) {
                        var e, f;
                        return e = a.$watch(function (a) {
                            return d(a);
                        }, function (a, c, d) {
                            f = a;
                            D(b) && b.apply(this, arguments);
                            y(a) && d.$$postDigest(function () {
                                y(f) && e();
                            });
                        }, c);
                    }
                    function k(a, b, c, d) {
                        function e(a) {
                            var b = !0;
                            n(a, function (a) {
                                y(a) || (b = !1);
                            });
                            return b;
                        }
                        var f, g;
                        return f = a.$watch(function (a) {
                            return d(a);
                        }, function (a, c, d) {
                            g = a;
                            D(b) && b.call(this, a, c, d);
                            e(a) && d.$$postDigest(function () {
                                e(g) && f();
                            });
                        }, c);
                    }
                    function l(a, b, c, d) {
                        var e;
                        return e = a.$watch(function (a) {
                            e();
                            return d(a);
                        }, b, c);
                    }
                    function m(a, b) {
                        if (!b)
                            return a;
                        var c = a.$$watchDelegate, d = !1, c = c !== k && c !== h ? function (c, e, f, g) {
                                f = d && g ? g[0] : a(c, e, f, g);
                                return b(f, c, e);
                            } : function (c, d, e, f) {
                                e = a(c, d, e, f);
                                c = b(e, c, d);
                                return y(e) ? c : e;
                            };
                        a.$$watchDelegate && a.$$watchDelegate !== g ? c.$$watchDelegate = a.$$watchDelegate : b.$stateful || (c.$$watchDelegate = g, d = !a.inputs, c.inputs = a.inputs ? a.inputs : [a]);
                        return c;
                    }
                    var r = Ea().noUnsafeEval, s = {
                            csp: r,
                            expensiveChecks: !1
                        }, I = {
                            csp: r,
                            expensiveChecks: !0
                        }, K = !1;
                    c.$$runningExpensiveChecks = function () {
                        return K;
                    };
                    return c;
                }
            ];
        }
        function vf() {
            this.$get = [
                '$rootScope',
                '$exceptionHandler',
                function (a, b) {
                    return wd(function (b) {
                        a.$evalAsync(b);
                    }, b);
                }
            ];
        }
        function wf() {
            this.$get = [
                '$browser',
                '$exceptionHandler',
                function (a, b) {
                    return wd(function (b) {
                        a.defer(b);
                    }, b);
                }
            ];
        }
        function wd(a, b) {
            function d() {
                this.$$state = { status: 0 };
            }
            function c(a, b) {
                return function (c) {
                    b.call(a, c);
                };
            }
            function e(c) {
                !c.processScheduled && c.pending && (c.processScheduled = !0, a(function () {
                    var a, d, e;
                    e = c.pending;
                    c.processScheduled = !1;
                    c.pending = v;
                    for (var f = 0, g = e.length; f < g; ++f) {
                        d = e[f][0];
                        a = e[f][c.status];
                        try {
                            D(a) ? d.resolve(a(c.value)) : 1 === c.status ? d.resolve(c.value) : d.reject(c.value);
                        } catch (h) {
                            d.reject(h), b(h);
                        }
                    }
                }));
            }
            function f() {
                this.promise = new d();
            }
            var g = H('$q', TypeError);
            T(d.prototype, {
                then: function (a, b, c) {
                    if (x(a) && x(b) && x(c))
                        return this;
                    var d = new f();
                    this.$$state.pending = this.$$state.pending || [];
                    this.$$state.pending.push([
                        d,
                        a,
                        b,
                        c
                    ]);
                    0 < this.$$state.status && e(this.$$state);
                    return d.promise;
                },
                'catch': function (a) {
                    return this.then(null, a);
                },
                'finally': function (a, b) {
                    return this.then(function (b) {
                        return k(b, !0, a);
                    }, function (b) {
                        return k(b, !1, a);
                    }, b);
                }
            });
            T(f.prototype, {
                resolve: function (a) {
                    this.promise.$$state.status || (a === this.promise ? this.$$reject(g('qcycle', a)) : this.$$resolve(a));
                },
                $$resolve: function (a) {
                    function d(a) {
                        k || (k = !0, h.$$resolve(a));
                    }
                    function f(a) {
                        k || (k = !0, h.$$reject(a));
                    }
                    var g, h = this, k = !1;
                    try {
                        if (E(a) || D(a))
                            g = a && a.then;
                        D(g) ? (this.promise.$$state.status = -1, g.call(a, d, f, c(this, this.notify))) : (this.promise.$$state.value = a, this.promise.$$state.status = 1, e(this.promise.$$state));
                    } catch (l) {
                        f(l), b(l);
                    }
                },
                reject: function (a) {
                    this.promise.$$state.status || this.$$reject(a);
                },
                $$reject: function (a) {
                    this.promise.$$state.value = a;
                    this.promise.$$state.status = 2;
                    e(this.promise.$$state);
                },
                notify: function (c) {
                    var d = this.promise.$$state.pending;
                    0 >= this.promise.$$state.status && d && d.length && a(function () {
                        for (var a, e, f = 0, g = d.length; f < g; f++) {
                            e = d[f][0];
                            a = d[f][3];
                            try {
                                e.notify(D(a) ? a(c) : c);
                            } catch (h) {
                                b(h);
                            }
                        }
                    });
                }
            });
            var h = function (a, b) {
                    var c = new f();
                    b ? c.resolve(a) : c.reject(a);
                    return c.promise;
                }, k = function (a, b, c) {
                    var d = null;
                    try {
                        D(c) && (d = c());
                    } catch (e) {
                        return h(e, !1);
                    }
                    return d && D(d.then) ? d.then(function () {
                        return h(a, b);
                    }, function (a) {
                        return h(a, !1);
                    }) : h(a, b);
                }, l = function (a, b, c, d) {
                    var e = new f();
                    e.resolve(a);
                    return e.promise.then(b, c, d);
                }, m = function (a) {
                    if (!D(a))
                        throw g('norslvr', a);
                    var b = new f();
                    a(function (a) {
                        b.resolve(a);
                    }, function (a) {
                        b.reject(a);
                    });
                    return b.promise;
                };
            m.prototype = d.prototype;
            m.defer = function () {
                var a = new f();
                a.resolve = c(a, a.resolve);
                a.reject = c(a, a.reject);
                a.notify = c(a, a.notify);
                return a;
            };
            m.reject = function (a) {
                var b = new f();
                b.reject(a);
                return b.promise;
            };
            m.when = l;
            m.resolve = l;
            m.all = function (a) {
                var b = new f(), c = 0, d = L(a) ? [] : {};
                n(a, function (a, e) {
                    c++;
                    l(a).then(function (a) {
                        d.hasOwnProperty(e) || (d[e] = a, --c || b.resolve(d));
                    }, function (a) {
                        d.hasOwnProperty(e) || b.reject(a);
                    });
                });
                0 === c && b.resolve(d);
                return b.promise;
            };
            return m;
        }
        function Ff() {
            this.$get = [
                '$window',
                '$timeout',
                function (a, b) {
                    var d = a.requestAnimationFrame || a.webkitRequestAnimationFrame, c = a.cancelAnimationFrame || a.webkitCancelAnimationFrame || a.webkitCancelRequestAnimationFrame, e = !!d, f = e ? function (a) {
                            var b = d(a);
                            return function () {
                                c(b);
                            };
                        } : function (a) {
                            var c = b(a, 16.66, !1);
                            return function () {
                                b.cancel(c);
                            };
                        };
                    f.supported = e;
                    return f;
                }
            ];
        }
        function uf() {
            function a(a) {
                function b() {
                    this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                    this.$$listeners = {};
                    this.$$listenerCount = {};
                    this.$$watchersCount = 0;
                    this.$id = ++pb;
                    this.$$ChildScope = null;
                }
                b.prototype = a;
                return b;
            }
            var b = 10, d = H('$rootScope'), c = null, e = null;
            this.digestTtl = function (a) {
                arguments.length && (b = a);
                return b;
            };
            this.$get = [
                '$exceptionHandler',
                '$parse',
                '$browser',
                function (f, g, h) {
                    function k(a) {
                        a.currentScope.$$destroyed = !0;
                    }
                    function l(a) {
                        9 === xa && (a.$$childHead && l(a.$$childHead), a.$$nextSibling && l(a.$$nextSibling));
                        a.$parent = a.$$nextSibling = a.$$prevSibling = a.$$childHead = a.$$childTail = a.$root = a.$$watchers = null;
                    }
                    function m() {
                        this.$id = ++pb;
                        this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
                        this.$root = this;
                        this.$$destroyed = !1;
                        this.$$listeners = {};
                        this.$$listenerCount = {};
                        this.$$watchersCount = 0;
                        this.$$isolateBindings = null;
                    }
                    function r(a) {
                        if (w.$$phase)
                            throw d('inprog', w.$$phase);
                        w.$$phase = a;
                    }
                    function s(a, b) {
                        do
                            a.$$watchersCount += b;
                        while (a = a.$parent);
                    }
                    function I(a, b, c) {
                        do
                            a.$$listenerCount[c] -= b, 0 === a.$$listenerCount[c] && delete a.$$listenerCount[c];
                        while (a = a.$parent);
                    }
                    function q() {
                    }
                    function t() {
                        for (; z.length;)
                            try {
                                z.shift()();
                            } catch (a) {
                                f(a);
                            }
                        e = null;
                    }
                    function p() {
                        null === e && (e = h.defer(function () {
                            w.$apply(t);
                        }));
                    }
                    m.prototype = {
                        constructor: m,
                        $new: function (b, c) {
                            var d;
                            c = c || this;
                            b ? (d = new m(), d.$root = this.$root) : (this.$$ChildScope || (this.$$ChildScope = a(this)), d = new this.$$ChildScope());
                            d.$parent = c;
                            d.$$prevSibling = c.$$childTail;
                            c.$$childHead ? (c.$$childTail.$$nextSibling = d, c.$$childTail = d) : c.$$childHead = c.$$childTail = d;
                            (b || c != this) && d.$on('$destroy', k);
                            return d;
                        },
                        $watch: function (a, b, d, e) {
                            var f = g(a);
                            if (f.$$watchDelegate)
                                return f.$$watchDelegate(this, b, d, f, a);
                            var h = this, k = h.$$watchers, l = {
                                    fn: b,
                                    last: q,
                                    get: f,
                                    exp: e || a,
                                    eq: !!d
                                };
                            c = null;
                            D(b) || (l.fn = B);
                            k || (k = h.$$watchers = []);
                            k.unshift(l);
                            s(this, 1);
                            return function () {
                                0 <= cb(k, l) && s(h, -1);
                                c = null;
                            };
                        },
                        $watchGroup: function (a, b) {
                            function c() {
                                h = !1;
                                k ? (k = !1, b(e, e, g)) : b(e, d, g);
                            }
                            var d = Array(a.length), e = Array(a.length), f = [], g = this, h = !1, k = !0;
                            if (!a.length) {
                                var l = !0;
                                g.$evalAsync(function () {
                                    l && b(e, e, g);
                                });
                                return function () {
                                    l = !1;
                                };
                            }
                            if (1 === a.length)
                                return this.$watch(a[0], function (a, c, f) {
                                    e[0] = a;
                                    d[0] = c;
                                    b(e, a === c ? e : d, f);
                                });
                            n(a, function (a, b) {
                                var k = g.$watch(a, function (a, f) {
                                    e[b] = a;
                                    d[b] = f;
                                    h || (h = !0, g.$evalAsync(c));
                                });
                                f.push(k);
                            });
                            return function () {
                                for (; f.length;)
                                    f.shift()();
                            };
                        },
                        $watchCollection: function (a, b) {
                            function c(a) {
                                e = a;
                                var b, d, g, h;
                                if (!x(e)) {
                                    if (E(e))
                                        if (Ca(e))
                                            for (f !== r && (f = r, u = f.length = 0, l++), a = e.length, u !== a && (l++, f.length = u = a), b = 0; b < a; b++)
                                                h = f[b], g = e[b], d = h !== h && g !== g, d || h === g || (l++, f[b] = g);
                                        else {
                                            f !== s && (f = s = {}, u = 0, l++);
                                            a = 0;
                                            for (b in e)
                                                sa.call(e, b) && (a++, g = e[b], h = f[b], b in f ? (d = h !== h && g !== g, d || h === g || (l++, f[b] = g)) : (u++, f[b] = g, l++));
                                            if (u > a)
                                                for (b in l++, f)
                                                    sa.call(e, b) || (u--, delete f[b]);
                                        }
                                    else
                                        f !== e && (f = e, l++);
                                    return l;
                                }
                            }
                            c.$stateful = !0;
                            var d = this, e, f, h, k = 1 < b.length, l = 0, m = g(a, c), r = [], s = {}, p = !0, u = 0;
                            return this.$watch(m, function () {
                                p ? (p = !1, b(e, e, d)) : b(e, h, d);
                                if (k)
                                    if (E(e))
                                        if (Ca(e)) {
                                            h = Array(e.length);
                                            for (var a = 0; a < e.length; a++)
                                                h[a] = e[a];
                                        } else
                                            for (a in h = {}, e)
                                                sa.call(e, a) && (h[a] = e[a]);
                                    else
                                        h = e;
                            });
                        },
                        $digest: function () {
                            var a, g, k, l, m, s, p, n, I = b, z, y = [], x, C;
                            r('$digest');
                            h.$$checkUrlChange();
                            this === w && null !== e && (h.defer.cancel(e), t());
                            c = null;
                            do {
                                n = !1;
                                for (z = this; u.length;) {
                                    try {
                                        C = u.shift(), C.scope.$eval(C.expression, C.locals);
                                    } catch (B) {
                                        f(B);
                                    }
                                    c = null;
                                }
                                a:
                                    do {
                                        if (s = z.$$watchers)
                                            for (p = s.length; p--;)
                                                try {
                                                    if (a = s[p])
                                                        if (m = a.get, (g = m(z)) !== (k = a.last) && !(a.eq ? oa(g, k) : 'number' === typeof g && 'number' === typeof k && isNaN(g) && isNaN(k)))
                                                            n = !0, c = a, a.last = a.eq ? Oa(g, null) : g, l = a.fn, l(g, k === q ? g : k, z), 5 > I && (x = 4 - I, y[x] || (y[x] = []), y[x].push({
                                                                msg: D(a.exp) ? 'fn: ' + (a.exp.name || a.exp.toString()) : a.exp,
                                                                newVal: g,
                                                                oldVal: k
                                                            }));
                                                        else if (a === c) {
                                                            n = !1;
                                                            break a;
                                                        }
                                                } catch (E) {
                                                    f(E);
                                                }
                                        if (!(s = z.$$watchersCount && z.$$childHead || z !== this && z.$$nextSibling))
                                            for (; z !== this && !(s = z.$$nextSibling);)
                                                z = z.$parent;
                                    } while (z = s);
                                if ((n || u.length) && !I--)
                                    throw w.$$phase = null, d('infdig', b, y);
                            } while (n || u.length);
                            for (w.$$phase = null; v.length;)
                                try {
                                    v.shift()();
                                } catch (H) {
                                    f(H);
                                }
                        },
                        $destroy: function () {
                            if (!this.$$destroyed) {
                                var a = this.$parent;
                                this.$broadcast('$destroy');
                                this.$$destroyed = !0;
                                this === w && h.$$applicationDestroyed();
                                s(this, -this.$$watchersCount);
                                for (var b in this.$$listenerCount)
                                    I(this, this.$$listenerCount[b], b);
                                a && a.$$childHead == this && (a.$$childHead = this.$$nextSibling);
                                a && a.$$childTail == this && (a.$$childTail = this.$$prevSibling);
                                this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling);
                                this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling);
                                this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = B;
                                this.$on = this.$watch = this.$watchGroup = function () {
                                    return B;
                                };
                                this.$$listeners = {};
                                this.$$nextSibling = null;
                                l(this);
                            }
                        },
                        $eval: function (a, b) {
                            return g(a)(this, b);
                        },
                        $evalAsync: function (a, b) {
                            w.$$phase || u.length || h.defer(function () {
                                u.length && w.$digest();
                            });
                            u.push({
                                scope: this,
                                expression: g(a),
                                locals: b
                            });
                        },
                        $$postDigest: function (a) {
                            v.push(a);
                        },
                        $apply: function (a) {
                            try {
                                r('$apply');
                                try {
                                    return this.$eval(a);
                                } finally {
                                    w.$$phase = null;
                                }
                            } catch (b) {
                                f(b);
                            } finally {
                                try {
                                    w.$digest();
                                } catch (c) {
                                    throw f(c), c;
                                }
                            }
                        },
                        $applyAsync: function (a) {
                            function b() {
                                c.$eval(a);
                            }
                            var c = this;
                            a && z.push(b);
                            a = g(a);
                            p();
                        },
                        $on: function (a, b) {
                            var c = this.$$listeners[a];
                            c || (this.$$listeners[a] = c = []);
                            c.push(b);
                            var d = this;
                            do
                                d.$$listenerCount[a] || (d.$$listenerCount[a] = 0), d.$$listenerCount[a]++;
                            while (d = d.$parent);
                            var e = this;
                            return function () {
                                var d = c.indexOf(b);
                                -1 !== d && (c[d] = null, I(e, 1, a));
                            };
                        },
                        $emit: function (a, b) {
                            var c = [], d, e = this, g = !1, h = {
                                    name: a,
                                    targetScope: e,
                                    stopPropagation: function () {
                                        g = !0;
                                    },
                                    preventDefault: function () {
                                        h.defaultPrevented = !0;
                                    },
                                    defaultPrevented: !1
                                }, k = db([h], arguments, 1), l, m;
                            do {
                                d = e.$$listeners[a] || c;
                                h.currentScope = e;
                                l = 0;
                                for (m = d.length; l < m; l++)
                                    if (d[l])
                                        try {
                                            d[l].apply(null, k);
                                        } catch (r) {
                                            f(r);
                                        }
                                    else
                                        d.splice(l, 1), l--, m--;
                                if (g)
                                    return h.currentScope = null, h;
                                e = e.$parent;
                            } while (e);
                            h.currentScope = null;
                            return h;
                        },
                        $broadcast: function (a, b) {
                            var c = this, d = this, e = {
                                    name: a,
                                    targetScope: this,
                                    preventDefault: function () {
                                        e.defaultPrevented = !0;
                                    },
                                    defaultPrevented: !1
                                };
                            if (!this.$$listenerCount[a])
                                return e;
                            for (var g = db([e], arguments, 1), h, k; c = d;) {
                                e.currentScope = c;
                                d = c.$$listeners[a] || [];
                                h = 0;
                                for (k = d.length; h < k; h++)
                                    if (d[h])
                                        try {
                                            d[h].apply(null, g);
                                        } catch (l) {
                                            f(l);
                                        }
                                    else
                                        d.splice(h, 1), h--, k--;
                                if (!(d = c.$$listenerCount[a] && c.$$childHead || c !== this && c.$$nextSibling))
                                    for (; c !== this && !(d = c.$$nextSibling);)
                                        c = c.$parent;
                            }
                            e.currentScope = null;
                            return e;
                        }
                    };
                    var w = new m(), u = w.$$asyncQueue = [], v = w.$$postDigestQueue = [], z = w.$$applyAsyncQueue = [];
                    return w;
                }
            ];
        }
        function ne() {
            var a = /^\s*(https?|ftp|mailto|tel|file):/, b = /^\s*((https?|ftp|file|blob):|data:image\/)/;
            this.aHrefSanitizationWhitelist = function (b) {
                return y(b) ? (a = b, this) : a;
            };
            this.imgSrcSanitizationWhitelist = function (a) {
                return y(a) ? (b = a, this) : b;
            };
            this.$get = function () {
                return function (d, c) {
                    var e = c ? b : a, f;
                    f = za(d).href;
                    return '' === f || f.match(e) ? d : 'unsafe:' + f;
                };
            };
        }
        function ng(a) {
            if ('self' === a)
                return a;
            if (F(a)) {
                if (-1 < a.indexOf('***'))
                    throw Ba('iwcard', a);
                a = xd(a).replace('\\*\\*', '.*').replace('\\*', '[^:/.?&;]*');
                return new RegExp('^' + a + '$');
            }
            if ($a(a))
                return new RegExp('^' + a.source + '$');
            throw Ba('imatcher');
        }
        function yd(a) {
            var b = [];
            y(a) && n(a, function (a) {
                b.push(ng(a));
            });
            return b;
        }
        function yf() {
            this.SCE_CONTEXTS = qa;
            var a = ['self'], b = [];
            this.resourceUrlWhitelist = function (b) {
                arguments.length && (a = yd(b));
                return a;
            };
            this.resourceUrlBlacklist = function (a) {
                arguments.length && (b = yd(a));
                return b;
            };
            this.$get = [
                '$injector',
                function (d) {
                    function c(a, b) {
                        return 'self' === a ? jd(b) : !!a.exec(b.href);
                    }
                    function e(a) {
                        var b = function (a) {
                            this.$$unwrapTrustedValue = function () {
                                return a;
                            };
                        };
                        a && (b.prototype = new a());
                        b.prototype.valueOf = function () {
                            return this.$$unwrapTrustedValue();
                        };
                        b.prototype.toString = function () {
                            return this.$$unwrapTrustedValue().toString();
                        };
                        return b;
                    }
                    var f = function (a) {
                        throw Ba('unsafe');
                    };
                    d.has('$sanitize') && (f = d.get('$sanitize'));
                    var g = e(), h = {};
                    h[qa.HTML] = e(g);
                    h[qa.CSS] = e(g);
                    h[qa.URL] = e(g);
                    h[qa.JS] = e(g);
                    h[qa.RESOURCE_URL] = e(h[qa.URL]);
                    return {
                        trustAs: function (a, b) {
                            var c = h.hasOwnProperty(a) ? h[a] : null;
                            if (!c)
                                throw Ba('icontext', a, b);
                            if (null === b || x(b) || '' === b)
                                return b;
                            if ('string' !== typeof b)
                                throw Ba('itype', a);
                            return new c(b);
                        },
                        getTrusted: function (d, e) {
                            if (null === e || x(e) || '' === e)
                                return e;
                            var g = h.hasOwnProperty(d) ? h[d] : null;
                            if (g && e instanceof g)
                                return e.$$unwrapTrustedValue();
                            if (d === qa.RESOURCE_URL) {
                                var g = za(e.toString()), r, s, n = !1;
                                r = 0;
                                for (s = a.length; r < s; r++)
                                    if (c(a[r], g)) {
                                        n = !0;
                                        break;
                                    }
                                if (n)
                                    for (r = 0, s = b.length; r < s; r++)
                                        if (c(b[r], g)) {
                                            n = !1;
                                            break;
                                        }
                                if (n)
                                    return e;
                                throw Ba('insecurl', e.toString());
                            }
                            if (d === qa.HTML)
                                return f(e);
                            throw Ba('unsafe');
                        },
                        valueOf: function (a) {
                            return a instanceof g ? a.$$unwrapTrustedValue() : a;
                        }
                    };
                }
            ];
        }
        function xf() {
            var a = !0;
            this.enabled = function (b) {
                arguments.length && (a = !!b);
                return a;
            };
            this.$get = [
                '$parse',
                '$sceDelegate',
                function (b, d) {
                    if (a && 8 > xa)
                        throw Ba('iequirks');
                    var c = na(qa);
                    c.isEnabled = function () {
                        return a;
                    };
                    c.trustAs = d.trustAs;
                    c.getTrusted = d.getTrusted;
                    c.valueOf = d.valueOf;
                    a || (c.trustAs = c.getTrusted = function (a, b) {
                        return b;
                    }, c.valueOf = ab);
                    c.parseAs = function (a, d) {
                        var e = b(d);
                        return e.literal && e.constant ? e : b(d, function (b) {
                            return c.getTrusted(a, b);
                        });
                    };
                    var e = c.parseAs, f = c.getTrusted, g = c.trustAs;
                    n(qa, function (a, b) {
                        var d = G(b);
                        c[gb('parse_as_' + d)] = function (b) {
                            return e(a, b);
                        };
                        c[gb('get_trusted_' + d)] = function (b) {
                            return f(a, b);
                        };
                        c[gb('trust_as_' + d)] = function (b) {
                            return g(a, b);
                        };
                    });
                    return c;
                }
            ];
        }
        function zf() {
            this.$get = [
                '$window',
                '$document',
                function (a, b) {
                    var d = {}, c = ca((/android (\d+)/.exec(G((a.navigator || {}).userAgent)) || [])[1]), e = /Boxee/i.test((a.navigator || {}).userAgent), f = b[0] || {}, g, h = /^(Moz|webkit|ms)(?=[A-Z])/, k = f.body && f.body.style, l = !1, m = !1;
                    if (k) {
                        for (var r in k)
                            if (l = h.exec(r)) {
                                g = l[0];
                                g = g.substr(0, 1).toUpperCase() + g.substr(1);
                                break;
                            }
                        g || (g = 'WebkitOpacity' in k && 'webkit');
                        l = !!('transition' in k || g + 'Transition' in k);
                        m = !!('animation' in k || g + 'Animation' in k);
                        !c || l && m || (l = F(k.webkitTransition), m = F(k.webkitAnimation));
                    }
                    return {
                        history: !(!a.history || !a.history.pushState || 4 > c || e),
                        hasEvent: function (a) {
                            if ('input' === a && 11 >= xa)
                                return !1;
                            if (x(d[a])) {
                                var b = f.createElement('div');
                                d[a] = 'on' + a in b;
                            }
                            return d[a];
                        },
                        csp: Ea(),
                        vendorPrefix: g,
                        transitions: l,
                        animations: m,
                        android: c
                    };
                }
            ];
        }
        function Bf() {
            var a;
            this.httpOptions = function (b) {
                return b ? (a = b, this) : a;
            };
            this.$get = [
                '$templateCache',
                '$http',
                '$q',
                '$sce',
                function (b, d, c, e) {
                    function f(g, h) {
                        f.totalPendingRequests++;
                        F(g) && b.get(g) || (g = e.getTrustedResourceUrl(g));
                        var k = d.defaults && d.defaults.transformResponse;
                        L(k) ? k = k.filter(function (a) {
                            return a !== cc;
                        }) : k === cc && (k = null);
                        return d.get(g, T({
                            cache: b,
                            transformResponse: k
                        }, a))['finally'](function () {
                            f.totalPendingRequests--;
                        }).then(function (a) {
                            b.put(g, a.data);
                            return a.data;
                        }, function (a) {
                            if (!h)
                                throw ja('tpload', g, a.status, a.statusText);
                            return c.reject(a);
                        });
                    }
                    f.totalPendingRequests = 0;
                    return f;
                }
            ];
        }
        function Cf() {
            this.$get = [
                '$rootScope',
                '$browser',
                '$location',
                function (a, b, d) {
                    return {
                        findBindings: function (a, b, d) {
                            a = a.getElementsByClassName('ng-binding');
                            var g = [];
                            n(a, function (a) {
                                var c = ia.element(a).data('$binding');
                                c && n(c, function (c) {
                                    d ? new RegExp('(^|\\s)' + xd(b) + '(\\s|\\||$)').test(c) && g.push(a) : -1 != c.indexOf(b) && g.push(a);
                                });
                            });
                            return g;
                        },
                        findModels: function (a, b, d) {
                            for (var g = [
                                        'ng-',
                                        'data-ng-',
                                        'ng\\:'
                                    ], h = 0; h < g.length; ++h) {
                                var k = a.querySelectorAll('[' + g[h] + 'model' + (d ? '=' : '*=') + '"' + b + '"]');
                                if (k.length)
                                    return k;
                            }
                        },
                        getLocation: function () {
                            return d.url();
                        },
                        setLocation: function (b) {
                            b !== d.url() && (d.url(b), a.$digest());
                        },
                        whenStable: function (a) {
                            b.notifyWhenNoOutstandingRequests(a);
                        }
                    };
                }
            ];
        }
        function Df() {
            this.$get = [
                '$rootScope',
                '$browser',
                '$q',
                '$$q',
                '$exceptionHandler',
                function (a, b, d, c, e) {
                    function f(f, k, l) {
                        D(f) || (l = k, k = f, f = B);
                        var m = wa.call(arguments, 3), r = y(l) && !l, s = (r ? c : d).defer(), n = s.promise, q;
                        q = b.defer(function () {
                            try {
                                s.resolve(f.apply(null, m));
                            } catch (b) {
                                s.reject(b), e(b);
                            } finally {
                                delete g[n.$$timeoutId];
                            }
                            r || a.$apply();
                        }, k);
                        n.$$timeoutId = q;
                        g[q] = s;
                        return n;
                    }
                    var g = {};
                    f.cancel = function (a) {
                        return a && a.$$timeoutId in g ? (g[a.$$timeoutId].reject('canceled'), delete g[a.$$timeoutId], b.defer.cancel(a.$$timeoutId)) : !1;
                    };
                    return f;
                }
            ];
        }
        function za(a) {
            xa && (Y.setAttribute('href', a), a = Y.href);
            Y.setAttribute('href', a);
            return {
                href: Y.href,
                protocol: Y.protocol ? Y.protocol.replace(/:$/, '') : '',
                host: Y.host,
                search: Y.search ? Y.search.replace(/^\?/, '') : '',
                hash: Y.hash ? Y.hash.replace(/^#/, '') : '',
                hostname: Y.hostname,
                port: Y.port,
                pathname: '/' === Y.pathname.charAt(0) ? Y.pathname : '/' + Y.pathname
            };
        }
        function jd(a) {
            a = F(a) ? za(a) : a;
            return a.protocol === zd.protocol && a.host === zd.host;
        }
        function Ef() {
            this.$get = ba(O);
        }
        function Ad(a) {
            function b(a) {
                try {
                    return decodeURIComponent(a);
                } catch (b) {
                    return a;
                }
            }
            var d = a[0] || {}, c = {}, e = '';
            return function () {
                var a, g, h, k, l;
                a = d.cookie || '';
                if (a !== e)
                    for (e = a, a = e.split('; '), c = {}, h = 0; h < a.length; h++)
                        g = a[h], k = g.indexOf('='), 0 < k && (l = b(g.substring(0, k)), x(c[l]) && (c[l] = b(g.substring(k + 1))));
                return c;
            };
        }
        function If() {
            this.$get = Ad;
        }
        function Lc(a) {
            function b(d, c) {
                if (E(d)) {
                    var e = {};
                    n(d, function (a, c) {
                        e[c] = b(c, a);
                    });
                    return e;
                }
                return a.factory(d + 'Filter', c);
            }
            this.register = b;
            this.$get = [
                '$injector',
                function (a) {
                    return function (b) {
                        return a.get(b + 'Filter');
                    };
                }
            ];
            b('currency', Bd);
            b('date', Cd);
            b('filter', og);
            b('json', pg);
            b('limitTo', qg);
            b('lowercase', rg);
            b('number', Dd);
            b('orderBy', Ed);
            b('uppercase', sg);
        }
        function og() {
            return function (a, b, d) {
                if (!Ca(a)) {
                    if (null == a)
                        return a;
                    throw H('filter')('notarray', a);
                }
                var c;
                switch (kc(b)) {
                case 'function':
                    break;
                case 'boolean':
                case 'null':
                case 'number':
                case 'string':
                    c = !0;
                case 'object':
                    b = tg(b, d, c);
                    break;
                default:
                    return a;
                }
                return Array.prototype.filter.call(a, b);
            };
        }
        function tg(a, b, d) {
            var c = E(a) && '$' in a;
            !0 === b ? b = oa : D(b) || (b = function (a, b) {
                if (x(a))
                    return !1;
                if (null === a || null === b)
                    return a === b;
                if (E(b) || E(a) && !tc(a))
                    return !1;
                a = G('' + a);
                b = G('' + b);
                return -1 !== a.indexOf(b);
            });
            return function (e) {
                return c && !E(e) ? La(e, a.$, b, !1) : La(e, a, b, d);
            };
        }
        function La(a, b, d, c, e) {
            var f = kc(a), g = kc(b);
            if ('string' === g && '!' === b.charAt(0))
                return !La(a, b.substring(1), d, c);
            if (L(a))
                return a.some(function (a) {
                    return La(a, b, d, c);
                });
            switch (f) {
            case 'object':
                var h;
                if (c) {
                    for (h in a)
                        if ('$' !== h.charAt(0) && La(a[h], b, d, !0))
                            return !0;
                    return e ? !1 : La(a, b, d, !1);
                }
                if ('object' === g) {
                    for (h in b)
                        if (e = b[h], !D(e) && !x(e) && (f = '$' === h, !La(f ? a : a[h], e, d, f, f)))
                            return !1;
                    return !0;
                }
                return d(a, b);
            case 'function':
                return !1;
            default:
                return d(a, b);
            }
        }
        function kc(a) {
            return null === a ? 'null' : typeof a;
        }
        function Bd(a) {
            var b = a.NUMBER_FORMATS;
            return function (a, c, e) {
                x(c) && (c = b.CURRENCY_SYM);
                x(e) && (e = b.PATTERNS[1].maxFrac);
                return null == a ? a : Fd(a, b.PATTERNS[1], b.GROUP_SEP, b.DECIMAL_SEP, e).replace(/\u00A4/g, c);
            };
        }
        function Dd(a) {
            var b = a.NUMBER_FORMATS;
            return function (a, c) {
                return null == a ? a : Fd(a, b.PATTERNS[0], b.GROUP_SEP, b.DECIMAL_SEP, c);
            };
        }
        function ug(a) {
            var b = 0, d, c, e, f, g;
            -1 < (c = a.indexOf(Gd)) && (a = a.replace(Gd, ''));
            0 < (e = a.search(/e/i)) ? (0 > c && (c = e), c += +a.slice(e + 1), a = a.substring(0, e)) : 0 > c && (c = a.length);
            for (e = 0; a.charAt(e) == lc; e++);
            if (e == (g = a.length))
                d = [0], c = 1;
            else {
                for (g--; a.charAt(g) == lc;)
                    g--;
                c -= e;
                d = [];
                for (f = 0; e <= g; e++, f++)
                    d[f] = +a.charAt(e);
            }
            c > Hd && (d = d.splice(0, Hd - 1), b = c - 1, c = 1);
            return {
                d: d,
                e: b,
                i: c
            };
        }
        function vg(a, b, d, c) {
            var e = a.d, f = e.length - a.i;
            b = x(b) ? Math.min(Math.max(d, f), c) : +b;
            d = b + a.i;
            c = e[d];
            if (0 < d)
                e.splice(d);
            else {
                a.i = 1;
                e.length = d = b + 1;
                for (var g = 0; g < d; g++)
                    e[g] = 0;
            }
            for (5 <= c && e[d - 1]++; f < b; f++)
                e.push(0);
            if (b = e.reduceRight(function (a, b, c, d) {
                    b += a;
                    d[c] = b % 10;
                    return Math.floor(b / 10);
                }, 0))
                e.unshift(b), a.i++;
        }
        function Fd(a, b, d, c, e) {
            if (!F(a) && !N(a) || isNaN(a))
                return '';
            var f = !isFinite(a), g = !1, h = Math.abs(a) + '', k = '';
            if (f)
                k = '\u221E';
            else {
                g = ug(h);
                vg(g, e, b.minFrac, b.maxFrac);
                k = g.d;
                h = g.i;
                e = g.e;
                f = [];
                for (g = k.reduce(function (a, b) {
                        return a && !b;
                    }, !0); 0 > h;)
                    k.unshift(0), h++;
                0 < h ? f = k.splice(h) : (f = k, k = [0]);
                h = [];
                for (k.length > b.lgSize && h.unshift(k.splice(-b.lgSize).join('')); k.length > b.gSize;)
                    h.unshift(k.splice(-b.gSize).join(''));
                k.length && h.unshift(k.join(''));
                k = h.join(d);
                f.length && (k += c + f.join(''));
                e && (k += 'e+' + e);
            }
            return 0 > a && !g ? b.negPre + k + b.negSuf : b.posPre + k + b.posSuf;
        }
        function Kb(a, b, d) {
            var c = '';
            0 > a && (c = '-', a = -a);
            for (a = '' + a; a.length < b;)
                a = lc + a;
            d && (a = a.substr(a.length - b));
            return c + a;
        }
        function aa(a, b, d, c) {
            d = d || 0;
            return function (e) {
                e = e['get' + a]();
                if (0 < d || e > -d)
                    e += d;
                0 === e && -12 == d && (e = 12);
                return Kb(e, b, c);
            };
        }
        function Lb(a, b) {
            return function (d, c) {
                var e = d['get' + a](), f = ub(b ? 'SHORT' + a : a);
                return c[f][e];
            };
        }
        function Id(a) {
            var b = new Date(a, 0, 1).getDay();
            return new Date(a, 0, (4 >= b ? 5 : 12) - b);
        }
        function Jd(a) {
            return function (b) {
                var d = Id(b.getFullYear());
                b = +new Date(b.getFullYear(), b.getMonth(), b.getDate() + (4 - b.getDay())) - +d;
                b = 1 + Math.round(b / 604800000);
                return Kb(b, a);
            };
        }
        function mc(a, b) {
            return 0 >= a.getFullYear() ? b.ERAS[0] : b.ERAS[1];
        }
        function Cd(a) {
            function b(a) {
                var b;
                if (b = a.match(d)) {
                    a = new Date(0);
                    var f = 0, g = 0, h = b[8] ? a.setUTCFullYear : a.setFullYear, k = b[8] ? a.setUTCHours : a.setHours;
                    b[9] && (f = ca(b[9] + b[10]), g = ca(b[9] + b[11]));
                    h.call(a, ca(b[1]), ca(b[2]) - 1, ca(b[3]));
                    f = ca(b[4] || 0) - f;
                    g = ca(b[5] || 0) - g;
                    h = ca(b[6] || 0);
                    b = Math.round(1000 * parseFloat('0.' + (b[7] || 0)));
                    k.call(a, f, g, h, b);
                }
                return a;
            }
            var d = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
            return function (c, d, f) {
                var g = '', h = [], k, l;
                d = d || 'mediumDate';
                d = a.DATETIME_FORMATS[d] || d;
                F(c) && (c = wg.test(c) ? ca(c) : b(c));
                N(c) && (c = new Date(c));
                if (!V(c) || !isFinite(c.getTime()))
                    return c;
                for (; d;)
                    (l = xg.exec(d)) ? (h = db(h, l, 1), d = h.pop()) : (h.push(d), d = null);
                var m = c.getTimezoneOffset();
                f && (m = xc(f, m), c = Tb(c, f, !0));
                n(h, function (b) {
                    k = yg[b];
                    g += k ? k(c, a.DATETIME_FORMATS, m) : '\'\'' === b ? '\'' : b.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
                });
                return g;
            };
        }
        function pg() {
            return function (a, b) {
                x(b) && (b = 2);
                return eb(a, b);
            };
        }
        function qg() {
            return function (a, b, d) {
                b = Infinity === Math.abs(Number(b)) ? Number(b) : ca(b);
                if (isNaN(b))
                    return a;
                N(a) && (a = a.toString());
                if (!L(a) && !F(a))
                    return a;
                d = !d || isNaN(d) ? 0 : ca(d);
                d = 0 > d ? Math.max(0, a.length + d) : d;
                return 0 <= b ? a.slice(d, d + b) : 0 === d ? a.slice(b, a.length) : a.slice(Math.max(0, d + b), d);
            };
        }
        function Ed(a) {
            function b(b, d) {
                d = d ? -1 : 1;
                return b.map(function (b) {
                    var c = 1, h = ab;
                    if (D(b))
                        h = b;
                    else if (F(b)) {
                        if ('+' == b.charAt(0) || '-' == b.charAt(0))
                            c = '-' == b.charAt(0) ? -1 : 1, b = b.substring(1);
                        if ('' !== b && (h = a(b), h.constant))
                            var k = h(), h = function (a) {
                                    return a[k];
                                };
                    }
                    return {
                        get: h,
                        descending: c * d
                    };
                });
            }
            function d(a) {
                switch (typeof a) {
                case 'number':
                case 'boolean':
                case 'string':
                    return !0;
                default:
                    return !1;
                }
            }
            return function (a, e, f) {
                if (null == a)
                    return a;
                if (!Ca(a))
                    throw H('orderBy')('notarray', a);
                L(e) || (e = [e]);
                0 === e.length && (e = ['+']);
                var g = b(e, f);
                g.push({
                    get: function () {
                        return {};
                    },
                    descending: f ? -1 : 1
                });
                a = Array.prototype.map.call(a, function (a, b) {
                    return {
                        value: a,
                        predicateValues: g.map(function (c) {
                            var e = c.get(a);
                            c = typeof e;
                            if (null === e)
                                c = 'string', e = 'null';
                            else if ('string' === c)
                                e = e.toLowerCase();
                            else if ('object' === c)
                                a: {
                                    if ('function' === typeof e.valueOf && (e = e.valueOf(), d(e)))
                                        break a;
                                    if (tc(e) && (e = e.toString(), d(e)))
                                        break a;
                                    e = b;
                                }
                            return {
                                value: e,
                                type: c
                            };
                        })
                    };
                });
                a.sort(function (a, b) {
                    for (var c = 0, d = 0, e = g.length; d < e; ++d) {
                        var c = a.predicateValues[d], f = b.predicateValues[d], n = 0;
                        c.type === f.type ? c.value !== f.value && (n = c.value < f.value ? -1 : 1) : n = c.type < f.type ? -1 : 1;
                        if (c = n * g[d].descending)
                            break;
                    }
                    return c;
                });
                return a = a.map(function (a) {
                    return a.value;
                });
            };
        }
        function Ma(a) {
            D(a) && (a = { link: a });
            a.restrict = a.restrict || 'AC';
            return ba(a);
        }
        function Kd(a, b, d, c, e) {
            var f = this, g = [];
            f.$error = {};
            f.$$success = {};
            f.$pending = v;
            f.$name = e(b.name || b.ngForm || '')(d);
            f.$dirty = !1;
            f.$pristine = !0;
            f.$valid = !0;
            f.$invalid = !1;
            f.$submitted = !1;
            f.$$parentForm = Mb;
            f.$rollbackViewValue = function () {
                n(g, function (a) {
                    a.$rollbackViewValue();
                });
            };
            f.$commitViewValue = function () {
                n(g, function (a) {
                    a.$commitViewValue();
                });
            };
            f.$addControl = function (a) {
                Ta(a.$name, 'input');
                g.push(a);
                a.$name && (f[a.$name] = a);
                a.$$parentForm = f;
            };
            f.$$renameControl = function (a, b) {
                var c = a.$name;
                f[c] === a && delete f[c];
                f[b] = a;
                a.$name = b;
            };
            f.$removeControl = function (a) {
                a.$name && f[a.$name] === a && delete f[a.$name];
                n(f.$pending, function (b, c) {
                    f.$setValidity(c, null, a);
                });
                n(f.$error, function (b, c) {
                    f.$setValidity(c, null, a);
                });
                n(f.$$success, function (b, c) {
                    f.$setValidity(c, null, a);
                });
                cb(g, a);
                a.$$parentForm = Mb;
            };
            Ld({
                ctrl: this,
                $element: a,
                set: function (a, b, c) {
                    var d = a[b];
                    d ? -1 === d.indexOf(c) && d.push(c) : a[b] = [c];
                },
                unset: function (a, b, c) {
                    var d = a[b];
                    d && (cb(d, c), 0 === d.length && delete a[b]);
                },
                $animate: c
            });
            f.$setDirty = function () {
                c.removeClass(a, Ya);
                c.addClass(a, Nb);
                f.$dirty = !0;
                f.$pristine = !1;
                f.$$parentForm.$setDirty();
            };
            f.$setPristine = function () {
                c.setClass(a, Ya, Nb + ' ng-submitted');
                f.$dirty = !1;
                f.$pristine = !0;
                f.$submitted = !1;
                n(g, function (a) {
                    a.$setPristine();
                });
            };
            f.$setUntouched = function () {
                n(g, function (a) {
                    a.$setUntouched();
                });
            };
            f.$setSubmitted = function () {
                c.addClass(a, 'ng-submitted');
                f.$submitted = !0;
                f.$$parentForm.$setSubmitted();
            };
        }
        function nc(a) {
            a.$formatters.push(function (b) {
                return a.$isEmpty(b) ? b : b.toString();
            });
        }
        function lb(a, b, d, c, e, f) {
            var g = G(b[0].type);
            if (!e.android) {
                var h = !1;
                b.on('compositionstart', function (a) {
                    h = !0;
                });
                b.on('compositionend', function () {
                    h = !1;
                    k();
                });
            }
            var k = function (a) {
                l && (f.defer.cancel(l), l = null);
                if (!h) {
                    var e = b.val();
                    a = a && a.type;
                    'password' === g || d.ngTrim && 'false' === d.ngTrim || (e = X(e));
                    (c.$viewValue !== e || '' === e && c.$$hasNativeValidators) && c.$setViewValue(e, a);
                }
            };
            if (e.hasEvent('input'))
                b.on('input', k);
            else {
                var l, m = function (a, b, c) {
                        l || (l = f.defer(function () {
                            l = null;
                            b && b.value === c || k(a);
                        }));
                    };
                b.on('keydown', function (a) {
                    var b = a.keyCode;
                    91 === b || 15 < b && 19 > b || 37 <= b && 40 >= b || m(a, this, this.value);
                });
                if (e.hasEvent('paste'))
                    b.on('paste cut', m);
            }
            b.on('change', k);
            c.$render = function () {
                var a = c.$isEmpty(c.$viewValue) ? '' : c.$viewValue;
                b.val() !== a && b.val(a);
            };
        }
        function Ob(a, b) {
            return function (d, c) {
                var e, f;
                if (V(d))
                    return d;
                if (F(d)) {
                    '"' == d.charAt(0) && '"' == d.charAt(d.length - 1) && (d = d.substring(1, d.length - 1));
                    if (zg.test(d))
                        return new Date(d);
                    a.lastIndex = 0;
                    if (e = a.exec(d))
                        return e.shift(), f = c ? {
                            yyyy: c.getFullYear(),
                            MM: c.getMonth() + 1,
                            dd: c.getDate(),
                            HH: c.getHours(),
                            mm: c.getMinutes(),
                            ss: c.getSeconds(),
                            sss: c.getMilliseconds() / 1000
                        } : {
                            yyyy: 1970,
                            MM: 1,
                            dd: 1,
                            HH: 0,
                            mm: 0,
                            ss: 0,
                            sss: 0
                        }, n(e, function (a, c) {
                            c < b.length && (f[b[c]] = +a);
                        }), new Date(f.yyyy, f.MM - 1, f.dd, f.HH, f.mm, f.ss || 0, 1000 * f.sss || 0);
                }
                return NaN;
            };
        }
        function mb(a, b, d, c) {
            return function (e, f, g, h, k, l, m) {
                function r(a) {
                    return a && !(a.getTime && a.getTime() !== a.getTime());
                }
                function s(a) {
                    return y(a) && !V(a) ? d(a) || v : a;
                }
                Md(e, f, g, h);
                lb(e, f, g, h, k, l);
                var n = h && h.$options && h.$options.timezone, q;
                h.$$parserName = a;
                h.$parsers.push(function (a) {
                    return h.$isEmpty(a) ? null : b.test(a) ? (a = d(a, q), n && (a = Tb(a, n)), a) : v;
                });
                h.$formatters.push(function (a) {
                    if (a && !V(a))
                        throw nb('datefmt', a);
                    if (r(a))
                        return (q = a) && n && (q = Tb(q, n, !0)), m('date')(a, c, n);
                    q = null;
                    return '';
                });
                if (y(g.min) || g.ngMin) {
                    var t;
                    h.$validators.min = function (a) {
                        return !r(a) || x(t) || d(a) >= t;
                    };
                    g.$observe('min', function (a) {
                        t = s(a);
                        h.$validate();
                    });
                }
                if (y(g.max) || g.ngMax) {
                    var p;
                    h.$validators.max = function (a) {
                        return !r(a) || x(p) || d(a) <= p;
                    };
                    g.$observe('max', function (a) {
                        p = s(a);
                        h.$validate();
                    });
                }
            };
        }
        function Md(a, b, d, c) {
            (c.$$hasNativeValidators = E(b[0].validity)) && c.$parsers.push(function (a) {
                var c = b.prop('validity') || {};
                return c.badInput || c.typeMismatch ? v : a;
            });
        }
        function Nd(a, b, d, c, e) {
            if (y(c)) {
                a = a(c);
                if (!a.constant)
                    throw nb('constexpr', d, c);
                return a(b);
            }
            return e;
        }
        function oc(a, b) {
            a = 'ngClass' + a;
            return [
                '$animate',
                function (d) {
                    function c(a, b) {
                        var c = [], d = 0;
                        a:
                            for (; d < a.length; d++) {
                                for (var e = a[d], m = 0; m < b.length; m++)
                                    if (e == b[m])
                                        continue a;
                                c.push(e);
                            }
                        return c;
                    }
                    function e(a) {
                        var b = [];
                        return L(a) ? (n(a, function (a) {
                            b = b.concat(e(a));
                        }), b) : F(a) ? a.split(' ') : E(a) ? (n(a, function (a, c) {
                            a && (b = b.concat(c.split(' ')));
                        }), b) : a;
                    }
                    return {
                        restrict: 'AC',
                        link: function (f, g, h) {
                            function k(a, b) {
                                var c = g.data('$classCounts') || Z(), d = [];
                                n(a, function (a) {
                                    if (0 < b || c[a])
                                        c[a] = (c[a] || 0) + b, c[a] === +(0 < b) && d.push(a);
                                });
                                g.data('$classCounts', c);
                                return d.join(' ');
                            }
                            function l(a) {
                                if (!0 === b || f.$index % 2 === b) {
                                    var l = e(a || []);
                                    if (!m) {
                                        var n = k(l, 1);
                                        h.$addClass(n);
                                    } else if (!oa(a, m)) {
                                        var q = e(m), n = c(l, q), l = c(q, l), n = k(n, 1), l = k(l, -1);
                                        n && n.length && d.addClass(g, n);
                                        l && l.length && d.removeClass(g, l);
                                    }
                                }
                                m = na(a);
                            }
                            var m;
                            f.$watch(h[a], l, !0);
                            h.$observe('class', function (b) {
                                l(f.$eval(h[a]));
                            });
                            'ngClass' !== a && f.$watch('$index', function (c, d) {
                                var g = c & 1;
                                if (g !== (d & 1)) {
                                    var l = e(f.$eval(h[a]));
                                    g === b ? (g = k(l, 1), h.$addClass(g)) : (g = k(l, -1), h.$removeClass(g));
                                }
                            });
                        }
                    };
                }
            ];
        }
        function Ld(a) {
            function b(a, b) {
                b && !f[a] ? (k.addClass(e, a), f[a] = !0) : !b && f[a] && (k.removeClass(e, a), f[a] = !1);
            }
            function d(a, c) {
                a = a ? '-' + Bc(a, '-') : '';
                b(ob + a, !0 === c);
                b(Od + a, !1 === c);
            }
            var c = a.ctrl, e = a.$element, f = {}, g = a.set, h = a.unset, k = a.$animate;
            f[Od] = !(f[ob] = e.hasClass(ob));
            c.$setValidity = function (a, e, f) {
                x(e) ? (c.$pending || (c.$pending = {}), g(c.$pending, a, f)) : (c.$pending && h(c.$pending, a, f), Pd(c.$pending) && (c.$pending = v));
                Na(e) ? e ? (h(c.$error, a, f), g(c.$$success, a, f)) : (g(c.$error, a, f), h(c.$$success, a, f)) : (h(c.$error, a, f), h(c.$$success, a, f));
                c.$pending ? (b(Qd, !0), c.$valid = c.$invalid = v, d('', null)) : (b(Qd, !1), c.$valid = Pd(c.$error), c.$invalid = !c.$valid, d('', c.$valid));
                e = c.$pending && c.$pending[a] ? v : c.$error[a] ? !1 : c.$$success[a] ? !0 : null;
                d(a, e);
                c.$$parentForm.$setValidity(a, e, c);
            };
        }
        function Pd(a) {
            if (a)
                for (var b in a)
                    if (a.hasOwnProperty(b))
                        return !1;
            return !0;
        }
        var Ag = /^\/(.+)\/([a-z]*)$/, sa = Object.prototype.hasOwnProperty, G = function (a) {
                return F(a) ? a.toLowerCase() : a;
            }, ub = function (a) {
                return F(a) ? a.toUpperCase() : a;
            }, xa, C, ua, wa = [].slice, ag = [].splice, Bg = [].push, ga = Object.prototype.toString, uc = Object.getPrototypeOf, Da = H('ng'), ia = O.angular || (O.angular = {}), Vb, pb = 0;
        xa = W.documentMode;
        B.$inject = [];
        ab.$inject = [];
        var L = Array.isArray, ae = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/, X = function (a) {
                return F(a) ? a.trim() : a;
            }, xd = function (a) {
                return a.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
            }, Ea = function () {
                if (!y(Ea.rules)) {
                    var a = W.querySelector('[ng-csp]') || W.querySelector('[data-ng-csp]');
                    if (a) {
                        var b = a.getAttribute('ng-csp') || a.getAttribute('data-ng-csp');
                        Ea.rules = {
                            noUnsafeEval: !b || -1 !== b.indexOf('no-unsafe-eval'),
                            noInlineStyle: !b || -1 !== b.indexOf('no-inline-style')
                        };
                    } else {
                        a = Ea;
                        try {
                            new Function(''), b = !1;
                        } catch (d) {
                            b = !0;
                        }
                        a.rules = {
                            noUnsafeEval: b,
                            noInlineStyle: !1
                        };
                    }
                }
                return Ea.rules;
            }, rb = function () {
                if (y(rb.name_))
                    return rb.name_;
                var a, b, d = Qa.length, c, e;
                for (b = 0; b < d; ++b)
                    if (c = Qa[b], a = W.querySelector('[' + c.replace(':', '\\:') + 'jq]')) {
                        e = a.getAttribute(c + 'jq');
                        break;
                    }
                return rb.name_ = e;
            }, de = /:/g, Qa = [
                'ng-',
                'data-ng-',
                'ng:',
                'x-ng-'
            ], ie = /[A-Z]/g, Cc = !1, Pa = 3, me = {
                full: '1.5.0',
                major: 1,
                minor: 5,
                dot: 0,
                codeName: 'ennoblement-facilitation'
            };
        U.expando = 'ng339';
        var ib = U.cache = {}, Of = 1;
        U._data = function (a) {
            return this.cache[a[this.expando]] || {};
        };
        var Jf = /([\:\-\_]+(.))/g, Kf = /^moz([A-Z])/, yb = {
                mouseleave: 'mouseout',
                mouseenter: 'mouseover'
            }, Xb = H('jqLite'), Nf = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/, Wb = /<|&#?\w+;/, Lf = /<([\w:-]+)/, Mf = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, da = {
                option: [
                    1,
                    '<select multiple="multiple">',
                    '</select>'
                ],
                thead: [
                    1,
                    '<table>',
                    '</table>'
                ],
                col: [
                    2,
                    '<table><colgroup>',
                    '</colgroup></table>'
                ],
                tr: [
                    2,
                    '<table><tbody>',
                    '</tbody></table>'
                ],
                td: [
                    3,
                    '<table><tbody><tr>',
                    '</tr></tbody></table>'
                ],
                _default: [
                    0,
                    '',
                    ''
                ]
            };
        da.optgroup = da.option;
        da.tbody = da.tfoot = da.colgroup = da.caption = da.thead;
        da.th = da.td;
        var Tf = Node.prototype.contains || function (a) {
                return !!(this.compareDocumentPosition(a) & 16);
            }, Ra = U.prototype = {
                ready: function (a) {
                    function b() {
                        d || (d = !0, a());
                    }
                    var d = !1;
                    'complete' === W.readyState ? setTimeout(b) : (this.on('DOMContentLoaded', b), U(O).on('load', b));
                },
                toString: function () {
                    var a = [];
                    n(this, function (b) {
                        a.push('' + b);
                    });
                    return '[' + a.join(', ') + ']';
                },
                eq: function (a) {
                    return 0 <= a ? C(this[a]) : C(this[this.length + a]);
                },
                length: 0,
                push: Bg,
                sort: [].sort,
                splice: [].splice
            }, Db = {};
        n('multiple selected checked disabled readOnly required open'.split(' '), function (a) {
            Db[G(a)] = a;
        });
        var Uc = {};
        n('input select option textarea button form details'.split(' '), function (a) {
            Uc[a] = !0;
        });
        var cd = {
            ngMinlength: 'minlength',
            ngMaxlength: 'maxlength',
            ngMin: 'min',
            ngMax: 'max',
            ngPattern: 'pattern'
        };
        n({
            data: Zb,
            removeData: hb,
            hasData: function (a) {
                for (var b in ib[a.ng339])
                    return !0;
                return !1;
            },
            cleanData: function (a) {
                for (var b = 0, d = a.length; b < d; b++)
                    hb(a[b]);
            }
        }, function (a, b) {
            U[b] = a;
        });
        n({
            data: Zb,
            inheritedData: Cb,
            scope: function (a) {
                return C.data(a, '$scope') || Cb(a.parentNode || a, [
                    '$isolateScope',
                    '$scope'
                ]);
            },
            isolateScope: function (a) {
                return C.data(a, '$isolateScope') || C.data(a, '$isolateScopeNoTemplate');
            },
            controller: Rc,
            injector: function (a) {
                return Cb(a, '$injector');
            },
            removeAttr: function (a, b) {
                a.removeAttribute(b);
            },
            hasClass: zb,
            css: function (a, b, d) {
                b = gb(b);
                if (y(d))
                    a.style[b] = d;
                else
                    return a.style[b];
            },
            attr: function (a, b, d) {
                var c = a.nodeType;
                if (c !== Pa && 2 !== c && 8 !== c)
                    if (c = G(b), Db[c])
                        if (y(d))
                            d ? (a[b] = !0, a.setAttribute(b, c)) : (a[b] = !1, a.removeAttribute(c));
                        else
                            return a[b] || (a.attributes.getNamedItem(b) || B).specified ? c : v;
                    else if (y(d))
                        a.setAttribute(b, d);
                    else if (a.getAttribute)
                        return a = a.getAttribute(b, 2), null === a ? v : a;
            },
            prop: function (a, b, d) {
                if (y(d))
                    a[b] = d;
                else
                    return a[b];
            },
            text: function () {
                function a(a, d) {
                    if (x(d)) {
                        var c = a.nodeType;
                        return 1 === c || c === Pa ? a.textContent : '';
                    }
                    a.textContent = d;
                }
                a.$dv = '';
                return a;
            }(),
            val: function (a, b) {
                if (x(b)) {
                    if (a.multiple && 'select' === ra(a)) {
                        var d = [];
                        n(a.options, function (a) {
                            a.selected && d.push(a.value || a.text);
                        });
                        return 0 === d.length ? null : d;
                    }
                    return a.value;
                }
                a.value = b;
            },
            html: function (a, b) {
                if (x(b))
                    return a.innerHTML;
                wb(a, !0);
                a.innerHTML = b;
            },
            empty: Sc
        }, function (a, b) {
            U.prototype[b] = function (b, c) {
                var e, f, g = this.length;
                if (a !== Sc && x(2 == a.length && a !== zb && a !== Rc ? b : c)) {
                    if (E(b)) {
                        for (e = 0; e < g; e++)
                            if (a === Zb)
                                a(this[e], b);
                            else
                                for (f in b)
                                    a(this[e], f, b[f]);
                        return this;
                    }
                    e = a.$dv;
                    g = x(e) ? Math.min(g, 1) : g;
                    for (f = 0; f < g; f++) {
                        var h = a(this[f], b, c);
                        e = e ? e + h : h;
                    }
                    return e;
                }
                for (e = 0; e < g; e++)
                    a(this[e], b, c);
                return this;
            };
        });
        n({
            removeData: hb,
            on: function (a, b, d, c) {
                if (y(c))
                    throw Xb('onargs');
                if (Mc(a)) {
                    c = xb(a, !0);
                    var e = c.events, f = c.handle;
                    f || (f = c.handle = Qf(a, e));
                    c = 0 <= b.indexOf(' ') ? b.split(' ') : [b];
                    for (var g = c.length, h = function (b, c, g) {
                                var h = e[b];
                                h || (h = e[b] = [], h.specialHandlerWrapper = c, '$destroy' === b || g || a.addEventListener(b, f, !1));
                                h.push(d);
                            }; g--;)
                        b = c[g], yb[b] ? (h(yb[b], Sf), h(b, v, !0)) : h(b);
                }
            },
            off: Qc,
            one: function (a, b, d) {
                a = C(a);
                a.on(b, function e() {
                    a.off(b, d);
                    a.off(b, e);
                });
                a.on(b, d);
            },
            replaceWith: function (a, b) {
                var d, c = a.parentNode;
                wb(a);
                n(new U(b), function (b) {
                    d ? c.insertBefore(b, d.nextSibling) : c.replaceChild(b, a);
                    d = b;
                });
            },
            children: function (a) {
                var b = [];
                n(a.childNodes, function (a) {
                    1 === a.nodeType && b.push(a);
                });
                return b;
            },
            contents: function (a) {
                return a.contentDocument || a.childNodes || [];
            },
            append: function (a, b) {
                var d = a.nodeType;
                if (1 === d || 11 === d) {
                    b = new U(b);
                    for (var d = 0, c = b.length; d < c; d++)
                        a.appendChild(b[d]);
                }
            },
            prepend: function (a, b) {
                if (1 === a.nodeType) {
                    var d = a.firstChild;
                    n(new U(b), function (b) {
                        a.insertBefore(b, d);
                    });
                }
            },
            wrap: function (a, b) {
                Oc(a, C(b).eq(0).clone()[0]);
            },
            remove: $b,
            detach: function (a) {
                $b(a, !0);
            },
            after: function (a, b) {
                var d = a, c = a.parentNode;
                b = new U(b);
                for (var e = 0, f = b.length; e < f; e++) {
                    var g = b[e];
                    c.insertBefore(g, d.nextSibling);
                    d = g;
                }
            },
            addClass: Bb,
            removeClass: Ab,
            toggleClass: function (a, b, d) {
                b && n(b.split(' '), function (b) {
                    var e = d;
                    x(e) && (e = !zb(a, b));
                    (e ? Bb : Ab)(a, b);
                });
            },
            parent: function (a) {
                return (a = a.parentNode) && 11 !== a.nodeType ? a : null;
            },
            next: function (a) {
                return a.nextElementSibling;
            },
            find: function (a, b) {
                return a.getElementsByTagName ? a.getElementsByTagName(b) : [];
            },
            clone: Yb,
            triggerHandler: function (a, b, d) {
                var c, e, f = b.type || b, g = xb(a);
                if (g = (g = g && g.events) && g[f])
                    c = {
                        preventDefault: function () {
                            this.defaultPrevented = !0;
                        },
                        isDefaultPrevented: function () {
                            return !0 === this.defaultPrevented;
                        },
                        stopImmediatePropagation: function () {
                            this.immediatePropagationStopped = !0;
                        },
                        isImmediatePropagationStopped: function () {
                            return !0 === this.immediatePropagationStopped;
                        },
                        stopPropagation: B,
                        type: f,
                        target: a
                    }, b.type && (c = T(c, b)), b = na(g), e = d ? [c].concat(d) : [c], n(b, function (b) {
                        c.isImmediatePropagationStopped() || b.apply(a, e);
                    });
            }
        }, function (a, b) {
            U.prototype[b] = function (b, c, e) {
                for (var f, g = 0, h = this.length; g < h; g++)
                    x(f) ? (f = a(this[g], b, c, e), y(f) && (f = C(f))) : Pc(f, a(this[g], b, c, e));
                return y(f) ? f : this;
            };
            U.prototype.bind = U.prototype.on;
            U.prototype.unbind = U.prototype.off;
        });
        Ua.prototype = {
            put: function (a, b) {
                this[Fa(a, this.nextUid)] = b;
            },
            get: function (a) {
                return this[Fa(a, this.nextUid)];
            },
            remove: function (a) {
                var b = this[a = Fa(a, this.nextUid)];
                delete this[a];
                return b;
            }
        };
        var Hf = [function () {
                    this.$get = [function () {
                            return Ua;
                        }];
                }], Vf = /^([^\(]+?)=>/, Wf = /^[^\(]*\(\s*([^\)]*)\)/m, Cg = /,/, Dg = /^\s*(_?)(\S+?)\1\s*$/, Uf = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm, Ga = H('$injector');
        fb.$$annotate = function (a, b, d) {
            var c;
            if ('function' === typeof a) {
                if (!(c = a.$inject)) {
                    c = [];
                    if (a.length) {
                        if (b)
                            throw F(d) && d || (d = a.name || Xf(a)), Ga('strictdi', d);
                        b = Vc(a);
                        n(b[1].split(Cg), function (a) {
                            a.replace(Dg, function (a, b, d) {
                                c.push(d);
                            });
                        });
                    }
                    a.$inject = c;
                }
            } else
                L(a) ? (b = a.length - 1, Sa(a[b], 'fn'), c = a.slice(0, b)) : Sa(a, 'fn', !0);
            return c;
        };
        var Rd = H('$animate'), $e = function () {
                this.$get = function () {
                };
            }, af = function () {
                var a = new Ua(), b = [];
                this.$get = [
                    '$$AnimateRunner',
                    '$rootScope',
                    function (d, c) {
                        function e(a, b, c) {
                            var d = !1;
                            b && (b = F(b) ? b.split(' ') : L(b) ? b : [], n(b, function (b) {
                                b && (d = !0, a[b] = c);
                            }));
                            return d;
                        }
                        function f() {
                            n(b, function (b) {
                                var c = a.get(b);
                                if (c) {
                                    var d = Yf(b.attr('class')), e = '', f = '';
                                    n(c, function (a, b) {
                                        a !== !!d[b] && (a ? e += (e.length ? ' ' : '') + b : f += (f.length ? ' ' : '') + b);
                                    });
                                    n(b, function (a) {
                                        e && Bb(a, e);
                                        f && Ab(a, f);
                                    });
                                    a.remove(b);
                                }
                            });
                            b.length = 0;
                        }
                        return {
                            enabled: B,
                            on: B,
                            off: B,
                            pin: B,
                            push: function (g, h, k, l) {
                                l && l();
                                k = k || {};
                                k.from && g.css(k.from);
                                k.to && g.css(k.to);
                                if (k.addClass || k.removeClass)
                                    if (h = k.addClass, l = k.removeClass, k = a.get(g) || {}, h = e(k, h, !0), l = e(k, l, !1), h || l)
                                        a.put(g, k), b.push(g), 1 === b.length && c.$$postDigest(f);
                                g = new d();
                                g.complete();
                                return g;
                            }
                        };
                    }
                ];
            }, Ye = [
                '$provide',
                function (a) {
                    var b = this;
                    this.$$registeredAnimations = Object.create(null);
                    this.register = function (d, c) {
                        if (d && '.' !== d.charAt(0))
                            throw Rd('notcsel', d);
                        var e = d + '-animation';
                        b.$$registeredAnimations[d.substr(1)] = e;
                        a.factory(e, c);
                    };
                    this.classNameFilter = function (a) {
                        if (1 === arguments.length && (this.$$classNameFilter = a instanceof RegExp ? a : null) && /(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))
                            throw Rd('nongcls', 'ng-animate');
                        return this.$$classNameFilter;
                    };
                    this.$get = [
                        '$$animateQueue',
                        function (a) {
                            function b(a, c, d) {
                                if (d) {
                                    var h;
                                    a: {
                                        for (h = 0; h < d.length; h++) {
                                            var k = d[h];
                                            if (1 === k.nodeType) {
                                                h = k;
                                                break a;
                                            }
                                        }
                                        h = void 0;
                                    }
                                    !h || h.parentNode || h.previousElementSibling || (d = null);
                                }
                                d ? d.after(a) : c.prepend(a);
                            }
                            return {
                                on: a.on,
                                off: a.off,
                                pin: a.pin,
                                enabled: a.enabled,
                                cancel: function (a) {
                                    a.end && a.end();
                                },
                                enter: function (e, f, g, h) {
                                    f = f && C(f);
                                    g = g && C(g);
                                    f = f || g.parent();
                                    b(e, f, g);
                                    return a.push(e, 'enter', Ha(h));
                                },
                                move: function (e, f, g, h) {
                                    f = f && C(f);
                                    g = g && C(g);
                                    f = f || g.parent();
                                    b(e, f, g);
                                    return a.push(e, 'move', Ha(h));
                                },
                                leave: function (b, c) {
                                    return a.push(b, 'leave', Ha(c), function () {
                                        b.remove();
                                    });
                                },
                                addClass: function (b, c, g) {
                                    g = Ha(g);
                                    g.addClass = jb(g.addclass, c);
                                    return a.push(b, 'addClass', g);
                                },
                                removeClass: function (b, c, g) {
                                    g = Ha(g);
                                    g.removeClass = jb(g.removeClass, c);
                                    return a.push(b, 'removeClass', g);
                                },
                                setClass: function (b, c, g, h) {
                                    h = Ha(h);
                                    h.addClass = jb(h.addClass, c);
                                    h.removeClass = jb(h.removeClass, g);
                                    return a.push(b, 'setClass', h);
                                },
                                animate: function (b, c, g, h, k) {
                                    k = Ha(k);
                                    k.from = k.from ? T(k.from, c) : c;
                                    k.to = k.to ? T(k.to, g) : g;
                                    k.tempClasses = jb(k.tempClasses, h || 'ng-inline-animate');
                                    return a.push(b, 'animate', k);
                                }
                            };
                        }
                    ];
                }
            ], cf = function () {
                this.$get = [
                    '$$rAF',
                    function (a) {
                        function b(b) {
                            d.push(b);
                            1 < d.length || a(function () {
                                for (var a = 0; a < d.length; a++)
                                    d[a]();
                                d = [];
                            });
                        }
                        var d = [];
                        return function () {
                            var a = !1;
                            b(function () {
                                a = !0;
                            });
                            return function (d) {
                                a ? d() : b(d);
                            };
                        };
                    }
                ];
            }, bf = function () {
                this.$get = [
                    '$q',
                    '$sniffer',
                    '$$animateAsyncRun',
                    '$document',
                    '$timeout',
                    function (a, b, d, c, e) {
                        function f(a) {
                            this.setHost(a);
                            var b = d();
                            this._doneCallbacks = [];
                            this._tick = function (a) {
                                var d = c[0];
                                d && d.hidden ? e(a, 0, !1) : b(a);
                            };
                            this._state = 0;
                        }
                        f.chain = function (a, b) {
                            function c() {
                                if (d === a.length)
                                    b(!0);
                                else
                                    a[d](function (a) {
                                        !1 === a ? b(!1) : (d++, c());
                                    });
                            }
                            var d = 0;
                            c();
                        };
                        f.all = function (a, b) {
                            function c(f) {
                                e = e && f;
                                ++d === a.length && b(e);
                            }
                            var d = 0, e = !0;
                            n(a, function (a) {
                                a.done(c);
                            });
                        };
                        f.prototype = {
                            setHost: function (a) {
                                this.host = a || {};
                            },
                            done: function (a) {
                                2 === this._state ? a() : this._doneCallbacks.push(a);
                            },
                            progress: B,
                            getPromise: function () {
                                if (!this.promise) {
                                    var b = this;
                                    this.promise = a(function (a, c) {
                                        b.done(function (b) {
                                            !1 === b ? c() : a();
                                        });
                                    });
                                }
                                return this.promise;
                            },
                            then: function (a, b) {
                                return this.getPromise().then(a, b);
                            },
                            'catch': function (a) {
                                return this.getPromise()['catch'](a);
                            },
                            'finally': function (a) {
                                return this.getPromise()['finally'](a);
                            },
                            pause: function () {
                                this.host.pause && this.host.pause();
                            },
                            resume: function () {
                                this.host.resume && this.host.resume();
                            },
                            end: function () {
                                this.host.end && this.host.end();
                                this._resolve(!0);
                            },
                            cancel: function () {
                                this.host.cancel && this.host.cancel();
                                this._resolve(!1);
                            },
                            complete: function (a) {
                                var b = this;
                                0 === b._state && (b._state = 1, b._tick(function () {
                                    b._resolve(a);
                                }));
                            },
                            _resolve: function (a) {
                                2 !== this._state && (n(this._doneCallbacks, function (b) {
                                    b(a);
                                }), this._doneCallbacks.length = 0, this._state = 2);
                            }
                        };
                        return f;
                    }
                ];
            }, Ze = function () {
                this.$get = [
                    '$$rAF',
                    '$q',
                    '$$AnimateRunner',
                    function (a, b, d) {
                        return function (b, e) {
                            function f() {
                                a(function () {
                                    g.addClass && (b.addClass(g.addClass), g.addClass = null);
                                    g.removeClass && (b.removeClass(g.removeClass), g.removeClass = null);
                                    g.to && (b.css(g.to), g.to = null);
                                    h || k.complete();
                                    h = !0;
                                });
                                return k;
                            }
                            var g = e || {};
                            g.$$prepared || (g = Oa(g));
                            g.cleanupStyles && (g.from = g.to = null);
                            g.from && (b.css(g.from), g.from = null);
                            var h, k = new d();
                            return {
                                start: f,
                                end: f
                            };
                        };
                    }
                ];
            }, ja = H('$compile');
        Ec.$inject = [
            '$provide',
            '$$sanitizeUriProvider'
        ];
        var Xc = /^((?:x|data)[\:\-_])/i, bg = H('$controller'), dd = /^(\S+)(\s+as\s+([\w$]+))?$/, jf = function () {
                this.$get = [
                    '$document',
                    function (a) {
                        return function (b) {
                            b ? !b.nodeType && b instanceof C && (b = b[0]) : b = a[0].body;
                            return b.offsetWidth + 1;
                        };
                    }
                ];
            }, ed = 'application/json', dc = { 'Content-Type': ed + ';charset=utf-8' }, dg = /^\[|^\{(?!\{)/, eg = {
                '[': /]$/,
                '{': /}$/
            }, cg = /^\)\]\}',?\n/, Eg = H('$http'), id = function (a) {
                return function () {
                    throw Eg('legacy', a);
                };
            }, Ka = ia.$interpolateMinErr = H('$interpolate');
        Ka.throwNoconcat = function (a) {
            throw Ka('noconcat', a);
        };
        Ka.interr = function (a, b) {
            return Ka('interr', a, b.toString());
        };
        var Fg = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, gg = {
                http: 80,
                https: 443,
                ftp: 21
            }, Gb = H('$location'), Gg = {
                $$html5: !1,
                $$replace: !1,
                absUrl: Hb('$$absUrl'),
                url: function (a) {
                    if (x(a))
                        return this.$$url;
                    var b = Fg.exec(a);
                    (b[1] || '' === a) && this.path(decodeURIComponent(b[1]));
                    (b[2] || b[1] || '' === a) && this.search(b[3] || '');
                    this.hash(b[5] || '');
                    return this;
                },
                protocol: Hb('$$protocol'),
                host: Hb('$$host'),
                port: Hb('$$port'),
                path: nd('$$path', function (a) {
                    a = null !== a ? a.toString() : '';
                    return '/' == a.charAt(0) ? a : '/' + a;
                }),
                search: function (a, b) {
                    switch (arguments.length) {
                    case 0:
                        return this.$$search;
                    case 1:
                        if (F(a) || N(a))
                            a = a.toString(), this.$$search = zc(a);
                        else if (E(a))
                            a = Oa(a, {}), n(a, function (b, c) {
                                null == b && delete a[c];
                            }), this.$$search = a;
                        else
                            throw Gb('isrcharg');
                        break;
                    default:
                        x(b) || null === b ? delete this.$$search[a] : this.$$search[a] = b;
                    }
                    this.$$compose();
                    return this;
                },
                hash: nd('$$hash', function (a) {
                    return null !== a ? a.toString() : '';
                }),
                replace: function () {
                    this.$$replace = !0;
                    return this;
                }
            };
        n([
            md,
            gc,
            fc
        ], function (a) {
            a.prototype = Object.create(Gg);
            a.prototype.state = function (b) {
                if (!arguments.length)
                    return this.$$state;
                if (a !== fc || !this.$$html5)
                    throw Gb('nostate');
                this.$$state = x(b) ? null : b;
                return this;
            };
        });
        var ka = H('$parse'), ig = Function.prototype.call, jg = Function.prototype.apply, kg = Function.prototype.bind, Pb = Z();
        n('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function (a) {
            Pb[a] = !0;
        });
        var Hg = {
                n: '\n',
                f: '\f',
                r: '\r',
                t: '\t',
                v: '\x0B',
                '\'': '\'',
                '"': '"'
            }, ic = function (a) {
                this.options = a;
            };
        ic.prototype = {
            constructor: ic,
            lex: function (a) {
                this.text = a;
                this.index = 0;
                for (this.tokens = []; this.index < this.text.length;)
                    if (a = this.text.charAt(this.index), '"' === a || '\'' === a)
                        this.readString(a);
                    else if (this.isNumber(a) || '.' === a && this.isNumber(this.peek()))
                        this.readNumber();
                    else if (this.isIdent(a))
                        this.readIdent();
                    else if (this.is(a, '(){}[].,;:?'))
                        this.tokens.push({
                            index: this.index,
                            text: a
                        }), this.index++;
                    else if (this.isWhitespace(a))
                        this.index++;
                    else {
                        var b = a + this.peek(), d = b + this.peek(2), c = Pb[b], e = Pb[d];
                        Pb[a] || c || e ? (a = e ? d : c ? b : a, this.tokens.push({
                            index: this.index,
                            text: a,
                            operator: !0
                        }), this.index += a.length) : this.throwError('Unexpected next character ', this.index, this.index + 1);
                    }
                return this.tokens;
            },
            is: function (a, b) {
                return -1 !== b.indexOf(a);
            },
            peek: function (a) {
                a = a || 1;
                return this.index + a < this.text.length ? this.text.charAt(this.index + a) : !1;
            },
            isNumber: function (a) {
                return '0' <= a && '9' >= a && 'string' === typeof a;
            },
            isWhitespace: function (a) {
                return ' ' === a || '\r' === a || '\t' === a || '\n' === a || '\x0B' === a || '\xA0' === a;
            },
            isIdent: function (a) {
                return 'a' <= a && 'z' >= a || 'A' <= a && 'Z' >= a || '_' === a || '$' === a;
            },
            isExpOperator: function (a) {
                return '-' === a || '+' === a || this.isNumber(a);
            },
            throwError: function (a, b, d) {
                d = d || this.index;
                b = y(b) ? 's ' + b + '-' + this.index + ' [' + this.text.substring(b, d) + ']' : ' ' + d;
                throw ka('lexerr', a, b, this.text);
            },
            readNumber: function () {
                for (var a = '', b = this.index; this.index < this.text.length;) {
                    var d = G(this.text.charAt(this.index));
                    if ('.' == d || this.isNumber(d))
                        a += d;
                    else {
                        var c = this.peek();
                        if ('e' == d && this.isExpOperator(c))
                            a += d;
                        else if (this.isExpOperator(d) && c && this.isNumber(c) && 'e' == a.charAt(a.length - 1))
                            a += d;
                        else if (!this.isExpOperator(d) || c && this.isNumber(c) || 'e' != a.charAt(a.length - 1))
                            break;
                        else
                            this.throwError('Invalid exponent');
                    }
                    this.index++;
                }
                this.tokens.push({
                    index: b,
                    text: a,
                    constant: !0,
                    value: Number(a)
                });
            },
            readIdent: function () {
                for (var a = this.index; this.index < this.text.length;) {
                    var b = this.text.charAt(this.index);
                    if (!this.isIdent(b) && !this.isNumber(b))
                        break;
                    this.index++;
                }
                this.tokens.push({
                    index: a,
                    text: this.text.slice(a, this.index),
                    identifier: !0
                });
            },
            readString: function (a) {
                var b = this.index;
                this.index++;
                for (var d = '', c = a, e = !1; this.index < this.text.length;) {
                    var f = this.text.charAt(this.index), c = c + f;
                    if (e)
                        'u' === f ? (e = this.text.substring(this.index + 1, this.index + 5), e.match(/[\da-f]{4}/i) || this.throwError('Invalid unicode escape [\\u' + e + ']'), this.index += 4, d += String.fromCharCode(parseInt(e, 16))) : d += Hg[f] || f, e = !1;
                    else if ('\\' === f)
                        e = !0;
                    else {
                        if (f === a) {
                            this.index++;
                            this.tokens.push({
                                index: b,
                                text: c,
                                constant: !0,
                                value: d
                            });
                            return;
                        }
                        d += f;
                    }
                    this.index++;
                }
                this.throwError('Unterminated quote', b);
            }
        };
        var q = function (a, b) {
            this.lexer = a;
            this.options = b;
        };
        q.Program = 'Program';
        q.ExpressionStatement = 'ExpressionStatement';
        q.AssignmentExpression = 'AssignmentExpression';
        q.ConditionalExpression = 'ConditionalExpression';
        q.LogicalExpression = 'LogicalExpression';
        q.BinaryExpression = 'BinaryExpression';
        q.UnaryExpression = 'UnaryExpression';
        q.CallExpression = 'CallExpression';
        q.MemberExpression = 'MemberExpression';
        q.Identifier = 'Identifier';
        q.Literal = 'Literal';
        q.ArrayExpression = 'ArrayExpression';
        q.Property = 'Property';
        q.ObjectExpression = 'ObjectExpression';
        q.ThisExpression = 'ThisExpression';
        q.LocalsExpression = 'LocalsExpression';
        q.NGValueParameter = 'NGValueParameter';
        q.prototype = {
            ast: function (a) {
                this.text = a;
                this.tokens = this.lexer.lex(a);
                a = this.program();
                0 !== this.tokens.length && this.throwError('is an unexpected token', this.tokens[0]);
                return a;
            },
            program: function () {
                for (var a = [];;)
                    if (0 < this.tokens.length && !this.peek('}', ')', ';', ']') && a.push(this.expressionStatement()), !this.expect(';'))
                        return {
                            type: q.Program,
                            body: a
                        };
            },
            expressionStatement: function () {
                return {
                    type: q.ExpressionStatement,
                    expression: this.filterChain()
                };
            },
            filterChain: function () {
                for (var a = this.expression(); this.expect('|');)
                    a = this.filter(a);
                return a;
            },
            expression: function () {
                return this.assignment();
            },
            assignment: function () {
                var a = this.ternary();
                this.expect('=') && (a = {
                    type: q.AssignmentExpression,
                    left: a,
                    right: this.assignment(),
                    operator: '='
                });
                return a;
            },
            ternary: function () {
                var a = this.logicalOR(), b, d;
                return this.expect('?') && (b = this.expression(), this.consume(':')) ? (d = this.expression(), {
                    type: q.ConditionalExpression,
                    test: a,
                    alternate: b,
                    consequent: d
                }) : a;
            },
            logicalOR: function () {
                for (var a = this.logicalAND(); this.expect('||');)
                    a = {
                        type: q.LogicalExpression,
                        operator: '||',
                        left: a,
                        right: this.logicalAND()
                    };
                return a;
            },
            logicalAND: function () {
                for (var a = this.equality(); this.expect('&&');)
                    a = {
                        type: q.LogicalExpression,
                        operator: '&&',
                        left: a,
                        right: this.equality()
                    };
                return a;
            },
            equality: function () {
                for (var a = this.relational(), b; b = this.expect('==', '!=', '===', '!==');)
                    a = {
                        type: q.BinaryExpression,
                        operator: b.text,
                        left: a,
                        right: this.relational()
                    };
                return a;
            },
            relational: function () {
                for (var a = this.additive(), b; b = this.expect('<', '>', '<=', '>=');)
                    a = {
                        type: q.BinaryExpression,
                        operator: b.text,
                        left: a,
                        right: this.additive()
                    };
                return a;
            },
            additive: function () {
                for (var a = this.multiplicative(), b; b = this.expect('+', '-');)
                    a = {
                        type: q.BinaryExpression,
                        operator: b.text,
                        left: a,
                        right: this.multiplicative()
                    };
                return a;
            },
            multiplicative: function () {
                for (var a = this.unary(), b; b = this.expect('*', '/', '%');)
                    a = {
                        type: q.BinaryExpression,
                        operator: b.text,
                        left: a,
                        right: this.unary()
                    };
                return a;
            },
            unary: function () {
                var a;
                return (a = this.expect('+', '-', '!')) ? {
                    type: q.UnaryExpression,
                    operator: a.text,
                    prefix: !0,
                    argument: this.unary()
                } : this.primary();
            },
            primary: function () {
                var a;
                this.expect('(') ? (a = this.filterChain(), this.consume(')')) : this.expect('[') ? a = this.arrayDeclaration() : this.expect('{') ? a = this.object() : this.constants.hasOwnProperty(this.peek().text) ? a = Oa(this.constants[this.consume().text]) : this.peek().identifier ? a = this.identifier() : this.peek().constant ? a = this.constant() : this.throwError('not a primary expression', this.peek());
                for (var b; b = this.expect('(', '[', '.');)
                    '(' === b.text ? (a = {
                        type: q.CallExpression,
                        callee: a,
                        arguments: this.parseArguments()
                    }, this.consume(')')) : '[' === b.text ? (a = {
                        type: q.MemberExpression,
                        object: a,
                        property: this.expression(),
                        computed: !0
                    }, this.consume(']')) : '.' === b.text ? a = {
                        type: q.MemberExpression,
                        object: a,
                        property: this.identifier(),
                        computed: !1
                    } : this.throwError('IMPOSSIBLE');
                return a;
            },
            filter: function (a) {
                a = [a];
                for (var b = {
                        type: q.CallExpression,
                        callee: this.identifier(),
                        arguments: a,
                        filter: !0
                    }; this.expect(':');)
                    a.push(this.expression());
                return b;
            },
            parseArguments: function () {
                var a = [];
                if (')' !== this.peekToken().text) {
                    do
                        a.push(this.expression());
                    while (this.expect(','));
                }
                return a;
            },
            identifier: function () {
                var a = this.consume();
                a.identifier || this.throwError('is not a valid identifier', a);
                return {
                    type: q.Identifier,
                    name: a.text
                };
            },
            constant: function () {
                return {
                    type: q.Literal,
                    value: this.consume().value
                };
            },
            arrayDeclaration: function () {
                var a = [];
                if (']' !== this.peekToken().text) {
                    do {
                        if (this.peek(']'))
                            break;
                        a.push(this.expression());
                    } while (this.expect(','));
                }
                this.consume(']');
                return {
                    type: q.ArrayExpression,
                    elements: a
                };
            },
            object: function () {
                var a = [], b;
                if ('}' !== this.peekToken().text) {
                    do {
                        if (this.peek('}'))
                            break;
                        b = {
                            type: q.Property,
                            kind: 'init'
                        };
                        this.peek().constant ? b.key = this.constant() : this.peek().identifier ? b.key = this.identifier() : this.throwError('invalid key', this.peek());
                        this.consume(':');
                        b.value = this.expression();
                        a.push(b);
                    } while (this.expect(','));
                }
                this.consume('}');
                return {
                    type: q.ObjectExpression,
                    properties: a
                };
            },
            throwError: function (a, b) {
                throw ka('syntax', b.text, a, b.index + 1, this.text, this.text.substring(b.index));
            },
            consume: function (a) {
                if (0 === this.tokens.length)
                    throw ka('ueoe', this.text);
                var b = this.expect(a);
                b || this.throwError('is unexpected, expecting [' + a + ']', this.peek());
                return b;
            },
            peekToken: function () {
                if (0 === this.tokens.length)
                    throw ka('ueoe', this.text);
                return this.tokens[0];
            },
            peek: function (a, b, d, c) {
                return this.peekAhead(0, a, b, d, c);
            },
            peekAhead: function (a, b, d, c, e) {
                if (this.tokens.length > a) {
                    a = this.tokens[a];
                    var f = a.text;
                    if (f === b || f === d || f === c || f === e || !(b || d || c || e))
                        return a;
                }
                return !1;
            },
            expect: function (a, b, d, c) {
                return (a = this.peek(a, b, d, c)) ? (this.tokens.shift(), a) : !1;
            },
            constants: {
                'true': {
                    type: q.Literal,
                    value: !0
                },
                'false': {
                    type: q.Literal,
                    value: !1
                },
                'null': {
                    type: q.Literal,
                    value: null
                },
                undefined: {
                    type: q.Literal,
                    value: v
                },
                'this': { type: q.ThisExpression },
                $locals: { type: q.LocalsExpression }
            }
        };
        ud.prototype = {
            compile: function (a, b) {
                var d = this, c = this.astBuilder.ast(a);
                this.state = {
                    nextId: 0,
                    filters: {},
                    expensiveChecks: b,
                    fn: {
                        vars: [],
                        body: [],
                        own: {}
                    },
                    assign: {
                        vars: [],
                        body: [],
                        own: {}
                    },
                    inputs: []
                };
                R(c, d.$filter);
                var e = '', f;
                this.stage = 'assign';
                if (f = sd(c))
                    this.state.computing = 'assign', e = this.nextId(), this.recurse(f, e), this.return_(e), e = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
                f = qd(c.body);
                d.stage = 'inputs';
                n(f, function (a, b) {
                    var c = 'fn' + b;
                    d.state[c] = {
                        vars: [],
                        body: [],
                        own: {}
                    };
                    d.state.computing = c;
                    var e = d.nextId();
                    d.recurse(a, e);
                    d.return_(e);
                    d.state.inputs.push(c);
                    a.watchId = b;
                });
                this.state.computing = 'fn';
                this.stage = 'main';
                this.recurse(c);
                e = '"' + this.USE + ' ' + this.STRICT + '";\n' + this.filterPrefix() + 'var fn=' + this.generateFunction('fn', 's,l,a,i') + e + this.watchFns() + 'return fn;';
                e = new Function('$filter', 'ensureSafeMemberName', 'ensureSafeObject', 'ensureSafeFunction', 'getStringValue', 'ensureSafeAssignContext', 'ifDefined', 'plus', 'text', e)(this.$filter, Xa, Aa, od, hg, Ib, lg, pd, a);
                this.state = this.stage = v;
                e.literal = td(c);
                e.constant = c.constant;
                return e;
            },
            USE: 'use',
            STRICT: 'strict',
            watchFns: function () {
                var a = [], b = this.state.inputs, d = this;
                n(b, function (b) {
                    a.push('var ' + b + '=' + d.generateFunction(b, 's'));
                });
                b.length && a.push('fn.inputs=[' + b.join(',') + '];');
                return a.join('');
            },
            generateFunction: function (a, b) {
                return 'function(' + b + '){' + this.varsPrefix(a) + this.body(a) + '};';
            },
            filterPrefix: function () {
                var a = [], b = this;
                n(this.state.filters, function (d, c) {
                    a.push(d + '=$filter(' + b.escape(c) + ')');
                });
                return a.length ? 'var ' + a.join(',') + ';' : '';
            },
            varsPrefix: function (a) {
                return this.state[a].vars.length ? 'var ' + this.state[a].vars.join(',') + ';' : '';
            },
            body: function (a) {
                return this.state[a].body.join('');
            },
            recurse: function (a, b, d, c, e, f) {
                var g, h, k = this, l, m;
                c = c || B;
                if (!f && y(a.watchId))
                    b = b || this.nextId(), this.if_('i', this.lazyAssign(b, this.computedMember('i', a.watchId)), this.lazyRecurse(a, b, d, c, e, !0));
                else
                    switch (a.type) {
                    case q.Program:
                        n(a.body, function (b, c) {
                            k.recurse(b.expression, v, v, function (a) {
                                h = a;
                            });
                            c !== a.body.length - 1 ? k.current().body.push(h, ';') : k.return_(h);
                        });
                        break;
                    case q.Literal:
                        m = this.escape(a.value);
                        this.assign(b, m);
                        c(m);
                        break;
                    case q.UnaryExpression:
                        this.recurse(a.argument, v, v, function (a) {
                            h = a;
                        });
                        m = a.operator + '(' + this.ifDefined(h, 0) + ')';
                        this.assign(b, m);
                        c(m);
                        break;
                    case q.BinaryExpression:
                        this.recurse(a.left, v, v, function (a) {
                            g = a;
                        });
                        this.recurse(a.right, v, v, function (a) {
                            h = a;
                        });
                        m = '+' === a.operator ? this.plus(g, h) : '-' === a.operator ? this.ifDefined(g, 0) + a.operator + this.ifDefined(h, 0) : '(' + g + ')' + a.operator + '(' + h + ')';
                        this.assign(b, m);
                        c(m);
                        break;
                    case q.LogicalExpression:
                        b = b || this.nextId();
                        k.recurse(a.left, b);
                        k.if_('&&' === a.operator ? b : k.not(b), k.lazyRecurse(a.right, b));
                        c(b);
                        break;
                    case q.ConditionalExpression:
                        b = b || this.nextId();
                        k.recurse(a.test, b);
                        k.if_(b, k.lazyRecurse(a.alternate, b), k.lazyRecurse(a.consequent, b));
                        c(b);
                        break;
                    case q.Identifier:
                        b = b || this.nextId();
                        d && (d.context = 'inputs' === k.stage ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', a.name) + '?l:s'), d.computed = !1, d.name = a.name);
                        Xa(a.name);
                        k.if_('inputs' === k.stage || k.not(k.getHasOwnProperty('l', a.name)), function () {
                            k.if_('inputs' === k.stage || 's', function () {
                                e && 1 !== e && k.if_(k.not(k.nonComputedMember('s', a.name)), k.lazyAssign(k.nonComputedMember('s', a.name), '{}'));
                                k.assign(b, k.nonComputedMember('s', a.name));
                            });
                        }, b && k.lazyAssign(b, k.nonComputedMember('l', a.name)));
                        (k.state.expensiveChecks || Jb(a.name)) && k.addEnsureSafeObject(b);
                        c(b);
                        break;
                    case q.MemberExpression:
                        g = d && (d.context = this.nextId()) || this.nextId();
                        b = b || this.nextId();
                        k.recurse(a.object, g, v, function () {
                            k.if_(k.notNull(g), function () {
                                e && 1 !== e && k.addEnsureSafeAssignContext(g);
                                if (a.computed)
                                    h = k.nextId(), k.recurse(a.property, h), k.getStringValue(h), k.addEnsureSafeMemberName(h), e && 1 !== e && k.if_(k.not(k.computedMember(g, h)), k.lazyAssign(k.computedMember(g, h), '{}')), m = k.ensureSafeObject(k.computedMember(g, h)), k.assign(b, m), d && (d.computed = !0, d.name = h);
                                else {
                                    Xa(a.property.name);
                                    e && 1 !== e && k.if_(k.not(k.nonComputedMember(g, a.property.name)), k.lazyAssign(k.nonComputedMember(g, a.property.name), '{}'));
                                    m = k.nonComputedMember(g, a.property.name);
                                    if (k.state.expensiveChecks || Jb(a.property.name))
                                        m = k.ensureSafeObject(m);
                                    k.assign(b, m);
                                    d && (d.computed = !1, d.name = a.property.name);
                                }
                            }, function () {
                                k.assign(b, 'undefined');
                            });
                            c(b);
                        }, !!e);
                        break;
                    case q.CallExpression:
                        b = b || this.nextId();
                        a.filter ? (h = k.filter(a.callee.name), l = [], n(a.arguments, function (a) {
                            var b = k.nextId();
                            k.recurse(a, b);
                            l.push(b);
                        }), m = h + '(' + l.join(',') + ')', k.assign(b, m), c(b)) : (h = k.nextId(), g = {}, l = [], k.recurse(a.callee, h, g, function () {
                            k.if_(k.notNull(h), function () {
                                k.addEnsureSafeFunction(h);
                                n(a.arguments, function (a) {
                                    k.recurse(a, k.nextId(), v, function (a) {
                                        l.push(k.ensureSafeObject(a));
                                    });
                                });
                                g.name ? (k.state.expensiveChecks || k.addEnsureSafeObject(g.context), m = k.member(g.context, g.name, g.computed) + '(' + l.join(',') + ')') : m = h + '(' + l.join(',') + ')';
                                m = k.ensureSafeObject(m);
                                k.assign(b, m);
                            }, function () {
                                k.assign(b, 'undefined');
                            });
                            c(b);
                        }));
                        break;
                    case q.AssignmentExpression:
                        h = this.nextId();
                        g = {};
                        if (!rd(a.left))
                            throw ka('lval');
                        this.recurse(a.left, v, g, function () {
                            k.if_(k.notNull(g.context), function () {
                                k.recurse(a.right, h);
                                k.addEnsureSafeObject(k.member(g.context, g.name, g.computed));
                                k.addEnsureSafeAssignContext(g.context);
                                m = k.member(g.context, g.name, g.computed) + a.operator + h;
                                k.assign(b, m);
                                c(b || m);
                            });
                        }, 1);
                        break;
                    case q.ArrayExpression:
                        l = [];
                        n(a.elements, function (a) {
                            k.recurse(a, k.nextId(), v, function (a) {
                                l.push(a);
                            });
                        });
                        m = '[' + l.join(',') + ']';
                        this.assign(b, m);
                        c(m);
                        break;
                    case q.ObjectExpression:
                        l = [];
                        n(a.properties, function (a) {
                            k.recurse(a.value, k.nextId(), v, function (b) {
                                l.push(k.escape(a.key.type === q.Identifier ? a.key.name : '' + a.key.value) + ':' + b);
                            });
                        });
                        m = '{' + l.join(',') + '}';
                        this.assign(b, m);
                        c(m);
                        break;
                    case q.ThisExpression:
                        this.assign(b, 's');
                        c('s');
                        break;
                    case q.LocalsExpression:
                        this.assign(b, 'l');
                        c('l');
                        break;
                    case q.NGValueParameter:
                        this.assign(b, 'v'), c('v');
                    }
            },
            getHasOwnProperty: function (a, b) {
                var d = a + '.' + b, c = this.current().own;
                c.hasOwnProperty(d) || (c[d] = this.nextId(!1, a + '&&(' + this.escape(b) + ' in ' + a + ')'));
                return c[d];
            },
            assign: function (a, b) {
                if (a)
                    return this.current().body.push(a, '=', b, ';'), a;
            },
            filter: function (a) {
                this.state.filters.hasOwnProperty(a) || (this.state.filters[a] = this.nextId(!0));
                return this.state.filters[a];
            },
            ifDefined: function (a, b) {
                return 'ifDefined(' + a + ',' + this.escape(b) + ')';
            },
            plus: function (a, b) {
                return 'plus(' + a + ',' + b + ')';
            },
            return_: function (a) {
                this.current().body.push('return ', a, ';');
            },
            if_: function (a, b, d) {
                if (!0 === a)
                    b();
                else {
                    var c = this.current().body;
                    c.push('if(', a, '){');
                    b();
                    c.push('}');
                    d && (c.push('else{'), d(), c.push('}'));
                }
            },
            not: function (a) {
                return '!(' + a + ')';
            },
            notNull: function (a) {
                return a + '!=null';
            },
            nonComputedMember: function (a, b) {
                return a + '.' + b;
            },
            computedMember: function (a, b) {
                return a + '[' + b + ']';
            },
            member: function (a, b, d) {
                return d ? this.computedMember(a, b) : this.nonComputedMember(a, b);
            },
            addEnsureSafeObject: function (a) {
                this.current().body.push(this.ensureSafeObject(a), ';');
            },
            addEnsureSafeMemberName: function (a) {
                this.current().body.push(this.ensureSafeMemberName(a), ';');
            },
            addEnsureSafeFunction: function (a) {
                this.current().body.push(this.ensureSafeFunction(a), ';');
            },
            addEnsureSafeAssignContext: function (a) {
                this.current().body.push(this.ensureSafeAssignContext(a), ';');
            },
            ensureSafeObject: function (a) {
                return 'ensureSafeObject(' + a + ',text)';
            },
            ensureSafeMemberName: function (a) {
                return 'ensureSafeMemberName(' + a + ',text)';
            },
            ensureSafeFunction: function (a) {
                return 'ensureSafeFunction(' + a + ',text)';
            },
            getStringValue: function (a) {
                this.assign(a, 'getStringValue(' + a + ')');
            },
            ensureSafeAssignContext: function (a) {
                return 'ensureSafeAssignContext(' + a + ',text)';
            },
            lazyRecurse: function (a, b, d, c, e, f) {
                var g = this;
                return function () {
                    g.recurse(a, b, d, c, e, f);
                };
            },
            lazyAssign: function (a, b) {
                var d = this;
                return function () {
                    d.assign(a, b);
                };
            },
            stringEscapeRegex: /[^ a-zA-Z0-9]/g,
            stringEscapeFn: function (a) {
                return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            },
            escape: function (a) {
                if (F(a))
                    return '\'' + a.replace(this.stringEscapeRegex, this.stringEscapeFn) + '\'';
                if (N(a))
                    return a.toString();
                if (!0 === a)
                    return 'true';
                if (!1 === a)
                    return 'false';
                if (null === a)
                    return 'null';
                if ('undefined' === typeof a)
                    return 'undefined';
                throw ka('esc');
            },
            nextId: function (a, b) {
                var d = 'v' + this.state.nextId++;
                a || this.current().vars.push(d + (b ? '=' + b : ''));
                return d;
            },
            current: function () {
                return this.state[this.state.computing];
            }
        };
        vd.prototype = {
            compile: function (a, b) {
                var d = this, c = this.astBuilder.ast(a);
                this.expression = a;
                this.expensiveChecks = b;
                R(c, d.$filter);
                var e, f;
                if (e = sd(c))
                    f = this.recurse(e);
                e = qd(c.body);
                var g;
                e && (g = [], n(e, function (a, b) {
                    var c = d.recurse(a);
                    a.input = c;
                    g.push(c);
                    a.watchId = b;
                }));
                var h = [];
                n(c.body, function (a) {
                    h.push(d.recurse(a.expression));
                });
                e = 0 === c.body.length ? function () {
                } : 1 === c.body.length ? h[0] : function (a, b) {
                    var c;
                    n(h, function (d) {
                        c = d(a, b);
                    });
                    return c;
                };
                f && (e.assign = function (a, b, c) {
                    return f(a, c, b);
                });
                g && (e.inputs = g);
                e.literal = td(c);
                e.constant = c.constant;
                return e;
            },
            recurse: function (a, b, d) {
                var c, e, f = this, g;
                if (a.input)
                    return this.inputs(a.input, a.watchId);
                switch (a.type) {
                case q.Literal:
                    return this.value(a.value, b);
                case q.UnaryExpression:
                    return e = this.recurse(a.argument), this['unary' + a.operator](e, b);
                case q.BinaryExpression:
                    return c = this.recurse(a.left), e = this.recurse(a.right), this['binary' + a.operator](c, e, b);
                case q.LogicalExpression:
                    return c = this.recurse(a.left), e = this.recurse(a.right), this['binary' + a.operator](c, e, b);
                case q.ConditionalExpression:
                    return this['ternary?:'](this.recurse(a.test), this.recurse(a.alternate), this.recurse(a.consequent), b);
                case q.Identifier:
                    return Xa(a.name, f.expression), f.identifier(a.name, f.expensiveChecks || Jb(a.name), b, d, f.expression);
                case q.MemberExpression:
                    return c = this.recurse(a.object, !1, !!d), a.computed || (Xa(a.property.name, f.expression), e = a.property.name), a.computed && (e = this.recurse(a.property)), a.computed ? this.computedMember(c, e, b, d, f.expression) : this.nonComputedMember(c, e, f.expensiveChecks, b, d, f.expression);
                case q.CallExpression:
                    return g = [], n(a.arguments, function (a) {
                        g.push(f.recurse(a));
                    }), a.filter && (e = this.$filter(a.callee.name)), a.filter || (e = this.recurse(a.callee, !0)), a.filter ? function (a, c, d, f) {
                        for (var r = [], n = 0; n < g.length; ++n)
                            r.push(g[n](a, c, d, f));
                        a = e.apply(v, r, f);
                        return b ? {
                            context: v,
                            name: v,
                            value: a
                        } : a;
                    } : function (a, c, d, m) {
                        var r = e(a, c, d, m), n;
                        if (null != r.value) {
                            Aa(r.context, f.expression);
                            od(r.value, f.expression);
                            n = [];
                            for (var q = 0; q < g.length; ++q)
                                n.push(Aa(g[q](a, c, d, m), f.expression));
                            n = Aa(r.value.apply(r.context, n), f.expression);
                        }
                        return b ? { value: n } : n;
                    };
                case q.AssignmentExpression:
                    return c = this.recurse(a.left, !0, 1), e = this.recurse(a.right), function (a, d, g, m) {
                        var r = c(a, d, g, m);
                        a = e(a, d, g, m);
                        Aa(r.value, f.expression);
                        Ib(r.context);
                        r.context[r.name] = a;
                        return b ? { value: a } : a;
                    };
                case q.ArrayExpression:
                    return g = [], n(a.elements, function (a) {
                        g.push(f.recurse(a));
                    }), function (a, c, d, e) {
                        for (var f = [], n = 0; n < g.length; ++n)
                            f.push(g[n](a, c, d, e));
                        return b ? { value: f } : f;
                    };
                case q.ObjectExpression:
                    return g = [], n(a.properties, function (a) {
                        g.push({
                            key: a.key.type === q.Identifier ? a.key.name : '' + a.key.value,
                            value: f.recurse(a.value)
                        });
                    }), function (a, c, d, e) {
                        for (var f = {}, n = 0; n < g.length; ++n)
                            f[g[n].key] = g[n].value(a, c, d, e);
                        return b ? { value: f } : f;
                    };
                case q.ThisExpression:
                    return function (a) {
                        return b ? { value: a } : a;
                    };
                case q.LocalsExpression:
                    return function (a, c) {
                        return b ? { value: c } : c;
                    };
                case q.NGValueParameter:
                    return function (a, c, d, e) {
                        return b ? { value: d } : d;
                    };
                }
            },
            'unary+': function (a, b) {
                return function (d, c, e, f) {
                    d = a(d, c, e, f);
                    d = y(d) ? +d : 0;
                    return b ? { value: d } : d;
                };
            },
            'unary-': function (a, b) {
                return function (d, c, e, f) {
                    d = a(d, c, e, f);
                    d = y(d) ? -d : 0;
                    return b ? { value: d } : d;
                };
            },
            'unary!': function (a, b) {
                return function (d, c, e, f) {
                    d = !a(d, c, e, f);
                    return b ? { value: d } : d;
                };
            },
            'binary+': function (a, b, d) {
                return function (c, e, f, g) {
                    var h = a(c, e, f, g);
                    c = b(c, e, f, g);
                    h = pd(h, c);
                    return d ? { value: h } : h;
                };
            },
            'binary-': function (a, b, d) {
                return function (c, e, f, g) {
                    var h = a(c, e, f, g);
                    c = b(c, e, f, g);
                    h = (y(h) ? h : 0) - (y(c) ? c : 0);
                    return d ? { value: h } : h;
                };
            },
            'binary*': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) * b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary/': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) / b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary%': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) % b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary===': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) === b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary!==': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) !== b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary==': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) == b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary!=': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) != b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary<': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) < b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary>': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) > b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary<=': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) <= b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary>=': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) >= b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary&&': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) && b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'binary||': function (a, b, d) {
                return function (c, e, f, g) {
                    c = a(c, e, f, g) || b(c, e, f, g);
                    return d ? { value: c } : c;
                };
            },
            'ternary?:': function (a, b, d, c) {
                return function (e, f, g, h) {
                    e = a(e, f, g, h) ? b(e, f, g, h) : d(e, f, g, h);
                    return c ? { value: e } : e;
                };
            },
            value: function (a, b) {
                return function () {
                    return b ? {
                        context: v,
                        name: v,
                        value: a
                    } : a;
                };
            },
            identifier: function (a, b, d, c, e) {
                return function (f, g, h, k) {
                    f = g && a in g ? g : f;
                    c && 1 !== c && f && !f[a] && (f[a] = {});
                    g = f ? f[a] : v;
                    b && Aa(g, e);
                    return d ? {
                        context: f,
                        name: a,
                        value: g
                    } : g;
                };
            },
            computedMember: function (a, b, d, c, e) {
                return function (f, g, h, k) {
                    var l = a(f, g, h, k), m, n;
                    null != l && (m = b(f, g, h, k), m += '', Xa(m, e), c && 1 !== c && (Ib(l), l && !l[m] && (l[m] = {})), n = l[m], Aa(n, e));
                    return d ? {
                        context: l,
                        name: m,
                        value: n
                    } : n;
                };
            },
            nonComputedMember: function (a, b, d, c, e, f) {
                return function (g, h, k, l) {
                    g = a(g, h, k, l);
                    e && 1 !== e && (Ib(g), g && !g[b] && (g[b] = {}));
                    h = null != g ? g[b] : v;
                    (d || Jb(b)) && Aa(h, f);
                    return c ? {
                        context: g,
                        name: b,
                        value: h
                    } : h;
                };
            },
            inputs: function (a, b) {
                return function (d, c, e, f) {
                    return f ? f[b] : a(d, c, e);
                };
            }
        };
        var jc = function (a, b, d) {
            this.lexer = a;
            this.$filter = b;
            this.options = d;
            this.ast = new q(this.lexer);
            this.astCompiler = d.csp ? new vd(this.ast, b) : new ud(this.ast, b);
        };
        jc.prototype = {
            constructor: jc,
            parse: function (a) {
                return this.astCompiler.compile(a, this.options.expensiveChecks);
            }
        };
        var mg = Object.prototype.valueOf, Ba = H('$sce'), qa = {
                HTML: 'html',
                CSS: 'css',
                URL: 'url',
                RESOURCE_URL: 'resourceUrl',
                JS: 'js'
            }, ja = H('$compile'), Y = W.createElement('a'), zd = za(O.location.href);
        Ad.$inject = ['$document'];
        Lc.$inject = ['$provide'];
        var Hd = 22, Gd = '.', lc = '0';
        Bd.$inject = ['$locale'];
        Dd.$inject = ['$locale'];
        var yg = {
                yyyy: aa('FullYear', 4),
                yy: aa('FullYear', 2, 0, !0),
                y: aa('FullYear', 1),
                MMMM: Lb('Month'),
                MMM: Lb('Month', !0),
                MM: aa('Month', 2, 1),
                M: aa('Month', 1, 1),
                dd: aa('Date', 2),
                d: aa('Date', 1),
                HH: aa('Hours', 2),
                H: aa('Hours', 1),
                hh: aa('Hours', 2, -12),
                h: aa('Hours', 1, -12),
                mm: aa('Minutes', 2),
                m: aa('Minutes', 1),
                ss: aa('Seconds', 2),
                s: aa('Seconds', 1),
                sss: aa('Milliseconds', 3),
                EEEE: Lb('Day'),
                EEE: Lb('Day', !0),
                a: function (a, b) {
                    return 12 > a.getHours() ? b.AMPMS[0] : b.AMPMS[1];
                },
                Z: function (a, b, d) {
                    a = -1 * d;
                    return a = (0 <= a ? '+' : '') + (Kb(Math[0 < a ? 'floor' : 'ceil'](a / 60), 2) + Kb(Math.abs(a % 60), 2));
                },
                ww: Jd(2),
                w: Jd(1),
                G: mc,
                GG: mc,
                GGG: mc,
                GGGG: function (a, b) {
                    return 0 >= a.getFullYear() ? b.ERANAMES[0] : b.ERANAMES[1];
                }
            }, xg = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/, wg = /^\-?\d+$/;
        Cd.$inject = ['$locale'];
        var rg = ba(G), sg = ba(ub);
        Ed.$inject = ['$parse'];
        var oe = ba({
                restrict: 'E',
                compile: function (a, b) {
                    if (!b.href && !b.xlinkHref)
                        return function (a, b) {
                            if ('a' === b[0].nodeName.toLowerCase()) {
                                var e = '[object SVGAnimatedString]' === ga.call(b.prop('href')) ? 'xlink:href' : 'href';
                                b.on('click', function (a) {
                                    b.attr(e) || a.preventDefault();
                                });
                            }
                        };
                }
            }), vb = {};
        n(Db, function (a, b) {
            function d(a, d, e) {
                a.$watch(e[c], function (a) {
                    e.$set(b, !!a);
                });
            }
            if ('multiple' != a) {
                var c = va('ng-' + b), e = d;
                'checked' === a && (e = function (a, b, e) {
                    e.ngModel !== e[c] && d(a, b, e);
                });
                vb[c] = function () {
                    return {
                        restrict: 'A',
                        priority: 100,
                        link: e
                    };
                };
            }
        });
        n(cd, function (a, b) {
            vb[b] = function () {
                return {
                    priority: 100,
                    link: function (a, c, e) {
                        if ('ngPattern' === b && '/' == e.ngPattern.charAt(0) && (c = e.ngPattern.match(Ag))) {
                            e.$set('ngPattern', new RegExp(c[1], c[2]));
                            return;
                        }
                        a.$watch(e[b], function (a) {
                            e.$set(b, a);
                        });
                    }
                };
            };
        });
        n([
            'src',
            'srcset',
            'href'
        ], function (a) {
            var b = va('ng-' + a);
            vb[b] = function () {
                return {
                    priority: 99,
                    link: function (d, c, e) {
                        var f = a, g = a;
                        'href' === a && '[object SVGAnimatedString]' === ga.call(c.prop('href')) && (g = 'xlinkHref', e.$attr[g] = 'xlink:href', f = null);
                        e.$observe(b, function (b) {
                            b ? (e.$set(g, b), xa && f && c.prop(f, e[g])) : 'href' === a && e.$set(g, null);
                        });
                    }
                };
            };
        });
        var Mb = {
            $addControl: B,
            $$renameControl: function (a, b) {
                a.$name = b;
            },
            $removeControl: B,
            $setValidity: B,
            $setDirty: B,
            $setPristine: B,
            $setSubmitted: B
        };
        Kd.$inject = [
            '$element',
            '$attrs',
            '$scope',
            '$animate',
            '$interpolate'
        ];
        var Sd = function (a) {
                return [
                    '$timeout',
                    '$parse',
                    function (b, d) {
                        function c(a) {
                            return '' === a ? d('this[""]').assign : d(a).assign || B;
                        }
                        return {
                            name: 'form',
                            restrict: a ? 'EAC' : 'E',
                            require: [
                                'form',
                                '^^?form'
                            ],
                            controller: Kd,
                            compile: function (d, f) {
                                d.addClass(Ya).addClass(ob);
                                var g = f.name ? 'name' : a && f.ngForm ? 'ngForm' : !1;
                                return {
                                    pre: function (a, d, e, f) {
                                        var n = f[0];
                                        if (!('action' in e)) {
                                            var s = function (b) {
                                                a.$apply(function () {
                                                    n.$commitViewValue();
                                                    n.$setSubmitted();
                                                });
                                                b.preventDefault();
                                            };
                                            d[0].addEventListener('submit', s, !1);
                                            d.on('$destroy', function () {
                                                b(function () {
                                                    d[0].removeEventListener('submit', s, !1);
                                                }, 0, !1);
                                            });
                                        }
                                        (f[1] || n.$$parentForm).$addControl(n);
                                        var q = g ? c(n.$name) : B;
                                        g && (q(a, n), e.$observe(g, function (b) {
                                            n.$name !== b && (q(a, v), n.$$parentForm.$$renameControl(n, b), q = c(n.$name), q(a, n));
                                        }));
                                        d.on('$destroy', function () {
                                            n.$$parentForm.$removeControl(n);
                                            q(a, v);
                                            T(n, Mb);
                                        });
                                    }
                                };
                            }
                        };
                    }
                ];
            }, pe = Sd(), Ce = Sd(!0), zg = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/, Ig = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i, Jg = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i, Kg = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/, Td = /^(\d{4})-(\d{2})-(\d{2})$/, Ud = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, pc = /^(\d{4})-W(\d\d)$/, Vd = /^(\d{4})-(\d\d)$/, Wd = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, Xd = {
                text: function (a, b, d, c, e, f) {
                    lb(a, b, d, c, e, f);
                    nc(c);
                },
                date: mb('date', Td, Ob(Td, [
                    'yyyy',
                    'MM',
                    'dd'
                ]), 'yyyy-MM-dd'),
                'datetime-local': mb('datetimelocal', Ud, Ob(Ud, 'yyyy MM dd HH mm ss sss'.split(' ')), 'yyyy-MM-ddTHH:mm:ss.sss'),
                time: mb('time', Wd, Ob(Wd, [
                    'HH',
                    'mm',
                    'ss',
                    'sss'
                ]), 'HH:mm:ss.sss'),
                week: mb('week', pc, function (a, b) {
                    if (V(a))
                        return a;
                    if (F(a)) {
                        pc.lastIndex = 0;
                        var d = pc.exec(a);
                        if (d) {
                            var c = +d[1], e = +d[2], f = d = 0, g = 0, h = 0, k = Id(c), e = 7 * (e - 1);
                            b && (d = b.getHours(), f = b.getMinutes(), g = b.getSeconds(), h = b.getMilliseconds());
                            return new Date(c, 0, k.getDate() + e, d, f, g, h);
                        }
                    }
                    return NaN;
                }, 'yyyy-Www'),
                month: mb('month', Vd, Ob(Vd, [
                    'yyyy',
                    'MM'
                ]), 'yyyy-MM'),
                number: function (a, b, d, c, e, f) {
                    Md(a, b, d, c);
                    lb(a, b, d, c, e, f);
                    c.$$parserName = 'number';
                    c.$parsers.push(function (a) {
                        return c.$isEmpty(a) ? null : Kg.test(a) ? parseFloat(a) : v;
                    });
                    c.$formatters.push(function (a) {
                        if (!c.$isEmpty(a)) {
                            if (!N(a))
                                throw nb('numfmt', a);
                            a = a.toString();
                        }
                        return a;
                    });
                    if (y(d.min) || d.ngMin) {
                        var g;
                        c.$validators.min = function (a) {
                            return c.$isEmpty(a) || x(g) || a >= g;
                        };
                        d.$observe('min', function (a) {
                            y(a) && !N(a) && (a = parseFloat(a, 10));
                            g = N(a) && !isNaN(a) ? a : v;
                            c.$validate();
                        });
                    }
                    if (y(d.max) || d.ngMax) {
                        var h;
                        c.$validators.max = function (a) {
                            return c.$isEmpty(a) || x(h) || a <= h;
                        };
                        d.$observe('max', function (a) {
                            y(a) && !N(a) && (a = parseFloat(a, 10));
                            h = N(a) && !isNaN(a) ? a : v;
                            c.$validate();
                        });
                    }
                },
                url: function (a, b, d, c, e, f) {
                    lb(a, b, d, c, e, f);
                    nc(c);
                    c.$$parserName = 'url';
                    c.$validators.url = function (a, b) {
                        var d = a || b;
                        return c.$isEmpty(d) || Ig.test(d);
                    };
                },
                email: function (a, b, d, c, e, f) {
                    lb(a, b, d, c, e, f);
                    nc(c);
                    c.$$parserName = 'email';
                    c.$validators.email = function (a, b) {
                        var d = a || b;
                        return c.$isEmpty(d) || Jg.test(d);
                    };
                },
                radio: function (a, b, d, c) {
                    x(d.name) && b.attr('name', ++pb);
                    b.on('click', function (a) {
                        b[0].checked && c.$setViewValue(d.value, a && a.type);
                    });
                    c.$render = function () {
                        b[0].checked = d.value == c.$viewValue;
                    };
                    d.$observe('value', c.$render);
                },
                checkbox: function (a, b, d, c, e, f, g, h) {
                    var k = Nd(h, a, 'ngTrueValue', d.ngTrueValue, !0), l = Nd(h, a, 'ngFalseValue', d.ngFalseValue, !1);
                    b.on('click', function (a) {
                        c.$setViewValue(b[0].checked, a && a.type);
                    });
                    c.$render = function () {
                        b[0].checked = c.$viewValue;
                    };
                    c.$isEmpty = function (a) {
                        return !1 === a;
                    };
                    c.$formatters.push(function (a) {
                        return oa(a, k);
                    });
                    c.$parsers.push(function (a) {
                        return a ? k : l;
                    });
                },
                hidden: B,
                button: B,
                submit: B,
                reset: B,
                file: B
            }, Fc = [
                '$browser',
                '$sniffer',
                '$filter',
                '$parse',
                function (a, b, d, c) {
                    return {
                        restrict: 'E',
                        require: ['?ngModel'],
                        link: {
                            pre: function (e, f, g, h) {
                                h[0] && (Xd[G(g.type)] || Xd.text)(e, f, g, h[0], b, a, d, c);
                            }
                        }
                    };
                }
            ], Lg = /^(true|false|\d+)$/, Ue = function () {
                return {
                    restrict: 'A',
                    priority: 100,
                    compile: function (a, b) {
                        return Lg.test(b.ngValue) ? function (a, b, e) {
                            e.$set('value', a.$eval(e.ngValue));
                        } : function (a, b, e) {
                            a.$watch(e.ngValue, function (a) {
                                e.$set('value', a);
                            });
                        };
                    }
                };
            }, ue = [
                '$compile',
                function (a) {
                    return {
                        restrict: 'AC',
                        compile: function (b) {
                            a.$$addBindingClass(b);
                            return function (b, c, e) {
                                a.$$addBindingInfo(c, e.ngBind);
                                c = c[0];
                                b.$watch(e.ngBind, function (a) {
                                    c.textContent = x(a) ? '' : a;
                                });
                            };
                        }
                    };
                }
            ], we = [
                '$interpolate',
                '$compile',
                function (a, b) {
                    return {
                        compile: function (d) {
                            b.$$addBindingClass(d);
                            return function (c, d, f) {
                                c = a(d.attr(f.$attr.ngBindTemplate));
                                b.$$addBindingInfo(d, c.expressions);
                                d = d[0];
                                f.$observe('ngBindTemplate', function (a) {
                                    d.textContent = x(a) ? '' : a;
                                });
                            };
                        }
                    };
                }
            ], ve = [
                '$sce',
                '$parse',
                '$compile',
                function (a, b, d) {
                    return {
                        restrict: 'A',
                        compile: function (c, e) {
                            var f = b(e.ngBindHtml), g = b(e.ngBindHtml, function (a) {
                                    return (a || '').toString();
                                });
                            d.$$addBindingClass(c);
                            return function (b, c, e) {
                                d.$$addBindingInfo(c, e.ngBindHtml);
                                b.$watch(g, function () {
                                    c.html(a.getTrustedHtml(f(b)) || '');
                                });
                            };
                        }
                    };
                }
            ], Te = ba({
                restrict: 'A',
                require: 'ngModel',
                link: function (a, b, d, c) {
                    c.$viewChangeListeners.push(function () {
                        a.$eval(d.ngChange);
                    });
                }
            }), xe = oc('', !0), ze = oc('Odd', 0), ye = oc('Even', 1), Ae = Ma({
                compile: function (a, b) {
                    b.$set('ngCloak', v);
                    a.removeClass('ng-cloak');
                }
            }), Be = [function () {
                    return {
                        restrict: 'A',
                        scope: !0,
                        controller: '@',
                        priority: 500
                    };
                }], Kc = {}, Mg = {
                blur: !0,
                focus: !0
            };
        n('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '), function (a) {
            var b = va('ng-' + a);
            Kc[b] = [
                '$parse',
                '$rootScope',
                function (d, c) {
                    return {
                        restrict: 'A',
                        compile: function (e, f) {
                            var g = d(f[b], null, !0);
                            return function (b, d) {
                                d.on(a, function (d) {
                                    var e = function () {
                                        g(b, { $event: d });
                                    };
                                    Mg[a] && c.$$phase ? b.$evalAsync(e) : b.$apply(e);
                                });
                            };
                        }
                    };
                }
            ];
        });
        var Ee = [
                '$animate',
                function (a) {
                    return {
                        multiElement: !0,
                        transclude: 'element',
                        priority: 600,
                        terminal: !0,
                        restrict: 'A',
                        $$tlb: !0,
                        link: function (b, d, c, e, f) {
                            var g, h, k;
                            b.$watch(c.ngIf, function (b) {
                                b ? h || f(function (b, e) {
                                    h = e;
                                    b[b.length++] = W.createComment(' end ngIf: ' + c.ngIf + ' ');
                                    g = { clone: b };
                                    a.enter(b, d.parent(), d);
                                }) : (k && (k.remove(), k = null), h && (h.$destroy(), h = null), g && (k = tb(g.clone), a.leave(k).then(function () {
                                    k = null;
                                }), g = null));
                            });
                        }
                    };
                }
            ], Fe = [
                '$templateRequest',
                '$anchorScroll',
                '$animate',
                function (a, b, d) {
                    return {
                        restrict: 'ECA',
                        priority: 400,
                        terminal: !0,
                        transclude: 'element',
                        controller: ia.noop,
                        compile: function (c, e) {
                            var f = e.ngInclude || e.src, g = e.onload || '', h = e.autoscroll;
                            return function (c, e, m, n, s) {
                                var q = 0, v, t, p, w = function () {
                                        t && (t.remove(), t = null);
                                        v && (v.$destroy(), v = null);
                                        p && (d.leave(p).then(function () {
                                            t = null;
                                        }), t = p, p = null);
                                    };
                                c.$watch(f, function (f) {
                                    var m = function () {
                                            !y(h) || h && !c.$eval(h) || b();
                                        }, z = ++q;
                                    f ? (a(f, !0).then(function (a) {
                                        if (!c.$$destroyed && z === q) {
                                            var b = c.$new();
                                            n.template = a;
                                            a = s(b, function (a) {
                                                w();
                                                d.enter(a, null, e).then(m);
                                            });
                                            v = b;
                                            p = a;
                                            v.$emit('$includeContentLoaded', f);
                                            c.$eval(g);
                                        }
                                    }, function () {
                                        c.$$destroyed || z !== q || (w(), c.$emit('$includeContentError', f));
                                    }), c.$emit('$includeContentRequested', f)) : (w(), n.template = null);
                                });
                            };
                        }
                    };
                }
            ], We = [
                '$compile',
                function (a) {
                    return {
                        restrict: 'ECA',
                        priority: -400,
                        require: 'ngInclude',
                        link: function (b, d, c, e) {
                            ga.call(d[0]).match(/SVG/) ? (d.empty(), a(Nc(e.template, W).childNodes)(b, function (a) {
                                d.append(a);
                            }, { futureParentElement: d })) : (d.html(e.template), a(d.contents())(b));
                        }
                    };
                }
            ], Ge = Ma({
                priority: 450,
                compile: function () {
                    return {
                        pre: function (a, b, d) {
                            a.$eval(d.ngInit);
                        }
                    };
                }
            }), Se = function () {
                return {
                    restrict: 'A',
                    priority: 100,
                    require: 'ngModel',
                    link: function (a, b, d, c) {
                        var e = b.attr(d.$attr.ngList) || ', ', f = 'false' !== d.ngTrim, g = f ? X(e) : e;
                        c.$parsers.push(function (a) {
                            if (!x(a)) {
                                var b = [];
                                a && n(a.split(g), function (a) {
                                    a && b.push(f ? X(a) : a);
                                });
                                return b;
                            }
                        });
                        c.$formatters.push(function (a) {
                            return L(a) ? a.join(e) : v;
                        });
                        c.$isEmpty = function (a) {
                            return !a || !a.length;
                        };
                    }
                };
            }, ob = 'ng-valid', Od = 'ng-invalid', Ya = 'ng-pristine', Nb = 'ng-dirty', Qd = 'ng-pending', nb = H('ngModel'), Ng = [
                '$scope',
                '$exceptionHandler',
                '$attrs',
                '$element',
                '$parse',
                '$animate',
                '$timeout',
                '$rootScope',
                '$q',
                '$interpolate',
                function (a, b, d, c, e, f, g, h, k, l) {
                    this.$modelValue = this.$viewValue = Number.NaN;
                    this.$$rawModelValue = v;
                    this.$validators = {};
                    this.$asyncValidators = {};
                    this.$parsers = [];
                    this.$formatters = [];
                    this.$viewChangeListeners = [];
                    this.$untouched = !0;
                    this.$touched = !1;
                    this.$pristine = !0;
                    this.$dirty = !1;
                    this.$valid = !0;
                    this.$invalid = !1;
                    this.$error = {};
                    this.$$success = {};
                    this.$pending = v;
                    this.$name = l(d.name || '', !1)(a);
                    this.$$parentForm = Mb;
                    var m = e(d.ngModel), r = m.assign, q = m, I = r, K = null, t, p = this;
                    this.$$setOptions = function (a) {
                        if ((p.$options = a) && a.getterSetter) {
                            var b = e(d.ngModel + '()'), f = e(d.ngModel + '($$$p)');
                            q = function (a) {
                                var c = m(a);
                                D(c) && (c = b(a));
                                return c;
                            };
                            I = function (a, b) {
                                D(m(a)) ? f(a, { $$$p: p.$modelValue }) : r(a, p.$modelValue);
                            };
                        } else if (!m.assign)
                            throw nb('nonassign', d.ngModel, ta(c));
                    };
                    this.$render = B;
                    this.$isEmpty = function (a) {
                        return x(a) || '' === a || null === a || a !== a;
                    };
                    this.$$updateEmptyClasses = function (a) {
                        p.$isEmpty(a) ? (f.removeClass(c, 'ng-not-empty'), f.addClass(c, 'ng-empty')) : (f.removeClass(c, 'ng-empty'), f.addClass(c, 'ng-not-empty'));
                    };
                    var w = 0;
                    Ld({
                        ctrl: this,
                        $element: c,
                        set: function (a, b) {
                            a[b] = !0;
                        },
                        unset: function (a, b) {
                            delete a[b];
                        },
                        $animate: f
                    });
                    this.$setPristine = function () {
                        p.$dirty = !1;
                        p.$pristine = !0;
                        f.removeClass(c, Nb);
                        f.addClass(c, Ya);
                    };
                    this.$setDirty = function () {
                        p.$dirty = !0;
                        p.$pristine = !1;
                        f.removeClass(c, Ya);
                        f.addClass(c, Nb);
                        p.$$parentForm.$setDirty();
                    };
                    this.$setUntouched = function () {
                        p.$touched = !1;
                        p.$untouched = !0;
                        f.setClass(c, 'ng-untouched', 'ng-touched');
                    };
                    this.$setTouched = function () {
                        p.$touched = !0;
                        p.$untouched = !1;
                        f.setClass(c, 'ng-touched', 'ng-untouched');
                    };
                    this.$rollbackViewValue = function () {
                        g.cancel(K);
                        p.$viewValue = p.$$lastCommittedViewValue;
                        p.$render();
                    };
                    this.$validate = function () {
                        if (!N(p.$modelValue) || !isNaN(p.$modelValue)) {
                            var a = p.$$rawModelValue, b = p.$valid, c = p.$modelValue, d = p.$options && p.$options.allowInvalid;
                            p.$$runValidators(a, p.$$lastCommittedViewValue, function (e) {
                                d || b === e || (p.$modelValue = e ? a : v, p.$modelValue !== c && p.$$writeModelToScope());
                            });
                        }
                    };
                    this.$$runValidators = function (a, b, c) {
                        function d() {
                            var c = !0;
                            n(p.$validators, function (d, e) {
                                var g = d(a, b);
                                c = c && g;
                                f(e, g);
                            });
                            return c ? !0 : (n(p.$asyncValidators, function (a, b) {
                                f(b, null);
                            }), !1);
                        }
                        function e() {
                            var c = [], d = !0;
                            n(p.$asyncValidators, function (e, g) {
                                var h = e(a, b);
                                if (!h || !D(h.then))
                                    throw nb('nopromise', h);
                                f(g, v);
                                c.push(h.then(function () {
                                    f(g, !0);
                                }, function (a) {
                                    d = !1;
                                    f(g, !1);
                                }));
                            });
                            c.length ? k.all(c).then(function () {
                                g(d);
                            }, B) : g(!0);
                        }
                        function f(a, b) {
                            h === w && p.$setValidity(a, b);
                        }
                        function g(a) {
                            h === w && c(a);
                        }
                        w++;
                        var h = w;
                        (function () {
                            var a = p.$$parserName || 'parse';
                            if (x(t))
                                f(a, null);
                            else
                                return t || (n(p.$validators, function (a, b) {
                                    f(b, null);
                                }), n(p.$asyncValidators, function (a, b) {
                                    f(b, null);
                                })), f(a, t), t;
                            return !0;
                        }() ? d() ? e() : g(!1) : g(!1));
                    };
                    this.$commitViewValue = function () {
                        var a = p.$viewValue;
                        g.cancel(K);
                        if (p.$$lastCommittedViewValue !== a || '' === a && p.$$hasNativeValidators)
                            p.$$updateEmptyClasses(a), p.$$lastCommittedViewValue = a, p.$pristine && this.$setDirty(), this.$$parseAndValidate();
                    };
                    this.$$parseAndValidate = function () {
                        var b = p.$$lastCommittedViewValue;
                        if (t = x(b) ? v : !0)
                            for (var c = 0; c < p.$parsers.length; c++)
                                if (b = p.$parsers[c](b), x(b)) {
                                    t = !1;
                                    break;
                                }
                        N(p.$modelValue) && isNaN(p.$modelValue) && (p.$modelValue = q(a));
                        var d = p.$modelValue, e = p.$options && p.$options.allowInvalid;
                        p.$$rawModelValue = b;
                        e && (p.$modelValue = b, p.$modelValue !== d && p.$$writeModelToScope());
                        p.$$runValidators(b, p.$$lastCommittedViewValue, function (a) {
                            e || (p.$modelValue = a ? b : v, p.$modelValue !== d && p.$$writeModelToScope());
                        });
                    };
                    this.$$writeModelToScope = function () {
                        I(a, p.$modelValue);
                        n(p.$viewChangeListeners, function (a) {
                            try {
                                a();
                            } catch (c) {
                                b(c);
                            }
                        });
                    };
                    this.$setViewValue = function (a, b) {
                        p.$viewValue = a;
                        p.$options && !p.$options.updateOnDefault || p.$$debounceViewValueCommit(b);
                    };
                    this.$$debounceViewValueCommit = function (b) {
                        var c = 0, d = p.$options;
                        d && y(d.debounce) && (d = d.debounce, N(d) ? c = d : N(d[b]) ? c = d[b] : N(d['default']) && (c = d['default']));
                        g.cancel(K);
                        c ? K = g(function () {
                            p.$commitViewValue();
                        }, c) : h.$$phase ? p.$commitViewValue() : a.$apply(function () {
                            p.$commitViewValue();
                        });
                    };
                    a.$watch(function () {
                        var b = q(a);
                        if (b !== p.$modelValue && (p.$modelValue === p.$modelValue || b === b)) {
                            p.$modelValue = p.$$rawModelValue = b;
                            t = v;
                            for (var c = p.$formatters, d = c.length, e = b; d--;)
                                e = c[d](e);
                            p.$viewValue !== e && (p.$$updateEmptyClasses(e), p.$viewValue = p.$$lastCommittedViewValue = e, p.$render(), p.$$runValidators(b, e, B));
                        }
                        return b;
                    });
                }
            ], Re = [
                '$rootScope',
                function (a) {
                    return {
                        restrict: 'A',
                        require: [
                            'ngModel',
                            '^?form',
                            '^?ngModelOptions'
                        ],
                        controller: Ng,
                        priority: 1,
                        compile: function (b) {
                            b.addClass(Ya).addClass('ng-untouched').addClass(ob);
                            return {
                                pre: function (a, b, e, f) {
                                    var g = f[0];
                                    b = f[1] || g.$$parentForm;
                                    g.$$setOptions(f[2] && f[2].$options);
                                    b.$addControl(g);
                                    e.$observe('name', function (a) {
                                        g.$name !== a && g.$$parentForm.$$renameControl(g, a);
                                    });
                                    a.$on('$destroy', function () {
                                        g.$$parentForm.$removeControl(g);
                                    });
                                },
                                post: function (b, c, e, f) {
                                    var g = f[0];
                                    if (g.$options && g.$options.updateOn)
                                        c.on(g.$options.updateOn, function (a) {
                                            g.$$debounceViewValueCommit(a && a.type);
                                        });
                                    c.on('blur', function (c) {
                                        g.$touched || (a.$$phase ? b.$evalAsync(g.$setTouched) : b.$apply(g.$setTouched));
                                    });
                                }
                            };
                        }
                    };
                }
            ], Og = /(\s+|^)default(\s+|$)/, Ve = function () {
                return {
                    restrict: 'A',
                    controller: [
                        '$scope',
                        '$attrs',
                        function (a, b) {
                            var d = this;
                            this.$options = Oa(a.$eval(b.ngModelOptions));
                            y(this.$options.updateOn) ? (this.$options.updateOnDefault = !1, this.$options.updateOn = X(this.$options.updateOn.replace(Og, function () {
                                d.$options.updateOnDefault = !0;
                                return ' ';
                            }))) : this.$options.updateOnDefault = !0;
                        }
                    ]
                };
            }, He = Ma({
                terminal: !0,
                priority: 1000
            }), Pg = H('ngOptions'), Qg = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, Pe = [
                '$compile',
                '$parse',
                function (a, b) {
                    function d(a, c, d) {
                        function e(a, b, c, d, f) {
                            this.selectValue = a;
                            this.viewValue = b;
                            this.label = c;
                            this.group = d;
                            this.disabled = f;
                        }
                        function l(a) {
                            var b;
                            if (!q && Ca(a))
                                b = a;
                            else {
                                b = [];
                                for (var c in a)
                                    a.hasOwnProperty(c) && '$' !== c.charAt(0) && b.push(c);
                            }
                            return b;
                        }
                        var m = a.match(Qg);
                        if (!m)
                            throw Pg('iexp', a, ta(c));
                        var n = m[5] || m[7], q = m[6];
                        a = / as /.test(m[0]) && m[1];
                        var v = m[9];
                        c = b(m[2] ? m[1] : n);
                        var y = a && b(a) || c, t = v && b(v), p = v ? function (a, b) {
                                return t(d, b);
                            } : function (a) {
                                return Fa(a);
                            }, w = function (a, b) {
                                return p(a, B(a, b));
                            }, u = b(m[2] || m[1]), x = b(m[3] || ''), z = b(m[4] || ''), A = b(m[8]), C = {}, B = q ? function (a, b) {
                                C[q] = b;
                                C[n] = a;
                                return C;
                            } : function (a) {
                                C[n] = a;
                                return C;
                            };
                        return {
                            trackBy: v,
                            getTrackByValue: w,
                            getWatchables: b(A, function (a) {
                                var b = [];
                                a = a || [];
                                for (var c = l(a), e = c.length, f = 0; f < e; f++) {
                                    var g = a === c ? f : c[f], k = B(a[g], g), g = p(a[g], k);
                                    b.push(g);
                                    if (m[2] || m[1])
                                        g = u(d, k), b.push(g);
                                    m[4] && (k = z(d, k), b.push(k));
                                }
                                return b;
                            }),
                            getOptions: function () {
                                for (var a = [], b = {}, c = A(d) || [], f = l(c), g = f.length, m = 0; m < g; m++) {
                                    var n = c === f ? m : f[m], r = B(c[n], n), q = y(d, r), n = p(q, r), s = u(d, r), t = x(d, r), r = z(d, r), q = new e(n, q, s, t, r);
                                    a.push(q);
                                    b[n] = q;
                                }
                                return {
                                    items: a,
                                    selectValueMap: b,
                                    getOptionFromViewValue: function (a) {
                                        return b[w(a)];
                                    },
                                    getViewValueFromOption: function (a) {
                                        return v ? ia.copy(a.viewValue) : a.viewValue;
                                    }
                                };
                            }
                        };
                    }
                    var c = W.createElement('option'), e = W.createElement('optgroup');
                    return {
                        restrict: 'A',
                        terminal: !0,
                        require: [
                            'select',
                            'ngModel'
                        ],
                        link: {
                            pre: function (a, b, c, d) {
                                d[0].registerOption = B;
                            },
                            post: function (b, g, h, k) {
                                function l(a, b) {
                                    a.element = b;
                                    b.disabled = a.disabled;
                                    a.label !== b.label && (b.label = a.label, b.textContent = a.label);
                                    a.value !== b.value && (b.value = a.selectValue);
                                }
                                function m(a, b, c, d) {
                                    b && G(b.nodeName) === c ? c = b : (c = d.cloneNode(!1), b ? a.insertBefore(c, b) : a.appendChild(c));
                                    return c;
                                }
                                function r(a) {
                                    for (var b; a;)
                                        b = a.nextSibling, $b(a), a = b;
                                }
                                function q(a) {
                                    var b = w && w[0], c = A && A[0];
                                    if (b || c)
                                        for (; a && (a === b || a === c || 8 === a.nodeType || 'option' === ra(a) && '' === a.value);)
                                            a = a.nextSibling;
                                    return a;
                                }
                                function v() {
                                    var a = D && x.readValue();
                                    D = E.getOptions();
                                    var b = {}, d = g[0].firstChild;
                                    z && g.prepend(w);
                                    d = q(d);
                                    D.items.forEach(function (a) {
                                        var f, h;
                                        y(a.group) ? (f = b[a.group], f || (f = m(g[0], d, 'optgroup', e), d = f.nextSibling, f.label = a.group, f = b[a.group] = {
                                            groupElement: f,
                                            currentOptionElement: f.firstChild
                                        }), h = m(f.groupElement, f.currentOptionElement, 'option', c), l(a, h), f.currentOptionElement = h.nextSibling) : (h = m(g[0], d, 'option', c), l(a, h), d = h.nextSibling);
                                    });
                                    Object.keys(b).forEach(function (a) {
                                        r(b[a].currentOptionElement);
                                    });
                                    r(d);
                                    t.$render();
                                    if (!t.$isEmpty(a)) {
                                        var f = x.readValue();
                                        (E.trackBy || p ? oa(a, f) : a === f) || (t.$setViewValue(f), t.$render());
                                    }
                                }
                                var x = k[0], t = k[1], p = h.multiple, w;
                                k = 0;
                                for (var u = g.children(), B = u.length; k < B; k++)
                                    if ('' === u[k].value) {
                                        w = u.eq(k);
                                        break;
                                    }
                                var z = !!w, A = C(c.cloneNode(!1));
                                A.val('?');
                                var D, E = d(h.ngOptions, g, b);
                                p ? (t.$isEmpty = function (a) {
                                    return !a || 0 === a.length;
                                }, x.writeValue = function (a) {
                                    D.items.forEach(function (a) {
                                        a.element.selected = !1;
                                    });
                                    a && a.forEach(function (a) {
                                        (a = D.getOptionFromViewValue(a)) && !a.disabled && (a.element.selected = !0);
                                    });
                                }, x.readValue = function () {
                                    var a = g.val() || [], b = [];
                                    n(a, function (a) {
                                        (a = D.selectValueMap[a]) && !a.disabled && b.push(D.getViewValueFromOption(a));
                                    });
                                    return b;
                                }, E.trackBy && b.$watchCollection(function () {
                                    if (L(t.$viewValue))
                                        return t.$viewValue.map(function (a) {
                                            return E.getTrackByValue(a);
                                        });
                                }, function () {
                                    t.$render();
                                })) : (x.writeValue = function (a) {
                                    var b = D.getOptionFromViewValue(a);
                                    b && !b.disabled ? g[0].value !== b.selectValue && (A.remove(), z || w.remove(), g[0].value = b.selectValue, b.element.selected = !0, b.element.setAttribute('selected', 'selected')) : null === a || z ? (A.remove(), z || g.prepend(w), g.val(''), w.prop('selected', !0), w.attr('selected', !0)) : (z || w.remove(), g.prepend(A), g.val('?'), A.prop('selected', !0), A.attr('selected', !0));
                                }, x.readValue = function () {
                                    var a = D.selectValueMap[g.val()];
                                    return a && !a.disabled ? (z || w.remove(), A.remove(), D.getViewValueFromOption(a)) : null;
                                }, E.trackBy && b.$watch(function () {
                                    return E.getTrackByValue(t.$viewValue);
                                }, function () {
                                    t.$render();
                                }));
                                z ? (w.remove(), a(w)(b), w.removeClass('ng-scope')) : w = C(c.cloneNode(!1));
                                v();
                                b.$watchCollection(E.getWatchables, v);
                            }
                        }
                    };
                }
            ], Ie = [
                '$locale',
                '$interpolate',
                '$log',
                function (a, b, d) {
                    var c = /{}/g, e = /^when(Minus)?(.+)$/;
                    return {
                        link: function (f, g, h) {
                            function k(a) {
                                g.text(a || '');
                            }
                            var l = h.count, m = h.$attr.when && g.attr(h.$attr.when), r = h.offset || 0, q = f.$eval(m) || {}, v = {}, y = b.startSymbol(), t = b.endSymbol(), p = y + l + '-' + r + t, w = ia.noop, u;
                            n(h, function (a, b) {
                                var c = e.exec(b);
                                c && (c = (c[1] ? '-' : '') + G(c[2]), q[c] = g.attr(h.$attr[b]));
                            });
                            n(q, function (a, d) {
                                v[d] = b(a.replace(c, p));
                            });
                            f.$watch(l, function (b) {
                                var c = parseFloat(b), e = isNaN(c);
                                e || c in q || (c = a.pluralCat(c - r));
                                c === u || e && N(u) && isNaN(u) || (w(), e = v[c], x(e) ? (null != b && d.debug('ngPluralize: no rule defined for \'' + c + '\' in ' + m), w = B, k()) : w = f.$watch(e, k), u = c);
                            });
                        }
                    };
                }
            ], Je = [
                '$parse',
                '$animate',
                function (a, b) {
                    var d = H('ngRepeat'), c = function (a, b, c, d, k, l, m) {
                            a[c] = d;
                            k && (a[k] = l);
                            a.$index = b;
                            a.$first = 0 === b;
                            a.$last = b === m - 1;
                            a.$middle = !(a.$first || a.$last);
                            a.$odd = !(a.$even = 0 === (b & 1));
                        };
                    return {
                        restrict: 'A',
                        multiElement: !0,
                        transclude: 'element',
                        priority: 1000,
                        terminal: !0,
                        $$tlb: !0,
                        compile: function (e, f) {
                            var g = f.ngRepeat, h = W.createComment(' end ngRepeat: ' + g + ' '), k = g.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                            if (!k)
                                throw d('iexp', g);
                            var l = k[1], m = k[2], r = k[3], q = k[4], k = l.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
                            if (!k)
                                throw d('iidexp', l);
                            var x = k[3] || k[1], y = k[2];
                            if (r && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(r) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(r)))
                                throw d('badident', r);
                            var t, p, w, u, B = { $id: Fa };
                            q ? t = a(q) : (w = function (a, b) {
                                return Fa(b);
                            }, u = function (a) {
                                return a;
                            });
                            return function (a, e, f, k, l) {
                                t && (p = function (b, c, d) {
                                    y && (B[y] = b);
                                    B[x] = c;
                                    B.$index = d;
                                    return t(a, B);
                                });
                                var q = Z();
                                a.$watchCollection(m, function (f) {
                                    var k, m, s = e[0], t, B = Z(), D, E, H, F, L, G, N;
                                    r && (a[r] = f);
                                    if (Ca(f))
                                        L = f, m = p || w;
                                    else
                                        for (N in m = p || u, L = [], f)
                                            sa.call(f, N) && '$' !== N.charAt(0) && L.push(N);
                                    D = L.length;
                                    N = Array(D);
                                    for (k = 0; k < D; k++)
                                        if (E = f === L ? k : L[k], H = f[E], F = m(E, H, k), q[F])
                                            G = q[F], delete q[F], B[F] = G, N[k] = G;
                                        else {
                                            if (B[F])
                                                throw n(N, function (a) {
                                                    a && a.scope && (q[a.id] = a);
                                                }), d('dupes', g, F, H);
                                            N[k] = {
                                                id: F,
                                                scope: v,
                                                clone: v
                                            };
                                            B[F] = !0;
                                        }
                                    for (t in q) {
                                        G = q[t];
                                        F = tb(G.clone);
                                        b.leave(F);
                                        if (F[0].parentNode)
                                            for (k = 0, m = F.length; k < m; k++)
                                                F[k].$$NG_REMOVED = !0;
                                        G.scope.$destroy();
                                    }
                                    for (k = 0; k < D; k++)
                                        if (E = f === L ? k : L[k], H = f[E], G = N[k], G.scope) {
                                            t = s;
                                            do
                                                t = t.nextSibling;
                                            while (t && t.$$NG_REMOVED);
                                            G.clone[0] != t && b.move(tb(G.clone), null, C(s));
                                            s = G.clone[G.clone.length - 1];
                                            c(G.scope, k, x, H, y, E, D);
                                        } else
                                            l(function (a, d) {
                                                G.scope = d;
                                                var e = h.cloneNode(!1);
                                                a[a.length++] = e;
                                                b.enter(a, null, C(s));
                                                s = e;
                                                G.clone = a;
                                                B[G.id] = G;
                                                c(G.scope, k, x, H, y, E, D);
                                            });
                                    q = B;
                                });
                            };
                        }
                    };
                }
            ], Ke = [
                '$animate',
                function (a) {
                    return {
                        restrict: 'A',
                        multiElement: !0,
                        link: function (b, d, c) {
                            b.$watch(c.ngShow, function (b) {
                                a[b ? 'removeClass' : 'addClass'](d, 'ng-hide', { tempClasses: 'ng-hide-animate' });
                            });
                        }
                    };
                }
            ], De = [
                '$animate',
                function (a) {
                    return {
                        restrict: 'A',
                        multiElement: !0,
                        link: function (b, d, c) {
                            b.$watch(c.ngHide, function (b) {
                                a[b ? 'addClass' : 'removeClass'](d, 'ng-hide', { tempClasses: 'ng-hide-animate' });
                            });
                        }
                    };
                }
            ], Le = Ma(function (a, b, d) {
                a.$watch(d.ngStyle, function (a, d) {
                    d && a !== d && n(d, function (a, c) {
                        b.css(c, '');
                    });
                    a && b.css(a);
                }, !0);
            }), Me = [
                '$animate',
                function (a) {
                    return {
                        require: 'ngSwitch',
                        controller: [
                            '$scope',
                            function () {
                                this.cases = {};
                            }
                        ],
                        link: function (b, d, c, e) {
                            var f = [], g = [], h = [], k = [], l = function (a, b) {
                                    return function () {
                                        a.splice(b, 1);
                                    };
                                };
                            b.$watch(c.ngSwitch || c.on, function (b) {
                                var c, d;
                                c = 0;
                                for (d = h.length; c < d; ++c)
                                    a.cancel(h[c]);
                                c = h.length = 0;
                                for (d = k.length; c < d; ++c) {
                                    var q = tb(g[c].clone);
                                    k[c].$destroy();
                                    (h[c] = a.leave(q)).then(l(h, c));
                                }
                                g.length = 0;
                                k.length = 0;
                                (f = e.cases['!' + b] || e.cases['?']) && n(f, function (b) {
                                    b.transclude(function (c, d) {
                                        k.push(d);
                                        var e = b.element;
                                        c[c.length++] = W.createComment(' end ngSwitchWhen: ');
                                        g.push({ clone: c });
                                        a.enter(c, e.parent(), e);
                                    });
                                });
                            });
                        }
                    };
                }
            ], Ne = Ma({
                transclude: 'element',
                priority: 1200,
                require: '^ngSwitch',
                multiElement: !0,
                link: function (a, b, d, c, e) {
                    c.cases['!' + d.ngSwitchWhen] = c.cases['!' + d.ngSwitchWhen] || [];
                    c.cases['!' + d.ngSwitchWhen].push({
                        transclude: e,
                        element: b
                    });
                }
            }), Oe = Ma({
                transclude: 'element',
                priority: 1200,
                require: '^ngSwitch',
                multiElement: !0,
                link: function (a, b, d, c, e) {
                    c.cases['?'] = c.cases['?'] || [];
                    c.cases['?'].push({
                        transclude: e,
                        element: b
                    });
                }
            }), Rg = H('ngTransclude'), Qe = Ma({
                restrict: 'EAC',
                link: function (a, b, d, c, e) {
                    d.ngTransclude === d.$attr.ngTransclude && (d.ngTransclude = '');
                    if (!e)
                        throw Rg('orphan', ta(b));
                    e(function (a) {
                        a.length && (b.empty(), b.append(a));
                    }, null, d.ngTransclude || d.ngTranscludeSlot);
                }
            }), qe = [
                '$templateCache',
                function (a) {
                    return {
                        restrict: 'E',
                        terminal: !0,
                        compile: function (b, d) {
                            'text/ng-template' == d.type && a.put(d.id, b[0].text);
                        }
                    };
                }
            ], Sg = {
                $setViewValue: B,
                $render: B
            }, Tg = [
                '$element',
                '$scope',
                '$attrs',
                function (a, b, d) {
                    var c = this, e = new Ua();
                    c.ngModelCtrl = Sg;
                    c.unknownOption = C(W.createElement('option'));
                    c.renderUnknownOption = function (b) {
                        b = '? ' + Fa(b) + ' ?';
                        c.unknownOption.val(b);
                        a.prepend(c.unknownOption);
                        a.val(b);
                    };
                    b.$on('$destroy', function () {
                        c.renderUnknownOption = B;
                    });
                    c.removeUnknownOption = function () {
                        c.unknownOption.parent() && c.unknownOption.remove();
                    };
                    c.readValue = function () {
                        c.removeUnknownOption();
                        return a.val();
                    };
                    c.writeValue = function (b) {
                        c.hasOption(b) ? (c.removeUnknownOption(), a.val(b), '' === b && c.emptyOption.prop('selected', !0)) : null == b && c.emptyOption ? (c.removeUnknownOption(), a.val('')) : c.renderUnknownOption(b);
                    };
                    c.addOption = function (a, b) {
                        if (8 !== b[0].nodeType) {
                            Ta(a, '"option value"');
                            '' === a && (c.emptyOption = b);
                            var d = e.get(a) || 0;
                            e.put(a, d + 1);
                            c.ngModelCtrl.$render();
                            b[0].hasAttribute('selected') && (b[0].selected = !0);
                        }
                    };
                    c.removeOption = function (a) {
                        var b = e.get(a);
                        b && (1 === b ? (e.remove(a), '' === a && (c.emptyOption = v)) : e.put(a, b - 1));
                    };
                    c.hasOption = function (a) {
                        return !!e.get(a);
                    };
                    c.registerOption = function (a, b, d, e, l) {
                        if (e) {
                            var m;
                            d.$observe('value', function (a) {
                                y(m) && c.removeOption(m);
                                m = a;
                                c.addOption(a, b);
                            });
                        } else
                            l ? a.$watch(l, function (a, e) {
                                d.$set('value', a);
                                e !== a && c.removeOption(e);
                                c.addOption(a, b);
                            }) : c.addOption(d.value, b);
                        b.on('$destroy', function () {
                            c.removeOption(d.value);
                            c.ngModelCtrl.$render();
                        });
                    };
                }
            ], re = function () {
                return {
                    restrict: 'E',
                    require: [
                        'select',
                        '?ngModel'
                    ],
                    controller: Tg,
                    priority: 1,
                    link: {
                        pre: function (a, b, d, c) {
                            var e = c[1];
                            if (e) {
                                var f = c[0];
                                f.ngModelCtrl = e;
                                b.on('change', function () {
                                    a.$apply(function () {
                                        e.$setViewValue(f.readValue());
                                    });
                                });
                                if (d.multiple) {
                                    f.readValue = function () {
                                        var a = [];
                                        n(b.find('option'), function (b) {
                                            b.selected && a.push(b.value);
                                        });
                                        return a;
                                    };
                                    f.writeValue = function (a) {
                                        var c = new Ua(a);
                                        n(b.find('option'), function (a) {
                                            a.selected = y(c.get(a.value));
                                        });
                                    };
                                    var g, h = NaN;
                                    a.$watch(function () {
                                        h !== e.$viewValue || oa(g, e.$viewValue) || (g = na(e.$viewValue), e.$render());
                                        h = e.$viewValue;
                                    });
                                    e.$isEmpty = function (a) {
                                        return !a || 0 === a.length;
                                    };
                                }
                            }
                        },
                        post: function (a, b, d, c) {
                            var e = c[1];
                            if (e) {
                                var f = c[0];
                                e.$render = function () {
                                    f.writeValue(e.$viewValue);
                                };
                            }
                        }
                    }
                };
            }, te = [
                '$interpolate',
                function (a) {
                    return {
                        restrict: 'E',
                        priority: 100,
                        compile: function (b, d) {
                            if (y(d.value))
                                var c = a(d.value, !0);
                            else {
                                var e = a(b.text(), !0);
                                e || d.$set('value', b.text());
                            }
                            return function (a, b, d) {
                                var k = b.parent();
                                (k = k.data('$selectController') || k.parent().data('$selectController')) && k.registerOption(a, b, d, c, e);
                            };
                        }
                    };
                }
            ], se = ba({
                restrict: 'E',
                terminal: !1
            }), Hc = function () {
                return {
                    restrict: 'A',
                    require: '?ngModel',
                    link: function (a, b, d, c) {
                        c && (d.required = !0, c.$validators.required = function (a, b) {
                            return !d.required || !c.$isEmpty(b);
                        }, d.$observe('required', function () {
                            c.$validate();
                        }));
                    }
                };
            }, Gc = function () {
                return {
                    restrict: 'A',
                    require: '?ngModel',
                    link: function (a, b, d, c) {
                        if (c) {
                            var e, f = d.ngPattern || d.pattern;
                            d.$observe('pattern', function (a) {
                                F(a) && 0 < a.length && (a = new RegExp('^' + a + '$'));
                                if (a && !a.test)
                                    throw H('ngPattern')('noregexp', f, a, ta(b));
                                e = a || v;
                                c.$validate();
                            });
                            c.$validators.pattern = function (a, b) {
                                return c.$isEmpty(b) || x(e) || e.test(b);
                            };
                        }
                    }
                };
            }, Jc = function () {
                return {
                    restrict: 'A',
                    require: '?ngModel',
                    link: function (a, b, d, c) {
                        if (c) {
                            var e = -1;
                            d.$observe('maxlength', function (a) {
                                a = ca(a);
                                e = isNaN(a) ? -1 : a;
                                c.$validate();
                            });
                            c.$validators.maxlength = function (a, b) {
                                return 0 > e || c.$isEmpty(b) || b.length <= e;
                            };
                        }
                    }
                };
            }, Ic = function () {
                return {
                    restrict: 'A',
                    require: '?ngModel',
                    link: function (a, b, d, c) {
                        if (c) {
                            var e = 0;
                            d.$observe('minlength', function (a) {
                                e = ca(a) || 0;
                                c.$validate();
                            });
                            c.$validators.minlength = function (a, b) {
                                return c.$isEmpty(b) || b.length >= e;
                            };
                        }
                    }
                };
            };
        O.angular.bootstrap ? console.log('WARNING: Tried to load angular more than once.') : (je(), le(ia), ia.module('ngLocale', [], [
            '$provide',
            function (a) {
                function b(a) {
                    a += '';
                    var b = a.indexOf('.');
                    return -1 == b ? 0 : a.length - b - 1;
                }
                a.value('$locale', {
                    DATETIME_FORMATS: {
                        AMPMS: [
                            'AM',
                            'PM'
                        ],
                        DAY: 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday'.split(' '),
                        ERANAMES: [
                            'Before Christ',
                            'Anno Domini'
                        ],
                        ERAS: [
                            'BC',
                            'AD'
                        ],
                        FIRSTDAYOFWEEK: 6,
                        MONTH: 'January February March April May June July August September October November December'.split(' '),
                        SHORTDAY: 'Sun Mon Tue Wed Thu Fri Sat'.split(' '),
                        SHORTMONTH: 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' '),
                        STANDALONEMONTH: 'January February March April May June July August September October November December'.split(' '),
                        WEEKENDRANGE: [
                            5,
                            6
                        ],
                        fullDate: 'EEEE, MMMM d, y',
                        longDate: 'MMMM d, y',
                        medium: 'MMM d, y h:mm:ss a',
                        mediumDate: 'MMM d, y',
                        mediumTime: 'h:mm:ss a',
                        'short': 'M/d/yy h:mm a',
                        shortDate: 'M/d/yy',
                        shortTime: 'h:mm a'
                    },
                    NUMBER_FORMATS: {
                        CURRENCY_SYM: '$',
                        DECIMAL_SEP: '.',
                        GROUP_SEP: ',',
                        PATTERNS: [
                            {
                                gSize: 3,
                                lgSize: 3,
                                maxFrac: 3,
                                minFrac: 0,
                                minInt: 1,
                                negPre: '-',
                                negSuf: '',
                                posPre: '',
                                posSuf: ''
                            },
                            {
                                gSize: 3,
                                lgSize: 3,
                                maxFrac: 2,
                                minFrac: 2,
                                minInt: 1,
                                negPre: '-\xA4',
                                negSuf: '',
                                posPre: '\xA4',
                                posSuf: ''
                            }
                        ]
                    },
                    id: 'en-us',
                    localeID: 'en_US',
                    pluralCat: function (a, c) {
                        var e = a | 0, f = c;
                        v === f && (f = Math.min(b(a), 3));
                        Math.pow(10, f);
                        return 1 == e && 0 == f ? 'one' : 'other';
                    }
                });
            }
        ]), C(W).ready(function () {
            fe(W, Ac);
        }));
    }(window, document));
    !window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
    return angular;
});
(function () {
    define('angular-route', [
        'angular',
        'angular'
    ], function (angular) {
        'use strict';
        var ngRouteModule = angular.module('ngRoute', ['ng']).provider('$route', $RouteProvider), $routeMinErr = angular.$$minErr('ngRoute');
        function $RouteProvider() {
            function inherit(parent, extra) {
                return angular.extend(Object.create(parent), extra);
            }
            var routes = {};
            this.when = function (path, route) {
                var routeCopy = angular.copy(route);
                if (angular.isUndefined(routeCopy.reloadOnSearch)) {
                    routeCopy.reloadOnSearch = true;
                }
                if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
                    routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
                }
                routes[path] = angular.extend(routeCopy, path && pathRegExp(path, routeCopy));
                if (path) {
                    var redirectPath = path[path.length - 1] == '/' ? path.substr(0, path.length - 1) : path + '/';
                    routes[redirectPath] = angular.extend({ redirectTo: path }, pathRegExp(redirectPath, routeCopy));
                }
                return this;
            };
            this.caseInsensitiveMatch = false;
            function pathRegExp(path, opts) {
                var insensitive = opts.caseInsensitiveMatch, ret = {
                        originalPath: path,
                        regexp: path
                    }, keys = ret.keys = [];
                path = path.replace(/([().])/g, '\\$1').replace(/(\/)?:(\w+)([\?\*])?/g, function (_, slash, key, option) {
                    var optional = option === '?' ? option : null;
                    var star = option === '*' ? option : null;
                    keys.push({
                        name: key,
                        optional: !!optional
                    });
                    slash = slash || '';
                    return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (star && '(.+?)' || '([^/]+)') + (optional || '') + ')' + (optional || '');
                }).replace(/([\/$\*])/g, '\\$1');
                ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
                return ret;
            }
            this.otherwise = function (params) {
                if (typeof params === 'string') {
                    params = { redirectTo: params };
                }
                this.when(null, params);
                return this;
            };
            this.$get = [
                '$rootScope',
                '$location',
                '$routeParams',
                '$q',
                '$injector',
                '$templateRequest',
                '$sce',
                function ($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {
                    var forceReload = false, preparedRoute, preparedRouteIsUpdateOnly, $route = {
                            routes: routes,
                            reload: function () {
                                forceReload = true;
                                $rootScope.$evalAsync(function () {
                                    prepareRoute();
                                    commitRoute();
                                });
                            },
                            updateParams: function (newParams) {
                                if (this.current && this.current.$$route) {
                                    newParams = angular.extend({}, this.current.params, newParams);
                                    $location.path(interpolate(this.current.$$route.originalPath, newParams));
                                    $location.search(newParams);
                                } else {
                                    throw $routeMinErr('norout', 'Tried updating route when with no current route');
                                }
                            }
                        };
                    $rootScope.$on('$locationChangeStart', prepareRoute);
                    $rootScope.$on('$locationChangeSuccess', commitRoute);
                    return $route;
                    function switchRouteMatcher(on, route) {
                        var keys = route.keys, params = {};
                        if (!route.regexp)
                            return null;
                        var m = route.regexp.exec(on);
                        if (!m)
                            return null;
                        for (var i = 1, len = m.length; i < len; ++i) {
                            var key = keys[i - 1];
                            var val = m[i];
                            if (key && val) {
                                params[key.name] = val;
                            }
                        }
                        return params;
                    }
                    function prepareRoute($locationEvent) {
                        var lastRoute = $route.current;
                        preparedRoute = parseRoute();
                        preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route && angular.equals(preparedRoute.pathParams, lastRoute.pathParams) && !preparedRoute.reloadOnSearch && !forceReload;
                        if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
                            if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {
                                if ($locationEvent) {
                                    $locationEvent.preventDefault();
                                }
                            }
                        }
                    }
                    function commitRoute() {
                        var lastRoute = $route.current;
                        var nextRoute = preparedRoute;
                        if (preparedRouteIsUpdateOnly) {
                            lastRoute.params = nextRoute.params;
                            angular.copy(lastRoute.params, $routeParams);
                            $rootScope.$broadcast('$routeUpdate', lastRoute);
                        } else if (nextRoute || lastRoute) {
                            forceReload = false;
                            $route.current = nextRoute;
                            if (nextRoute) {
                                if (nextRoute.redirectTo) {
                                    if (angular.isString(nextRoute.redirectTo)) {
                                        $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params).replace();
                                    } else {
                                        $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search())).replace();
                                    }
                                }
                            }
                            $q.when(nextRoute).then(function () {
                                if (nextRoute) {
                                    var locals = angular.extend({}, nextRoute.resolve), template, templateUrl;
                                    angular.forEach(locals, function (value, key) {
                                        locals[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);
                                    });
                                    if (angular.isDefined(template = nextRoute.template)) {
                                        if (angular.isFunction(template)) {
                                            template = template(nextRoute.params);
                                        }
                                    } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {
                                        if (angular.isFunction(templateUrl)) {
                                            templateUrl = templateUrl(nextRoute.params);
                                        }
                                        if (angular.isDefined(templateUrl)) {
                                            nextRoute.loadedTemplateUrl = $sce.valueOf(templateUrl);
                                            template = $templateRequest(templateUrl);
                                        }
                                    }
                                    if (angular.isDefined(template)) {
                                        locals['$template'] = template;
                                    }
                                    return $q.all(locals);
                                }
                            }).then(function (locals) {
                                if (nextRoute == $route.current) {
                                    if (nextRoute) {
                                        nextRoute.locals = locals;
                                        angular.copy(nextRoute.params, $routeParams);
                                    }
                                    $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);
                                }
                            }, function (error) {
                                if (nextRoute == $route.current) {
                                    $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);
                                }
                            });
                        }
                    }
                    function parseRoute() {
                        var params, match;
                        angular.forEach(routes, function (route, path) {
                            if (!match && (params = switchRouteMatcher($location.path(), route))) {
                                match = inherit(route, {
                                    params: angular.extend({}, $location.search(), params),
                                    pathParams: params
                                });
                                match.$$route = route;
                            }
                        });
                        return match || routes[null] && inherit(routes[null], {
                            params: {},
                            pathParams: {}
                        });
                    }
                    function interpolate(string, params) {
                        var result = [];
                        angular.forEach((string || '').split(':'), function (segment, i) {
                            if (i === 0) {
                                result.push(segment);
                            } else {
                                var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
                                var key = segmentMatch[1];
                                result.push(params[key]);
                                result.push(segmentMatch[2] || '');
                                delete params[key];
                            }
                        });
                        return result.join('');
                    }
                }
            ];
        }
        ngRouteModule.provider('$routeParams', $RouteParamsProvider);
        function $RouteParamsProvider() {
            this.$get = function () {
                return {};
            };
        }
        ngRouteModule.directive('ngView', ngViewFactory);
        ngRouteModule.directive('ngView', ngViewFillContentFactory);
        ngViewFactory.$inject = [
            '$route',
            '$anchorScroll',
            '$animate'
        ];
        function ngViewFactory($route, $anchorScroll, $animate) {
            return {
                restrict: 'ECA',
                terminal: true,
                priority: 400,
                transclude: 'element',
                link: function (scope, $element, attr, ctrl, $transclude) {
                    var currentScope, currentElement, previousLeaveAnimation, autoScrollExp = attr.autoscroll, onloadExp = attr.onload || '';
                    scope.$on('$routeChangeSuccess', update);
                    update();
                    function cleanupLastView() {
                        if (previousLeaveAnimation) {
                            $animate.cancel(previousLeaveAnimation);
                            previousLeaveAnimation = null;
                        }
                        if (currentScope) {
                            currentScope.$destroy();
                            currentScope = null;
                        }
                        if (currentElement) {
                            previousLeaveAnimation = $animate.leave(currentElement);
                            previousLeaveAnimation.then(function () {
                                previousLeaveAnimation = null;
                            });
                            currentElement = null;
                        }
                    }
                    function update() {
                        var locals = $route.current && $route.current.locals, template = locals && locals.$template;
                        if (angular.isDefined(template)) {
                            var newScope = scope.$new();
                            var current = $route.current;
                            var clone = $transclude(newScope, function (clone) {
                                $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {
                                    if (angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                                        $anchorScroll();
                                    }
                                });
                                cleanupLastView();
                            });
                            currentElement = clone;
                            currentScope = current.scope = newScope;
                            currentScope.$emit('$viewContentLoaded');
                            currentScope.$eval(onloadExp);
                        } else {
                            cleanupLastView();
                        }
                    }
                }
            };
        }
        ngViewFillContentFactory.$inject = [
            '$compile',
            '$controller',
            '$route'
        ];
        function ngViewFillContentFactory($compile, $controller, $route) {
            return {
                restrict: 'ECA',
                priority: -400,
                link: function (scope, $element) {
                    var current = $route.current, locals = current.locals;
                    $element.html(current.template);
                    var link = $compile($element.contents());
                    if (current.controller) {
                        locals.$scope = scope;
                        var controller = $controller(current.controller, locals);
                        if (current.controllerAs) {
                            scope[current.controllerAs] = controller;
                        }
                        $element.data('$ngControllerController', controller);
                        $element.children().data('$ngControllerController', controller);
                    }
                    link(scope);
                }
            };
        }
    });
}.call(this));
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define('moment', [], factory) : global.moment = factory();
}(this, function () {
    'use strict';
    var hookCallback;
    function utils_hooks__hooks() {
        return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }
        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }
        return a;
    }
    function create_utc__createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }
    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;
            if (m._strict) {
                m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }
    function valid__createInvalid(flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }
        return m;
    }
    var momentProperties = utils_hooks__hooks.momentProperties = [];
    function copyConfig(to, from) {
        var i, prop, val;
        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }
        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }
        return to;
    }
    var updateInProgress = false;
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }
        return value;
    }
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }
    function Locale() {
    }
    var locales = {};
    var globalLocale;
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }
    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) {
            }
        }
        return locales[name];
    }
    function locale_locales__getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            } else {
                data = defineLocale(key, values);
            }
            if (data) {
                globalLocale = data;
            }
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);
            locale_locales__getSetGlobalLocale(name);
            return locales[name];
        } else {
            delete locales[name];
            return null;
        }
    }
    function locale_locales__getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }
        if (!key) {
            return globalLocale;
        }
        if (!isArray(key)) {
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }
        return chooseLocale(key);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }
        return normalizedInput;
    }
    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }
    function get_set__get(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }
    function get_set__set(mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
    function getSet(units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }
        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;
    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var regexes = {};
    function isFunction(sth) {
        return typeof sth === 'function' && Object.prototype.toString.call(sth) === '[object Function]';
    }
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }
        return regexes[token](config._strict, config._locale);
    }
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    var tokens = {};
    function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }
    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }
    addFormatToken('M', [
        'MM',
        2
    ], 'Mo', function () {
        return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });
    addUnitAlias('month', 'M');
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', matchWord);
    addRegexToken('MMMM', matchWord);
    addParseToken([
        'M',
        'MM'
    ], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        'MMM',
        'MMMM'
    ], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m) {
        return this._months[m.month()];
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m) {
        return this._monthsShort[m.month()];
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
            mom = create_utc__createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }
    function setMonth(mom, value) {
        var dayOfMonth;
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            if (typeof value !== 'number') {
                return mom;
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    function checkOverflow(m) {
        var overflow;
        var a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    utils_hooks__hooks.suppressDeprecationWarnings = false;
    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var isoDates = [
        [
            'YYYYYY-MM-DD',
            /[+-]\d{6}-\d{2}-\d{2}/
        ],
        [
            'YYYY-MM-DD',
            /\d{4}-\d{2}-\d{2}/
        ],
        [
            'GGGG-[W]WW-E',
            /\d{4}-W\d{2}-\d/
        ],
        [
            'GGGG-[W]WW',
            /\d{4}-W\d{2}/
        ],
        [
            'YYYY-DDD',
            /\d{4}-\d{3}/
        ]
    ];
    var isoTimes = [
        [
            'HH:mm:ss.SSSS',
            /(T| )\d\d:\d\d:\d\d\.\d+/
        ],
        [
            'HH:mm:ss',
            /(T| )\d\d:\d\d:\d\d/
        ],
        [
            'HH:mm',
            /(T| )\d\d:\d\d/
        ],
        [
            'HH',
            /(T| )\d\d/
        ]
    ];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    function configFromISO(config) {
        var i, l, string = config._i, match = from_string__isoRegex.exec(string);
        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }
    utils_hooks__hooks.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    function createDate(y, m, d, h, M, s, ms) {
        var date = new Date(y, m, d, h, M, s, ms);
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }
    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }
    addFormatToken(0, [
        'YY',
        2
    ], 0, function () {
        return this.year() % 100;
    });
    addFormatToken(0, [
        'YYYY',
        4
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYY',
        5
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYYY',
        6,
        true
    ], 0, 'year');
    addUnitAlias('year', 'y');
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
        'YYYYY',
        'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    var getSetYear = makeGetSet('FullYear', false);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    addFormatToken('w', [
        'ww',
        2
    ], 'wo', 'week');
    addFormatToken('W', [
        'WW',
        2
    ], 'Wo', 'isoWeek');
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
    ], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }
        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }
        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    addFormatToken('DDD', [
        'DDDD',
        3
    ], 'DDDo', 'dayOfYear');
    addUnitAlias('dayOfYear', 'DDD');
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
        'DDD',
        'DDDD'
    ], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }
        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;
        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;
        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }
    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        }
        return [
            now.getFullYear(),
            now.getMonth(),
            now.getDate()
        ];
    }
    function configFromArray(config) {
        var i, date, input = [], currentDate, yearToUse;
        if (config._d) {
            return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);
            if (w.d != null) {
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                weekday = w.e + dow;
            } else {
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
    utils_hooks__hooks.ISO_8601 = function () {
    };
    function configFromStringAndFormat(config) {
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }
        if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            return hour;
        }
    }
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (!valid__isValid(tempConfig)) {
                continue;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) {
            return;
        }
        var i = normalizeObjectUnits(config._i);
        config._a = [
            i.year,
            i.month,
            i.day || i.date,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ];
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            res.add(1, 'd');
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || locale_locales__getLocale(config._l);
        if (input === null || format === undefined && input === '') {
            return valid__createInvalid({ nullInput: true });
        }
        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof input === 'object') {
            configFromObject(config);
        } else if (typeof input === 'number') {
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (typeof locale === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function local__createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function () {
        var other = local__createLocal.apply(null, arguments);
        return other < this ? this : other;
    });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function () {
        var other = local__createLocal.apply(null, arguments);
        return other > this ? this : other;
    });
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 3600000;
        this._days = +days + weeks * 7;
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = locale_locales__getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset('Z', ':');
    offset('ZZ', '');
    addRegexToken('Z', matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken([
        'Z',
        'ZZ'
    ], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(string) {
        var matches = (string || '').match(matchOffset) || [];
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || [
            '-',
            0,
            0
        ];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return parts[0] === '+' ? minutes : -minutes;
    }
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - +res;
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }
    function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    utils_hooks__hooks.updateOffset = function () {
    };
    function getSetOffset(input, keepLocalTime) {
        var offset = this._offset || 0, localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
        } else {
            return -this.utcOffset();
        }
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        input = input ? local__createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }
        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }
        return this._isDSTShifted;
    }
    function isLocal() {
        return !this._isUTC;
    }
    function isUtcOffset() {
        return this._isUTC;
    }
    function isUtc() {
        return this._isUTC && this._offset === 0;
    }
    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;
    function create__createDuration(input, key) {
        var duration = input, match = null, sign, ret, diffRes;
        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                d: parseIso(match[4], sign),
                h: parseIso(match[5], sign),
                m: parseIso(match[6], sign),
                s: parseIso(match[7], sign),
                w: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }
        return ret;
    }
    create__createDuration.fn = Duration.prototype;
    function parseIso(inp, sign) {
        var res = inp && parseFloat(inp.replace(',', '.'));
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {
            milliseconds: 0,
            months: 0
        };
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val;
                val = period;
                period = tmp;
            }
            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }
    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = duration._days, months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;
        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }
    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');
    function moment_calendar__calendar(time, formats) {
        var now = time || local__createLocal(), sod = cloneWithOffset(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }
    function isBefore(input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }
    function isBetween(from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }
    function isSame(input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units);
        }
    }
    function diff(input, units, asFloat) {
        var that = cloneWithOffset(input, this), zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000, delta, output;
        units = normalizeUnits(units);
        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1000 : units === 'minute' ? delta / 60000 : units === 'hour' ? delta / 3600000 : units === 'day' ? (delta - zoneDelta) / 86400000 : units === 'week' ? (delta - zoneDelta) / 604800000 : delta;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust);
    }
    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function moment_format__toISOString() {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }
    function format(inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({
            to: this,
            from: time
        }).locale(this.locale()).humanize(!withoutSuffix);
    }
    function fromNow(withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({
            from: this,
            to: time
        }).locale(this.locale()).humanize(!withoutSuffix);
    }
    function toNow(withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }
    function locale(key) {
        var newLocaleData;
        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });
    function localeData() {
        return this._locale;
    }
    function startOf(units) {
        units = normalizeUnits(units);
        switch (units) {
        case 'year':
            this.month(0);
        case 'quarter':
        case 'month':
            this.date(1);
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
        case 'hour':
            this.minutes(0);
        case 'minute':
            this.seconds(0);
        case 'second':
            this.milliseconds(0);
        }
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }
        return this;
    }
    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    }
    function to_type__valueOf() {
        return +this._d - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(+this / 1000);
    }
    function toDate() {
        return this._offset ? new Date(+this) : this._d;
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function moment_valid__isValid() {
        return valid__isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    addFormatToken(0, [
        'gg',
        2
    ], 0, function () {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        'GG',
        2
    ], 0, function () {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
    ], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        'gg',
        'GG'
    ], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([
            year,
            11,
            31 + dow - doy
        ]), dow, doy).week;
    }
    function getSetWeekYear(input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add(input - year, 'y');
    }
    function getSetISOWeekYear(input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add(input - year, 'y');
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    addFormatToken('Q', 0, 0, 'quarter');
    addUnitAlias('quarter', 'Q');
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken('D', [
        'DD',
        2
    ], 'Do', 'date');
    addUnitAlias('date', 'D');
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });
    addParseToken([
        'D',
        'DD'
    ], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });
    var getSetDayOfMonth = makeGetSet('Date', true);
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', matchWord);
    addRegexToken('ddd', matchWord);
    addRegexToken('dddd', matchWord);
    addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
    ], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });
    addWeekParseToken([
        'd',
        'e',
        'E'
    ], function (input, week, config, token) {
        week[token] = toInt(input);
    });
    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }
        if (!isNaN(input)) {
            return parseInt(input, 10);
        }
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }
        return null;
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m) {
        return this._weekdays[m.day()];
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return this._weekdaysShort[m.day()];
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return this._weekdaysMin[m.day()];
    }
    function localeWeekdaysParse(weekdayName) {
        var i, mom, regex;
        this._weekdaysParse = this._weekdaysParse || [];
        for (i = 0; i < 7; i++) {
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([
                    2000,
                    1
                ]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }
    function getSetDayOfWeek(input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }
    function getSetLocaleDayOfWeek(input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }
    addFormatToken('H', [
        'HH',
        2
    ], 0, 'hour');
    addFormatToken('h', [
        'hh',
        2
    ], 0, function () {
        return this.hours() % 12 || 12;
    });
    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem('a', true);
    meridiem('A', false);
    addUnitAlias('hour', 'h');
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addParseToken([
        'H',
        'HH'
    ], HOUR);
    addParseToken([
        'a',
        'A'
    ], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        'h',
        'hh'
    ], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    function localeIsPM(input) {
        return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }
    var getSetHour = makeGetSet('Hours', true);
    addFormatToken('m', [
        'mm',
        2
    ], 0, 'minute');
    addUnitAlias('minute', 'm');
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
        'm',
        'mm'
    ], MINUTE);
    var getSetMinute = makeGetSet('Minutes', false);
    addFormatToken('s', [
        'ss',
        2
    ], 0, 'second');
    addUnitAlias('second', 's');
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
        's',
        'ss'
    ], SECOND);
    var getSetSecond = makeGetSet('Seconds', false);
    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        'SS',
        2
    ], 0, function () {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        'SSS',
        3
    ], 0, 'millisecond');
    addFormatToken(0, [
        'SSSS',
        4
    ], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        'SSSSS',
        5
    ], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        'SSSSSS',
        6
    ], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        'SSSSSSS',
        7
    ], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        'SSSSSSSS',
        8
    ], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        'SSSSSSSSS',
        9
    ], 0, function () {
        return this.millisecond() * 1000000;
    });
    addUnitAlias('millisecond', 'ms');
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var momentPrototype__proto = Moment.prototype;
    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = getSet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = getSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = moment_format__toISOString;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;
    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
    var momentPrototype = momentPrototype__proto;
    function moment__createUnix(input) {
        return local__createLocal(input * 1000);
    }
    function moment__createInZone() {
        return local__createLocal.apply(null, arguments).parseZone();
    }
    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };
    function locale_calendar__calendar(key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }
    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
            return format;
        }
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }
    function preParsePostFormat(string) {
        return string;
    }
    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };
    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }
    function locale_set__set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
    }
    var prototype__proto = Locale.prototype;
    prototype__proto._calendar = defaultCalendar;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto._invalidDate = defaultInvalidDate;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto._ordinal = defaultOrdinal;
    prototype__proto.ordinal = ordinal;
    prototype__proto._ordinalParse = defaultOrdinalParse;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto._relativeTime = defaultRelativeTime;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;
    prototype__proto.months = localeMonths;
    prototype__proto._months = defaultLocaleMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto._weekdays = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;
    function lists__get(format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function list(format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }
        format = format || '';
        if (index != null) {
            return lists__get(format, index, field, setter);
        }
        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }
    function lists__listMonths(format, index) {
        return list(format, index, 'months', 12, 'month');
    }
    function lists__listMonthsShort(format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }
    function lists__listWeekdays(format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }
    function lists__listWeekdaysShort(format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }
    function lists__listWeekdaysMin(format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }
    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
    var mathAbs = Math.abs;
    function duration_abs__abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function duration_add_subtract__addSubtract(duration, input, value, direction) {
        var other = create__createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    function duration_add_subtract__add(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }
    function duration_add_subtract__subtract(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }
    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
            days = 0;
            months = 0;
        }
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        return months * 146097 / 4800;
    }
    function as(units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 86400000;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
            case 'week':
                return days / 7 + milliseconds / 604800000;
            case 'day':
                return days + milliseconds / 86400000;
            case 'hour':
                return days * 24 + milliseconds / 3600000;
            case 'minute':
                return days * 1440 + milliseconds / 60000;
            case 'second':
                return days * 86400 + milliseconds / 1000;
            case 'millisecond':
                return Math.floor(days * 86400000) + milliseconds;
            default:
                throw new Error('Unknown unit ' + units);
            }
        }
    }
    function duration_as__valueOf() {
        return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
    }
    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');
    function duration_get__get(units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }
    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }
    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round;
    var thresholds = {
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds < thresholds.s && [
            's',
            seconds
        ] || minutes === 1 && ['m'] || minutes < thresholds.m && [
            'mm',
            minutes
        ] || hours === 1 && ['h'] || hours < thresholds.h && [
            'hh',
            hours
        ] || days === 1 && ['d'] || days < thresholds.d && [
            'dd',
            days
        ] || months === 1 && ['M'] || months < thresholds.M && [
            'MM',
            months
        ] || years === 1 && ['y'] || [
            'yy',
            years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }
    function humanize(withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);
        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }
        return locale.postformat(output);
    }
    var iso_string__abs = Math.abs;
    function iso_string__toISOString() {
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days = iso_string__abs(this._days);
        var months = iso_string__abs(this._months);
        var minutes, hours, years;
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        years = absFloor(months / 12);
        months %= 12;
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();
        if (!total) {
            return 'P0D';
        }
        return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
    }
    var duration_prototype__proto = Duration.prototype;
    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });
    utils_hooks__hooks.version = '2.10.6';
    setHookCallback(local__createLocal);
    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    var _moment = utils_hooks__hooks;
    _moment.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'Ah点mm分',
            LTS: 'Ah点m分s秒',
            L: 'YYYY-MM-DD',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日Ah点mm分',
            LLLL: 'YYYY年MMMD日ddddAh点mm分',
            l: 'YYYY-MM-DD',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日Ah点mm分',
            llll: 'YYYY年MMMD日ddddAh点mm分'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: function () {
                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
            },
            nextDay: function () {
                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
            },
            lastDay: function () {
                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
            },
            nextWeek: function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            lastWeek: function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix() ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            sameElse: 'LL'
        },
        ordinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function (number, period) {
            switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            case 'M':
                return number + '月';
            case 'w':
            case 'W':
                return number + '周';
            default:
                return number;
            }
        },
        relativeTime: {
            future: '%s内',
            past: '%s前',
            s: '几秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年'
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    return _moment;
}));
!function (a, b) {
    'object' == typeof module && 'object' == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) {
        if (!a.document)
            throw new Error('jQuery requires a window with a document');
        return b(a);
    } : b(a);
}('undefined' != typeof window ? window : this, function (a, b) {
    var c = [], d = c.slice, e = c.concat, f = c.push, g = c.indexOf, h = {}, i = h.toString, j = h.hasOwnProperty, k = {}, l = '1.11.2', m = function (a, b) {
            return new m.fn.init(a, b);
        }, n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, o = /^-ms-/, p = /-([\da-z])/gi, q = function (a, b) {
            return b.toUpperCase();
        };
    m.fn = m.prototype = {
        jquery: l,
        constructor: m,
        selector: '',
        length: 0,
        toArray: function () {
            return d.call(this);
        },
        get: function (a) {
            return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
        },
        pushStack: function (a) {
            var b = m.merge(this.constructor(), a);
            return b.prevObject = this, b.context = this.context, b;
        },
        each: function (a, b) {
            return m.each(this, a, b);
        },
        map: function (a) {
            return this.pushStack(m.map(this, function (b, c) {
                return a.call(b, c, b);
            }));
        },
        slice: function () {
            return this.pushStack(d.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (a) {
            var b = this.length, c = +a + (0 > a ? b : 0);
            return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
        },
        end: function () {
            return this.prevObject || this.constructor(null);
        },
        push: f,
        sort: c.sort,
        splice: c.splice
    }, m.extend = m.fn.extend = function () {
        var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j = !1;
        for ('boolean' == typeof g && (j = g, g = arguments[h] || {}, h++), 'object' == typeof g || m.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++)
            if (null != (e = arguments[h]))
                for (d in e)
                    a = g[d], c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));
        return g;
    }, m.extend({
        expando: 'jQuery' + (l + Math.random()).replace(/\D/g, ''),
        isReady: !0,
        error: function (a) {
            throw new Error(a);
        },
        noop: function () {
        },
        isFunction: function (a) {
            return 'function' === m.type(a);
        },
        isArray: Array.isArray || function (a) {
            return 'array' === m.type(a);
        },
        isWindow: function (a) {
            return null != a && a == a.window;
        },
        isNumeric: function (a) {
            return !m.isArray(a) && a - parseFloat(a) + 1 >= 0;
        },
        isEmptyObject: function (a) {
            var b;
            for (b in a)
                return !1;
            return !0;
        },
        isPlainObject: function (a) {
            var b;
            if (!a || 'object' !== m.type(a) || a.nodeType || m.isWindow(a))
                return !1;
            try {
                if (a.constructor && !j.call(a, 'constructor') && !j.call(a.constructor.prototype, 'isPrototypeOf'))
                    return !1;
            } catch (c) {
                return !1;
            }
            if (k.ownLast)
                for (b in a)
                    return j.call(a, b);
            for (b in a);
            return void 0 === b || j.call(a, b);
        },
        type: function (a) {
            return null == a ? a + '' : 'object' == typeof a || 'function' == typeof a ? h[i.call(a)] || 'object' : typeof a;
        },
        globalEval: function (b) {
            b && m.trim(b) && (a.execScript || function (b) {
                a.eval.call(a, b);
            })(b);
        },
        camelCase: function (a) {
            return a.replace(o, 'ms-').replace(p, q);
        },
        nodeName: function (a, b) {
            return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
        },
        each: function (a, b, c) {
            var d, e = 0, f = a.length, g = r(a);
            if (c) {
                if (g) {
                    for (; f > e; e++)
                        if (d = b.apply(a[e], c), d === !1)
                            break;
                } else
                    for (e in a)
                        if (d = b.apply(a[e], c), d === !1)
                            break;
            } else if (g) {
                for (; f > e; e++)
                    if (d = b.call(a[e], e, a[e]), d === !1)
                        break;
            } else
                for (e in a)
                    if (d = b.call(a[e], e, a[e]), d === !1)
                        break;
            return a;
        },
        trim: function (a) {
            return null == a ? '' : (a + '').replace(n, '');
        },
        makeArray: function (a, b) {
            var c = b || [];
            return null != a && (r(Object(a)) ? m.merge(c, 'string' == typeof a ? [a] : a) : f.call(c, a)), c;
        },
        inArray: function (a, b, c) {
            var d;
            if (b) {
                if (g)
                    return g.call(b, a, c);
                for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++)
                    if (c in b && b[c] === a)
                        return c;
            }
            return -1;
        },
        merge: function (a, b) {
            var c = +b.length, d = 0, e = a.length;
            while (c > d)
                a[e++] = b[d++];
            if (c !== c)
                while (void 0 !== b[d])
                    a[e++] = b[d++];
            return a.length = e, a;
        },
        grep: function (a, b, c) {
            for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++)
                d = !b(a[f], f), d !== h && e.push(a[f]);
            return e;
        },
        map: function (a, b, c) {
            var d, f = 0, g = a.length, h = r(a), i = [];
            if (h)
                for (; g > f; f++)
                    d = b(a[f], f, c), null != d && i.push(d);
            else
                for (f in a)
                    d = b(a[f], f, c), null != d && i.push(d);
            return e.apply([], i);
        },
        guid: 1,
        proxy: function (a, b) {
            var c, e, f;
            return 'string' == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), e = function () {
                return a.apply(b || this, c.concat(d.call(arguments)));
            }, e.guid = a.guid = a.guid || m.guid++, e) : void 0;
        },
        now: function () {
            return +new Date();
        },
        support: k
    }), m.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (a, b) {
        h['[object ' + b + ']'] = b.toLowerCase();
    });
    function r(a) {
        var b = a.length, c = m.type(a);
        return 'function' === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : 'array' === c || 0 === b || 'number' == typeof b && b > 0 && b - 1 in a;
    }
    var s = function (a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = 'sizzle' + 1 * new Date(), v = a.document, w = 0, x = 0, y = hb(), z = hb(), A = hb(), B = function (a, b) {
                return a === b && (l = !0), 0;
            }, C = 1 << 31, D = {}.hasOwnProperty, E = [], F = E.pop, G = E.push, H = E.push, I = E.slice, J = function (a, b) {
                for (var c = 0, d = a.length; d > c; c++)
                    if (a[c] === b)
                        return c;
                return -1;
            }, K = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', L = '[\\x20\\t\\r\\n\\f]', M = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+', N = M.replace('w', 'w#'), O = '\\[' + L + '*(' + M + ')(?:' + L + '*([*^$|!~]?=)' + L + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + N + '))|)' + L + '*\\]', P = ':(' + M + ')(?:\\(((\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|' + O + ')*)|.*)\\)|)', Q = new RegExp(L + '+', 'g'), R = new RegExp('^' + L + '+|((?:^|[^\\\\])(?:\\\\.)*)' + L + '+$', 'g'), S = new RegExp('^' + L + '*,' + L + '*'), T = new RegExp('^' + L + '*([>+~]|' + L + ')' + L + '*'), U = new RegExp('=' + L + '*([^\\]\'"]*?)' + L + '*\\]', 'g'), V = new RegExp(P), W = new RegExp('^' + N + '$'), X = {
                ID: new RegExp('^#(' + M + ')'),
                CLASS: new RegExp('^\\.(' + M + ')'),
                TAG: new RegExp('^(' + M.replace('w', 'w*') + ')'),
                ATTR: new RegExp('^' + O),
                PSEUDO: new RegExp('^' + P),
                CHILD: new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + L + '*(even|odd|(([+-]|)(\\d*)n|)' + L + '*(?:([+-]|)' + L + '*(\\d+)|))' + L + '*\\)|)', 'i'),
                bool: new RegExp('^(?:' + K + ')$', 'i'),
                needsContext: new RegExp('^' + L + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + L + '*((?:-\\d)?\\d*)' + L + '*\\)|)(?=[^-]|$)', 'i')
            }, Y = /^(?:input|select|textarea|button)$/i, Z = /^h\d$/i, $ = /^[^{]+\{\s*\[native \w/, _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ab = /[+~]/, bb = /'|\\/g, cb = new RegExp('\\\\([\\da-f]{1,6}' + L + '?|(' + L + ')|.)', 'ig'), db = function (a, b, c) {
                var d = '0x' + b - 65536;
                return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
            }, eb = function () {
                m();
            };
        try {
            H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType;
        } catch (fb) {
            H = {
                apply: E.length ? function (a, b) {
                    G.apply(a, I.call(b));
                } : function (a, b) {
                    var c = a.length, d = 0;
                    while (a[c++] = b[d++]);
                    a.length = c - 1;
                }
            };
        }
        function gb(a, b, d, e) {
            var f, h, j, k, l, o, r, s, w, x;
            if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], k = b.nodeType, 'string' != typeof a || !a || 1 !== k && 9 !== k && 11 !== k)
                return d;
            if (!e && p) {
                if (11 !== k && (f = _.exec(a)))
                    if (j = f[1]) {
                        if (9 === k) {
                            if (h = b.getElementById(j), !h || !h.parentNode)
                                return d;
                            if (h.id === j)
                                return d.push(h), d;
                        } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j)
                            return d.push(h), d;
                    } else {
                        if (f[2])
                            return H.apply(d, b.getElementsByTagName(a)), d;
                        if ((j = f[3]) && c.getElementsByClassName)
                            return H.apply(d, b.getElementsByClassName(j)), d;
                    }
                if (c.qsa && (!q || !q.test(a))) {
                    if (s = r = u, w = b, x = 1 !== k && a, 1 === k && 'object' !== b.nodeName.toLowerCase()) {
                        o = g(a), (r = b.getAttribute('id')) ? s = r.replace(bb, '\\$&') : b.setAttribute('id', s), s = '[id=\'' + s + '\'] ', l = o.length;
                        while (l--)
                            o[l] = s + rb(o[l]);
                        w = ab.test(a) && pb(b.parentNode) || b, x = o.join(',');
                    }
                    if (x)
                        try {
                            return H.apply(d, w.querySelectorAll(x)), d;
                        } catch (y) {
                        } finally {
                            r || b.removeAttribute('id');
                        }
                }
            }
            return i(a.replace(R, '$1'), b, d, e);
        }
        function hb() {
            var a = [];
            function b(c, e) {
                return a.push(c + ' ') > d.cacheLength && delete b[a.shift()], b[c + ' '] = e;
            }
            return b;
        }
        function ib(a) {
            return a[u] = !0, a;
        }
        function jb(a) {
            var b = n.createElement('div');
            try {
                return !!a(b);
            } catch (c) {
                return !1;
            } finally {
                b.parentNode && b.parentNode.removeChild(b), b = null;
            }
        }
        function kb(a, b) {
            var c = a.split('|'), e = a.length;
            while (e--)
                d.attrHandle[c[e]] = b;
        }
        function lb(a, b) {
            var c = b && a, d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C);
            if (d)
                return d;
            if (c)
                while (c = c.nextSibling)
                    if (c === b)
                        return -1;
            return a ? 1 : -1;
        }
        function mb(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return 'input' === c && b.type === a;
            };
        }
        function nb(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return ('input' === c || 'button' === c) && b.type === a;
            };
        }
        function ob(a) {
            return ib(function (b) {
                return b = +b, ib(function (c, d) {
                    var e, f = a([], c.length, b), g = f.length;
                    while (g--)
                        c[e = f[g]] && (c[e] = !(d[e] = c[e]));
                });
            });
        }
        function pb(a) {
            return a && 'undefined' != typeof a.getElementsByTagName && a;
        }
        c = gb.support = {}, f = gb.isXML = function (a) {
            var b = a && (a.ownerDocument || a).documentElement;
            return b ? 'HTML' !== b.nodeName : !1;
        }, m = gb.setDocument = function (a) {
            var b, e, g = a ? a.ownerDocument || a : v;
            return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = g.documentElement, e = g.defaultView, e && e !== e.top && (e.addEventListener ? e.addEventListener('unload', eb, !1) : e.attachEvent && e.attachEvent('onunload', eb)), p = !f(g), c.attributes = jb(function (a) {
                return a.className = 'i', !a.getAttribute('className');
            }), c.getElementsByTagName = jb(function (a) {
                return a.appendChild(g.createComment('')), !a.getElementsByTagName('*').length;
            }), c.getElementsByClassName = $.test(g.getElementsByClassName), c.getById = jb(function (a) {
                return o.appendChild(a).id = u, !g.getElementsByName || !g.getElementsByName(u).length;
            }), c.getById ? (d.find.ID = function (a, b) {
                if ('undefined' != typeof b.getElementById && p) {
                    var c = b.getElementById(a);
                    return c && c.parentNode ? [c] : [];
                }
            }, d.filter.ID = function (a) {
                var b = a.replace(cb, db);
                return function (a) {
                    return a.getAttribute('id') === b;
                };
            }) : (delete d.find.ID, d.filter.ID = function (a) {
                var b = a.replace(cb, db);
                return function (a) {
                    var c = 'undefined' != typeof a.getAttributeNode && a.getAttributeNode('id');
                    return c && c.value === b;
                };
            }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
                return 'undefined' != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
            } : function (a, b) {
                var c, d = [], e = 0, f = b.getElementsByTagName(a);
                if ('*' === a) {
                    while (c = f[e++])
                        1 === c.nodeType && d.push(c);
                    return d;
                }
                return f;
            }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
                return p ? b.getElementsByClassName(a) : void 0;
            }, r = [], q = [], (c.qsa = $.test(g.querySelectorAll)) && (jb(function (a) {
                o.appendChild(a).innerHTML = '<a id=\'' + u + '\'></a><select id=\'' + u + '-\f]\' msallowcapture=\'\'><option selected=\'\'></option></select>', a.querySelectorAll('[msallowcapture^=\'\']').length && q.push('[*^$]=' + L + '*(?:\'\'|"")'), a.querySelectorAll('[selected]').length || q.push('\\[' + L + '*(?:value|' + K + ')'), a.querySelectorAll('[id~=' + u + '-]').length || q.push('~='), a.querySelectorAll(':checked').length || q.push(':checked'), a.querySelectorAll('a#' + u + '+*').length || q.push('.#.+[+~]');
            }), jb(function (a) {
                var b = g.createElement('input');
                b.setAttribute('type', 'hidden'), a.appendChild(b).setAttribute('name', 'D'), a.querySelectorAll('[name=d]').length && q.push('name' + L + '*[*^$|!~]?='), a.querySelectorAll(':enabled').length || q.push(':enabled', ':disabled'), a.querySelectorAll('*,:x'), q.push(',.*:');
            })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && jb(function (a) {
                c.disconnectedMatch = s.call(a, 'div'), s.call(a, '[s!=\'\']:x'), r.push('!=', P);
            }), q = q.length && new RegExp(q.join('|')), r = r.length && new RegExp(r.join('|')), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {
                var c = 9 === a.nodeType ? a.documentElement : a, d = b && b.parentNode;
                return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
            } : function (a, b) {
                if (b)
                    while (b = b.parentNode)
                        if (b === a)
                            return !0;
                return !1;
            }, B = b ? function (a, b) {
                if (a === b)
                    return l = !0, 0;
                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === g || a.ownerDocument === v && t(v, a) ? -1 : b === g || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1);
            } : function (a, b) {
                if (a === b)
                    return l = !0, 0;
                var c, d = 0, e = a.parentNode, f = b.parentNode, h = [a], i = [b];
                if (!e || !f)
                    return a === g ? -1 : b === g ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0;
                if (e === f)
                    return lb(a, b);
                c = a;
                while (c = c.parentNode)
                    h.unshift(c);
                c = b;
                while (c = c.parentNode)
                    i.unshift(c);
                while (h[d] === i[d])
                    d++;
                return d ? lb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
            }, g) : n;
        }, gb.matches = function (a, b) {
            return gb(a, null, null, b);
        }, gb.matchesSelector = function (a, b) {
            if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, '=\'$1\']'), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b)))
                try {
                    var d = s.call(a, b);
                    if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType)
                        return d;
                } catch (e) {
                }
            return gb(b, n, null, [a]).length > 0;
        }, gb.contains = function (a, b) {
            return (a.ownerDocument || a) !== n && m(a), t(a, b);
        }, gb.attr = function (a, b) {
            (a.ownerDocument || a) !== n && m(a);
            var e = d.attrHandle[b.toLowerCase()], f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
            return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
        }, gb.error = function (a) {
            throw new Error('Syntax error, unrecognized expression: ' + a);
        }, gb.uniqueSort = function (a) {
            var b, d = [], e = 0, f = 0;
            if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
                while (b = a[f++])
                    b === a[f] && (e = d.push(f));
                while (e--)
                    a.splice(d[e], 1);
            }
            return k = null, a;
        }, e = gb.getText = function (a) {
            var b, c = '', d = 0, f = a.nodeType;
            if (f) {
                if (1 === f || 9 === f || 11 === f) {
                    if ('string' == typeof a.textContent)
                        return a.textContent;
                    for (a = a.firstChild; a; a = a.nextSibling)
                        c += e(a);
                } else if (3 === f || 4 === f)
                    return a.nodeValue;
            } else
                while (b = a[d++])
                    c += e(b);
            return c;
        }, d = gb.selectors = {
            cacheLength: 50,
            createPseudo: ib,
            match: X,
            attrHandle: {},
            find: {},
            relative: {
                '>': {
                    dir: 'parentNode',
                    first: !0
                },
                ' ': { dir: 'parentNode' },
                '+': {
                    dir: 'previousSibling',
                    first: !0
                },
                '~': { dir: 'previousSibling' }
            },
            preFilter: {
                ATTR: function (a) {
                    return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || '').replace(cb, db), '~=' === a[2] && (a[3] = ' ' + a[3] + ' '), a.slice(0, 4);
                },
                CHILD: function (a) {
                    return a[1] = a[1].toLowerCase(), 'nth' === a[1].slice(0, 3) ? (a[3] || gb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ('even' === a[3] || 'odd' === a[3])), a[5] = +(a[7] + a[8] || 'odd' === a[3])) : a[3] && gb.error(a[0]), a;
                },
                PSEUDO: function (a) {
                    var b, c = !a[6] && a[2];
                    return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || '' : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(')', c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
                }
            },
            filter: {
                TAG: function (a) {
                    var b = a.replace(cb, db).toLowerCase();
                    return '*' === a ? function () {
                        return !0;
                    } : function (a) {
                        return a.nodeName && a.nodeName.toLowerCase() === b;
                    };
                },
                CLASS: function (a) {
                    var b = y[a + ' '];
                    return b || (b = new RegExp('(^|' + L + ')' + a + '(' + L + '|$)')) && y(a, function (a) {
                        return b.test('string' == typeof a.className && a.className || 'undefined' != typeof a.getAttribute && a.getAttribute('class') || '');
                    });
                },
                ATTR: function (a, b, c) {
                    return function (d) {
                        var e = gb.attr(d, a);
                        return null == e ? '!=' === b : b ? (e += '', '=' === b ? e === c : '!=' === b ? e !== c : '^=' === b ? c && 0 === e.indexOf(c) : '*=' === b ? c && e.indexOf(c) > -1 : '$=' === b ? c && e.slice(-c.length) === c : '~=' === b ? (' ' + e.replace(Q, ' ') + ' ').indexOf(c) > -1 : '|=' === b ? e === c || e.slice(0, c.length + 1) === c + '-' : !1) : !0;
                    };
                },
                CHILD: function (a, b, c, d, e) {
                    var f = 'nth' !== a.slice(0, 3), g = 'last' !== a.slice(-4), h = 'of-type' === b;
                    return 1 === d && 0 === e ? function (a) {
                        return !!a.parentNode;
                    } : function (b, c, i) {
                        var j, k, l, m, n, o, p = f !== g ? 'nextSibling' : 'previousSibling', q = b.parentNode, r = h && b.nodeName.toLowerCase(), s = !i && !h;
                        if (q) {
                            if (f) {
                                while (p) {
                                    l = b;
                                    while (l = l[p])
                                        if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType)
                                            return !1;
                                    o = p = 'only' === a && !o && 'nextSibling';
                                }
                                return !0;
                            }
                            if (o = [g ? q.firstChild : q.lastChild], g && s) {
                                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];
                                while (l = ++n && l && l[p] || (m = n = 0) || o.pop())
                                    if (1 === l.nodeType && ++m && l === b) {
                                        k[a] = [
                                            w,
                                            n,
                                            m
                                        ];
                                        break;
                                    }
                            } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w)
                                m = j[1];
                            else
                                while (l = ++n && l && l[p] || (m = n = 0) || o.pop())
                                    if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [
                                            w,
                                            m
                                        ]), l === b))
                                        break;
                            return m -= e, m === d || m % d === 0 && m / d >= 0;
                        }
                    };
                },
                PSEUDO: function (a, b) {
                    var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || gb.error('unsupported pseudo: ' + a);
                    return e[u] ? e(b) : e.length > 1 ? (c = [
                        a,
                        a,
                        '',
                        b
                    ], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ib(function (a, c) {
                        var d, f = e(a, b), g = f.length;
                        while (g--)
                            d = J(a, f[g]), a[d] = !(c[d] = f[g]);
                    }) : function (a) {
                        return e(a, 0, c);
                    }) : e;
                }
            },
            pseudos: {
                not: ib(function (a) {
                    var b = [], c = [], d = h(a.replace(R, '$1'));
                    return d[u] ? ib(function (a, b, c, e) {
                        var f, g = d(a, null, e, []), h = a.length;
                        while (h--)
                            (f = g[h]) && (a[h] = !(b[h] = f));
                    }) : function (a, e, f) {
                        return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
                    };
                }),
                has: ib(function (a) {
                    return function (b) {
                        return gb(a, b).length > 0;
                    };
                }),
                contains: ib(function (a) {
                    return a = a.replace(cb, db), function (b) {
                        return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
                    };
                }),
                lang: ib(function (a) {
                    return W.test(a || '') || gb.error('unsupported lang: ' + a), a = a.replace(cb, db).toLowerCase(), function (b) {
                        var c;
                        do
                            if (c = p ? b.lang : b.getAttribute('xml:lang') || b.getAttribute('lang'))
                                return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + '-');
                        while ((b = b.parentNode) && 1 === b.nodeType);
                        return !1;
                    };
                }),
                target: function (b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id;
                },
                root: function (a) {
                    return a === o;
                },
                focus: function (a) {
                    return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
                },
                enabled: function (a) {
                    return a.disabled === !1;
                },
                disabled: function (a) {
                    return a.disabled === !0;
                },
                checked: function (a) {
                    var b = a.nodeName.toLowerCase();
                    return 'input' === b && !!a.checked || 'option' === b && !!a.selected;
                },
                selected: function (a) {
                    return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
                },
                empty: function (a) {
                    for (a = a.firstChild; a; a = a.nextSibling)
                        if (a.nodeType < 6)
                            return !1;
                    return !0;
                },
                parent: function (a) {
                    return !d.pseudos.empty(a);
                },
                header: function (a) {
                    return Z.test(a.nodeName);
                },
                input: function (a) {
                    return Y.test(a.nodeName);
                },
                button: function (a) {
                    var b = a.nodeName.toLowerCase();
                    return 'input' === b && 'button' === a.type || 'button' === b;
                },
                text: function (a) {
                    var b;
                    return 'input' === a.nodeName.toLowerCase() && 'text' === a.type && (null == (b = a.getAttribute('type')) || 'text' === b.toLowerCase());
                },
                first: ob(function () {
                    return [0];
                }),
                last: ob(function (a, b) {
                    return [b - 1];
                }),
                eq: ob(function (a, b, c) {
                    return [0 > c ? c + b : c];
                }),
                even: ob(function (a, b) {
                    for (var c = 0; b > c; c += 2)
                        a.push(c);
                    return a;
                }),
                odd: ob(function (a, b) {
                    for (var c = 1; b > c; c += 2)
                        a.push(c);
                    return a;
                }),
                lt: ob(function (a, b, c) {
                    for (var d = 0 > c ? c + b : c; --d >= 0;)
                        a.push(d);
                    return a;
                }),
                gt: ob(function (a, b, c) {
                    for (var d = 0 > c ? c + b : c; ++d < b;)
                        a.push(d);
                    return a;
                })
            }
        }, d.pseudos.nth = d.pseudos.eq;
        for (b in {
                radio: !0,
                checkbox: !0,
                file: !0,
                password: !0,
                image: !0
            })
            d.pseudos[b] = mb(b);
        for (b in {
                submit: !0,
                reset: !0
            })
            d.pseudos[b] = nb(b);
        function qb() {
        }
        qb.prototype = d.filters = d.pseudos, d.setFilters = new qb(), g = gb.tokenize = function (a, b) {
            var c, e, f, g, h, i, j, k = z[a + ' '];
            if (k)
                return b ? 0 : k.slice(0);
            h = a, i = [], j = d.preFilter;
            while (h) {
                (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({
                    value: c,
                    type: e[0].replace(R, ' ')
                }), h = h.slice(c.length));
                for (g in d.filter)
                    !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
                        value: c,
                        type: g,
                        matches: e
                    }), h = h.slice(c.length));
                if (!c)
                    break;
            }
            return b ? h.length : h ? gb.error(a) : z(a, i).slice(0);
        };
        function rb(a) {
            for (var b = 0, c = a.length, d = ''; c > b; b++)
                d += a[b].value;
            return d;
        }
        function sb(a, b, c) {
            var d = b.dir, e = c && 'parentNode' === d, f = x++;
            return b.first ? function (b, c, f) {
                while (b = b[d])
                    if (1 === b.nodeType || e)
                        return a(b, c, f);
            } : function (b, c, g) {
                var h, i, j = [
                        w,
                        f
                    ];
                if (g) {
                    while (b = b[d])
                        if ((1 === b.nodeType || e) && a(b, c, g))
                            return !0;
                } else
                    while (b = b[d])
                        if (1 === b.nodeType || e) {
                            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f)
                                return j[2] = h[2];
                            if (i[d] = j, j[2] = a(b, c, g))
                                return !0;
                        }
            };
        }
        function tb(a) {
            return a.length > 1 ? function (b, c, d) {
                var e = a.length;
                while (e--)
                    if (!a[e](b, c, d))
                        return !1;
                return !0;
            } : a[0];
        }
        function ub(a, b, c) {
            for (var d = 0, e = b.length; e > d; d++)
                gb(a, b[d], c);
            return c;
        }
        function vb(a, b, c, d, e) {
            for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++)
                (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
            return g;
        }
        function wb(a, b, c, d, e, f) {
            return d && !d[u] && (d = wb(d)), e && !e[u] && (e = wb(e, f)), ib(function (f, g, h, i) {
                var j, k, l, m = [], n = [], o = g.length, p = f || ub(b || '*', h.nodeType ? [h] : h, []), q = !a || !f && b ? p : vb(p, m, a, h, i), r = c ? e || (f ? a : o || d) ? [] : g : q;
                if (c && c(q, r, h, i), d) {
                    j = vb(r, n), d(j, [], h, i), k = j.length;
                    while (k--)
                        (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
                }
                if (f) {
                    if (e || a) {
                        if (e) {
                            j = [], k = r.length;
                            while (k--)
                                (l = r[k]) && j.push(q[k] = l);
                            e(null, r = [], j, i);
                        }
                        k = r.length;
                        while (k--)
                            (l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
                    }
                } else
                    r = vb(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r);
            });
        }
        function xb(a) {
            for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[' '], i = g ? 1 : 0, k = sb(function (a) {
                        return a === b;
                    }, h, !0), l = sb(function (a) {
                        return J(b, a) > -1;
                    }, h, !0), m = [function (a, c, d) {
                            var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                            return b = null, e;
                        }]; f > i; i++)
                if (c = d.relative[a[i].type])
                    m = [sb(tb(m), c)];
                else {
                    if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                        for (e = ++i; f > e; e++)
                            if (d.relative[a[e].type])
                                break;
                        return wb(i > 1 && tb(m), i > 1 && rb(a.slice(0, i - 1).concat({ value: ' ' === a[i - 2].type ? '*' : '' })).replace(R, '$1'), c, e > i && xb(a.slice(i, e)), f > e && xb(a = a.slice(e)), f > e && rb(a));
                    }
                    m.push(c);
                }
            return tb(m);
        }
        function yb(a, b) {
            var c = b.length > 0, e = a.length > 0, f = function (f, g, h, i, k) {
                    var l, m, o, p = 0, q = '0', r = f && [], s = [], t = j, u = f || e && d.find.TAG('*', k), v = w += null == t ? 1 : Math.random() || 0.1, x = u.length;
                    for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                        if (e && l) {
                            m = 0;
                            while (o = a[m++])
                                if (o(l, g, h)) {
                                    i.push(l);
                                    break;
                                }
                            k && (w = v);
                        }
                        c && ((l = !o && l) && p--, f && r.push(l));
                    }
                    if (p += q, c && q !== p) {
                        m = 0;
                        while (o = b[m++])
                            o(r, s, g, h);
                        if (f) {
                            if (p > 0)
                                while (q--)
                                    r[q] || s[q] || (s[q] = F.call(i));
                            s = vb(s);
                        }
                        H.apply(i, s), k && !f && s.length > 0 && p + b.length > 1 && gb.uniqueSort(i);
                    }
                    return k && (w = v, j = t), r;
                };
            return c ? ib(f) : f;
        }
        return h = gb.compile = function (a, b) {
            var c, d = [], e = [], f = A[a + ' '];
            if (!f) {
                b || (b = g(a)), c = b.length;
                while (c--)
                    f = xb(b[c]), f[u] ? d.push(f) : e.push(f);
                f = A(a, yb(e, d)), f.selector = a;
            }
            return f;
        }, i = gb.select = function (a, b, e, f) {
            var i, j, k, l, m, n = 'function' == typeof a && a, o = !f && g(a = n.selector || a);
            if (e = e || [], 1 === o.length) {
                if (j = o[0] = o[0].slice(0), j.length > 2 && 'ID' === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
                    if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b)
                        return e;
                    n && (b = b.parentNode), a = a.slice(j.shift().value.length);
                }
                i = X.needsContext.test(a) ? 0 : j.length;
                while (i--) {
                    if (k = j[i], d.relative[l = k.type])
                        break;
                    if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && pb(b.parentNode) || b))) {
                        if (j.splice(i, 1), a = f.length && rb(j), !a)
                            return H.apply(e, f), e;
                        break;
                    }
                }
            }
            return (n || h(a, o))(f, b, !p, e, ab.test(a) && pb(b.parentNode) || b), e;
        }, c.sortStable = u.split('').sort(B).join('') === u, c.detectDuplicates = !!l, m(), c.sortDetached = jb(function (a) {
            return 1 & a.compareDocumentPosition(n.createElement('div'));
        }), jb(function (a) {
            return a.innerHTML = '<a href=\'#\'></a>', '#' === a.firstChild.getAttribute('href');
        }) || kb('type|href|height|width', function (a, b, c) {
            return c ? void 0 : a.getAttribute(b, 'type' === b.toLowerCase() ? 1 : 2);
        }), c.attributes && jb(function (a) {
            return a.innerHTML = '<input/>', a.firstChild.setAttribute('value', ''), '' === a.firstChild.getAttribute('value');
        }) || kb('value', function (a, b, c) {
            return c || 'input' !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
        }), jb(function (a) {
            return null == a.getAttribute('disabled');
        }) || kb(K, function (a, b, c) {
            var d;
            return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
        }), gb;
    }(a);
    m.find = s, m.expr = s.selectors, m.expr[':'] = m.expr.pseudos, m.unique = s.uniqueSort, m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;
    var t = m.expr.match.needsContext, u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, v = /^.[^:#\[\.,]*$/;
    function w(a, b, c) {
        if (m.isFunction(b))
            return m.grep(a, function (a, d) {
                return !!b.call(a, d, a) !== c;
            });
        if (b.nodeType)
            return m.grep(a, function (a) {
                return a === b !== c;
            });
        if ('string' == typeof b) {
            if (v.test(b))
                return m.filter(b, a, c);
            b = m.filter(b, a);
        }
        return m.grep(a, function (a) {
            return m.inArray(a, b) >= 0 !== c;
        });
    }
    m.filter = function (a, b, c) {
        var d = b[0];
        return c && (a = ':not(' + a + ')'), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [d] : [] : m.find.matches(a, m.grep(b, function (a) {
            return 1 === a.nodeType;
        }));
    }, m.fn.extend({
        find: function (a) {
            var b, c = [], d = this, e = d.length;
            if ('string' != typeof a)
                return this.pushStack(m(a).filter(function () {
                    for (b = 0; e > b; b++)
                        if (m.contains(d[b], this))
                            return !0;
                }));
            for (b = 0; e > b; b++)
                m.find(a, d[b], c);
            return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + ' ' + a : a, c;
        },
        filter: function (a) {
            return this.pushStack(w(this, a || [], !1));
        },
        not: function (a) {
            return this.pushStack(w(this, a || [], !0));
        },
        is: function (a) {
            return !!w(this, 'string' == typeof a && t.test(a) ? m(a) : a || [], !1).length;
        }
    });
    var x, y = a.document, z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, A = m.fn.init = function (a, b) {
            var c, d;
            if (!a)
                return this;
            if ('string' == typeof a) {
                if (c = '<' === a.charAt(0) && '>' === a.charAt(a.length - 1) && a.length >= 3 ? [
                        null,
                        a,
                        null
                    ] : z.exec(a), !c || !c[1] && b)
                    return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);
                if (c[1]) {
                    if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b))
                        for (c in b)
                            m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                    return this;
                }
                if (d = y.getElementById(c[2]), d && d.parentNode) {
                    if (d.id !== c[2])
                        return x.find(a);
                    this.length = 1, this[0] = d;
                }
                return this.context = y, this.selector = a, this;
            }
            return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? 'undefined' != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), m.makeArray(a, this));
        };
    A.prototype = m.fn, x = m(y);
    var B = /^(?:parents|prev(?:Until|All))/, C = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
    m.extend({
        dir: function (a, b, c) {
            var d = [], e = a[b];
            while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c)))
                1 === e.nodeType && d.push(e), e = e[b];
            return d;
        },
        sibling: function (a, b) {
            for (var c = []; a; a = a.nextSibling)
                1 === a.nodeType && a !== b && c.push(a);
            return c;
        }
    }), m.fn.extend({
        has: function (a) {
            var b, c = m(a, this), d = c.length;
            return this.filter(function () {
                for (b = 0; d > b; b++)
                    if (m.contains(this, c[b]))
                        return !0;
            });
        },
        closest: function (a, b) {
            for (var c, d = 0, e = this.length, f = [], g = t.test(a) || 'string' != typeof a ? m(a, b || this.context) : 0; e > d; d++)
                for (c = this[d]; c && c !== b; c = c.parentNode)
                    if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {
                        f.push(c);
                        break;
                    }
            return this.pushStack(f.length > 1 ? m.unique(f) : f);
        },
        index: function (a) {
            return a ? 'string' == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function (a, b) {
            return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));
        },
        addBack: function (a) {
            return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
        }
    });
    function D(a, b) {
        do
            a = a[b];
        while (a && 1 !== a.nodeType);
        return a;
    }
    m.each({
        parent: function (a) {
            var b = a.parentNode;
            return b && 11 !== b.nodeType ? b : null;
        },
        parents: function (a) {
            return m.dir(a, 'parentNode');
        },
        parentsUntil: function (a, b, c) {
            return m.dir(a, 'parentNode', c);
        },
        next: function (a) {
            return D(a, 'nextSibling');
        },
        prev: function (a) {
            return D(a, 'previousSibling');
        },
        nextAll: function (a) {
            return m.dir(a, 'nextSibling');
        },
        prevAll: function (a) {
            return m.dir(a, 'previousSibling');
        },
        nextUntil: function (a, b, c) {
            return m.dir(a, 'nextSibling', c);
        },
        prevUntil: function (a, b, c) {
            return m.dir(a, 'previousSibling', c);
        },
        siblings: function (a) {
            return m.sibling((a.parentNode || {}).firstChild, a);
        },
        children: function (a) {
            return m.sibling(a.firstChild);
        },
        contents: function (a) {
            return m.nodeName(a, 'iframe') ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);
        }
    }, function (a, b) {
        m.fn[a] = function (c, d) {
            var e = m.map(this, b, c);
            return 'Until' !== a.slice(-5) && (d = c), d && 'string' == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e);
        };
    });
    var E = /\S+/g, F = {};
    function G(a) {
        var b = F[a] = {};
        return m.each(a.match(E) || [], function (a, c) {
            b[c] = !0;
        }), b;
    }
    m.Callbacks = function (a) {
        a = 'string' == typeof a ? F[a] || G(a) : m.extend({}, a);
        var b, c, d, e, f, g, h = [], i = !a.once && [], j = function (l) {
                for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++)
                    if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
                        c = !1;
                        break;
                    }
                b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable());
            }, k = {
                add: function () {
                    if (h) {
                        var d = h.length;
                        !function f(b) {
                            m.each(b, function (b, c) {
                                var d = m.type(c);
                                'function' === d ? a.unique && k.has(c) || h.push(c) : c && c.length && 'string' !== d && f(c);
                            });
                        }(arguments), b ? e = h.length : c && (g = d, j(c));
                    }
                    return this;
                },
                remove: function () {
                    return h && m.each(arguments, function (a, c) {
                        var d;
                        while ((d = m.inArray(c, h, d)) > -1)
                            h.splice(d, 1), b && (e >= d && e--, f >= d && f--);
                    }), this;
                },
                has: function (a) {
                    return a ? m.inArray(a, h) > -1 : !(!h || !h.length);
                },
                empty: function () {
                    return h = [], e = 0, this;
                },
                disable: function () {
                    return h = i = c = void 0, this;
                },
                disabled: function () {
                    return !h;
                },
                lock: function () {
                    return i = void 0, c || k.disable(), this;
                },
                locked: function () {
                    return !i;
                },
                fireWith: function (a, c) {
                    return !h || d && !i || (c = c || [], c = [
                        a,
                        c.slice ? c.slice() : c
                    ], b ? i.push(c) : j(c)), this;
                },
                fire: function () {
                    return k.fireWith(this, arguments), this;
                },
                fired: function () {
                    return !!d;
                }
            };
        return k;
    }, m.extend({
        Deferred: function (a) {
            var b = [
                    [
                        'resolve',
                        'done',
                        m.Callbacks('once memory'),
                        'resolved'
                    ],
                    [
                        'reject',
                        'fail',
                        m.Callbacks('once memory'),
                        'rejected'
                    ],
                    [
                        'notify',
                        'progress',
                        m.Callbacks('memory')
                    ]
                ], c = 'pending', d = {
                    state: function () {
                        return c;
                    },
                    always: function () {
                        return e.done(arguments).fail(arguments), this;
                    },
                    then: function () {
                        var a = arguments;
                        return m.Deferred(function (c) {
                            m.each(b, function (b, f) {
                                var g = m.isFunction(a[b]) && a[b];
                                e[f[1]](function () {
                                    var a = g && g.apply(this, arguments);
                                    a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + 'With'](this === d ? c.promise() : this, g ? [a] : arguments);
                                });
                            }), a = null;
                        }).promise();
                    },
                    promise: function (a) {
                        return null != a ? m.extend(a, d) : d;
                    }
                }, e = {};
            return d.pipe = d.then, m.each(b, function (a, f) {
                var g = f[2], h = f[3];
                d[f[1]] = g.add, h && g.add(function () {
                    c = h;
                }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {
                    return e[f[0] + 'With'](this === e ? d : this, arguments), this;
                }, e[f[0] + 'With'] = g.fireWith;
            }), d.promise(e), a && a.call(e, e), e;
        },
        when: function (a) {
            var b = 0, c = d.call(arguments), e = c.length, f = 1 !== e || a && m.isFunction(a.promise) ? e : 0, g = 1 === f ? a : m.Deferred(), h = function (a, b, c) {
                    return function (e) {
                        b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
                    };
                }, i, j, k;
            if (e > 1)
                for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++)
                    c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
            return f || g.resolveWith(k, c), g.promise();
        }
    });
    var H;
    m.fn.ready = function (a) {
        return m.ready.promise().done(a), this;
    }, m.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function (a) {
            a ? m.readyWait++ : m.ready(!0);
        },
        ready: function (a) {
            if (a === !0 ? !--m.readyWait : !m.isReady) {
                if (!y.body)
                    return setTimeout(m.ready);
                m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler('ready'), m(y).off('ready')));
            }
        }
    });
    function I() {
        y.addEventListener ? (y.removeEventListener('DOMContentLoaded', J, !1), a.removeEventListener('load', J, !1)) : (y.detachEvent('onreadystatechange', J), a.detachEvent('onload', J));
    }
    function J() {
        (y.addEventListener || 'load' === event.type || 'complete' === y.readyState) && (I(), m.ready());
    }
    m.ready.promise = function (b) {
        if (!H)
            if (H = m.Deferred(), 'complete' === y.readyState)
                setTimeout(m.ready);
            else if (y.addEventListener)
                y.addEventListener('DOMContentLoaded', J, !1), a.addEventListener('load', J, !1);
            else {
                y.attachEvent('onreadystatechange', J), a.attachEvent('onload', J);
                var c = !1;
                try {
                    c = null == a.frameElement && y.documentElement;
                } catch (d) {
                }
                c && c.doScroll && !function e() {
                    if (!m.isReady) {
                        try {
                            c.doScroll('left');
                        } catch (a) {
                            return setTimeout(e, 50);
                        }
                        I(), m.ready();
                    }
                }();
            }
        return H.promise(b);
    };
    var K = 'undefined', L;
    for (L in m(k))
        break;
    k.ownLast = '0' !== L, k.inlineBlockNeedsLayout = !1, m(function () {
        var a, b, c, d;
        c = y.getElementsByTagName('body')[0], c && c.style && (b = y.createElement('div'), d = y.createElement('div'), d.style.cssText = 'position:absolute;border:0;width:0;height:0;top:0;left:-9999px', c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = 'display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1', k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d));
    }), function () {
        var a = y.createElement('div');
        if (null == k.deleteExpando) {
            k.deleteExpando = !0;
            try {
                delete a.test;
            } catch (b) {
                k.deleteExpando = !1;
            }
        }
        a = null;
    }(), m.acceptData = function (a) {
        var b = m.noData[(a.nodeName + ' ').toLowerCase()], c = +a.nodeType || 1;
        return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute('classid') === b;
    };
    var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, N = /([A-Z])/g;
    function O(a, b, c) {
        if (void 0 === c && 1 === a.nodeType) {
            var d = 'data-' + b.replace(N, '-$1').toLowerCase();
            if (c = a.getAttribute(d), 'string' == typeof c) {
                try {
                    c = 'true' === c ? !0 : 'false' === c ? !1 : 'null' === c ? null : +c + '' === c ? +c : M.test(c) ? m.parseJSON(c) : c;
                } catch (e) {
                }
                m.data(a, b, c);
            } else
                c = void 0;
        }
        return c;
    }
    function P(a) {
        var b;
        for (b in a)
            if (('data' !== b || !m.isEmptyObject(a[b])) && 'toJSON' !== b)
                return !1;
        return !0;
    }
    function Q(a, b, d, e) {
        if (m.acceptData(a)) {
            var f, g, h = m.expando, i = a.nodeType, j = i ? m.cache : a, k = i ? a[h] : a[h] && h;
            if (k && j[k] && (e || j[k].data) || void 0 !== d || 'string' != typeof b)
                return k || (k = i ? a[h] = c.pop() || m.guid++ : h), j[k] || (j[k] = i ? {} : { toJSON: m.noop }), ('object' == typeof b || 'function' == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), 'string' == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, f;
        }
    }
    function R(a, b, c) {
        if (m.acceptData(a)) {
            var d, e, f = a.nodeType, g = f ? m.cache : a, h = f ? a[m.expando] : m.expando;
            if (g[h]) {
                if (b && (d = c ? g[h] : g[h].data)) {
                    m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [b] : (b = m.camelCase(b), b = b in d ? [b] : b.split(' ')), e = b.length;
                    while (e--)
                        delete d[b[e]];
                    if (c ? !P(d) : !m.isEmptyObject(d))
                        return;
                }
                (c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null);
            }
        }
    }
    m.extend({
        cache: {},
        noData: {
            'applet ': !0,
            'embed ': !0,
            'object ': 'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'
        },
        hasData: function (a) {
            return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a);
        },
        data: function (a, b, c) {
            return Q(a, b, c);
        },
        removeData: function (a, b) {
            return R(a, b);
        },
        _data: function (a, b, c) {
            return Q(a, b, c, !0);
        },
        _removeData: function (a, b) {
            return R(a, b, !0);
        }
    }), m.fn.extend({
        data: function (a, b) {
            var c, d, e, f = this[0], g = f && f.attributes;
            if (void 0 === a) {
                if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, 'parsedAttrs'))) {
                    c = g.length;
                    while (c--)
                        g[c] && (d = g[c].name, 0 === d.indexOf('data-') && (d = m.camelCase(d.slice(5)), O(f, d, e[d])));
                    m._data(f, 'parsedAttrs', !0);
                }
                return e;
            }
            return 'object' == typeof a ? this.each(function () {
                m.data(this, a);
            }) : arguments.length > 1 ? this.each(function () {
                m.data(this, a, b);
            }) : f ? O(f, a, m.data(f, a)) : void 0;
        },
        removeData: function (a) {
            return this.each(function () {
                m.removeData(this, a);
            });
        }
    }), m.extend({
        queue: function (a, b, c) {
            var d;
            return a ? (b = (b || 'fx') + 'queue', d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), d || []) : void 0;
        },
        dequeue: function (a, b) {
            b = b || 'fx';
            var c = m.queue(a, b), d = c.length, e = c.shift(), f = m._queueHooks(a, b), g = function () {
                    m.dequeue(a, b);
                };
            'inprogress' === e && (e = c.shift(), d--), e && ('fx' === b && c.unshift('inprogress'), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
        },
        _queueHooks: function (a, b) {
            var c = b + 'queueHooks';
            return m._data(a, c) || m._data(a, c, {
                empty: m.Callbacks('once memory').add(function () {
                    m._removeData(a, b + 'queue'), m._removeData(a, c);
                })
            });
        }
    }), m.fn.extend({
        queue: function (a, b) {
            var c = 2;
            return 'string' != typeof a && (b = a, a = 'fx', c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function () {
                var c = m.queue(this, a, b);
                m._queueHooks(this, a), 'fx' === a && 'inprogress' !== c[0] && m.dequeue(this, a);
            });
        },
        dequeue: function (a) {
            return this.each(function () {
                m.dequeue(this, a);
            });
        },
        clearQueue: function (a) {
            return this.queue(a || 'fx', []);
        },
        promise: function (a, b) {
            var c, d = 1, e = m.Deferred(), f = this, g = this.length, h = function () {
                    --d || e.resolveWith(f, [f]);
                };
            'string' != typeof a && (b = a, a = void 0), a = a || 'fx';
            while (g--)
                c = m._data(f[g], a + 'queueHooks'), c && c.empty && (d++, c.empty.add(h));
            return h(), e.promise(b);
        }
    });
    var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, T = [
            'Top',
            'Right',
            'Bottom',
            'Left'
        ], U = function (a, b) {
            return a = b || a, 'none' === m.css(a, 'display') || !m.contains(a.ownerDocument, a);
        }, V = m.access = function (a, b, c, d, e, f, g) {
            var h = 0, i = a.length, j = null == c;
            if ('object' === m.type(c)) {
                e = !0;
                for (h in c)
                    m.access(a, b, h, c[h], !0, f, g);
            } else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) {
                    return j.call(m(a), c);
                })), b))
                for (; i > h; h++)
                    b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
            return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
        }, W = /^(?:checkbox|radio)$/i;
    !function () {
        var a = y.createElement('input'), b = y.createElement('div'), c = y.createDocumentFragment();
        if (b.innerHTML = '  <link/><table></table><a href=\'/a\'>a</a><input type=\'checkbox\'/>', k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName('tbody').length, k.htmlSerialize = !!b.getElementsByTagName('link').length, k.html5Clone = '<:nav></:nav>' !== y.createElement('nav').cloneNode(!0).outerHTML, a.type = 'checkbox', a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, b.innerHTML = '<textarea>x</textarea>', k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, c.appendChild(b), b.innerHTML = '<input type=\'radio\' checked=\'checked\' name=\'t\'/>', k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, b.attachEvent && (b.attachEvent('onclick', function () {
                k.noCloneEvent = !1;
            }), b.cloneNode(!0).click()), null == k.deleteExpando) {
            k.deleteExpando = !0;
            try {
                delete b.test;
            } catch (d) {
                k.deleteExpando = !1;
            }
        }
    }(), function () {
        var b, c, d = y.createElement('div');
        for (b in {
                submit: !0,
                change: !0,
                focusin: !0
            })
            c = 'on' + b, (k[b + 'Bubbles'] = c in a) || (d.setAttribute(c, 't'), k[b + 'Bubbles'] = d.attributes[c].expando === !1);
        d = null;
    }();
    var X = /^(?:input|select|textarea)$/i, Y = /^key/, Z = /^(?:mouse|pointer|contextmenu)|click/, $ = /^(?:focusinfocus|focusoutblur)$/, _ = /^([^.]*)(?:\.(.+)|)$/;
    function ab() {
        return !0;
    }
    function bb() {
        return !1;
    }
    function cb() {
        try {
            return y.activeElement;
        } catch (a) {
        }
    }
    m.event = {
        global: {},
        add: function (a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m._data(a);
            if (r) {
                c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) {
                    return typeof m === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments);
                }, k.elem = a), b = (b || '').match(E) || [''], h = b.length;
                while (h--)
                    f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || '').split('.').sort(), o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = m.event.special[o] || {}, l = m.extend({
                        type: o,
                        origType: q,
                        data: d,
                        handler: c,
                        guid: c.guid,
                        selector: e,
                        needsContext: e && m.expr.match.needsContext.test(e),
                        namespace: p.join('.')
                    }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent('on' + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), m.event.global[o] = !0);
                a = null;
            }
        },
        remove: function (a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m.hasData(a) && m._data(a);
            if (r && (k = r.events)) {
                b = (b || '').match(E) || [''], j = b.length;
                while (j--)
                    if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || '').split('.').sort(), o) {
                        l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], h = h[2] && new RegExp('(^|\\.)' + p.join('\\.(?:.*\\.|)') + '(\\.|$)'), i = f = n.length;
                        while (f--)
                            g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ('**' !== d || !g.selector) || (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));
                        i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), delete k[o]);
                    } else
                        for (o in k)
                            m.event.remove(a, o + b[j], c, d, !0);
                m.isEmptyObject(k) && (delete r.handle, m._removeData(a, 'events'));
            }
        },
        trigger: function (b, c, d, e) {
            var f, g, h, i, k, l, n, o = [d || y], p = j.call(b, 'type') ? b.type : b, q = j.call(b, 'namespace') ? b.namespace.split('.') : [];
            if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf('.') >= 0 && (q = p.split('.'), p = q.shift(), q.sort()), g = p.indexOf(':') < 0 && 'on' + p, b = b[m.expando] ? b : new m.Event(p, 'object' == typeof b && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join('.'), b.namespace_re = b.namespace ? new RegExp('(^|\\.)' + q.join('\\.(?:.*\\.|)') + '(\\.|$)') : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : m.makeArray(c, [b]), k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) {
                if (!e && !k.noBubble && !m.isWindow(d)) {
                    for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode)
                        o.push(h), l = h;
                    l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);
                }
                n = 0;
                while ((h = o[n++]) && !b.isPropagationStopped())
                    b.type = n > 1 ? i : k.bindType || p, f = (m._data(h, 'events') || {})[b.type] && m._data(h, 'handle'), f && f.apply(h, c), f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());
                if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {
                    l = d[g], l && (d[g] = null), m.event.triggered = p;
                    try {
                        d[p]();
                    } catch (r) {
                    }
                    m.event.triggered = void 0, l && (d[g] = l);
                }
                return b.result;
            }
        },
        dispatch: function (a) {
            a = m.event.fix(a);
            var b, c, e, f, g, h = [], i = d.call(arguments), j = (m._data(this, 'events') || {})[a.type] || [], k = m.event.special[a.type] || {};
            if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
                h = m.event.handlers.call(this, a, j), b = 0;
                while ((f = h[b++]) && !a.isPropagationStopped()) {
                    a.currentTarget = f.elem, g = 0;
                    while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped())
                        (!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()));
                }
                return k.postDispatch && k.postDispatch.call(this, a), a.result;
            }
        },
        handlers: function (a, b) {
            var c, d, e, f, g = [], h = b.delegateCount, i = a.target;
            if (h && i.nodeType && (!a.button || 'click' !== a.type))
                for (; i != this; i = i.parentNode || this)
                    if (1 === i.nodeType && (i.disabled !== !0 || 'click' !== a.type)) {
                        for (e = [], f = 0; h > f; f++)
                            d = b[f], c = d.selector + ' ', void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);
                        e.length && g.push({
                            elem: i,
                            handlers: e
                        });
                    }
            return h < b.length && g.push({
                elem: this,
                handlers: b.slice(h)
            }), g;
        },
        fix: function (a) {
            if (a[m.expando])
                return a;
            var b, c, d, e = a.type, f = a, g = this.fixHooks[e];
            g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;
            while (b--)
                c = d[b], a[c] = f[c];
            return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a;
        },
        props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
        fixHooks: {},
        keyHooks: {
            props: 'char charCode key keyCode'.split(' '),
            filter: function (a, b) {
                return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;
            }
        },
        mouseHooks: {
            props: 'button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
            filter: function (a, b) {
                var c, d, e, f = b.button, g = b.fromElement;
                return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;
            }
        },
        special: {
            load: { noBubble: !0 },
            focus: {
                trigger: function () {
                    if (this !== cb() && this.focus)
                        try {
                            return this.focus(), !1;
                        } catch (a) {
                        }
                },
                delegateType: 'focusin'
            },
            blur: {
                trigger: function () {
                    return this === cb() && this.blur ? (this.blur(), !1) : void 0;
                },
                delegateType: 'focusout'
            },
            click: {
                trigger: function () {
                    return m.nodeName(this, 'input') && 'checkbox' === this.type && this.click ? (this.click(), !1) : void 0;
                },
                _default: function (a) {
                    return m.nodeName(a.target, 'a');
                }
            },
            beforeunload: {
                postDispatch: function (a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
                }
            }
        },
        simulate: function (a, b, c, d) {
            var e = m.extend(new m.Event(), c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
        }
    }, m.removeEvent = y.removeEventListener ? function (a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c, !1);
    } : function (a, b, c) {
        var d = 'on' + b;
        a.detachEvent && (typeof a[d] === K && (a[d] = null), a.detachEvent(d, c));
    }, m.Event = function (a, b) {
        return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ab : bb) : this.type = a, b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void (this[m.expando] = !0)) : new m.Event(a, b);
    }, m.Event.prototype = {
        isDefaultPrevented: bb,
        isPropagationStopped: bb,
        isImmediatePropagationStopped: bb,
        preventDefault: function () {
            var a = this.originalEvent;
            this.isDefaultPrevented = ab, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);
        },
        stopPropagation: function () {
            var a = this.originalEvent;
            this.isPropagationStopped = ab, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0);
        },
        stopImmediatePropagation: function () {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = ab, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();
        }
    }, m.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
    }, function (a, b) {
        m.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function (a) {
                var c, d = this, e = a.relatedTarget, f = a.handleObj;
                return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
            }
        };
    }), k.submitBubbles || (m.event.special.submit = {
        setup: function () {
            return m.nodeName(this, 'form') ? !1 : void m.event.add(this, 'click._submit keypress._submit', function (a) {
                var b = a.target, c = m.nodeName(b, 'input') || m.nodeName(b, 'button') ? b.form : void 0;
                c && !m._data(c, 'submitBubbles') && (m.event.add(c, 'submit._submit', function (a) {
                    a._submit_bubble = !0;
                }), m._data(c, 'submitBubbles', !0));
            });
        },
        postDispatch: function (a) {
            a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate('submit', this.parentNode, a, !0));
        },
        teardown: function () {
            return m.nodeName(this, 'form') ? !1 : void m.event.remove(this, '._submit');
        }
    }), k.changeBubbles || (m.event.special.change = {
        setup: function () {
            return X.test(this.nodeName) ? (('checkbox' === this.type || 'radio' === this.type) && (m.event.add(this, 'propertychange._change', function (a) {
                'checked' === a.originalEvent.propertyName && (this._just_changed = !0);
            }), m.event.add(this, 'click._change', function (a) {
                this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate('change', this, a, !0);
            })), !1) : void m.event.add(this, 'beforeactivate._change', function (a) {
                var b = a.target;
                X.test(b.nodeName) && !m._data(b, 'changeBubbles') && (m.event.add(b, 'change._change', function (a) {
                    !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate('change', this.parentNode, a, !0);
                }), m._data(b, 'changeBubbles', !0));
            });
        },
        handle: function (a) {
            var b = a.target;
            return this !== b || a.isSimulated || a.isTrigger || 'radio' !== b.type && 'checkbox' !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0;
        },
        teardown: function () {
            return m.event.remove(this, '._change'), !X.test(this.nodeName);
        }
    }), k.focusinBubbles || m.each({
        focus: 'focusin',
        blur: 'focusout'
    }, function (a, b) {
        var c = function (a) {
            m.event.simulate(b, a.target, m.event.fix(a), !0);
        };
        m.event.special[b] = {
            setup: function () {
                var d = this.ownerDocument || this, e = m._data(d, b);
                e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);
            },
            teardown: function () {
                var d = this.ownerDocument || this, e = m._data(d, b) - 1;
                e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));
            }
        };
    }), m.fn.extend({
        on: function (a, b, c, d, e) {
            var f, g;
            if ('object' == typeof a) {
                'string' != typeof b && (c = c || b, b = void 0);
                for (f in a)
                    this.on(f, b, c, a[f], e);
                return this;
            }
            if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ('string' == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1)
                d = bb;
            else if (!d)
                return this;
            return 1 === e && (g = d, d = function (a) {
                return m().off(a), g.apply(this, arguments);
            }, d.guid = g.guid || (g.guid = m.guid++)), this.each(function () {
                m.event.add(this, a, d, c, b);
            });
        },
        one: function (a, b, c, d) {
            return this.on(a, b, c, d, 1);
        },
        off: function (a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj)
                return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + '.' + d.namespace : d.origType, d.selector, d.handler), this;
            if ('object' == typeof a) {
                for (e in a)
                    this.off(e, b, a[e]);
                return this;
            }
            return (b === !1 || 'function' == typeof b) && (c = b, b = void 0), c === !1 && (c = bb), this.each(function () {
                m.event.remove(this, a, c, b);
            });
        },
        trigger: function (a, b) {
            return this.each(function () {
                m.event.trigger(a, b, this);
            });
        },
        triggerHandler: function (a, b) {
            var c = this[0];
            return c ? m.event.trigger(a, b, c, !0) : void 0;
        }
    });
    function db(a) {
        var b = eb.split('|'), c = a.createDocumentFragment();
        if (c.createElement)
            while (b.length)
                c.createElement(b.pop());
        return c;
    }
    var eb = 'abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video', fb = / jQuery\d+="(?:null|\d+)"/g, gb = new RegExp('<(?:' + eb + ')[\\s/>]', 'i'), hb = /^\s+/, ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, jb = /<([\w:]+)/, kb = /<tbody/i, lb = /<|&#?\w+;/, mb = /<(?:script|style|link)/i, nb = /checked\s*(?:[^=]|=\s*.checked.)/i, ob = /^$|\/(?:java|ecma)script/i, pb = /^true\/(.*)/, qb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, rb = {
            option: [
                1,
                '<select multiple=\'multiple\'>',
                '</select>'
            ],
            legend: [
                1,
                '<fieldset>',
                '</fieldset>'
            ],
            area: [
                1,
                '<map>',
                '</map>'
            ],
            param: [
                1,
                '<object>',
                '</object>'
            ],
            thead: [
                1,
                '<table>',
                '</table>'
            ],
            tr: [
                2,
                '<table><tbody>',
                '</tbody></table>'
            ],
            col: [
                2,
                '<table><tbody></tbody><colgroup>',
                '</colgroup></table>'
            ],
            td: [
                3,
                '<table><tbody><tr>',
                '</tr></tbody></table>'
            ],
            _default: k.htmlSerialize ? [
                0,
                '',
                ''
            ] : [
                1,
                'X<div>',
                '</div>'
            ]
        }, sb = db(y), tb = sb.appendChild(y.createElement('div'));
    rb.optgroup = rb.option, rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead, rb.th = rb.td;
    function ub(a, b) {
        var c, d, e = 0, f = typeof a.getElementsByTagName !== K ? a.getElementsByTagName(b || '*') : typeof a.querySelectorAll !== K ? a.querySelectorAll(b || '*') : void 0;
        if (!f)
            for (f = [], c = a.childNodes || a; null != (d = c[e]); e++)
                !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));
        return void 0 === b || b && m.nodeName(a, b) ? m.merge([a], f) : f;
    }
    function vb(a) {
        W.test(a.type) && (a.defaultChecked = a.checked);
    }
    function wb(a, b) {
        return m.nodeName(a, 'table') && m.nodeName(11 !== b.nodeType ? b : b.firstChild, 'tr') ? a.getElementsByTagName('tbody')[0] || a.appendChild(a.ownerDocument.createElement('tbody')) : a;
    }
    function xb(a) {
        return a.type = (null !== m.find.attr(a, 'type')) + '/' + a.type, a;
    }
    function yb(a) {
        var b = pb.exec(a.type);
        return b ? a.type = b[1] : a.removeAttribute('type'), a;
    }
    function zb(a, b) {
        for (var c, d = 0; null != (c = a[d]); d++)
            m._data(c, 'globalEval', !b || m._data(b[d], 'globalEval'));
    }
    function Ab(a, b) {
        if (1 === b.nodeType && m.hasData(a)) {
            var c, d, e, f = m._data(a), g = m._data(b, f), h = f.events;
            if (h) {
                delete g.handle, g.events = {};
                for (c in h)
                    for (d = 0, e = h[c].length; e > d; d++)
                        m.event.add(b, c, h[c][d]);
            }
            g.data && (g.data = m.extend({}, g.data));
        }
    }
    function Bb(a, b) {
        var c, d, e;
        if (1 === b.nodeType) {
            if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {
                e = m._data(b);
                for (d in e.events)
                    m.removeEvent(b, d, e.handle);
                b.removeAttribute(m.expando);
            }
            'script' === c && b.text !== a.text ? (xb(b).text = a.text, yb(b)) : 'object' === c ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : 'input' === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : 'option' === c ? b.defaultSelected = b.selected = a.defaultSelected : ('input' === c || 'textarea' === c) && (b.defaultValue = a.defaultValue);
        }
    }
    m.extend({
        clone: function (a, b, c) {
            var d, e, f, g, h, i = m.contains(a.ownerDocument, a);
            if (k.html5Clone || m.isXMLDoc(a) || !gb.test('<' + a.nodeName + '>') ? f = a.cloneNode(!0) : (tb.innerHTML = a.outerHTML, tb.removeChild(f = tb.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a)))
                for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g)
                    d[g] && Bb(e, d[g]);
            if (b)
                if (c)
                    for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++)
                        Ab(e, d[g]);
                else
                    Ab(a, f);
            return d = ub(f, 'script'), d.length > 0 && zb(d, !i && ub(a, 'script')), d = h = e = null, f;
        },
        buildFragment: function (a, b, c, d) {
            for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++)
                if (f = a[q], f || 0 === f)
                    if ('object' === m.type(f))
                        m.merge(p, f.nodeType ? [f] : f);
                    else if (lb.test(f)) {
                        h = h || o.appendChild(b.createElement('div')), i = (jb.exec(f) || [
                            '',
                            ''
                        ])[1].toLowerCase(), l = rb[i] || rb._default, h.innerHTML = l[1] + f.replace(ib, '<$1></$2>') + l[2], e = l[0];
                        while (e--)
                            h = h.lastChild;
                        if (!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), !k.tbody) {
                            f = 'table' !== i || kb.test(f) ? '<table>' !== l[1] || kb.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length;
                            while (e--)
                                m.nodeName(j = f.childNodes[e], 'tbody') && !j.childNodes.length && f.removeChild(j);
                        }
                        m.merge(p, h.childNodes), h.textContent = '';
                        while (h.firstChild)
                            h.removeChild(h.firstChild);
                        h = o.lastChild;
                    } else
                        p.push(b.createTextNode(f));
            h && o.removeChild(h), k.appendChecked || m.grep(ub(p, 'input'), vb), q = 0;
            while (f = p[q++])
                if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), h = ub(o.appendChild(f), 'script'), g && zb(h), c)) {
                    e = 0;
                    while (f = h[e++])
                        ob.test(f.type || '') && c.push(f);
                }
            return h = null, o;
        },
        cleanData: function (a, b) {
            for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++)
                if ((b || m.acceptData(d)) && (f = d[i], g = f && j[f])) {
                    if (g.events)
                        for (e in g.events)
                            n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);
                    j[f] && (delete j[f], l ? delete d[i] : typeof d.removeAttribute !== K ? d.removeAttribute(i) : d[i] = null, c.push(f));
                }
        }
    }), m.fn.extend({
        text: function (a) {
            return V(this, function (a) {
                return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a));
            }, null, a, arguments.length);
        },
        append: function () {
            return this.domManip(arguments, function (a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wb(this, a);
                    b.appendChild(a);
                }
            });
        },
        prepend: function () {
            return this.domManip(arguments, function (a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wb(this, a);
                    b.insertBefore(a, b.firstChild);
                }
            });
        },
        before: function () {
            return this.domManip(arguments, function (a) {
                this.parentNode && this.parentNode.insertBefore(a, this);
            });
        },
        after: function () {
            return this.domManip(arguments, function (a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
            });
        },
        remove: function (a, b) {
            for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++)
                b || 1 !== c.nodeType || m.cleanData(ub(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, 'script')), c.parentNode.removeChild(c));
            return this;
        },
        empty: function () {
            for (var a, b = 0; null != (a = this[b]); b++) {
                1 === a.nodeType && m.cleanData(ub(a, !1));
                while (a.firstChild)
                    a.removeChild(a.firstChild);
                a.options && m.nodeName(a, 'select') && (a.options.length = 0);
            }
            return this;
        },
        clone: function (a, b) {
            return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {
                return m.clone(this, a, b);
            });
        },
        html: function (a) {
            return V(this, function (a) {
                var b = this[0] || {}, c = 0, d = this.length;
                if (void 0 === a)
                    return 1 === b.nodeType ? b.innerHTML.replace(fb, '') : void 0;
                if (!('string' != typeof a || mb.test(a) || !k.htmlSerialize && gb.test(a) || !k.leadingWhitespace && hb.test(a) || rb[(jb.exec(a) || [
                        '',
                        ''
                    ])[1].toLowerCase()])) {
                    a = a.replace(ib, '<$1></$2>');
                    try {
                        for (; d > c; c++)
                            b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ub(b, !1)), b.innerHTML = a);
                        b = 0;
                    } catch (e) {
                    }
                }
                b && this.empty().append(a);
            }, null, a, arguments.length);
        },
        replaceWith: function () {
            var a = arguments[0];
            return this.domManip(arguments, function (b) {
                a = this.parentNode, m.cleanData(ub(this)), a && a.replaceChild(b, this);
            }), a && (a.length || a.nodeType) ? this : this.remove();
        },
        detach: function (a) {
            return this.remove(a, !0);
        },
        domManip: function (a, b) {
            a = e.apply([], a);
            var c, d, f, g, h, i, j = 0, l = this.length, n = this, o = l - 1, p = a[0], q = m.isFunction(p);
            if (q || l > 1 && 'string' == typeof p && !k.checkClone && nb.test(p))
                return this.each(function (c) {
                    var d = n.eq(c);
                    q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
                });
            if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) {
                for (g = m.map(ub(i, 'script'), xb), f = g.length; l > j; j++)
                    d = i, j !== o && (d = m.clone(d, !0, !0), f && m.merge(g, ub(d, 'script'))), b.call(this[j], d, j);
                if (f)
                    for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++)
                        d = g[j], ob.test(d.type || '') && !m._data(d, 'globalEval') && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || '').replace(qb, '')));
                i = c = null;
            }
            return this;
        }
    }), m.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
    }, function (a, b) {
        m.fn[a] = function (a) {
            for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++)
                c = d === h ? this : this.clone(!0), m(g[d])[b](c), f.apply(e, c.get());
            return this.pushStack(e);
        };
    });
    var Cb, Db = {};
    function Eb(b, c) {
        var d, e = m(c.createElement(b)).appendTo(c.body), f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], 'display');
        return e.detach(), f;
    }
    function Fb(a) {
        var b = y, c = Db[a];
        return c || (c = Eb(a, b), 'none' !== c && c || (Cb = (Cb || m('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(b.documentElement), b = (Cb[0].contentWindow || Cb[0].contentDocument).document, b.write(), b.close(), c = Eb(a, b), Cb.detach()), Db[a] = c), c;
    }
    !function () {
        var a;
        k.shrinkWrapBlocks = function () {
            if (null != a)
                return a;
            a = !1;
            var b, c, d;
            return c = y.getElementsByTagName('body')[0], c && c.style ? (b = y.createElement('div'), d = y.createElement('div'), d.style.cssText = 'position:absolute;border:0;width:0;height:0;top:0;left:-9999px', c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = '-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1', b.appendChild(y.createElement('div')).style.width = '5px', a = 3 !== b.offsetWidth), c.removeChild(d), a) : void 0;
        };
    }();
    var Gb = /^margin/, Hb = new RegExp('^(' + S + ')(?!px)[a-z%]+$', 'i'), Ib, Jb, Kb = /^(top|right|bottom|left)$/;
    a.getComputedStyle ? (Ib = function (b) {
        return b.ownerDocument.defaultView.opener ? b.ownerDocument.defaultView.getComputedStyle(b, null) : a.getComputedStyle(b, null);
    }, Jb = function (a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ib(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ('' !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), Hb.test(g) && Gb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + '';
    }) : y.documentElement.currentStyle && (Ib = function (a) {
        return a.currentStyle;
    }, Jb = function (a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ib(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Hb.test(g) && !Kb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = 'fontSize' === b ? '1em' : g, g = h.pixelLeft + 'px', h.left = d, f && (e.left = f)), void 0 === g ? g : g + '' || 'auto';
    });
    function Lb(a, b) {
        return {
            get: function () {
                var c = a();
                if (null != c)
                    return c ? void delete this.get : (this.get = b).apply(this, arguments);
            }
        };
    }
    !function () {
        var b, c, d, e, f, g, h;
        if (b = y.createElement('div'), b.innerHTML = '  <link/><table></table><a href=\'/a\'>a</a><input type=\'checkbox\'/>', d = b.getElementsByTagName('a')[0], c = d && d.style) {
            c.cssText = 'float:left;opacity:.5', k.opacity = '0.5' === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = 'content-box', b.cloneNode(!0).style.backgroundClip = '', k.clearCloneStyle = 'content-box' === b.style.backgroundClip, k.boxSizing = '' === c.boxSizing || '' === c.MozBoxSizing || '' === c.WebkitBoxSizing, m.extend(k, {
                reliableHiddenOffsets: function () {
                    return null == g && i(), g;
                },
                boxSizingReliable: function () {
                    return null == f && i(), f;
                },
                pixelPosition: function () {
                    return null == e && i(), e;
                },
                reliableMarginRight: function () {
                    return null == h && i(), h;
                }
            });
            function i() {
                var b, c, d, i;
                c = y.getElementsByTagName('body')[0], c && c.style && (b = y.createElement('div'), d = y.createElement('div'), d.style.cssText = 'position:absolute;border:0;width:0;height:0;top:0;left:-9999px', c.appendChild(d).appendChild(b), b.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute', e = f = !1, h = !0, a.getComputedStyle && (e = '1%' !== (a.getComputedStyle(b, null) || {}).top, f = '4px' === (a.getComputedStyle(b, null) || { width: '4px' }).width, i = b.appendChild(y.createElement('div')), i.style.cssText = b.style.cssText = '-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0', i.style.marginRight = i.style.width = '0', b.style.width = '1px', h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight), b.removeChild(i)), b.innerHTML = '<table><tr><td></td><td>t</td></tr></table>', i = b.getElementsByTagName('td'), i[0].style.cssText = 'margin:0;border:0;padding:0;display:none', g = 0 === i[0].offsetHeight, g && (i[0].style.display = '', i[1].style.display = 'none', g = 0 === i[0].offsetHeight), c.removeChild(d));
            }
        }
    }(), m.swap = function (a, b, c, d) {
        var e, f, g = {};
        for (f in b)
            g[f] = a.style[f], a.style[f] = b[f];
        e = c.apply(a, d || []);
        for (f in b)
            a.style[f] = g[f];
        return e;
    };
    var Mb = /alpha\([^)]*\)/i, Nb = /opacity\s*=\s*([^)]*)/, Ob = /^(none|table(?!-c[ea]).+)/, Pb = new RegExp('^(' + S + ')(.*)$', 'i'), Qb = new RegExp('^([+-])=(' + S + ')', 'i'), Rb = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
        }, Sb = {
            letterSpacing: '0',
            fontWeight: '400'
        }, Tb = [
            'Webkit',
            'O',
            'Moz',
            'ms'
        ];
    function Ub(a, b) {
        if (b in a)
            return b;
        var c = b.charAt(0).toUpperCase() + b.slice(1), d = b, e = Tb.length;
        while (e--)
            if (b = Tb[e] + c, b in a)
                return b;
        return d;
    }
    function Vb(a, b) {
        for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++)
            d = a[g], d.style && (f[g] = m._data(d, 'olddisplay'), c = d.style.display, b ? (f[g] || 'none' !== c || (d.style.display = ''), '' === d.style.display && U(d) && (f[g] = m._data(d, 'olddisplay', Fb(d.nodeName)))) : (e = U(d), (c && 'none' !== c || !e) && m._data(d, 'olddisplay', e ? c : m.css(d, 'display'))));
        for (g = 0; h > g; g++)
            d = a[g], d.style && (b && 'none' !== d.style.display && '' !== d.style.display || (d.style.display = b ? f[g] || '' : 'none'));
        return a;
    }
    function Wb(a, b, c) {
        var d = Pb.exec(b);
        return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || 'px') : b;
    }
    function Xb(a, b, c, d, e) {
        for (var f = c === (d ? 'border' : 'content') ? 4 : 'width' === b ? 1 : 0, g = 0; 4 > f; f += 2)
            'margin' === c && (g += m.css(a, c + T[f], !0, e)), d ? ('content' === c && (g -= m.css(a, 'padding' + T[f], !0, e)), 'margin' !== c && (g -= m.css(a, 'border' + T[f] + 'Width', !0, e))) : (g += m.css(a, 'padding' + T[f], !0, e), 'padding' !== c && (g += m.css(a, 'border' + T[f] + 'Width', !0, e)));
        return g;
    }
    function Yb(a, b, c) {
        var d = !0, e = 'width' === b ? a.offsetWidth : a.offsetHeight, f = Ib(a), g = k.boxSizing && 'border-box' === m.css(a, 'boxSizing', !1, f);
        if (0 >= e || null == e) {
            if (e = Jb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Hb.test(e))
                return e;
            d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;
        }
        return e + Xb(a, b, c || (g ? 'border' : 'content'), d, f) + 'px';
    }
    m.extend({
        cssHooks: {
            opacity: {
                get: function (a, b) {
                    if (b) {
                        var c = Jb(a, 'opacity');
                        return '' === c ? '1' : c;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: { 'float': k.cssFloat ? 'cssFloat' : 'styleFloat' },
        style: function (a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e, f, g, h = m.camelCase(b), i = a.style;
                if (b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h)), g = m.cssHooks[b] || m.cssHooks[h], void 0 === c)
                    return g && 'get' in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
                if (f = typeof c, 'string' === f && (e = Qb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), f = 'number'), null != c && c === c && ('number' !== f || m.cssNumber[h] || (c += 'px'), k.clearCloneStyle || '' !== c || 0 !== b.indexOf('background') || (i[b] = 'inherit'), !(g && 'set' in g && void 0 === (c = g.set(a, c, d)))))
                    try {
                        i[b] = c;
                    } catch (j) {
                    }
            }
        },
        css: function (a, b, c, d) {
            var e, f, g, h = m.camelCase(b);
            return b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], g && 'get' in g && (f = g.get(a, !0, c)), void 0 === f && (f = Jb(a, b, d)), 'normal' === f && b in Sb && (f = Sb[b]), '' === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f;
        }
    }), m.each([
        'height',
        'width'
    ], function (a, b) {
        m.cssHooks[b] = {
            get: function (a, c, d) {
                return c ? Ob.test(m.css(a, 'display')) && 0 === a.offsetWidth ? m.swap(a, Rb, function () {
                    return Yb(a, b, d);
                }) : Yb(a, b, d) : void 0;
            },
            set: function (a, c, d) {
                var e = d && Ib(a);
                return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && 'border-box' === m.css(a, 'boxSizing', !1, e), e) : 0);
            }
        };
    }), k.opacity || (m.cssHooks.opacity = {
        get: function (a, b) {
            return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || '') ? 0.01 * parseFloat(RegExp.$1) + '' : b ? '1' : '';
        },
        set: function (a, b) {
            var c = a.style, d = a.currentStyle, e = m.isNumeric(b) ? 'alpha(opacity=' + 100 * b + ')' : '', f = d && d.filter || c.filter || '';
            c.zoom = 1, (b >= 1 || '' === b) && '' === m.trim(f.replace(Mb, '')) && c.removeAttribute && (c.removeAttribute('filter'), '' === b || d && !d.filter) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + ' ' + e);
        }
    }), m.cssHooks.marginRight = Lb(k.reliableMarginRight, function (a, b) {
        return b ? m.swap(a, { display: 'inline-block' }, Jb, [
            a,
            'marginRight'
        ]) : void 0;
    }), m.each({
        margin: '',
        padding: '',
        border: 'Width'
    }, function (a, b) {
        m.cssHooks[a + b] = {
            expand: function (c) {
                for (var d = 0, e = {}, f = 'string' == typeof c ? c.split(' ') : [c]; 4 > d; d++)
                    e[a + T[d] + b] = f[d] || f[d - 2] || f[0];
                return e;
            }
        }, Gb.test(a) || (m.cssHooks[a + b].set = Wb);
    }), m.fn.extend({
        css: function (a, b) {
            return V(this, function (a, b, c) {
                var d, e, f = {}, g = 0;
                if (m.isArray(b)) {
                    for (d = Ib(a), e = b.length; e > g; g++)
                        f[b[g]] = m.css(a, b[g], !1, d);
                    return f;
                }
                return void 0 !== c ? m.style(a, b, c) : m.css(a, b);
            }, a, b, arguments.length > 1);
        },
        show: function () {
            return Vb(this, !0);
        },
        hide: function () {
            return Vb(this);
        },
        toggle: function (a) {
            return 'boolean' == typeof a ? a ? this.show() : this.hide() : this.each(function () {
                U(this) ? m(this).show() : m(this).hide();
            });
        }
    });
    function Zb(a, b, c, d, e) {
        return new Zb.prototype.init(a, b, c, d, e);
    }
    m.Tween = Zb, Zb.prototype = {
        constructor: Zb,
        init: function (a, b, c, d, e, f) {
            this.elem = a, this.prop = c, this.easing = e || 'swing', this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (m.cssNumber[c] ? '' : 'px');
        },
        cur: function () {
            var a = Zb.propHooks[this.prop];
            return a && a.get ? a.get(this) : Zb.propHooks._default.get(this);
        },
        run: function (a) {
            var b, c = Zb.propHooks[this.prop];
            return this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Zb.propHooks._default.set(this), this;
        }
    }, Zb.prototype.init.prototype = Zb.prototype, Zb.propHooks = {
        _default: {
            get: function (a) {
                var b;
                return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, ''), b && 'auto' !== b ? b : 0) : a.elem[a.prop];
            },
            set: function (a) {
                m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
            }
        }
    }, Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = {
        set: function (a) {
            a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
        }
    }, m.easing = {
        linear: function (a) {
            return a;
        },
        swing: function (a) {
            return 0.5 - Math.cos(a * Math.PI) / 2;
        }
    }, m.fx = Zb.prototype.init, m.fx.step = {};
    var $b, _b, ac = /^(?:toggle|show|hide)$/, bc = new RegExp('^(?:([+-])=|)(' + S + ')([a-z%]*)$', 'i'), cc = /queueHooks$/, dc = [ic], ec = {
            '*': [function (a, b) {
                    var c = this.createTween(a, b), d = c.cur(), e = bc.exec(b), f = e && e[3] || (m.cssNumber[a] ? '' : 'px'), g = (m.cssNumber[a] || 'px' !== f && +d) && bc.exec(m.css(c.elem, a)), h = 1, i = 20;
                    if (g && g[3] !== f) {
                        f = f || g[3], e = e || [], g = +d || 1;
                        do
                            h = h || '.5', g /= h, m.style(c.elem, a, g + f);
                        while (h !== (h = c.cur() / d) && 1 !== h && --i);
                    }
                    return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;
                }]
        };
    function fc() {
        return setTimeout(function () {
            $b = void 0;
        }), $b = m.now();
    }
    function gc(a, b) {
        var c, d = { height: a }, e = 0;
        for (b = b ? 1 : 0; 4 > e; e += 2 - b)
            c = T[e], d['margin' + c] = d['padding' + c] = a;
        return b && (d.opacity = d.width = a), d;
    }
    function hc(a, b, c) {
        for (var d, e = (ec[b] || []).concat(ec['*']), f = 0, g = e.length; g > f; f++)
            if (d = e[f].call(c, b, a))
                return d;
    }
    function ic(a, b, c) {
        var d, e, f, g, h, i, j, l, n = this, o = {}, p = a.style, q = a.nodeType && U(a), r = m._data(a, 'fxshow');
        c.queue || (h = m._queueHooks(a, 'fx'), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {
            h.unqueued || i();
        }), h.unqueued++, n.always(function () {
            n.always(function () {
                h.unqueued--, m.queue(a, 'fx').length || h.empty.fire();
            });
        })), 1 === a.nodeType && ('height' in b || 'width' in b) && (c.overflow = [
            p.overflow,
            p.overflowX,
            p.overflowY
        ], j = m.css(a, 'display'), l = 'none' === j ? m._data(a, 'olddisplay') || Fb(a.nodeName) : j, 'inline' === l && 'none' === m.css(a, 'float') && (k.inlineBlockNeedsLayout && 'inline' !== Fb(a.nodeName) ? p.zoom = 1 : p.display = 'inline-block')), c.overflow && (p.overflow = 'hidden', k.shrinkWrapBlocks() || n.always(function () {
            p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2];
        }));
        for (d in b)
            if (e = b[d], ac.exec(e)) {
                if (delete b[d], f = f || 'toggle' === e, e === (q ? 'hide' : 'show')) {
                    if ('show' !== e || !r || void 0 === r[d])
                        continue;
                    q = !0;
                }
                o[d] = r && r[d] || m.style(a, d);
            } else
                j = void 0;
        if (m.isEmptyObject(o))
            'inline' === ('none' === j ? Fb(a.nodeName) : j) && (p.display = j);
        else {
            r ? 'hidden' in r && (q = r.hidden) : r = m._data(a, 'fxshow', {}), f && (r.hidden = !q), q ? m(a).show() : n.done(function () {
                m(a).hide();
            }), n.done(function () {
                var b;
                m._removeData(a, 'fxshow');
                for (b in o)
                    m.style(a, b, o[b]);
            });
            for (d in o)
                g = hc(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = 'width' === d || 'height' === d ? 1 : 0));
        }
    }
    function jc(a, b) {
        var c, d, e, f, g;
        for (c in a)
            if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && 'expand' in g) {
                f = g.expand(f), delete a[d];
                for (c in f)
                    c in a || (a[c] = f[c], b[c] = e);
            } else
                b[d] = e;
    }
    function kc(a, b, c) {
        var d, e, f = 0, g = dc.length, h = m.Deferred().always(function () {
                delete i.elem;
            }), i = function () {
                if (e)
                    return !1;
                for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++)
                    j.tweens[g].run(f);
                return h.notifyWith(a, [
                    j,
                    f,
                    c
                ]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);
            }, j = h.promise({
                elem: a,
                props: m.extend({}, b),
                opts: m.extend(!0, { specialEasing: {} }, c),
                originalProperties: b,
                originalOptions: c,
                startTime: $b || fc(),
                duration: c.duration,
                tweens: [],
                createTween: function (b, c) {
                    var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                    return j.tweens.push(d), d;
                },
                stop: function (b) {
                    var c = 0, d = b ? j.tweens.length : 0;
                    if (e)
                        return this;
                    for (e = !0; d > c; c++)
                        j.tweens[c].run(1);
                    return b ? h.resolveWith(a, [
                        j,
                        b
                    ]) : h.rejectWith(a, [
                        j,
                        b
                    ]), this;
                }
            }), k = j.props;
        for (jc(k, j.opts.specialEasing); g > f; f++)
            if (d = dc[f].call(j, a, k, j.opts))
                return d;
        return m.map(k, hc, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, {
            elem: a,
            anim: j,
            queue: j.opts.queue
        })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
    }
    m.Animation = m.extend(kc, {
        tweener: function (a, b) {
            m.isFunction(a) ? (b = a, a = ['*']) : a = a.split(' ');
            for (var c, d = 0, e = a.length; e > d; d++)
                c = a[d], ec[c] = ec[c] || [], ec[c].unshift(b);
        },
        prefilter: function (a, b) {
            b ? dc.unshift(a) : dc.push(a);
        }
    }), m.speed = function (a, b, c) {
        var d = a && 'object' == typeof a ? m.extend({}, a) : {
            complete: c || !c && b || m.isFunction(a) && a,
            duration: a,
            easing: c && b || b && !m.isFunction(b) && b
        };
        return d.duration = m.fx.off ? 0 : 'number' == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = 'fx'), d.old = d.complete, d.complete = function () {
            m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);
        }, d;
    }, m.fn.extend({
        fadeTo: function (a, b, c, d) {
            return this.filter(U).css('opacity', 0).show().end().animate({ opacity: b }, a, c, d);
        },
        animate: function (a, b, c, d) {
            var e = m.isEmptyObject(a), f = m.speed(b, c, d), g = function () {
                    var b = kc(this, m.extend({}, a), f);
                    (e || m._data(this, 'finish')) && b.stop(!0);
                };
            return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
        },
        stop: function (a, b, c) {
            var d = function (a) {
                var b = a.stop;
                delete a.stop, b(c);
            };
            return 'string' != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || 'fx', []), this.each(function () {
                var b = !0, e = null != a && a + 'queueHooks', f = m.timers, g = m._data(this);
                if (e)
                    g[e] && g[e].stop && d(g[e]);
                else
                    for (e in g)
                        g[e] && g[e].stop && cc.test(e) && d(g[e]);
                for (e = f.length; e--;)
                    f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
                (b || !c) && m.dequeue(this, a);
            });
        },
        finish: function (a) {
            return a !== !1 && (a = a || 'fx'), this.each(function () {
                var b, c = m._data(this), d = c[a + 'queue'], e = c[a + 'queueHooks'], f = m.timers, g = d ? d.length : 0;
                for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;)
                    f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
                for (b = 0; g > b; b++)
                    d[b] && d[b].finish && d[b].finish.call(this);
                delete c.finish;
            });
        }
    }), m.each([
        'toggle',
        'show',
        'hide'
    ], function (a, b) {
        var c = m.fn[b];
        m.fn[b] = function (a, d, e) {
            return null == a || 'boolean' == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e);
        };
    }), m.each({
        slideDown: gc('show'),
        slideUp: gc('hide'),
        slideToggle: gc('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
    }, function (a, b) {
        m.fn[a] = function (a, c, d) {
            return this.animate(b, a, c, d);
        };
    }), m.timers = [], m.fx.tick = function () {
        var a, b = m.timers, c = 0;
        for ($b = m.now(); c < b.length; c++)
            a = b[c], a() || b[c] !== a || b.splice(c--, 1);
        b.length || m.fx.stop(), $b = void 0;
    }, m.fx.timer = function (a) {
        m.timers.push(a), a() ? m.fx.start() : m.timers.pop();
    }, m.fx.interval = 13, m.fx.start = function () {
        _b || (_b = setInterval(m.fx.tick, m.fx.interval));
    }, m.fx.stop = function () {
        clearInterval(_b), _b = null;
    }, m.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, m.fn.delay = function (a, b) {
        return a = m.fx ? m.fx.speeds[a] || a : a, b = b || 'fx', this.queue(b, function (b, c) {
            var d = setTimeout(b, a);
            c.stop = function () {
                clearTimeout(d);
            };
        });
    }, function () {
        var a, b, c, d, e;
        b = y.createElement('div'), b.setAttribute('className', 't'), b.innerHTML = '  <link/><table></table><a href=\'/a\'>a</a><input type=\'checkbox\'/>', d = b.getElementsByTagName('a')[0], c = y.createElement('select'), e = c.appendChild(y.createElement('option')), a = b.getElementsByTagName('input')[0], d.style.cssText = 'top:1px', k.getSetAttribute = 't' !== b.className, k.style = /top/.test(d.getAttribute('style')), k.hrefNormalized = '/a' === d.getAttribute('href'), k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement('form').enctype, c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement('input'), a.setAttribute('value', ''), k.input = '' === a.getAttribute('value'), a.value = 't', a.setAttribute('type', 'radio'), k.radioValue = 't' === a.value;
    }();
    var lc = /\r/g;
    m.fn.extend({
        val: function (a) {
            var b, c, d, e = this[0];
            {
                if (arguments.length)
                    return d = m.isFunction(a), this.each(function (c) {
                        var e;
                        1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = '' : 'number' == typeof e ? e += '' : m.isArray(e) && (e = m.map(e, function (a) {
                            return null == a ? '' : a + '';
                        })), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && 'set' in b && void 0 !== b.set(this, e, 'value') || (this.value = e));
                    });
                if (e)
                    return b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && 'get' in b && void 0 !== (c = b.get(e, 'value')) ? c : (c = e.value, 'string' == typeof c ? c.replace(lc, '') : null == c ? '' : c);
            }
        }
    }), m.extend({
        valHooks: {
            option: {
                get: function (a) {
                    var b = m.find.attr(a, 'value');
                    return null != b ? b : m.trim(m.text(a));
                }
            },
            select: {
                get: function (a) {
                    for (var b, c, d = a.options, e = a.selectedIndex, f = 'select-one' === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++)
                        if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute('disabled')) || c.parentNode.disabled && m.nodeName(c.parentNode, 'optgroup'))) {
                            if (b = m(c).val(), f)
                                return b;
                            g.push(b);
                        }
                    return g;
                },
                set: function (a, b) {
                    var c, d, e = a.options, f = m.makeArray(b), g = e.length;
                    while (g--)
                        if (d = e[g], m.inArray(m.valHooks.option.get(d), f) >= 0)
                            try {
                                d.selected = c = !0;
                            } catch (h) {
                                d.scrollHeight;
                            }
                        else
                            d.selected = !1;
                    return c || (a.selectedIndex = -1), e;
                }
            }
        }
    }), m.each([
        'radio',
        'checkbox'
    ], function () {
        m.valHooks[this] = {
            set: function (a, b) {
                return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0;
            }
        }, k.checkOn || (m.valHooks[this].get = function (a) {
            return null === a.getAttribute('value') ? 'on' : a.value;
        });
    });
    var mc, nc, oc = m.expr.attrHandle, pc = /^(?:checked|selected)$/i, qc = k.getSetAttribute, rc = k.input;
    m.fn.extend({
        attr: function (a, b) {
            return V(this, m.attr, a, b, arguments.length > 1);
        },
        removeAttr: function (a) {
            return this.each(function () {
                m.removeAttr(this, a);
            });
        }
    }), m.extend({
        attr: function (a, b, c) {
            var d, e, f = a.nodeType;
            if (a && 3 !== f && 8 !== f && 2 !== f)
                return typeof a.getAttribute === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc)), void 0 === c ? d && 'get' in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && 'set' in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ''), c) : void m.removeAttr(a, b));
        },
        removeAttr: function (a, b) {
            var c, d, e = 0, f = b && b.match(E);
            if (f && 1 === a.nodeType)
                while (c = f[e++])
                    d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rc && qc || !pc.test(c) ? a[d] = !1 : a[m.camelCase('default-' + c)] = a[d] = !1 : m.attr(a, c, ''), a.removeAttribute(qc ? c : d);
        },
        attrHooks: {
            type: {
                set: function (a, b) {
                    if (!k.radioValue && 'radio' === b && m.nodeName(a, 'input')) {
                        var c = a.value;
                        return a.setAttribute('type', b), c && (a.value = c), b;
                    }
                }
            }
        }
    }), nc = {
        set: function (a, b, c) {
            return b === !1 ? m.removeAttr(a, c) : rc && qc || !pc.test(c) ? a.setAttribute(!qc && m.propFix[c] || c, c) : a[m.camelCase('default-' + c)] = a[c] = !0, c;
        }
    }, m.each(m.expr.match.bool.source.match(/\w+/g), function (a, b) {
        var c = oc[b] || m.find.attr;
        oc[b] = rc && qc || !pc.test(b) ? function (a, b, d) {
            var e, f;
            return d || (f = oc[b], oc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, oc[b] = f), e;
        } : function (a, b, c) {
            return c ? void 0 : a[m.camelCase('default-' + b)] ? b.toLowerCase() : null;
        };
    }), rc && qc || (m.attrHooks.value = {
        set: function (a, b, c) {
            return m.nodeName(a, 'input') ? void (a.defaultValue = b) : mc && mc.set(a, b, c);
        }
    }), qc || (mc = {
        set: function (a, b, c) {
            var d = a.getAttributeNode(c);
            return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += '', 'value' === c || b === a.getAttribute(c) ? b : void 0;
        }
    }, oc.id = oc.name = oc.coords = function (a, b, c) {
        var d;
        return c ? void 0 : (d = a.getAttributeNode(b)) && '' !== d.value ? d.value : null;
    }, m.valHooks.button = {
        get: function (a, b) {
            var c = a.getAttributeNode(b);
            return c && c.specified ? c.value : void 0;
        },
        set: mc.set
    }, m.attrHooks.contenteditable = {
        set: function (a, b, c) {
            mc.set(a, '' === b ? !1 : b, c);
        }
    }, m.each([
        'width',
        'height'
    ], function (a, b) {
        m.attrHooks[b] = {
            set: function (a, c) {
                return '' === c ? (a.setAttribute(b, 'auto'), c) : void 0;
            }
        };
    })), k.style || (m.attrHooks.style = {
        get: function (a) {
            return a.style.cssText || void 0;
        },
        set: function (a, b) {
            return a.style.cssText = b + '';
        }
    });
    var sc = /^(?:input|select|textarea|button|object)$/i, tc = /^(?:a|area)$/i;
    m.fn.extend({
        prop: function (a, b) {
            return V(this, m.prop, a, b, arguments.length > 1);
        },
        removeProp: function (a) {
            return a = m.propFix[a] || a, this.each(function () {
                try {
                    this[a] = void 0, delete this[a];
                } catch (b) {
                }
            });
        }
    }), m.extend({
        propFix: {
            'for': 'htmlFor',
            'class': 'className'
        },
        prop: function (a, b, c) {
            var d, e, f, g = a.nodeType;
            if (a && 3 !== g && 8 !== g && 2 !== g)
                return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, e = m.propHooks[b]), void 0 !== c ? e && 'set' in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && 'get' in e && null !== (d = e.get(a, b)) ? d : a[b];
        },
        propHooks: {
            tabIndex: {
                get: function (a) {
                    var b = m.find.attr(a, 'tabindex');
                    return b ? parseInt(b, 10) : sc.test(a.nodeName) || tc.test(a.nodeName) && a.href ? 0 : -1;
                }
            }
        }
    }), k.hrefNormalized || m.each([
        'href',
        'src'
    ], function (a, b) {
        m.propHooks[b] = {
            get: function (a) {
                return a.getAttribute(b, 4);
            }
        };
    }), k.optSelected || (m.propHooks.selected = {
        get: function (a) {
            var b = a.parentNode;
            return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;
        }
    }), m.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
    ], function () {
        m.propFix[this.toLowerCase()] = this;
    }), k.enctype || (m.propFix.enctype = 'encoding');
    var uc = /[\t\r\n\f]/g;
    m.fn.extend({
        addClass: function (a) {
            var b, c, d, e, f, g, h = 0, i = this.length, j = 'string' == typeof a && a;
            if (m.isFunction(a))
                return this.each(function (b) {
                    m(this).addClass(a.call(this, b, this.className));
                });
            if (j)
                for (b = (a || '').match(E) || []; i > h; h++)
                    if (c = this[h], d = 1 === c.nodeType && (c.className ? (' ' + c.className + ' ').replace(uc, ' ') : ' ')) {
                        f = 0;
                        while (e = b[f++])
                            d.indexOf(' ' + e + ' ') < 0 && (d += e + ' ');
                        g = m.trim(d), c.className !== g && (c.className = g);
                    }
            return this;
        },
        removeClass: function (a) {
            var b, c, d, e, f, g, h = 0, i = this.length, j = 0 === arguments.length || 'string' == typeof a && a;
            if (m.isFunction(a))
                return this.each(function (b) {
                    m(this).removeClass(a.call(this, b, this.className));
                });
            if (j)
                for (b = (a || '').match(E) || []; i > h; h++)
                    if (c = this[h], d = 1 === c.nodeType && (c.className ? (' ' + c.className + ' ').replace(uc, ' ') : '')) {
                        f = 0;
                        while (e = b[f++])
                            while (d.indexOf(' ' + e + ' ') >= 0)
                                d = d.replace(' ' + e + ' ', ' ');
                        g = a ? m.trim(d) : '', c.className !== g && (c.className = g);
                    }
            return this;
        },
        toggleClass: function (a, b) {
            var c = typeof a;
            return 'boolean' == typeof b && 'string' === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function (c) {
                m(this).toggleClass(a.call(this, c, this.className, b), b);
            } : function () {
                if ('string' === c) {
                    var b, d = 0, e = m(this), f = a.match(E) || [];
                    while (b = f[d++])
                        e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
                } else
                    (c === K || 'boolean' === c) && (this.className && m._data(this, '__className__', this.className), this.className = this.className || a === !1 ? '' : m._data(this, '__className__') || '');
            });
        },
        hasClass: function (a) {
            for (var b = ' ' + a + ' ', c = 0, d = this.length; d > c; c++)
                if (1 === this[c].nodeType && (' ' + this[c].className + ' ').replace(uc, ' ').indexOf(b) >= 0)
                    return !0;
            return !1;
        }
    }), m.each('blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu'.split(' '), function (a, b) {
        m.fn[b] = function (a, c) {
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
        };
    }), m.fn.extend({
        hover: function (a, b) {
            return this.mouseenter(a).mouseleave(b || a);
        },
        bind: function (a, b, c) {
            return this.on(a, null, b, c);
        },
        unbind: function (a, b) {
            return this.off(a, null, b);
        },
        delegate: function (a, b, c, d) {
            return this.on(b, a, c, d);
        },
        undelegate: function (a, b, c) {
            return 1 === arguments.length ? this.off(a, '**') : this.off(b, a || '**', c);
        }
    });
    var vc = m.now(), wc = /\?/, xc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    m.parseJSON = function (b) {
        if (a.JSON && a.JSON.parse)
            return a.JSON.parse(b + '');
        var c, d = null, e = m.trim(b + '');
        return e && !m.trim(e.replace(xc, function (a, b, e, f) {
            return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, '');
        })) ? Function('return ' + e)() : m.error('Invalid JSON: ' + b);
    }, m.parseXML = function (b) {
        var c, d;
        if (!b || 'string' != typeof b)
            return null;
        try {
            a.DOMParser ? (d = new DOMParser(), c = d.parseFromString(b, 'text/xml')) : (c = new ActiveXObject('Microsoft.XMLDOM'), c.async = 'false', c.loadXML(b));
        } catch (e) {
            c = void 0;
        }
        return c && c.documentElement && !c.getElementsByTagName('parsererror').length || m.error('Invalid XML: ' + b), c;
    };
    var yc, zc, Ac = /#.*$/, Bc = /([?&])_=[^&]*/, Cc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Ec = /^(?:GET|HEAD)$/, Fc = /^\/\//, Gc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, Hc = {}, Ic = {}, Jc = '*/'.concat('*');
    try {
        zc = location.href;
    } catch (Kc) {
        zc = y.createElement('a'), zc.href = '', zc = zc.href;
    }
    yc = Gc.exec(zc.toLowerCase()) || [];
    function Lc(a) {
        return function (b, c) {
            'string' != typeof b && (c = b, b = '*');
            var d, e = 0, f = b.toLowerCase().match(E) || [];
            if (m.isFunction(c))
                while (d = f[e++])
                    '+' === d.charAt(0) ? (d = d.slice(1) || '*', (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
        };
    }
    function Mc(a, b, c, d) {
        var e = {}, f = a === Ic;
        function g(h) {
            var i;
            return e[h] = !0, m.each(a[h] || [], function (a, h) {
                var j = h(b, c, d);
                return 'string' != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
            }), i;
        }
        return g(b.dataTypes[0]) || !e['*'] && g('*');
    }
    function Nc(a, b) {
        var c, d, e = m.ajaxSettings.flatOptions || {};
        for (d in b)
            void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
        return c && m.extend(!0, a, c), a;
    }
    function Oc(a, b, c) {
        var d, e, f, g, h = a.contents, i = a.dataTypes;
        while ('*' === i[0])
            i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader('Content-Type'));
        if (e)
            for (g in h)
                if (h[g] && h[g].test(e)) {
                    i.unshift(g);
                    break;
                }
        if (i[0] in c)
            f = i[0];
        else {
            for (g in c) {
                if (!i[0] || a.converters[g + ' ' + i[0]]) {
                    f = g;
                    break;
                }
                d || (d = g);
            }
            f = f || d;
        }
        return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
    }
    function Pc(a, b, c, d) {
        var e, f, g, h, i, j = {}, k = a.dataTypes.slice();
        if (k[1])
            for (g in a.converters)
                j[g.toLowerCase()] = a.converters[g];
        f = k.shift();
        while (f)
            if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift())
                if ('*' === f)
                    f = i;
                else if ('*' !== i && i !== f) {
                    if (g = j[i + ' ' + f] || j['* ' + f], !g)
                        for (e in j)
                            if (h = e.split(' '), h[1] === f && (g = j[i + ' ' + h[0]] || j['* ' + h[0]])) {
                                g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
                                break;
                            }
                    if (g !== !0)
                        if (g && a['throws'])
                            b = g(b);
                        else
                            try {
                                b = g(b);
                            } catch (l) {
                                return {
                                    state: 'parsererror',
                                    error: g ? l : 'No conversion from ' + i + ' to ' + f
                                };
                            }
                }
        return {
            state: 'success',
            data: b
        };
    }
    m.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: zc,
            type: 'GET',
            isLocal: Dc.test(yc[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            accepts: {
                '*': Jc,
                text: 'text/plain',
                html: 'text/html',
                xml: 'application/xml, text/xml',
                json: 'application/json, text/javascript'
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: 'responseXML',
                text: 'responseText',
                json: 'responseJSON'
            },
            converters: {
                '* text': String,
                'text html': !0,
                'text json': m.parseJSON,
                'text xml': m.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function (a, b) {
            return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a);
        },
        ajaxPrefilter: Lc(Hc),
        ajaxTransport: Lc(Ic),
        ajax: function (a, b) {
            'object' == typeof a && (b = a, a = void 0), b = b || {};
            var c, d, e, f, g, h, i, j, k = m.ajaxSetup({}, b), l = k.context || k, n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event, o = m.Deferred(), p = m.Callbacks('once memory'), q = k.statusCode || {}, r = {}, s = {}, t = 0, u = 'canceled', v = {
                    readyState: 0,
                    getResponseHeader: function (a) {
                        var b;
                        if (2 === t) {
                            if (!j) {
                                j = {};
                                while (b = Cc.exec(f))
                                    j[b[1].toLowerCase()] = b[2];
                            }
                            b = j[a.toLowerCase()];
                        }
                        return null == b ? null : b;
                    },
                    getAllResponseHeaders: function () {
                        return 2 === t ? f : null;
                    },
                    setRequestHeader: function (a, b) {
                        var c = a.toLowerCase();
                        return t || (a = s[c] = s[c] || a, r[a] = b), this;
                    },
                    overrideMimeType: function (a) {
                        return t || (k.mimeType = a), this;
                    },
                    statusCode: function (a) {
                        var b;
                        if (a)
                            if (2 > t)
                                for (b in a)
                                    q[b] = [
                                        q[b],
                                        a[b]
                                    ];
                            else
                                v.always(a[v.status]);
                        return this;
                    },
                    abort: function (a) {
                        var b = a || u;
                        return i && i.abort(b), x(0, b), this;
                    }
                };
            if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zc) + '').replace(Ac, '').replace(Fc, yc[1] + '//'), k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || '*').toLowerCase().match(E) || [''], null == k.crossDomain && (c = Gc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yc[1] && c[2] === yc[2] && (c[3] || ('http:' === c[1] ? '80' : '443')) === (yc[3] || ('http:' === yc[1] ? '80' : '443')))), k.data && k.processData && 'string' != typeof k.data && (k.data = m.param(k.data, k.traditional)), Mc(Hc, k, b, v), 2 === t)
                return v;
            h = m.event && k.global, h && 0 === m.active++ && m.event.trigger('ajaxStart'), k.type = k.type.toUpperCase(), k.hasContent = !Ec.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wc.test(e) ? '&' : '?') + k.data, delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, '$1_=' + vc++) : e + (wc.test(e) ? '&' : '?') + '_=' + vc++)), k.ifModified && (m.lastModified[e] && v.setRequestHeader('If-Modified-Since', m.lastModified[e]), m.etag[e] && v.setRequestHeader('If-None-Match', m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader('Content-Type', k.contentType), v.setRequestHeader('Accept', k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ('*' !== k.dataTypes[0] ? ', ' + Jc + '; q=0.01' : '') : k.accepts['*']);
            for (d in k.headers)
                v.setRequestHeader(d, k.headers[d]);
            if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t))
                return v.abort();
            u = 'abort';
            for (d in {
                    success: 1,
                    error: 1,
                    complete: 1
                })
                v[d](k[d]);
            if (i = Mc(Ic, k, b, v)) {
                v.readyState = 1, h && n.trigger('ajaxSend', [
                    v,
                    k
                ]), k.async && k.timeout > 0 && (g = setTimeout(function () {
                    v.abort('timeout');
                }, k.timeout));
                try {
                    t = 1, i.send(r, x);
                } catch (w) {
                    if (!(2 > t))
                        throw w;
                    x(-1, w);
                }
            } else
                x(-1, 'No Transport');
            function x(a, b, c, d) {
                var j, r, s, u, w, x = b;
                2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || '', v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Oc(k, v, c)), u = Pc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader('Last-Modified'), w && (m.lastModified[e] = w), w = v.getResponseHeader('etag'), w && (m.etag[e] = w)), 204 === a || 'HEAD' === k.type ? x = 'nocontent' : 304 === a ? x = 'notmodified' : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = 'error', 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + '', j ? o.resolveWith(l, [
                    r,
                    x,
                    v
                ]) : o.rejectWith(l, [
                    v,
                    x,
                    s
                ]), v.statusCode(q), q = void 0, h && n.trigger(j ? 'ajaxSuccess' : 'ajaxError', [
                    v,
                    k,
                    j ? r : s
                ]), p.fireWith(l, [
                    v,
                    x
                ]), h && (n.trigger('ajaxComplete', [
                    v,
                    k
                ]), --m.active || m.event.trigger('ajaxStop')));
            }
            return v;
        },
        getJSON: function (a, b, c) {
            return m.get(a, b, c, 'json');
        },
        getScript: function (a, b) {
            return m.get(a, void 0, b, 'script');
        }
    }), m.each([
        'get',
        'post'
    ], function (a, b) {
        m[b] = function (a, c, d, e) {
            return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({
                url: a,
                type: b,
                dataType: e,
                data: c,
                success: d
            });
        };
    }), m._evalUrl = function (a) {
        return m.ajax({
            url: a,
            type: 'GET',
            dataType: 'script',
            async: !1,
            global: !1,
            'throws': !0
        });
    }, m.fn.extend({
        wrapAll: function (a) {
            if (m.isFunction(a))
                return this.each(function (b) {
                    m(this).wrapAll(a.call(this, b));
                });
            if (this[0]) {
                var b = m(a, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
                    var a = this;
                    while (a.firstChild && 1 === a.firstChild.nodeType)
                        a = a.firstChild;
                    return a;
                }).append(this);
            }
            return this;
        },
        wrapInner: function (a) {
            return this.each(m.isFunction(a) ? function (b) {
                m(this).wrapInner(a.call(this, b));
            } : function () {
                var b = m(this), c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a);
            });
        },
        wrap: function (a) {
            var b = m.isFunction(a);
            return this.each(function (c) {
                m(this).wrapAll(b ? a.call(this, c) : a);
            });
        },
        unwrap: function () {
            return this.parent().each(function () {
                m.nodeName(this, 'body') || m(this).replaceWith(this.childNodes);
            }).end();
        }
    }), m.expr.filters.hidden = function (a) {
        return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && 'none' === (a.style && a.style.display || m.css(a, 'display'));
    }, m.expr.filters.visible = function (a) {
        return !m.expr.filters.hidden(a);
    };
    var Qc = /%20/g, Rc = /\[\]$/, Sc = /\r?\n/g, Tc = /^(?:submit|button|image|reset|file)$/i, Uc = /^(?:input|select|textarea|keygen)/i;
    function Vc(a, b, c, d) {
        var e;
        if (m.isArray(b))
            m.each(b, function (b, e) {
                c || Rc.test(a) ? d(a, e) : Vc(a + '[' + ('object' == typeof e ? b : '') + ']', e, c, d);
            });
        else if (c || 'object' !== m.type(b))
            d(a, b);
        else
            for (e in b)
                Vc(a + '[' + e + ']', b[e], c, d);
    }
    m.param = function (a, b) {
        var c, d = [], e = function (a, b) {
                b = m.isFunction(b) ? b() : null == b ? '' : b, d[d.length] = encodeURIComponent(a) + '=' + encodeURIComponent(b);
            };
        if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a))
            m.each(a, function () {
                e(this.name, this.value);
            });
        else
            for (c in a)
                Vc(c, a[c], b, e);
        return d.join('&').replace(Qc, '+');
    }, m.fn.extend({
        serialize: function () {
            return m.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var a = m.prop(this, 'elements');
                return a ? m.makeArray(a) : this;
            }).filter(function () {
                var a = this.type;
                return this.name && !m(this).is(':disabled') && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a));
            }).map(function (a, b) {
                var c = m(this).val();
                return null == c ? null : m.isArray(c) ? m.map(c, function (a) {
                    return {
                        name: b.name,
                        value: a.replace(Sc, '\r\n')
                    };
                }) : {
                    name: b.name,
                    value: c.replace(Sc, '\r\n')
                };
            }).get();
        }
    }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc() || $c();
    } : Zc;
    var Wc = 0, Xc = {}, Yc = m.ajaxSettings.xhr();
    a.attachEvent && a.attachEvent('onunload', function () {
        for (var a in Xc)
            Xc[a](void 0, !0);
    }), k.cors = !!Yc && 'withCredentials' in Yc, Yc = k.ajax = !!Yc, Yc && m.ajaxTransport(function (a) {
        if (!a.crossDomain || k.cors) {
            var b;
            return {
                send: function (c, d) {
                    var e, f = a.xhr(), g = ++Wc;
                    if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields)
                        for (e in a.xhrFields)
                            f[e] = a.xhrFields[e];
                    a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c['X-Requested-With'] || (c['X-Requested-With'] = 'XMLHttpRequest');
                    for (e in c)
                        void 0 !== c[e] && f.setRequestHeader(e, c[e] + '');
                    f.send(a.hasContent && a.data || null), b = function (c, e) {
                        var h, i, j;
                        if (b && (e || 4 === f.readyState))
                            if (delete Xc[g], b = void 0, f.onreadystatechange = m.noop, e)
                                4 !== f.readyState && f.abort();
                            else {
                                j = {}, h = f.status, 'string' == typeof f.responseText && (j.text = f.responseText);
                                try {
                                    i = f.statusText;
                                } catch (k) {
                                    i = '';
                                }
                                h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404;
                            }
                        j && d(h, i, j, f.getAllResponseHeaders());
                    }, a.async ? 4 === f.readyState ? setTimeout(b) : f.onreadystatechange = Xc[g] = b : b();
                },
                abort: function () {
                    b && b(void 0, !0);
                }
            };
        }
    });
    function Zc() {
        try {
            return new a.XMLHttpRequest();
        } catch (b) {
        }
    }
    function $c() {
        try {
            return new a.ActiveXObject('Microsoft.XMLHTTP');
        } catch (b) {
        }
    }
    m.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
        contents: { script: /(?:java|ecma)script/ },
        converters: {
            'text script': function (a) {
                return m.globalEval(a), a;
            }
        }
    }), m.ajaxPrefilter('script', function (a) {
        void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = 'GET', a.global = !1);
    }), m.ajaxTransport('script', function (a) {
        if (a.crossDomain) {
            var b, c = y.head || m('head')[0] || y.documentElement;
            return {
                send: function (d, e) {
                    b = y.createElement('script'), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) {
                        (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, 'success'));
                    }, c.insertBefore(b, c.firstChild);
                },
                abort: function () {
                    b && b.onload(void 0, !0);
                }
            };
        }
    });
    var _c = [], ad = /(=)\?(?=&|$)|\?\?/;
    m.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
            var a = _c.pop() || m.expando + '_' + vc++;
            return this[a] = !0, a;
        }
    }), m.ajaxPrefilter('json jsonp', function (b, c, d) {
        var e, f, g, h = b.jsonp !== !1 && (ad.test(b.url) ? 'url' : 'string' == typeof b.data && !(b.contentType || '').indexOf('application/x-www-form-urlencoded') && ad.test(b.data) && 'data');
        return h || 'jsonp' === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ad, '$1' + e) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? '&' : '?') + b.jsonp + '=' + e), b.converters['script json'] = function () {
            return g || m.error(e + ' was not called'), g[0];
        }, b.dataTypes[0] = 'json', f = a[e], a[e] = function () {
            g = arguments;
        }, d.always(function () {
            a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _c.push(e)), g && m.isFunction(f) && f(g[0]), g = f = void 0;
        }), 'script') : void 0;
    }), m.parseHTML = function (a, b, c) {
        if (!a || 'string' != typeof a)
            return null;
        'boolean' == typeof b && (c = b, b = !1), b = b || y;
        var d = u.exec(a), e = !c && [];
        return d ? [b.createElement(d[1])] : (d = m.buildFragment([a], b, e), e && e.length && m(e).remove(), m.merge([], d.childNodes));
    };
    var bd = m.fn.load;
    m.fn.load = function (a, b, c) {
        if ('string' != typeof a && bd)
            return bd.apply(this, arguments);
        var d, e, f, g = this, h = a.indexOf(' ');
        return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, b = void 0) : b && 'object' == typeof b && (f = 'POST'), g.length > 0 && m.ajax({
            url: a,
            type: f,
            dataType: 'html',
            data: b
        }).done(function (a) {
            e = arguments, g.html(d ? m('<div>').append(m.parseHTML(a)).find(d) : a);
        }).complete(c && function (a, b) {
            g.each(c, e || [
                a.responseText,
                b,
                a
            ]);
        }), this;
    }, m.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
    ], function (a, b) {
        m.fn[b] = function (a) {
            return this.on(b, a);
        };
    }), m.expr.filters.animated = function (a) {
        return m.grep(m.timers, function (b) {
            return a === b.elem;
        }).length;
    };
    var cd = a.document.documentElement;
    function dd(a) {
        return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1;
    }
    m.offset = {
        setOffset: function (a, b, c) {
            var d, e, f, g, h, i, j, k = m.css(a, 'position'), l = m(a), n = {};
            'static' === k && (a.style.position = 'relative'), h = l.offset(), f = m.css(a, 'top'), i = m.css(a, 'left'), j = ('absolute' === k || 'fixed' === k) && m.inArray('auto', [
                f,
                i
            ]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), null != b.left && (n.left = b.left - h.left + e), 'using' in b ? b.using.call(a, n) : l.css(n);
        }
    }, m.fn.extend({
        offset: function (a) {
            if (arguments.length)
                return void 0 === a ? this : this.each(function (b) {
                    m.offset.setOffset(this, a, b);
                });
            var b, c, d = {
                    top: 0,
                    left: 0
                }, e = this[0], f = e && e.ownerDocument;
            if (f)
                return b = f.documentElement, m.contains(b, e) ? (typeof e.getBoundingClientRect !== K && (d = e.getBoundingClientRect()), c = dd(f), {
                    top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),
                    left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0)
                }) : d;
        },
        position: function () {
            if (this[0]) {
                var a, b, c = {
                        top: 0,
                        left: 0
                    }, d = this[0];
                return 'fixed' === m.css(d, 'position') ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), m.nodeName(a[0], 'html') || (c = a.offset()), c.top += m.css(a[0], 'borderTopWidth', !0), c.left += m.css(a[0], 'borderLeftWidth', !0)), {
                    top: b.top - c.top - m.css(d, 'marginTop', !0),
                    left: b.left - c.left - m.css(d, 'marginLeft', !0)
                };
            }
        },
        offsetParent: function () {
            return this.map(function () {
                var a = this.offsetParent || cd;
                while (a && !m.nodeName(a, 'html') && 'static' === m.css(a, 'position'))
                    a = a.offsetParent;
                return a || cd;
            });
        }
    }), m.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
    }, function (a, b) {
        var c = /Y/.test(b);
        m.fn[a] = function (d) {
            return V(this, function (a, d, e) {
                var f = dd(a);
                return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e);
            }, a, d, arguments.length, null);
        };
    }), m.each([
        'top',
        'left'
    ], function (a, b) {
        m.cssHooks[b] = Lb(k.pixelPosition, function (a, c) {
            return c ? (c = Jb(a, b), Hb.test(c) ? m(a).position()[b] + 'px' : c) : void 0;
        });
    }), m.each({
        Height: 'height',
        Width: 'width'
    }, function (a, b) {
        m.each({
            padding: 'inner' + a,
            content: b,
            '': 'outer' + a
        }, function (c, d) {
            m.fn[d] = function (d, e) {
                var f = arguments.length && (c || 'boolean' != typeof d), g = c || (d === !0 || e === !0 ? 'margin' : 'border');
                return V(this, function (b, c, d) {
                    var e;
                    return m.isWindow(b) ? b.document.documentElement['client' + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body['scroll' + a], e['scroll' + a], b.body['offset' + a], e['offset' + a], e['client' + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g);
                }, b, f ? d : void 0, f, null);
            };
        });
    }), m.fn.size = function () {
        return this.length;
    }, m.fn.andSelf = m.fn.addBack, 'function' == typeof define && define.amd && define('jquery', [], function () {
        return m;
    });
    var ed = a.jQuery, fd = a.$;
    return m.noConflict = function (b) {
        return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m;
    }, typeof b === K && (a.jQuery = a.$ = m), m;
});
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == 'function' && require;
                if (!u && a)
                    return a(o, !0);
                if (i)
                    return i(o, !0);
                var f = new Error('Cannot find module \'' + o + '\'');
                throw f.code = 'MODULE_NOT_FOUND', f;
            }
            var l = n[o] = { exports: {} };
            t[o][0].call(l.exports, function (e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof require == 'function' && require;
    for (var o = 0; o < r.length; o++)
        s(r[o]);
    return s;
}({
    1: [
        function (require, module, exports) {
            'use strict';
            var ps = require('../main');
            var psInstances = require('../plugin/instances');
            function mountJQuery(jQuery) {
                jQuery.fn.perfectScrollbar = function (settingOrCommand) {
                    return this.each(function () {
                        if (typeof settingOrCommand === 'object' || typeof settingOrCommand === 'undefined') {
                            var settings = settingOrCommand;
                            if (!psInstances.get(this)) {
                                ps.initialize(this, settings);
                            }
                        } else {
                            var command = settingOrCommand;
                            if (command === 'update') {
                                ps.update(this);
                            } else if (command === 'destroy') {
                                ps.destroy(this);
                            }
                        }
                    });
                };
            }
            if (typeof define === 'function' && define.amd) {
                define('Ps', ['jquery'], mountJQuery);
            } else {
                var jq = window.jQuery ? window.jQuery : window.$;
                if (typeof jq !== 'undefined') {
                    mountJQuery(jq);
                }
            }
            module.exports = mountJQuery;
        },
        {
            '../main': 6,
            '../plugin/instances': 17
        }
    ],
    2: [
        function (require, module, exports) {
            'use strict';
            var DOM = {};
            DOM.create = function (tagName, className) {
                var element = document.createElement(tagName);
                element.className = className;
                return element;
            };
            DOM.appendTo = function (child, parent) {
                parent.appendChild(child);
                return child;
            };
            function cssGet(element, styleName) {
                return window.getComputedStyle(element)[styleName];
            }
            function cssSet(element, styleName, styleValue) {
                if (typeof styleValue === 'number') {
                    styleValue = styleValue.toString() + 'px';
                }
                element.style[styleName] = styleValue;
                return element;
            }
            function cssMultiSet(element, obj) {
                for (var key in obj) {
                    var val = obj[key];
                    if (typeof val === 'number') {
                        val = val.toString() + 'px';
                    }
                    element.style[key] = val;
                }
                return element;
            }
            DOM.css = function (element, styleNameOrObject, styleValue) {
                if (typeof styleNameOrObject === 'object') {
                    return cssMultiSet(element, styleNameOrObject);
                } else {
                    if (typeof styleValue === 'undefined') {
                        return cssGet(element, styleNameOrObject);
                    } else {
                        return cssSet(element, styleNameOrObject, styleValue);
                    }
                }
            };
            DOM.matches = function (element, query) {
                if (typeof element.matches !== 'undefined') {
                    return element.matches(query);
                } else {
                    return element.msMatchesSelector(query);
                }
            };
            DOM.remove = function (element) {
                if (typeof element.remove !== 'undefined') {
                    element.remove();
                } else {
                    if (element.parentNode) {
                        element.parentNode.removeChild(element);
                    }
                }
            };
            DOM.queryChildren = function (element, selector) {
                return Array.prototype.filter.call(element.childNodes, function (child) {
                    return DOM.matches(child, selector);
                });
            };
            module.exports = DOM;
        },
        {}
    ],
    3: [
        function (require, module, exports) {
            'use strict';
            var EventElement = function (element) {
                this.element = element;
                this.events = {};
            };
            EventElement.prototype.bind = function (eventName, handler) {
                if (typeof this.events[eventName] === 'undefined') {
                    this.events[eventName] = [];
                }
                this.events[eventName].push(handler);
                this.element.addEventListener(eventName, handler, false);
            };
            EventElement.prototype.unbind = function (eventName, handler) {
                var isHandlerProvided = typeof handler !== 'undefined';
                this.events[eventName] = this.events[eventName].filter(function (hdlr) {
                    if (isHandlerProvided && hdlr !== handler) {
                        return true;
                    }
                    this.element.removeEventListener(eventName, hdlr, false);
                    return false;
                }, this);
            };
            EventElement.prototype.unbindAll = function () {
                for (var name in this.events) {
                    this.unbind(name);
                }
            };
            var EventManager = function () {
                this.eventElements = [];
            };
            EventManager.prototype.eventElement = function (element) {
                var ee = this.eventElements.filter(function (eventElement) {
                    return eventElement.element === element;
                })[0];
                if (typeof ee === 'undefined') {
                    ee = new EventElement(element);
                    this.eventElements.push(ee);
                }
                return ee;
            };
            EventManager.prototype.bind = function (element, eventName, handler) {
                this.eventElement(element).bind(eventName, handler);
            };
            EventManager.prototype.unbind = function (element, eventName, handler) {
                this.eventElement(element).unbind(eventName, handler);
            };
            EventManager.prototype.unbindAll = function () {
                for (var i = 0; i < this.eventElements.length; i++) {
                    this.eventElements[i].unbindAll();
                }
            };
            EventManager.prototype.once = function (element, eventName, handler) {
                var ee = this.eventElement(element);
                var onceHandler = function (e) {
                    ee.unbind(eventName, onceHandler);
                    handler(e);
                };
                ee.bind(eventName, onceHandler);
            };
            module.exports = EventManager;
        },
        {}
    ],
    4: [
        function (require, module, exports) {
            'use strict';
            module.exports = function () {
                function s4() {
                    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
                }
                return function () {
                    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
                };
            }();
        },
        {}
    ],
    5: [
        function (require, module, exports) {
            'use strict';
            var dom = require('./dom');
            var toInt = exports.toInt = function (x) {
                return parseInt(x, 10) || 0;
            };
            exports.isEditable = function (el) {
                return dom.matches(el, 'input,[contenteditable]') || dom.matches(el, 'select,[contenteditable]') || dom.matches(el, 'textarea,[contenteditable]') || dom.matches(el, 'button,[contenteditable]');
            };
            exports.removePsClasses = function (element) {
                for (var i = 0; i < element.classList.length; i++) {
                    var className = element.classList[i];
                    if (className.indexOf('ps-') === 0) {
                        element.classList.remove(className);
                    }
                }
            };
            exports.outerWidth = function (element) {
                return toInt(dom.css(element, 'width')) + toInt(dom.css(element, 'paddingLeft')) + toInt(dom.css(element, 'paddingRight')) + toInt(dom.css(element, 'borderLeftWidth')) + toInt(dom.css(element, 'borderRightWidth'));
            };
            function psClasses(axis) {
                var classes = ['ps--in-scrolling'];
                var axisClasses;
                if (typeof axis === 'undefined') {
                    axisClasses = [
                        'ps--x',
                        'ps--y'
                    ];
                } else {
                    axisClasses = ['ps--' + axis];
                }
                return classes.concat(axisClasses);
            }
            exports.startScrolling = function (element, axis) {
                var classes = psClasses(axis);
                for (var i = 0; i < classes.length; i++) {
                    element.classList.add(classes[i]);
                }
            };
            exports.stopScrolling = function (element, axis) {
                var classes = psClasses(axis);
                for (var i = 0; i < classes.length; i++) {
                    element.classList.remove(classes[i]);
                }
            };
            exports.env = {
                isWebKit: typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style,
                supportsTouch: typeof window !== 'undefined' && ('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
                supportsIePointer: typeof window !== 'undefined' && window.navigator.msMaxTouchPoints !== null
            };
        },
        { './dom': 2 }
    ],
    6: [
        function (require, module, exports) {
            'use strict';
            var destroy = require('./plugin/destroy');
            var initialize = require('./plugin/initialize');
            var update = require('./plugin/update');
            module.exports = {
                initialize: initialize,
                update: update,
                destroy: destroy
            };
        },
        {
            './plugin/destroy': 8,
            './plugin/initialize': 16,
            './plugin/update': 20
        }
    ],
    7: [
        function (require, module, exports) {
            'use strict';
            module.exports = function () {
                return {
                    handlers: [
                        'click-rail',
                        'drag-scrollbar',
                        'keyboard',
                        'wheel',
                        'touch'
                    ],
                    maxScrollbarLength: null,
                    minScrollbarLength: null,
                    scrollXMarginOffset: 0,
                    scrollYMarginOffset: 0,
                    suppressScrollX: false,
                    suppressScrollY: false,
                    swipePropagation: true,
                    swipeEasing: true,
                    useBothWheelAxes: false,
                    wheelPropagation: false,
                    wheelSpeed: 1,
                    theme: 'default'
                };
            };
        },
        {}
    ],
    8: [
        function (require, module, exports) {
            'use strict';
            var _ = require('../lib/helper');
            var dom = require('../lib/dom');
            var instances = require('./instances');
            module.exports = function (element) {
                var i = instances.get(element);
                if (!i) {
                    return;
                }
                i.event.unbindAll();
                dom.remove(i.scrollbarX);
                dom.remove(i.scrollbarY);
                dom.remove(i.scrollbarXRail);
                dom.remove(i.scrollbarYRail);
                _.removePsClasses(element);
                instances.remove(element);
            };
        },
        {
            '../lib/dom': 2,
            '../lib/helper': 5,
            './instances': 17
        }
    ],
    9: [
        function (require, module, exports) {
            'use strict';
            var instances = require('../instances');
            var updateGeometry = require('../update-geometry');
            var updateScroll = require('../update-scroll');
            function bindClickRailHandler(element, i) {
                function pageOffset(el) {
                    return el.getBoundingClientRect();
                }
                var stopPropagation = function (e) {
                    e.stopPropagation();
                };
                i.event.bind(i.scrollbarY, 'click', stopPropagation);
                i.event.bind(i.scrollbarYRail, 'click', function (e) {
                    var positionTop = e.pageY - window.pageYOffset - pageOffset(i.scrollbarYRail).top;
                    var direction = positionTop > i.scrollbarYTop ? 1 : -1;
                    updateScroll(element, 'top', element.scrollTop + direction * i.containerHeight);
                    updateGeometry(element);
                    e.stopPropagation();
                });
                i.event.bind(i.scrollbarX, 'click', stopPropagation);
                i.event.bind(i.scrollbarXRail, 'click', function (e) {
                    var positionLeft = e.pageX - window.pageXOffset - pageOffset(i.scrollbarXRail).left;
                    var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;
                    updateScroll(element, 'left', element.scrollLeft + direction * i.containerWidth);
                    updateGeometry(element);
                    e.stopPropagation();
                });
            }
            module.exports = function (element) {
                var i = instances.get(element);
                bindClickRailHandler(element, i);
            };
        },
        {
            '../instances': 17,
            '../update-geometry': 18,
            '../update-scroll': 19
        }
    ],
    10: [
        function (require, module, exports) {
            'use strict';
            var _ = require('../../lib/helper');
            var dom = require('../../lib/dom');
            var instances = require('../instances');
            var updateGeometry = require('../update-geometry');
            var updateScroll = require('../update-scroll');
            function bindMouseScrollXHandler(element, i) {
                var currentLeft = null;
                var currentPageX = null;
                function updateScrollLeft(deltaX) {
                    var newLeft = currentLeft + deltaX * i.railXRatio;
                    var maxLeft = Math.max(0, i.scrollbarXRail.getBoundingClientRect().left) + i.railXRatio * (i.railXWidth - i.scrollbarXWidth);
                    if (newLeft < 0) {
                        i.scrollbarXLeft = 0;
                    } else if (newLeft > maxLeft) {
                        i.scrollbarXLeft = maxLeft;
                    } else {
                        i.scrollbarXLeft = newLeft;
                    }
                    var scrollLeft = _.toInt(i.scrollbarXLeft * (i.contentWidth - i.containerWidth) / (i.containerWidth - i.railXRatio * i.scrollbarXWidth)) - i.negativeScrollAdjustment;
                    updateScroll(element, 'left', scrollLeft);
                }
                var mouseMoveHandler = function (e) {
                    updateScrollLeft(e.pageX - currentPageX);
                    updateGeometry(element);
                    e.stopPropagation();
                    e.preventDefault();
                };
                var mouseUpHandler = function () {
                    _.stopScrolling(element, 'x');
                    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
                };
                i.event.bind(i.scrollbarX, 'mousedown', function (e) {
                    currentPageX = e.pageX;
                    currentLeft = _.toInt(dom.css(i.scrollbarX, 'left')) * i.railXRatio;
                    _.startScrolling(element, 'x');
                    i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
                    i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
                    e.stopPropagation();
                    e.preventDefault();
                });
            }
            function bindMouseScrollYHandler(element, i) {
                var currentTop = null;
                var currentPageY = null;
                function updateScrollTop(deltaY) {
                    var newTop = currentTop + deltaY * i.railYRatio;
                    var maxTop = Math.max(0, i.scrollbarYRail.getBoundingClientRect().top) + i.railYRatio * (i.railYHeight - i.scrollbarYHeight);
                    if (newTop < 0) {
                        i.scrollbarYTop = 0;
                    } else if (newTop > maxTop) {
                        i.scrollbarYTop = maxTop;
                    } else {
                        i.scrollbarYTop = newTop;
                    }
                    var scrollTop = _.toInt(i.scrollbarYTop * (i.contentHeight - i.containerHeight) / (i.containerHeight - i.railYRatio * i.scrollbarYHeight));
                    updateScroll(element, 'top', scrollTop);
                }
                var mouseMoveHandler = function (e) {
                    updateScrollTop(e.pageY - currentPageY);
                    updateGeometry(element);
                    e.stopPropagation();
                    e.preventDefault();
                };
                var mouseUpHandler = function () {
                    _.stopScrolling(element, 'y');
                    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
                };
                i.event.bind(i.scrollbarY, 'mousedown', function (e) {
                    currentPageY = e.pageY;
                    currentTop = _.toInt(dom.css(i.scrollbarY, 'top')) * i.railYRatio;
                    _.startScrolling(element, 'y');
                    i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
                    i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
                    e.stopPropagation();
                    e.preventDefault();
                });
            }
            module.exports = function (element) {
                var i = instances.get(element);
                bindMouseScrollXHandler(element, i);
                bindMouseScrollYHandler(element, i);
            };
        },
        {
            '../../lib/dom': 2,
            '../../lib/helper': 5,
            '../instances': 17,
            '../update-geometry': 18,
            '../update-scroll': 19
        }
    ],
    11: [
        function (require, module, exports) {
            'use strict';
            var _ = require('../../lib/helper');
            var dom = require('../../lib/dom');
            var instances = require('../instances');
            var updateGeometry = require('../update-geometry');
            var updateScroll = require('../update-scroll');
            function bindKeyboardHandler(element, i) {
                var hovered = false;
                i.event.bind(element, 'mouseenter', function () {
                    hovered = true;
                });
                i.event.bind(element, 'mouseleave', function () {
                    hovered = false;
                });
                var shouldPrevent = false;
                function shouldPreventDefault(deltaX, deltaY) {
                    var scrollTop = element.scrollTop;
                    if (deltaX === 0) {
                        if (!i.scrollbarYActive) {
                            return false;
                        }
                        if (scrollTop === 0 && deltaY > 0 || scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0) {
                            return !i.settings.wheelPropagation;
                        }
                    }
                    var scrollLeft = element.scrollLeft;
                    if (deltaY === 0) {
                        if (!i.scrollbarXActive) {
                            return false;
                        }
                        if (scrollLeft === 0 && deltaX < 0 || scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0) {
                            return !i.settings.wheelPropagation;
                        }
                    }
                    return true;
                }
                i.event.bind(i.ownerDocument, 'keydown', function (e) {
                    if (e.isDefaultPrevented && e.isDefaultPrevented() || e.defaultPrevented) {
                        return;
                    }
                    var focused = dom.matches(i.scrollbarX, ':focus') || dom.matches(i.scrollbarY, ':focus');
                    if (!hovered && !focused) {
                        return;
                    }
                    var activeElement = document.activeElement ? document.activeElement : i.ownerDocument.activeElement;
                    if (activeElement) {
                        if (activeElement.tagName === 'IFRAME') {
                            activeElement = activeElement.contentDocument.activeElement;
                        } else {
                            while (activeElement.shadowRoot) {
                                activeElement = activeElement.shadowRoot.activeElement;
                            }
                        }
                        if (_.isEditable(activeElement)) {
                            return;
                        }
                    }
                    var deltaX = 0;
                    var deltaY = 0;
                    switch (e.which) {
                    case 37:
                        if (e.metaKey) {
                            deltaX = -i.contentWidth;
                        } else if (e.altKey) {
                            deltaX = -i.containerWidth;
                        } else {
                            deltaX = -30;
                        }
                        break;
                    case 38:
                        if (e.metaKey) {
                            deltaY = i.contentHeight;
                        } else if (e.altKey) {
                            deltaY = i.containerHeight;
                        } else {
                            deltaY = 30;
                        }
                        break;
                    case 39:
                        if (e.metaKey) {
                            deltaX = i.contentWidth;
                        } else if (e.altKey) {
                            deltaX = i.containerWidth;
                        } else {
                            deltaX = 30;
                        }
                        break;
                    case 40:
                        if (e.metaKey) {
                            deltaY = -i.contentHeight;
                        } else if (e.altKey) {
                            deltaY = -i.containerHeight;
                        } else {
                            deltaY = -30;
                        }
                        break;
                    case 33:
                        deltaY = 90;
                        break;
                    case 32:
                        if (e.shiftKey) {
                            deltaY = 90;
                        } else {
                            deltaY = -90;
                        }
                        break;
                    case 34:
                        deltaY = -90;
                        break;
                    case 35:
                        if (e.ctrlKey) {
                            deltaY = -i.contentHeight;
                        } else {
                            deltaY = -i.containerHeight;
                        }
                        break;
                    case 36:
                        if (e.ctrlKey) {
                            deltaY = element.scrollTop;
                        } else {
                            deltaY = i.containerHeight;
                        }
                        break;
                    default:
                        return;
                    }
                    updateScroll(element, 'top', element.scrollTop - deltaY);
                    updateScroll(element, 'left', element.scrollLeft + deltaX);
                    updateGeometry(element);
                    shouldPrevent = shouldPreventDefault(deltaX, deltaY);
                    if (shouldPrevent) {
                        e.preventDefault();
                    }
                });
            }
            module.exports = function (element) {
                var i = instances.get(element);
                bindKeyboardHandler(element, i);
            };
        },
        {
            '../../lib/dom': 2,
            '../../lib/helper': 5,
            '../instances': 17,
            '../update-geometry': 18,
            '../update-scroll': 19
        }
    ],
    12: [
        function (require, module, exports) {
            'use strict';
            var instances = require('../instances');
            var updateGeometry = require('../update-geometry');
            var updateScroll = require('../update-scroll');
            function bindMouseWheelHandler(element, i) {
                var shouldPrevent = false;
                function shouldPreventDefault(deltaX, deltaY) {
                    var scrollTop = element.scrollTop;
                    if (deltaX === 0) {
                        if (!i.scrollbarYActive) {
                            return false;
                        }
                        if (scrollTop === 0 && deltaY > 0 || scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0) {
                            return !i.settings.wheelPropagation;
                        }
                    }
                    var scrollLeft = element.scrollLeft;
                    if (deltaY === 0) {
                        if (!i.scrollbarXActive) {
                            return false;
                        }
                        if (scrollLeft === 0 && deltaX < 0 || scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0) {
                            return !i.settings.wheelPropagation;
                        }
                    }
                    return true;
                }
                function getDeltaFromEvent(e) {
                    var deltaX = e.deltaX;
                    var deltaY = -1 * e.deltaY;
                    if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {
                        deltaX = -1 * e.wheelDeltaX / 6;
                        deltaY = e.wheelDeltaY / 6;
                    }
                    if (e.deltaMode && e.deltaMode === 1) {
                        deltaX *= 10;
                        deltaY *= 10;
                    }
                    if (deltaX !== deltaX && deltaY !== deltaY) {
                        deltaX = 0;
                        deltaY = e.wheelDelta;
                    }
                    if (e.shiftKey) {
                        return [
                            -deltaY,
                            -deltaX
                        ];
                    }
                    return [
                        deltaX,
                        deltaY
                    ];
                }
                function shouldBeConsumedByChild(deltaX, deltaY) {
                    var child = element.querySelector('textarea:hover, select[multiple]:hover, .ps-child:hover');
                    if (child) {
                        var style = window.getComputedStyle(child);
                        var overflow = [
                            style.overflow,
                            style.overflowX,
                            style.overflowY
                        ].join('');
                        if (!overflow.match(/(scroll|auto)/)) {
                            return false;
                        }
                        var maxScrollTop = child.scrollHeight - child.clientHeight;
                        if (maxScrollTop > 0) {
                            if (!(child.scrollTop === 0 && deltaY > 0) && !(child.scrollTop === maxScrollTop && deltaY < 0)) {
                                return true;
                            }
                        }
                        var maxScrollLeft = child.scrollLeft - child.clientWidth;
                        if (maxScrollLeft > 0) {
                            if (!(child.scrollLeft === 0 && deltaX < 0) && !(child.scrollLeft === maxScrollLeft && deltaX > 0)) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                function mousewheelHandler(e) {
                    var delta = getDeltaFromEvent(e);
                    var deltaX = delta[0];
                    var deltaY = delta[1];
                    if (shouldBeConsumedByChild(deltaX, deltaY)) {
                        return;
                    }
                    shouldPrevent = false;
                    if (!i.settings.useBothWheelAxes) {
                        updateScroll(element, 'top', element.scrollTop - deltaY * i.settings.wheelSpeed);
                        updateScroll(element, 'left', element.scrollLeft + deltaX * i.settings.wheelSpeed);
                    } else if (i.scrollbarYActive && !i.scrollbarXActive) {
                        if (deltaY) {
                            updateScroll(element, 'top', element.scrollTop - deltaY * i.settings.wheelSpeed);
                        } else {
                            updateScroll(element, 'top', element.scrollTop + deltaX * i.settings.wheelSpeed);
                        }
                        shouldPrevent = true;
                    } else if (i.scrollbarXActive && !i.scrollbarYActive) {
                        if (deltaX) {
                            updateScroll(element, 'left', element.scrollLeft + deltaX * i.settings.wheelSpeed);
                        } else {
                            updateScroll(element, 'left', element.scrollLeft - deltaY * i.settings.wheelSpeed);
                        }
                        shouldPrevent = true;
                    }
                    updateGeometry(element);
                    shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);
                    if (shouldPrevent) {
                        e.stopPropagation();
                        e.preventDefault();
                    }
                }
                if (typeof window.onwheel !== 'undefined') {
                    i.event.bind(element, 'wheel', mousewheelHandler);
                } else if (typeof window.onmousewheel !== 'undefined') {
                    i.event.bind(element, 'mousewheel', mousewheelHandler);
                }
            }
            module.exports = function (element) {
                var i = instances.get(element);
                bindMouseWheelHandler(element, i);
            };
        },
        {
            '../instances': 17,
            '../update-geometry': 18,
            '../update-scroll': 19
        }
    ],
    13: [
        function (require, module, exports) {
            'use strict';
            var instances = require('../instances');
            var updateGeometry = require('../update-geometry');
            function bindNativeScrollHandler(element, i) {
                i.event.bind(element, 'scroll', function () {
                    updateGeometry(element);
                });
            }
            module.exports = function (element) {
                var i = instances.get(element);
                bindNativeScrollHandler(element, i);
            };
        },
        {
            '../instances': 17,
            '../update-geometry': 18
        }
    ],
    14: [
        function (require, module, exports) {
            'use strict';
            var _ = require('../../lib/helper');
            var instances = require('../instances');
            var updateGeometry = require('../update-geometry');
            var updateScroll = require('../update-scroll');
            function bindSelectionHandler(element, i) {
                function getRangeNode() {
                    var selection = window.getSelection ? window.getSelection() : document.getSelection ? document.getSelection() : '';
                    if (selection.toString().length === 0) {
                        return null;
                    } else {
                        return selection.getRangeAt(0).commonAncestorContainer;
                    }
                }
                var scrollingLoop = null;
                var scrollDiff = {
                    top: 0,
                    left: 0
                };
                function startScrolling() {
                    if (!scrollingLoop) {
                        scrollingLoop = setInterval(function () {
                            if (!instances.get(element)) {
                                clearInterval(scrollingLoop);
                                return;
                            }
                            updateScroll(element, 'top', element.scrollTop + scrollDiff.top);
                            updateScroll(element, 'left', element.scrollLeft + scrollDiff.left);
                            updateGeometry(element);
                        }, 50);
                    }
                }
                function stopScrolling() {
                    if (scrollingLoop) {
                        clearInterval(scrollingLoop);
                        scrollingLoop = null;
                    }
                    _.stopScrolling(element);
                }
                var isSelected = false;
                i.event.bind(i.ownerDocument, 'selectionchange', function () {
                    if (element.contains(getRangeNode())) {
                        isSelected = true;
                    } else {
                        isSelected = false;
                        stopScrolling();
                    }
                });
                i.event.bind(window, 'mouseup', function () {
                    if (isSelected) {
                        isSelected = false;
                        stopScrolling();
                    }
                });
                i.event.bind(window, 'keyup', function () {
                    if (isSelected) {
                        isSelected = false;
                        stopScrolling();
                    }
                });
                i.event.bind(window, 'mousemove', function (e) {
                    if (isSelected) {
                        var mousePosition = {
                            x: e.pageX,
                            y: e.pageY
                        };
                        var containerGeometry = {
                            left: element.offsetLeft,
                            right: element.offsetLeft + element.offsetWidth,
                            top: element.offsetTop,
                            bottom: element.offsetTop + element.offsetHeight
                        };
                        if (mousePosition.x < containerGeometry.left + 3) {
                            scrollDiff.left = -5;
                            _.startScrolling(element, 'x');
                        } else if (mousePosition.x > containerGeometry.right - 3) {
                            scrollDiff.left = 5;
                            _.startScrolling(element, 'x');
                        } else {
                            scrollDiff.left = 0;
                        }
                        if (mousePosition.y < containerGeometry.top + 3) {
                            if (containerGeometry.top + 3 - mousePosition.y < 5) {
                                scrollDiff.top = -5;
                            } else {
                                scrollDiff.top = -20;
                            }
                            _.startScrolling(element, 'y');
                        } else if (mousePosition.y > containerGeometry.bottom - 3) {
                            if (mousePosition.y - containerGeometry.bottom + 3 < 5) {
                                scrollDiff.top = 5;
                            } else {
                                scrollDiff.top = 20;
                            }
                            _.startScrolling(element, 'y');
                        } else {
                            scrollDiff.top = 0;
                        }
                        if (scrollDiff.top === 0 && scrollDiff.left === 0) {
                            stopScrolling();
                        } else {
                            startScrolling();
                        }
                    }
                });
            }
            module.exports = function (element) {
                var i = instances.get(element);
                bindSelectionHandler(element, i);
            };
        },
        {
            '../../lib/helper': 5,
            '../instances': 17,
            '../update-geometry': 18,
            '../update-scroll': 19
        }
    ],
    15: [
        function (require, module, exports) {
            'use strict';
            var _ = require('../../lib/helper');
            var instances = require('../instances');
            var updateGeometry = require('../update-geometry');
            var updateScroll = require('../update-scroll');
            function bindTouchHandler(element, i, supportsTouch, supportsIePointer) {
                function shouldPreventDefault(deltaX, deltaY) {
                    var scrollTop = element.scrollTop;
                    var scrollLeft = element.scrollLeft;
                    var magnitudeX = Math.abs(deltaX);
                    var magnitudeY = Math.abs(deltaY);
                    if (magnitudeY > magnitudeX) {
                        if (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight || deltaY > 0 && scrollTop === 0) {
                            return !i.settings.swipePropagation;
                        }
                    } else if (magnitudeX > magnitudeY) {
                        if (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth || deltaX > 0 && scrollLeft === 0) {
                            return !i.settings.swipePropagation;
                        }
                    }
                    return true;
                }
                function applyTouchMove(differenceX, differenceY) {
                    updateScroll(element, 'top', element.scrollTop - differenceY);
                    updateScroll(element, 'left', element.scrollLeft - differenceX);
                    updateGeometry(element);
                }
                var startOffset = {};
                var startTime = 0;
                var speed = {};
                var easingLoop = null;
                var inGlobalTouch = false;
                var inLocalTouch = false;
                function globalTouchStart() {
                    inGlobalTouch = true;
                }
                function globalTouchEnd() {
                    inGlobalTouch = false;
                }
                function getTouch(e) {
                    if (e.targetTouches) {
                        return e.targetTouches[0];
                    } else {
                        return e;
                    }
                }
                function shouldHandle(e) {
                    if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
                        return false;
                    }
                    if (e.targetTouches && e.targetTouches.length === 1) {
                        return true;
                    }
                    if (e.pointerType && e.pointerType !== 'mouse' && e.pointerType !== e.MSPOINTER_TYPE_MOUSE) {
                        return true;
                    }
                    return false;
                }
                function touchStart(e) {
                    if (shouldHandle(e)) {
                        inLocalTouch = true;
                        var touch = getTouch(e);
                        startOffset.pageX = touch.pageX;
                        startOffset.pageY = touch.pageY;
                        startTime = new Date().getTime();
                        if (easingLoop !== null) {
                            clearInterval(easingLoop);
                        }
                        e.stopPropagation();
                    }
                }
                function touchMove(e) {
                    if (!inLocalTouch && i.settings.swipePropagation) {
                        touchStart(e);
                    }
                    if (!inGlobalTouch && inLocalTouch && shouldHandle(e)) {
                        var touch = getTouch(e);
                        var currentOffset = {
                            pageX: touch.pageX,
                            pageY: touch.pageY
                        };
                        var differenceX = currentOffset.pageX - startOffset.pageX;
                        var differenceY = currentOffset.pageY - startOffset.pageY;
                        applyTouchMove(differenceX, differenceY);
                        startOffset = currentOffset;
                        var currentTime = new Date().getTime();
                        var timeGap = currentTime - startTime;
                        if (timeGap > 0) {
                            speed.x = differenceX / timeGap;
                            speed.y = differenceY / timeGap;
                            startTime = currentTime;
                        }
                        if (shouldPreventDefault(differenceX, differenceY)) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                    }
                }
                function touchEnd() {
                    if (!inGlobalTouch && inLocalTouch) {
                        inLocalTouch = false;
                        if (i.settings.swipeEasing) {
                            clearInterval(easingLoop);
                            easingLoop = setInterval(function () {
                                if (!instances.get(element)) {
                                    clearInterval(easingLoop);
                                    return;
                                }
                                if (!speed.x && !speed.y) {
                                    clearInterval(easingLoop);
                                    return;
                                }
                                if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
                                    clearInterval(easingLoop);
                                    return;
                                }
                                applyTouchMove(speed.x * 30, speed.y * 30);
                                speed.x *= 0.8;
                                speed.y *= 0.8;
                            }, 10);
                        }
                    }
                }
                if (supportsTouch) {
                    i.event.bind(window, 'touchstart', globalTouchStart);
                    i.event.bind(window, 'touchend', globalTouchEnd);
                    i.event.bind(element, 'touchstart', touchStart);
                    i.event.bind(element, 'touchmove', touchMove);
                    i.event.bind(element, 'touchend', touchEnd);
                } else if (supportsIePointer) {
                    if (window.PointerEvent) {
                        i.event.bind(window, 'pointerdown', globalTouchStart);
                        i.event.bind(window, 'pointerup', globalTouchEnd);
                        i.event.bind(element, 'pointerdown', touchStart);
                        i.event.bind(element, 'pointermove', touchMove);
                        i.event.bind(element, 'pointerup', touchEnd);
                    } else if (window.MSPointerEvent) {
                        i.event.bind(window, 'MSPointerDown', globalTouchStart);
                        i.event.bind(window, 'MSPointerUp', globalTouchEnd);
                        i.event.bind(element, 'MSPointerDown', touchStart);
                        i.event.bind(element, 'MSPointerMove', touchMove);
                        i.event.bind(element, 'MSPointerUp', touchEnd);
                    }
                }
            }
            module.exports = function (element) {
                if (!_.env.supportsTouch && !_.env.supportsIePointer) {
                    return;
                }
                var i = instances.get(element);
                bindTouchHandler(element, i, _.env.supportsTouch, _.env.supportsIePointer);
            };
        },
        {
            '../../lib/helper': 5,
            '../instances': 17,
            '../update-geometry': 18,
            '../update-scroll': 19
        }
    ],
    16: [
        function (require, module, exports) {
            'use strict';
            var instances = require('./instances');
            var updateGeometry = require('./update-geometry');
            var handlers = {
                'click-rail': require('./handler/click-rail'),
                'drag-scrollbar': require('./handler/drag-scrollbar'),
                'keyboard': require('./handler/keyboard'),
                'wheel': require('./handler/mouse-wheel'),
                'touch': require('./handler/touch'),
                'selection': require('./handler/selection')
            };
            var nativeScrollHandler = require('./handler/native-scroll');
            module.exports = function (element, userSettings) {
                element.classList.add('ps');
                var i = instances.add(element, typeof userSettings === 'object' ? userSettings : {});
                element.classList.add('ps--theme_' + i.settings.theme);
                i.settings.handlers.forEach(function (handlerName) {
                    handlers[handlerName](element);
                });
                nativeScrollHandler(element);
                updateGeometry(element);
            };
        },
        {
            './handler/click-rail': 9,
            './handler/drag-scrollbar': 10,
            './handler/keyboard': 11,
            './handler/mouse-wheel': 12,
            './handler/native-scroll': 13,
            './handler/selection': 14,
            './handler/touch': 15,
            './instances': 17,
            './update-geometry': 18
        }
    ],
    17: [
        function (require, module, exports) {
            'use strict';
            var _ = require('../lib/helper');
            var defaultSettings = require('./default-setting');
            var dom = require('../lib/dom');
            var EventManager = require('../lib/event-manager');
            var guid = require('../lib/guid');
            var instances = {};
            function Instance(element, userSettings) {
                var i = this;
                i.settings = defaultSettings();
                for (var key in userSettings) {
                    i.settings[key] = userSettings[key];
                }
                i.containerWidth = null;
                i.containerHeight = null;
                i.contentWidth = null;
                i.contentHeight = null;
                i.isRtl = dom.css(element, 'direction') === 'rtl';
                i.isNegativeScroll = function () {
                    var originalScrollLeft = element.scrollLeft;
                    var result = null;
                    element.scrollLeft = -1;
                    result = element.scrollLeft < 0;
                    element.scrollLeft = originalScrollLeft;
                    return result;
                }();
                i.negativeScrollAdjustment = i.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;
                i.event = new EventManager();
                i.ownerDocument = element.ownerDocument || document;
                function focus() {
                    element.classList.add('ps--focus');
                }
                function blur() {
                    element.classList.remove('ps--focus');
                }
                i.scrollbarXRail = dom.appendTo(dom.create('div', 'ps__scrollbar-x-rail'), element);
                i.scrollbarX = dom.appendTo(dom.create('div', 'ps__scrollbar-x'), i.scrollbarXRail);
                i.scrollbarX.setAttribute('tabindex', 0);
                i.event.bind(i.scrollbarX, 'focus', focus);
                i.event.bind(i.scrollbarX, 'blur', blur);
                i.scrollbarXActive = null;
                i.scrollbarXWidth = null;
                i.scrollbarXLeft = null;
                i.scrollbarXBottom = _.toInt(dom.css(i.scrollbarXRail, 'bottom'));
                i.isScrollbarXUsingBottom = i.scrollbarXBottom === i.scrollbarXBottom;
                i.scrollbarXTop = i.isScrollbarXUsingBottom ? null : _.toInt(dom.css(i.scrollbarXRail, 'top'));
                i.railBorderXWidth = _.toInt(dom.css(i.scrollbarXRail, 'borderLeftWidth')) + _.toInt(dom.css(i.scrollbarXRail, 'borderRightWidth'));
                dom.css(i.scrollbarXRail, 'display', 'block');
                i.railXMarginWidth = _.toInt(dom.css(i.scrollbarXRail, 'marginLeft')) + _.toInt(dom.css(i.scrollbarXRail, 'marginRight'));
                dom.css(i.scrollbarXRail, 'display', '');
                i.railXWidth = null;
                i.railXRatio = null;
                i.scrollbarYRail = dom.appendTo(dom.create('div', 'ps__scrollbar-y-rail'), element);
                i.scrollbarY = dom.appendTo(dom.create('div', 'ps__scrollbar-y'), i.scrollbarYRail);
                i.scrollbarY.setAttribute('tabindex', 0);
                i.event.bind(i.scrollbarY, 'focus', focus);
                i.event.bind(i.scrollbarY, 'blur', blur);
                i.scrollbarYActive = null;
                i.scrollbarYHeight = null;
                i.scrollbarYTop = null;
                i.scrollbarYRight = _.toInt(dom.css(i.scrollbarYRail, 'right'));
                i.isScrollbarYUsingRight = i.scrollbarYRight === i.scrollbarYRight;
                i.scrollbarYLeft = i.isScrollbarYUsingRight ? null : _.toInt(dom.css(i.scrollbarYRail, 'left'));
                i.scrollbarYOuterWidth = i.isRtl ? _.outerWidth(i.scrollbarY) : null;
                i.railBorderYWidth = _.toInt(dom.css(i.scrollbarYRail, 'borderTopWidth')) + _.toInt(dom.css(i.scrollbarYRail, 'borderBottomWidth'));
                dom.css(i.scrollbarYRail, 'display', 'block');
                i.railYMarginHeight = _.toInt(dom.css(i.scrollbarYRail, 'marginTop')) + _.toInt(dom.css(i.scrollbarYRail, 'marginBottom'));
                dom.css(i.scrollbarYRail, 'display', '');
                i.railYHeight = null;
                i.railYRatio = null;
            }
            function getId(element) {
                return element.getAttribute('data-ps-id');
            }
            function setId(element, id) {
                element.setAttribute('data-ps-id', id);
            }
            function removeId(element) {
                element.removeAttribute('data-ps-id');
            }
            exports.add = function (element, userSettings) {
                var newId = guid();
                setId(element, newId);
                instances[newId] = new Instance(element, userSettings);
                return instances[newId];
            };
            exports.remove = function (element) {
                delete instances[getId(element)];
                removeId(element);
            };
            exports.get = function (element) {
                return instances[getId(element)];
            };
        },
        {
            '../lib/dom': 2,
            '../lib/event-manager': 3,
            '../lib/guid': 4,
            '../lib/helper': 5,
            './default-setting': 7
        }
    ],
    18: [
        function (require, module, exports) {
            'use strict';
            var _ = require('../lib/helper');
            var dom = require('../lib/dom');
            var instances = require('./instances');
            var updateScroll = require('./update-scroll');
            function getThumbSize(i, thumbSize) {
                if (i.settings.minScrollbarLength) {
                    thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
                }
                if (i.settings.maxScrollbarLength) {
                    thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
                }
                return thumbSize;
            }
            function updateCss(element, i) {
                var xRailOffset = { width: i.railXWidth };
                if (i.isRtl) {
                    xRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth - i.contentWidth;
                } else {
                    xRailOffset.left = element.scrollLeft;
                }
                if (i.isScrollbarXUsingBottom) {
                    xRailOffset.bottom = i.scrollbarXBottom - element.scrollTop;
                } else {
                    xRailOffset.top = i.scrollbarXTop + element.scrollTop;
                }
                dom.css(i.scrollbarXRail, xRailOffset);
                var yRailOffset = {
                    top: element.scrollTop,
                    height: i.railYHeight
                };
                if (i.isScrollbarYUsingRight) {
                    if (i.isRtl) {
                        yRailOffset.right = i.contentWidth - (i.negativeScrollAdjustment + element.scrollLeft) - i.scrollbarYRight - i.scrollbarYOuterWidth;
                    } else {
                        yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
                    }
                } else {
                    if (i.isRtl) {
                        yRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth * 2 - i.contentWidth - i.scrollbarYLeft - i.scrollbarYOuterWidth;
                    } else {
                        yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
                    }
                }
                dom.css(i.scrollbarYRail, yRailOffset);
                dom.css(i.scrollbarX, {
                    left: i.scrollbarXLeft,
                    width: i.scrollbarXWidth - i.railBorderXWidth
                });
                dom.css(i.scrollbarY, {
                    top: i.scrollbarYTop,
                    height: i.scrollbarYHeight - i.railBorderYWidth
                });
            }
            module.exports = function (element) {
                var i = instances.get(element);
                i.containerWidth = element.clientWidth;
                i.containerHeight = element.clientHeight;
                i.contentWidth = element.scrollWidth;
                i.contentHeight = element.scrollHeight;
                var existingRails;
                if (!element.contains(i.scrollbarXRail)) {
                    existingRails = dom.queryChildren(element, '.ps__scrollbar-x-rail');
                    if (existingRails.length > 0) {
                        existingRails.forEach(function (rail) {
                            dom.remove(rail);
                        });
                    }
                    dom.appendTo(i.scrollbarXRail, element);
                }
                if (!element.contains(i.scrollbarYRail)) {
                    existingRails = dom.queryChildren(element, '.ps__scrollbar-y-rail');
                    if (existingRails.length > 0) {
                        existingRails.forEach(function (rail) {
                            dom.remove(rail);
                        });
                    }
                    dom.appendTo(i.scrollbarYRail, element);
                }
                if (!i.settings.suppressScrollX && i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth) {
                    i.scrollbarXActive = true;
                    i.railXWidth = i.containerWidth - i.railXMarginWidth;
                    i.railXRatio = i.containerWidth / i.railXWidth;
                    i.scrollbarXWidth = getThumbSize(i, _.toInt(i.railXWidth * i.containerWidth / i.contentWidth));
                    i.scrollbarXLeft = _.toInt((i.negativeScrollAdjustment + element.scrollLeft) * (i.railXWidth - i.scrollbarXWidth) / (i.contentWidth - i.containerWidth));
                } else {
                    i.scrollbarXActive = false;
                }
                if (!i.settings.suppressScrollY && i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight) {
                    i.scrollbarYActive = true;
                    i.railYHeight = i.containerHeight - i.railYMarginHeight;
                    i.railYRatio = i.containerHeight / i.railYHeight;
                    i.scrollbarYHeight = getThumbSize(i, _.toInt(i.railYHeight * i.containerHeight / i.contentHeight));
                    i.scrollbarYTop = _.toInt(element.scrollTop * (i.railYHeight - i.scrollbarYHeight) / (i.contentHeight - i.containerHeight));
                } else {
                    i.scrollbarYActive = false;
                }
                if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
                    i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;
                }
                if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
                    i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
                }
                updateCss(element, i);
                if (i.scrollbarXActive) {
                    element.classList.add('ps--active-x');
                } else {
                    element.classList.remove('ps--active-x');
                    i.scrollbarXWidth = 0;
                    i.scrollbarXLeft = 0;
                    updateScroll(element, 'left', 0);
                }
                if (i.scrollbarYActive) {
                    element.classList.add('ps--active-y');
                } else {
                    element.classList.remove('ps--active-y');
                    i.scrollbarYHeight = 0;
                    i.scrollbarYTop = 0;
                    updateScroll(element, 'top', 0);
                }
            };
        },
        {
            '../lib/dom': 2,
            '../lib/helper': 5,
            './instances': 17,
            './update-scroll': 19
        }
    ],
    19: [
        function (require, module, exports) {
            'use strict';
            var instances = require('./instances');
            var createDOMEvent = function (name) {
                var event = document.createEvent('Event');
                event.initEvent(name, true, true);
                return event;
            };
            module.exports = function (element, axis, value) {
                if (typeof element === 'undefined') {
                    throw 'You must provide an element to the update-scroll function';
                }
                if (typeof axis === 'undefined') {
                    throw 'You must provide an axis to the update-scroll function';
                }
                if (typeof value === 'undefined') {
                    throw 'You must provide a value to the update-scroll function';
                }
                if (axis === 'top' && value <= 0) {
                    element.scrollTop = value = 0;
                    element.dispatchEvent(createDOMEvent('ps-y-reach-start'));
                }
                if (axis === 'left' && value <= 0) {
                    element.scrollLeft = value = 0;
                    element.dispatchEvent(createDOMEvent('ps-x-reach-start'));
                }
                var i = instances.get(element);
                if (axis === 'top' && value >= i.contentHeight - i.containerHeight) {
                    value = i.contentHeight - i.containerHeight;
                    if (value - element.scrollTop <= 2) {
                        value = element.scrollTop;
                    } else {
                        element.scrollTop = value;
                    }
                    element.dispatchEvent(createDOMEvent('ps-y-reach-end'));
                }
                if (axis === 'left' && value >= i.contentWidth - i.containerWidth) {
                    value = i.contentWidth - i.containerWidth;
                    if (value - element.scrollLeft <= 2) {
                        value = element.scrollLeft;
                    } else {
                        element.scrollLeft = value;
                    }
                    element.dispatchEvent(createDOMEvent('ps-x-reach-end'));
                }
                if (i.lastTop === undefined) {
                    i.lastTop = element.scrollTop;
                }
                if (i.lastLeft === undefined) {
                    i.lastLeft = element.scrollLeft;
                }
                if (axis === 'top' && value < i.lastTop) {
                    element.dispatchEvent(createDOMEvent('ps-scroll-up'));
                }
                if (axis === 'top' && value > i.lastTop) {
                    element.dispatchEvent(createDOMEvent('ps-scroll-down'));
                }
                if (axis === 'left' && value < i.lastLeft) {
                    element.dispatchEvent(createDOMEvent('ps-scroll-left'));
                }
                if (axis === 'left' && value > i.lastLeft) {
                    element.dispatchEvent(createDOMEvent('ps-scroll-right'));
                }
                if (axis === 'top' && value !== i.lastTop) {
                    element.scrollTop = i.lastTop = value;
                    element.dispatchEvent(createDOMEvent('ps-scroll-y'));
                }
                if (axis === 'left' && value !== i.lastLeft) {
                    element.scrollLeft = i.lastLeft = value;
                    element.dispatchEvent(createDOMEvent('ps-scroll-x'));
                }
            };
        },
        { './instances': 17 }
    ],
    20: [
        function (require, module, exports) {
            'use strict';
            var _ = require('../lib/helper');
            var dom = require('../lib/dom');
            var instances = require('./instances');
            var updateGeometry = require('./update-geometry');
            var updateScroll = require('./update-scroll');
            module.exports = function (element) {
                var i = instances.get(element);
                if (!i) {
                    return;
                }
                i.negativeScrollAdjustment = i.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;
                dom.css(i.scrollbarXRail, 'display', 'block');
                dom.css(i.scrollbarYRail, 'display', 'block');
                i.railXMarginWidth = _.toInt(dom.css(i.scrollbarXRail, 'marginLeft')) + _.toInt(dom.css(i.scrollbarXRail, 'marginRight'));
                i.railYMarginHeight = _.toInt(dom.css(i.scrollbarYRail, 'marginTop')) + _.toInt(dom.css(i.scrollbarYRail, 'marginBottom'));
                dom.css(i.scrollbarXRail, 'display', 'none');
                dom.css(i.scrollbarYRail, 'display', 'none');
                updateGeometry(element);
                updateScroll(element, 'top', element.scrollTop);
                updateScroll(element, 'left', element.scrollLeft);
                dom.css(i.scrollbarXRail, 'display', '');
                dom.css(i.scrollbarYRail, 'display', '');
            };
        },
        {
            '../lib/dom': 2,
            '../lib/helper': 5,
            './instances': 17,
            './update-geometry': 18,
            './update-scroll': 19
        }
    ]
}, {}, [1]));
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('daterange', [
            'moment',
            'jquery'
        ], function (moment, jquery) {
            return root.daterangepicker = factory(moment, jquery);
        });
    } else if (typeof module === 'object' && module.exports) {
        var jQuery = typeof window != 'undefined' ? window.jQuery : undefined;
        if (!jQuery) {
            jQuery = require('jquery');
            if (!jQuery.fn)
                jQuery.fn = {};
        }
        module.exports = factory(require('moment'), jQuery);
    } else {
        root.daterangepicker = factory(root.moment, root.jQuery);
    }
}(this, function (moment, $) {
    var DateRangePicker = function (element, options, cb) {
        this.element = $(element);
        this.parentEl = $('body');
        this.startDate = moment().startOf('day');
        this.endDate = moment().endOf('day');
        this.minDate = false;
        this.maxDate = false;
        this.dateLimit = false;
        this.autoApply = false;
        this.singleDatePicker = false;
        this.showDropdowns = false;
        this.showWeekNumbers = false;
        this.showISOWeekNumbers = false;
        this.showCustomRangeLabel = true;
        this.timePicker = false;
        this.timePicker24Hour = false;
        this.timePickerIncrement = 1;
        this.timePickerSeconds = false;
        this.linkedCalendars = true;
        this.autoUpdateInput = true;
        this.alwaysShowCalendars = true;
        this.ranges = {};
        this.opens = 'left';
        if (this.element.hasClass('pull-right'))
            this.opens = 'left';
        this.drops = 'down';
        if (this.element.hasClass('dropup'))
            this.drops = 'up';
        this.buttonClasses = 'btn btn-sm btn-inline pull-left';
        this.applyClass = 'btn-success';
        this.cancelClass = 'btn-default';
        this.locale = {
            direction: 'ltr',
            format: 'YYYY-MM-DD',
            separator: ' 至 ',
            applyLabel: '确认',
            cancelLabel: '取消',
            weekLabel: 'W',
            customRangeLabel: '自定义时间',
            daysOfWeek: moment.weekdaysMin(),
            monthNames: moment.monthsShort(),
            firstDay: moment.localeData().firstDayOfWeek()
        };
        this.callback = function () {
        };
        this.isShowing = false;
        this.leftCalendar = {};
        this.rightCalendar = {};
        if (typeof options !== 'object' || options === null)
            options = {};
        options = $.extend(this.element.data(), options);
        var size = options.size ? options.size : '';
        if (typeof options.template !== 'string' && !(options.template instanceof $))
            options.template = '<div class="daterangepicker dropdown-menu ' + size + '">' + '<div class="calendar left">' + '<div class="daterangepicker_input">' + '<input class="input-mini form-control" type="text" name="daterangepicker_start" value="" />' + '<i class="fa fa-calendar glyphicon glyphicon-calendar"></i>' + '<div class="calendar-time">' + '<div></div>' + '<i class="fa fa-clock-o glyphicon glyphicon-time"></i>' + '</div>' + '</div>' + '<div class="calendar-table"></div>' + '</div>' + '<div class="calendar right">' + '<div class="daterangepicker_input">' + '<input class="input-mini form-control" type="text" name="daterangepicker_end" value="" />' + '<i class="fa fa-calendar glyphicon glyphicon-calendar"></i>' + '<div class="calendar-time">' + '<div></div>' + '<i class="fa fa-clock-o glyphicon glyphicon-time"></i>' + '</div>' + '</div>' + '<div class="calendar-table"></div>' + '</div>' + '<div class="ranges">' + '<div class="custom-btn-wrap">' + '<button class="btn btn-block btn-success btn-unrestricted" type="button">不限时间</button> ' + '</div>' + '<div class="range_inputs clearfix">' + '<button class="applyBtn" disabled="disabled" type="button"></button> ' + '<button class="cancelBtn" type="button"></button>' + '</div>' + '</div>' + '</div>';
        this.parentEl = options.parentEl && options.parentEl.length ? options.parentEl : this.parentEl;
        this.container = $(options.template).appendTo(this.parentEl);
        if (typeof options.locale === 'object') {
            if (typeof options.locale.direction === 'string')
                this.locale.direction = options.locale.direction;
            if (typeof options.locale.format === 'string')
                this.locale.format = options.locale.format;
            if (typeof options.locale.separator === 'string')
                this.locale.separator = options.locale.separator;
            if (typeof options.locale.daysOfWeek === 'object')
                this.locale.daysOfWeek = options.locale.daysOfWeek.slice();
            if (typeof options.locale.monthNames === 'object')
                this.locale.monthNames = options.locale.monthNames.slice();
            if (typeof options.locale.firstDay === 'number')
                this.locale.firstDay = options.locale.firstDay;
            if (typeof options.locale.applyLabel === 'string')
                this.locale.applyLabel = options.locale.applyLabel;
            if (typeof options.locale.cancelLabel === 'string')
                this.locale.cancelLabel = options.locale.cancelLabel;
            if (typeof options.locale.weekLabel === 'string')
                this.locale.weekLabel = options.locale.weekLabel;
            if (typeof options.locale.customRangeLabel === 'string')
                this.locale.customRangeLabel = options.locale.customRangeLabel;
        }
        this.container.addClass(this.locale.direction);
        if (typeof options.startDate === 'string')
            this.startDate = moment(options.startDate, this.locale.format);
        if (typeof options.endDate === 'string')
            this.endDate = moment(options.endDate, this.locale.format);
        if (typeof options.minDate === 'string')
            this.minDate = moment(options.minDate, this.locale.format);
        if (typeof options.maxDate === 'string')
            this.maxDate = moment(options.maxDate, this.locale.format);
        if (typeof options.startDate === 'object')
            this.startDate = moment(options.startDate);
        if (typeof options.endDate === 'object')
            this.endDate = moment(options.endDate);
        if (typeof options.minDate === 'object')
            this.minDate = moment(options.minDate);
        if (typeof options.maxDate === 'object')
            this.maxDate = moment(options.maxDate);
        if (this.minDate && this.startDate.isBefore(this.minDate))
            this.startDate = this.minDate.clone();
        if (this.maxDate && this.endDate.isAfter(this.maxDate))
            this.endDate = this.maxDate.clone();
        if (typeof options.applyClass === 'string')
            this.applyClass = options.applyClass;
        if (typeof options.cancelClass === 'string')
            this.cancelClass = options.cancelClass;
        if (typeof options.dateLimit === 'object')
            this.dateLimit = options.dateLimit;
        if (typeof options.opens === 'string')
            this.opens = options.opens;
        if (typeof options.drops === 'string')
            this.drops = options.drops;
        if (typeof options.showWeekNumbers === 'boolean')
            this.showWeekNumbers = options.showWeekNumbers;
        if (typeof options.showISOWeekNumbers === 'boolean')
            this.showISOWeekNumbers = options.showISOWeekNumbers;
        if (typeof options.buttonClasses === 'string')
            this.buttonClasses = options.buttonClasses;
        if (typeof options.buttonClasses === 'object')
            this.buttonClasses = options.buttonClasses.join(' ');
        if (typeof options.showDropdowns === 'boolean')
            this.showDropdowns = options.showDropdowns;
        if (typeof options.showCustomRangeLabel === 'boolean')
            this.showCustomRangeLabel = options.showCustomRangeLabel;
        if (typeof options.singleDatePicker === 'boolean') {
            this.singleDatePicker = options.singleDatePicker;
            if (this.singleDatePicker)
                this.endDate = this.startDate.clone();
        }
        if (typeof options.timePicker === 'boolean')
            this.timePicker = options.timePicker;
        if (typeof options.timePickerSeconds === 'boolean')
            this.timePickerSeconds = options.timePickerSeconds;
        if (typeof options.timePickerIncrement === 'number')
            this.timePickerIncrement = options.timePickerIncrement;
        if (typeof options.timePicker24Hour === 'boolean')
            this.timePicker24Hour = options.timePicker24Hour;
        if (typeof options.autoApply === 'boolean')
            this.autoApply = options.autoApply;
        if (typeof options.autoUpdateInput === 'boolean')
            this.autoUpdateInput = options.autoUpdateInput;
        if (typeof options.linkedCalendars === 'boolean')
            this.linkedCalendars = options.linkedCalendars;
        if (typeof options.isInvalidDate === 'function')
            this.isInvalidDate = options.isInvalidDate;
        if (typeof options.isCustomDate === 'function')
            this.isCustomDate = options.isCustomDate;
        if (typeof options.alwaysShowCalendars === 'boolean')
            this.alwaysShowCalendars = options.alwaysShowCalendars;
        if (this.locale.firstDay != 0) {
            var iterator = this.locale.firstDay;
            while (iterator > 0) {
                this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
                iterator--;
            }
        }
        var start, end, range;
        if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {
            if ($(this.element).is('input[type=text]')) {
                var val = $(this.element).val(), split = val.split(this.locale.separator);
                start = end = null;
                if (split.length == 2) {
                    start = moment(split[0], this.locale.format);
                    end = moment(split[1], this.locale.format);
                } else if (this.singleDatePicker && val !== '') {
                    start = moment(val, this.locale.format);
                    end = moment(val, this.locale.format);
                }
                if (start !== null && end !== null) {
                    this.setStartDate(start);
                    this.setEndDate(end);
                }
            }
        }
        if (typeof options.ranges === 'object') {
            for (range in options.ranges) {
                if (typeof options.ranges[range][0] === 'string')
                    start = moment(options.ranges[range][0], this.locale.format);
                else if (options.ranges[range][0] === null)
                    start = '';
                else
                    start = moment(options.ranges[range][0]);
                if (typeof options.ranges[range][1] === 'string')
                    end = moment(options.ranges[range][1], this.locale.format);
                else if (options.ranges[range][1] === null)
                    end = '';
                else
                    end = moment(options.ranges[range][1]);
                if (this.minDate && start.isBefore(this.minDate))
                    start = this.minDate.clone();
                var maxDate = this.maxDate;
                if (this.dateLimit && maxDate && start.clone().add(this.dateLimit).isAfter(maxDate))
                    maxDate = start.clone().add(this.dateLimit);
                if (maxDate && end.isAfter(maxDate))
                    end = maxDate.clone();
                if (this.minDate && end.isBefore(this.minDate, this.timepicker ? 'minute' : 'day') || maxDate && start.isAfter(maxDate, this.timepicker ? 'minute' : 'day'))
                    continue;
                var elem = document.createElement('textarea');
                elem.innerHTML = range;
                var rangeHtml = elem.value;
                this.ranges[rangeHtml] = [
                    start,
                    end
                ];
            }
            var list = '<ul>';
            for (range in this.ranges) {
                list += '<li data-range-key="' + range + '">' + range + '</li>';
            }
            if (this.showCustomRangeLabel) {
                list += '<li data-range-key="' + this.locale.customRangeLabel + '">' + this.locale.customRangeLabel + '</li>';
            }
            list += '</ul>';
            this.container.find('.ranges').prepend(list);
        }
        if (typeof cb === 'function') {
            this.callback = cb;
        }
        if (!this.timePicker) {
            this.startDate = this.startDate.startOf('day');
            this.endDate = this.endDate.endOf('day');
            this.container.find('.calendar-time').hide();
        }
        if (this.timePicker && this.autoApply)
            this.autoApply = false;
        if (this.autoApply && typeof options.ranges !== 'object') {
            this.container.find('.ranges').hide();
        } else if (this.autoApply) {
            this.container.find('.applyBtn, .cancelBtn').addClass('hide');
        }
        if (this.singleDatePicker) {
            this.container.addClass('single');
            this.container.find('.calendar.left').addClass('single');
            this.container.find('.calendar.left').show();
            this.container.find('.calendar.right').hide();
            this.container.find('.daterangepicker_input input, .daterangepicker_input > i').hide();
            if (this.timePicker) {
                this.container.find('.ranges ul').hide();
            } else {
                this.container.find('.ranges').hide();
            }
        }
        if (typeof options.ranges === 'undefined' && !this.singleDatePicker || this.alwaysShowCalendars) {
            this.container.addClass('show-calendar');
        }
        this.container.addClass('opens' + this.opens);
        if (typeof options.ranges !== 'undefined' && this.opens == 'right') {
            this.container.find('.ranges').prependTo(this.container.find('.calendar.left').parent());
        }
        this.container.find('.applyBtn, .cancelBtn').addClass(this.buttonClasses);
        if (this.applyClass.length)
            this.container.find('.applyBtn').addClass(this.applyClass);
        if (this.cancelClass.length)
            this.container.find('.cancelBtn').addClass(this.cancelClass);
        this.container.find('.applyBtn').html(this.locale.applyLabel);
        this.container.find('.cancelBtn').html(this.locale.cancelLabel);
        this.container.find('.calendar').on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this)).on('click.daterangepicker', '.next', $.proxy(this.clickNext, this)).on('mousedown.daterangepicker', 'td.available', $.proxy(this.clickDate, this)).on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this)).on('mouseleave.daterangepicker', 'td.available', $.proxy(this.updateFormInputs, this)).on('change.daterangepicker', 'select.yearselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.monthselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.secondselect,select.ampmselect', $.proxy(this.timeChanged, this)).on('click.daterangepicker', '.daterangepicker_input input', $.proxy(this.showCalendars, this)).on('focus.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsFocused, this)).on('blur.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsBlurred, this)).on('change.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsChanged, this));
        this.container.find('.ranges').on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this)).on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this)).on('click.daterangepicker', 'li', $.proxy(this.clickRange, this)).on('mouseenter.daterangepicker', 'li', $.proxy(this.hoverRange, this)).on('mouseleave.daterangepicker', 'li', $.proxy(this.updateFormInputs, this));
        var that = this;
        if (this.element.is('input') || this.element.is('button')) {
            this.element.on({
                'click.daterangepicker': $.proxy(this.show, this),
                'focus.daterangepicker': $.proxy(this.show, this),
                'keyup.daterangepicker': $.proxy(this.elementChanged, this),
                'keydown.daterangepicker': $.proxy(this.keydown, this)
            });
        } else {
            this.element.on('click.daterangepicker', $.proxy(this.toggle, this));
        }
        if (this.element.is('input') && !this.singleDatePicker && this.autoUpdateInput) {
            this.element.val(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
            this.element.trigger('change');
        } else if (this.element.is('input') && this.autoUpdateInput) {
            this.element.val(this.startDate.format(this.locale.format));
            this.element.trigger('change');
        }
    };
    DateRangePicker.prototype = {
        constructor: DateRangePicker,
        setStartDate: function (startDate) {
            if (typeof startDate === 'string')
                this.startDate = moment(startDate, this.locale.format);
            if (typeof startDate === 'object')
                this.startDate = moment(startDate);
            if (!this.timePicker)
                this.startDate = this.startDate.startOf('day');
            if (this.timePicker && this.timePickerIncrement)
                this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            if (this.minDate && this.startDate.isBefore(this.minDate)) {
                this.startDate = this.minDate;
                if (this.timePicker && this.timePickerIncrement)
                    this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            }
            if (this.maxDate && this.startDate.isAfter(this.maxDate)) {
                this.startDate = this.maxDate;
                if (this.timePicker && this.timePickerIncrement)
                    this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            }
            if (!this.isShowing)
                this.updateElement();
            this.updateMonthsInView();
        },
        setEndDate: function (endDate) {
            if (typeof endDate === 'string')
                this.endDate = moment(endDate, this.locale.format);
            if (typeof endDate === 'object')
                this.endDate = moment(endDate);
            if (!this.timePicker)
                this.endDate = this.endDate.endOf('day');
            if (this.timePicker && this.timePickerIncrement)
                this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            if (this.endDate.isBefore(this.startDate))
                this.endDate = this.startDate.clone();
            if (this.maxDate && this.endDate.isAfter(this.maxDate))
                this.endDate = this.maxDate;
            if (this.dateLimit && this.startDate.clone().add(this.dateLimit).isBefore(this.endDate))
                this.endDate = this.startDate.clone().add(this.dateLimit);
            this.previousRightTime = this.endDate.clone();
            if (!this.isShowing)
                this.updateElement();
            this.updateMonthsInView();
        },
        isInvalidDate: function () {
            return false;
        },
        isCustomDate: function () {
            return false;
        },
        updateView: function () {
            if (this.timePicker) {
                this.renderTimePicker('left');
                this.renderTimePicker('right');
                if (!this.endDate) {
                    this.container.find('.right .calendar-time select').attr('disabled', 'disabled').addClass('disabled');
                } else {
                    this.container.find('.right .calendar-time select').removeAttr('disabled').removeClass('disabled');
                }
            }
            if (this.endDate) {
                this.container.find('input[name="daterangepicker_end"]').removeClass('active');
                this.container.find('input[name="daterangepicker_start"]').addClass('active');
            } else {
                this.container.find('input[name="daterangepicker_end"]').addClass('active');
                this.container.find('input[name="daterangepicker_start"]').removeClass('active');
            }
            this.updateMonthsInView();
            this.updateCalendars();
            this.updateFormInputs();
        },
        updateMonthsInView: function () {
            if (this.endDate) {
                if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month && (this.startDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.startDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM')) && (this.endDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.endDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))) {
                    return;
                }
                this.leftCalendar.month = this.startDate.clone().date(2);
                if (!this.linkedCalendars && (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year())) {
                    this.rightCalendar.month = this.endDate.clone().date(2);
                } else {
                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
                }
            } else {
                if (this.leftCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM') && this.rightCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM')) {
                    this.leftCalendar.month = this.startDate.clone().date(2);
                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
                }
            }
            if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {
                this.rightCalendar.month = this.maxDate.clone().date(2);
                this.leftCalendar.month = this.maxDate.clone().date(2).subtract(1, 'month');
            }
        },
        updateCalendars: function () {
            if (this.timePicker) {
                var hour, minute, second;
                if (this.endDate) {
                    hour = parseInt(this.container.find('.left .hourselect').val(), 10);
                    minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
                    second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.left .ampmselect').val();
                        if (ampm === 'PM' && hour < 12)
                            hour += 12;
                        if (ampm === 'AM' && hour === 12)
                            hour = 0;
                    }
                } else {
                    hour = parseInt(this.container.find('.right .hourselect').val(), 10);
                    minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
                    second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.right .ampmselect').val();
                        if (ampm === 'PM' && hour < 12)
                            hour += 12;
                        if (ampm === 'AM' && hour === 12)
                            hour = 0;
                    }
                }
                this.leftCalendar.month.hour(hour).minute(minute).second(second);
                this.rightCalendar.month.hour(hour).minute(minute).second(second);
            }
            this.renderCalendar('left');
            this.renderCalendar('right');
            this.container.find('.ranges li').removeClass('active');
            if (this.endDate == null)
                return;
            this.calculateChosenLabel();
        },
        renderCalendar: function (side) {
            var calendar = side == 'left' ? this.leftCalendar : this.rightCalendar;
            var month = calendar.month.month();
            var year = calendar.month.year();
            var hour = calendar.month.hour();
            var minute = calendar.month.minute();
            var second = calendar.month.second();
            var daysInMonth = moment([
                year,
                month
            ]).daysInMonth();
            var firstDay = moment([
                year,
                month,
                1
            ]);
            var lastDay = moment([
                year,
                month,
                daysInMonth
            ]);
            var lastMonth = moment(firstDay).subtract(1, 'month').month();
            var lastYear = moment(firstDay).subtract(1, 'month').year();
            var daysInLastMonth = moment([
                lastYear,
                lastMonth
            ]).daysInMonth();
            var dayOfWeek = firstDay.day();
            var calendar = [];
            calendar.firstDay = firstDay;
            calendar.lastDay = lastDay;
            for (var i = 0; i < 6; i++) {
                calendar[i] = [];
            }
            var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
            if (startDay > daysInLastMonth)
                startDay -= 7;
            if (dayOfWeek == this.locale.firstDay)
                startDay = daysInLastMonth - 6;
            var curDate = moment([
                lastYear,
                lastMonth,
                startDay,
                12,
                minute,
                second
            ]);
            var col, row;
            for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {
                if (i > 0 && col % 7 === 0) {
                    col = 0;
                    row++;
                }
                calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);
                curDate.hour(12);
                if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {
                    calendar[row][col] = this.minDate.clone();
                }
                if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {
                    calendar[row][col] = this.maxDate.clone();
                }
            }
            if (side == 'left') {
                this.leftCalendar.calendar = calendar;
            } else {
                this.rightCalendar.calendar = calendar;
            }
            var minDate = side == 'left' ? this.minDate : this.startDate;
            var maxDate = this.maxDate;
            var selected = side == 'left' ? this.startDate : this.endDate;
            var arrow = this.locale.direction == 'ltr' ? {
                left: 'chevron-left',
                right: 'chevron-right'
            } : {
                left: 'chevron-right',
                right: 'chevron-left'
            };
            var html = '<table class="table-condensed">';
            html += '<thead>';
            html += '<tr>';
            if (this.showWeekNumbers || this.showISOWeekNumbers)
                html += '<th></th>';
            if ((!minDate || minDate.isBefore(calendar.firstDay)) && (!this.linkedCalendars || side == 'left')) {
                html += '<th class="prev available"><i class="fa fa-' + arrow.left + ' glyphicon glyphicon-' + arrow.left + '"></i></th>';
            } else {
                html += '<th></th>';
            }
            var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(' YYYY');
            if (this.showDropdowns) {
                var currentMonth = calendar[1][1].month();
                var currentYear = calendar[1][1].year();
                var maxYear = maxDate && maxDate.year() || currentYear + 5;
                var minYear = minDate && minDate.year() || currentYear - 50;
                var inMinYear = currentYear == minYear;
                var inMaxYear = currentYear == maxYear;
                var monthHtml = '<select class="monthselect">';
                for (var m = 0; m < 12; m++) {
                    if ((!inMinYear || m >= minDate.month()) && (!inMaxYear || m <= maxDate.month())) {
                        monthHtml += '<option value=\'' + m + '\'' + (m === currentMonth ? ' selected=\'selected\'' : '') + '>' + this.locale.monthNames[m] + '</option>';
                    } else {
                        monthHtml += '<option value=\'' + m + '\'' + (m === currentMonth ? ' selected=\'selected\'' : '') + ' disabled=\'disabled\'>' + this.locale.monthNames[m] + '</option>';
                    }
                }
                monthHtml += '</select>';
                var yearHtml = '<select class="yearselect">';
                for (var y = minYear; y <= maxYear; y++) {
                    yearHtml += '<option value="' + y + '"' + (y === currentYear ? ' selected="selected"' : '') + '>' + y + '</option>';
                }
                yearHtml += '</select>';
                dateHtml = monthHtml + yearHtml;
            }
            html += '<th colspan="5" class="month">' + dateHtml + '</th>';
            if ((!maxDate || maxDate.isAfter(calendar.lastDay)) && (!this.linkedCalendars || side == 'right' || this.singleDatePicker)) {
                html += '<th class="next available"><i class="fa fa-' + arrow.right + ' glyphicon glyphicon-' + arrow.right + '"></i></th>';
            } else {
                html += '<th></th>';
            }
            html += '</tr>';
            html += '<tr>';
            if (this.showWeekNumbers || this.showISOWeekNumbers)
                html += '<th class="week">' + this.locale.weekLabel + '</th>';
            $.each(this.locale.daysOfWeek, function (index, dayOfWeek) {
                html += '<th>' + dayOfWeek + '</th>';
            });
            html += '</tr>';
            html += '</thead>';
            html += '<tbody>';
            if (this.endDate == null && this.dateLimit) {
                var maxLimit = this.startDate.clone().add(this.dateLimit).endOf('day');
                if (!maxDate || maxLimit.isBefore(maxDate)) {
                    maxDate = maxLimit;
                }
            }
            for (var row = 0; row < 6; row++) {
                html += '<tr>';
                if (this.showWeekNumbers)
                    html += '<td class="week">' + calendar[row][0].week() + '</td>';
                else if (this.showISOWeekNumbers)
                    html += '<td class="week">' + calendar[row][0].isoWeek() + '</td>';
                for (var col = 0; col < 7; col++) {
                    var classes = [];
                    if (calendar[row][col].isSame(new Date(), 'day'))
                        classes.push('today');
                    if (calendar[row][col].isoWeekday() > 5)
                        classes.push('weekend');
                    if (calendar[row][col].month() != calendar[1][1].month())
                        classes.push('off');
                    if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day'))
                        classes.push('off', 'disabled');
                    if (maxDate && calendar[row][col].isAfter(maxDate, 'day'))
                        classes.push('off', 'disabled');
                    if (this.isInvalidDate(calendar[row][col]))
                        classes.push('off', 'disabled');
                    if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD'))
                        classes.push('active', 'start-date');
                    if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD'))
                        classes.push('active', 'end-date');
                    if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate)
                        classes.push('in-range');
                    var isCustom = this.isCustomDate(calendar[row][col]);
                    if (isCustom !== false) {
                        if (typeof isCustom === 'string')
                            classes.push(isCustom);
                        else
                            Array.prototype.push.apply(classes, isCustom);
                    }
                    var cname = '', disabled = false;
                    for (var i = 0; i < classes.length; i++) {
                        cname += classes[i] + ' ';
                        if (classes[i] == 'disabled')
                            disabled = true;
                    }
                    if (!disabled)
                        cname += 'available';
                    html += '<td class="' + cname.replace(/^\s+|\s+$/g, '') + '" data-title="' + 'r' + row + 'c' + col + '">' + calendar[row][col].date() + '</td>';
                }
                html += '</tr>';
            }
            html += '</tbody>';
            html += '</table>';
            this.container.find('.calendar.' + side + ' .calendar-table').html(html);
        },
        renderTimePicker: function (side) {
            if (side == 'right' && !this.endDate)
                return;
            var html, selected, minDate, maxDate = this.maxDate;
            if (this.dateLimit && (!this.maxDate || this.startDate.clone().add(this.dateLimit).isAfter(this.maxDate)))
                maxDate = this.startDate.clone().add(this.dateLimit);
            if (side == 'left') {
                selected = this.startDate.clone();
                minDate = this.minDate;
            } else if (side == 'right') {
                selected = this.endDate.clone();
                minDate = this.startDate;
                var timeSelector = this.container.find('.calendar.right .calendar-time div');
                if (!this.endDate && timeSelector.html() != '') {
                    selected.hour(timeSelector.find('.hourselect option:selected').val() || selected.hour());
                    selected.minute(timeSelector.find('.minuteselect option:selected').val() || selected.minute());
                    selected.second(timeSelector.find('.secondselect option:selected').val() || selected.second());
                    if (!this.timePicker24Hour) {
                        var ampm = timeSelector.find('.ampmselect option:selected').val();
                        if (ampm === 'PM' && selected.hour() < 12)
                            selected.hour(selected.hour() + 12);
                        if (ampm === 'AM' && selected.hour() === 12)
                            selected.hour(0);
                    }
                }
                if (selected.isBefore(this.startDate))
                    selected = this.startDate.clone();
                if (maxDate && selected.isAfter(maxDate))
                    selected = maxDate.clone();
            }
            html = '<select class="hourselect">';
            var start = this.timePicker24Hour ? 0 : 1;
            var end = this.timePicker24Hour ? 23 : 12;
            for (var i = start; i <= end; i++) {
                var i_in_24 = i;
                if (!this.timePicker24Hour)
                    i_in_24 = selected.hour() >= 12 ? i == 12 ? 12 : i + 12 : i == 12 ? 0 : i;
                var time = selected.clone().hour(i_in_24);
                var disabled = false;
                if (minDate && time.minute(59).isBefore(minDate))
                    disabled = true;
                if (maxDate && time.minute(0).isAfter(maxDate))
                    disabled = true;
                if (i_in_24 == selected.hour() && !disabled) {
                    html += '<option value="' + i + '" selected="selected">' + i + '</option>';
                } else if (disabled) {
                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + i + '</option>';
                } else {
                    html += '<option value="' + i + '">' + i + '</option>';
                }
            }
            html += '</select> ';
            html += ': <select class="minuteselect">';
            for (var i = 0; i < 60; i += this.timePickerIncrement) {
                var padded = i < 10 ? '0' + i : i;
                var time = selected.clone().minute(i);
                var disabled = false;
                if (minDate && time.second(59).isBefore(minDate))
                    disabled = true;
                if (maxDate && time.second(0).isAfter(maxDate))
                    disabled = true;
                if (selected.minute() == i && !disabled) {
                    html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
                } else if (disabled) {
                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
                } else {
                    html += '<option value="' + i + '">' + padded + '</option>';
                }
            }
            html += '</select> ';
            if (this.timePickerSeconds) {
                html += ': <select class="secondselect">';
                for (var i = 0; i < 60; i++) {
                    var padded = i < 10 ? '0' + i : i;
                    var time = selected.clone().second(i);
                    var disabled = false;
                    if (minDate && time.isBefore(minDate))
                        disabled = true;
                    if (maxDate && time.isAfter(maxDate))
                        disabled = true;
                    if (selected.second() == i && !disabled) {
                        html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
                    } else if (disabled) {
                        html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
                    } else {
                        html += '<option value="' + i + '">' + padded + '</option>';
                    }
                }
                html += '</select> ';
            }
            if (!this.timePicker24Hour) {
                html += '<select class="ampmselect">';
                var am_html = '';
                var pm_html = '';
                if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate))
                    am_html = ' disabled="disabled" class="disabled"';
                if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate))
                    pm_html = ' disabled="disabled" class="disabled"';
                if (selected.hour() >= 12) {
                    html += '<option value="AM"' + am_html + '>AM</option><option value="PM" selected="selected"' + pm_html + '>PM</option>';
                } else {
                    html += '<option value="AM" selected="selected"' + am_html + '>AM</option><option value="PM"' + pm_html + '>PM</option>';
                }
                html += '</select>';
            }
            this.container.find('.calendar.' + side + ' .calendar-time div').html(html);
        },
        updateFormInputs: function () {
            if (this.container.find('input[name=daterangepicker_start]').is(':focus') || this.container.find('input[name=daterangepicker_end]').is(':focus'))
                return;
            this.container.find('input[name=daterangepicker_start]').val(this.startDate.format(this.locale.format));
            if (this.endDate)
                this.container.find('input[name=daterangepicker_end]').val(this.endDate.format(this.locale.format));
            if (this.singleDatePicker || this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate))) {
                this.container.find('button.applyBtn').removeAttr('disabled');
            } else {
                this.container.find('button.applyBtn').attr('disabled', 'disabled');
            }
        },
        move: function () {
            var parentOffset = {
                    top: 0,
                    left: 0
                }, containerTop;
            var parentRightEdge = $(window).width();
            if (!this.parentEl.is('body')) {
                parentOffset = {
                    top: this.parentEl.offset().top - this.parentEl.scrollTop(),
                    left: this.parentEl.offset().left - this.parentEl.scrollLeft()
                };
                parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
            }
            if (this.drops == 'up')
                containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;
            else
                containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
            this.container[this.drops == 'up' ? 'addClass' : 'removeClass']('dropup');
            if (this.opens == 'left') {
                this.container.css({
                    top: containerTop,
                    right: parentRightEdge - this.element.offset().left - this.element.outerWidth(),
                    left: 'auto'
                });
                if (this.container.offset().left < 0) {
                    this.container.css({
                        right: 'auto',
                        left: 9
                    });
                }
            } else if (this.opens == 'center') {
                this.container.css({
                    top: containerTop,
                    left: this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2 - this.container.outerWidth() / 2,
                    right: 'auto'
                });
                if (this.container.offset().left < 0) {
                    this.container.css({
                        right: 'auto',
                        left: 9
                    });
                }
            } else {
                this.container.css({
                    top: containerTop,
                    left: this.element.offset().left - parentOffset.left,
                    right: 'auto'
                });
                if (this.container.offset().left + this.container.outerWidth() > $(window).width()) {
                    this.container.css({
                        left: 'auto',
                        right: 0
                    });
                }
            }
        },
        show: function (e) {
            if (this.isShowing)
                return;
            this._outsideClickProxy = $.proxy(function (e) {
                this.outsideClick(e);
            }, this);
            $(document).on('mousedown.daterangepicker', this._outsideClickProxy).on('touchend.daterangepicker', this._outsideClickProxy).on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy).on('focusin.daterangepicker', this._outsideClickProxy);
            $(window).on('resize.daterangepicker', $.proxy(function (e) {
                this.move(e);
            }, this));
            this.oldStartDate = this.startDate.clone();
            this.oldEndDate = this.endDate.clone();
            this.previousRightTime = this.endDate.clone();
            this.updateView();
            this.container.show();
            this.move();
            this.element.trigger('show.daterangepicker', this);
            this.isShowing = true;
        },
        hide: function (e) {
            if (!this.isShowing)
                return;
            if (!this.endDate) {
                this.startDate = this.oldStartDate.clone();
                this.endDate = this.oldEndDate.clone();
            }
            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate))
                this.callback(this.startDate, this.endDate, this.chosenLabel);
            this.updateElement();
            $(document).off('.daterangepicker');
            $(window).off('.daterangepicker');
            this.container.hide();
            this.element.trigger('hide.daterangepicker', this);
            this.isShowing = false;
        },
        toggle: function (e) {
            if (this.isShowing) {
                this.hide();
            } else {
                this.show();
            }
        },
        outsideClick: function (e) {
            var target = $(e.target);
            if (e.type == 'focusin' || target.closest(this.element).length || target.closest(this.container).length || target.closest('.calendar-table').length)
                return;
            this.hide();
            this.element.trigger('outsideClick.daterangepicker', this);
        },
        showCalendars: function () {
            this.container.addClass('show-calendar');
            this.move();
            this.element.trigger('showCalendar.daterangepicker', this);
        },
        hideCalendars: function () {
            this.container.removeClass('show-calendar');
            this.element.trigger('hideCalendar.daterangepicker', this);
        },
        hoverRange: function (e) {
            if (this.container.find('input[name=daterangepicker_start]').is(':focus') || this.container.find('input[name=daterangepicker_end]').is(':focus'))
                return;
            var label = e.target.getAttribute('data-range-key');
            if (label == this.locale.customRangeLabel) {
                this.updateView();
            } else {
                var dates = this.ranges[label];
                this.container.find('input[name=daterangepicker_start]').val(dates[0].format(this.locale.format));
                this.container.find('input[name=daterangepicker_end]').val(dates[1].format(this.locale.format));
            }
        },
        clickRange: function (e) {
            var label = e.target.getAttribute('data-range-key');
            this.chosenLabel = label;
            if (label == this.locale.customRangeLabel) {
                this.showCalendars();
            } else {
                var dates = this.ranges[label];
                this.startDate = dates[0];
                this.endDate = dates[1];
                if (!this.timePicker) {
                    this.startDate.startOf('day');
                    this.endDate.endOf('day');
                }
                if (!this.alwaysShowCalendars)
                    this.hideCalendars();
                this.clickApply();
            }
        },
        clickPrev: function (e) {
            var cal = $(e.target).parents('.calendar');
            if (cal.hasClass('left')) {
                this.leftCalendar.month.subtract(1, 'month');
                if (this.linkedCalendars)
                    this.rightCalendar.month.subtract(1, 'month');
            } else {
                this.rightCalendar.month.subtract(1, 'month');
            }
            this.updateCalendars();
        },
        clickNext: function (e) {
            var cal = $(e.target).parents('.calendar');
            if (cal.hasClass('left')) {
                this.leftCalendar.month.add(1, 'month');
            } else {
                this.rightCalendar.month.add(1, 'month');
                if (this.linkedCalendars)
                    this.leftCalendar.month.add(1, 'month');
            }
            this.updateCalendars();
        },
        hoverDate: function (e) {
            if (!$(e.target).hasClass('available'))
                return;
            var title = $(e.target).attr('data-title');
            var row = title.substr(1, 1);
            var col = title.substr(3, 1);
            var cal = $(e.target).parents('.calendar');
            var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];
            if (this.endDate && !this.container.find('input[name=daterangepicker_start]').is(':focus')) {
                this.container.find('input[name=daterangepicker_start]').val(date.format(this.locale.format));
            } else if (!this.endDate && !this.container.find('input[name=daterangepicker_end]').is(':focus')) {
                this.container.find('input[name=daterangepicker_end]').val(date.format(this.locale.format));
            }
            var leftCalendar = this.leftCalendar;
            var rightCalendar = this.rightCalendar;
            var startDate = this.startDate;
            if (!this.endDate) {
                this.container.find('.calendar td').each(function (index, el) {
                    if ($(el).hasClass('week'))
                        return;
                    var title = $(el).attr('data-title');
                    var row = title.substr(1, 1);
                    var col = title.substr(3, 1);
                    var cal = $(el).parents('.calendar');
                    var dt = cal.hasClass('left') ? leftCalendar.calendar[row][col] : rightCalendar.calendar[row][col];
                    if (dt.isAfter(startDate) && dt.isBefore(date) || dt.isSame(date, 'day')) {
                        $(el).addClass('in-range');
                    } else {
                        $(el).removeClass('in-range');
                    }
                });
            }
        },
        clickDate: function (e) {
            if (!$(e.target).hasClass('available'))
                return;
            var title = $(e.target).attr('data-title');
            var row = title.substr(1, 1);
            var col = title.substr(3, 1);
            var cal = $(e.target).parents('.calendar');
            var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];
            if (this.endDate || date.isBefore(this.startDate, 'day')) {
                if (this.timePicker) {
                    var hour = parseInt(this.container.find('.left .hourselect').val(), 10);
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.left .ampmselect').val();
                        if (ampm === 'PM' && hour < 12)
                            hour += 12;
                        if (ampm === 'AM' && hour === 12)
                            hour = 0;
                    }
                    var minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
                    var second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
                    date = date.clone().hour(hour).minute(minute).second(second);
                }
                this.endDate = null;
                this.setStartDate(date.clone());
            } else if (!this.endDate && date.isBefore(this.startDate)) {
                this.setEndDate(this.startDate.clone());
            } else {
                if (this.timePicker) {
                    var hour = parseInt(this.container.find('.right .hourselect').val(), 10);
                    if (!this.timePicker24Hour) {
                        var ampm = this.container.find('.right .ampmselect').val();
                        if (ampm === 'PM' && hour < 12)
                            hour += 12;
                        if (ampm === 'AM' && hour === 12)
                            hour = 0;
                    }
                    var minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
                    var second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
                    date = date.clone().hour(hour).minute(minute).second(second);
                }
                this.setEndDate(date.clone());
                if (this.autoApply) {
                    this.calculateChosenLabel();
                    this.clickApply();
                }
            }
            if (this.singleDatePicker) {
                this.setEndDate(this.startDate);
                if (!this.timePicker)
                    this.clickApply();
            }
            this.updateView();
            e.stopPropagation();
        },
        calculateChosenLabel: function () {
            var customRange = true;
            var i = 0;
            for (var range in this.ranges) {
                if (this.timePicker) {
                    if (this.startDate.isSame(this.ranges[range][0]) && this.endDate.isSame(this.ranges[range][1])) {
                        customRange = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').html();
                        break;
                    }
                } else {
                    if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {
                        customRange = false;
                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').html();
                        break;
                    }
                }
                i++;
            }
            if (customRange && this.showCustomRangeLabel) {
                this.chosenLabel = this.container.find('.ranges li:last').addClass('active').html();
                this.showCalendars();
            }
        },
        clickApply: function (e) {
            this.hide();
            this.element.trigger('apply.daterangepicker', this);
        },
        clickCancel: function (e) {
            this.startDate = this.oldStartDate;
            this.endDate = this.oldEndDate;
            this.hide();
            this.element.trigger('cancel.daterangepicker', this);
        },
        monthOrYearChanged: function (e) {
            var isLeft = $(e.target).closest('.calendar').hasClass('left'), leftOrRight = isLeft ? 'left' : 'right', cal = this.container.find('.calendar.' + leftOrRight);
            var month = parseInt(cal.find('.monthselect').val(), 10);
            var year = cal.find('.yearselect').val();
            if (!isLeft) {
                if (year < this.startDate.year() || year == this.startDate.year() && month < this.startDate.month()) {
                    month = this.startDate.month();
                    year = this.startDate.year();
                }
            }
            if (this.minDate) {
                if (year < this.minDate.year() || year == this.minDate.year() && month < this.minDate.month()) {
                    month = this.minDate.month();
                    year = this.minDate.year();
                }
            }
            if (this.maxDate) {
                if (year > this.maxDate.year() || year == this.maxDate.year() && month > this.maxDate.month()) {
                    month = this.maxDate.month();
                    year = this.maxDate.year();
                }
            }
            if (isLeft) {
                this.leftCalendar.month.month(month).year(year);
                if (this.linkedCalendars)
                    this.rightCalendar.month = this.leftCalendar.month.clone().add(1, 'month');
            } else {
                this.rightCalendar.month.month(month).year(year);
                if (this.linkedCalendars)
                    this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, 'month');
            }
            this.updateCalendars();
        },
        timeChanged: function (e) {
            var cal = $(e.target).closest('.calendar'), isLeft = cal.hasClass('left');
            var hour = parseInt(cal.find('.hourselect').val(), 10);
            var minute = parseInt(cal.find('.minuteselect').val(), 10);
            var second = this.timePickerSeconds ? parseInt(cal.find('.secondselect').val(), 10) : 0;
            if (!this.timePicker24Hour) {
                var ampm = cal.find('.ampmselect').val();
                if (ampm === 'PM' && hour < 12)
                    hour += 12;
                if (ampm === 'AM' && hour === 12)
                    hour = 0;
            }
            if (isLeft) {
                var start = this.startDate.clone();
                start.hour(hour);
                start.minute(minute);
                start.second(second);
                this.setStartDate(start);
                if (this.singleDatePicker) {
                    this.endDate = this.startDate.clone();
                } else if (this.endDate && this.endDate.format('YYYY-MM-DD') == start.format('YYYY-MM-DD') && this.endDate.isBefore(start)) {
                    this.setEndDate(start.clone());
                }
            } else if (this.endDate) {
                var end = this.endDate.clone();
                end.hour(hour);
                end.minute(minute);
                end.second(second);
                this.setEndDate(end);
            }
            this.updateCalendars();
            this.updateFormInputs();
            this.renderTimePicker('left');
            this.renderTimePicker('right');
        },
        formInputsChanged: function (e) {
            var isRight = $(e.target).closest('.calendar').hasClass('right');
            var start = moment(this.container.find('input[name="daterangepicker_start"]').val(), this.locale.format);
            var end = moment(this.container.find('input[name="daterangepicker_end"]').val(), this.locale.format);
            if (start.isValid() && end.isValid()) {
                if (isRight && end.isBefore(start))
                    start = end.clone();
                this.setStartDate(start);
                this.setEndDate(end);
                if (isRight) {
                    this.container.find('input[name="daterangepicker_start"]').val(this.startDate.format(this.locale.format));
                } else {
                    this.container.find('input[name="daterangepicker_end"]').val(this.endDate.format(this.locale.format));
                }
            }
            this.updateView();
        },
        formInputsFocused: function (e) {
            this.container.find('input[name="daterangepicker_start"], input[name="daterangepicker_end"]').removeClass('active');
            $(e.target).addClass('active');
            var isRight = $(e.target).closest('.calendar').hasClass('right');
            if (isRight) {
                this.endDate = null;
                this.setStartDate(this.startDate.clone());
                this.updateView();
            }
        },
        formInputsBlurred: function (e) {
            if (!this.endDate) {
                var val = this.container.find('input[name="daterangepicker_end"]').val();
                var end = moment(val, this.locale.format);
                if (end.isValid()) {
                    this.setEndDate(end);
                    this.updateView();
                }
            }
        },
        elementChanged: function () {
            if (!this.element.is('input'))
                return;
            if (!this.element.val().length)
                return;
            if (this.element.val().length < this.locale.format.length)
                return;
            var dateString = this.element.val().split(this.locale.separator), start = null, end = null;
            if (dateString.length === 2) {
                start = moment(dateString[0], this.locale.format);
                end = moment(dateString[1], this.locale.format);
            }
            if (this.singleDatePicker || start === null || end === null) {
                start = moment(this.element.val(), this.locale.format);
                end = start;
            }
            if (!start.isValid() || !end.isValid())
                return;
            this.setStartDate(start);
            this.setEndDate(end);
            this.updateView();
        },
        keydown: function (e) {
            if (e.keyCode === 9 || e.keyCode === 13) {
                this.hide();
            }
        },
        updateElement: function () {
            if (this.element.is('input') && !this.singleDatePicker && this.autoUpdateInput) {
                this.element.val(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
                this.element.trigger('change');
            } else if (this.element.is('input') && this.autoUpdateInput) {
                this.element.val(this.startDate.format(this.locale.format));
                this.element.trigger('change');
            }
        },
        remove: function () {
            this.container.remove();
            this.element.off('.daterangepicker');
            this.element.removeData();
        }
    };
    $.fn.daterangepicker = function (options, callback) {
        this.each(function () {
            var el = $(this);
            if (el.data('daterangepicker'))
                el.data('daterangepicker').remove();
            el.data('daterangepicker', new DateRangePicker(el, options, callback));
        });
        return this;
    };
    return DateRangePicker;
}));
define('appDirectives', [
    'angular',
    'moment',
    'jquery',
    'Ps',
    'daterange'
], function (angular, moment, $) {
    'use strict';
    var appDirectives = angular.module('app.directives', []);
    appDirectives.directive('ngScrollbar', function () {
        return {
            link: function ($scope, $element) {
                $($element).perfectScrollbar();
            }
        };
    });
    appDirectives.directive('ngScrollbarY', function () {
        return {
            link: function ($scope, $element) {
                $($element).perfectScrollbar({ suppressScrollX: true });
            }
        };
    });
    appDirectives.directive('ngFocus', [function () {
            var FOCUS_CLASS = 'ng-focused';
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function (scope, element, attrs, ctrl) {
                    ctrl.$focused = false;
                    element.bind('focus', function (evt) {
                        element.removeClass(FOCUS_CLASS);
                        scope.$apply(function () {
                            ctrl.$focused = false;
                        });
                    }).bind('blur', function (evt) {
                        element.addClass(FOCUS_CLASS);
                        scope.$apply(function () {
                            ctrl.$focused = true;
                        });
                    });
                }
            };
        }]);
    appDirectives.directive('tdRepeat', function ($timeout) {
        return {
            link: function ($scope, $element, $attrs) {
                if ($scope.$last == true && $scope.$parent.$last == true) {
                    var finish = $attrs.tdRepeat;
                    $timeout(function () {
                        $scope.$eval(finish);
                    }, 0);
                }
            }
        };
    });
    appDirectives.directive('ngTooltip', function ($parse) {
        return {
            link: function ($scope, $element, $attrs) {
                var $ele = $($element);
                var opt = $parse($attrs.opt)($scope);
                var defaults = {
                    placement: 'auto top',
                    container: 'body'
                };
                var options = $.extend(true, {}, defaults, opt);
                $ele.tooltip(options);
            }
        };
    });
    appDirectives.directive('ngInput', function ($rootScope, $parse) {
        return {
            template: function (element, attrs) {
                var type = attrs.type ? attrs.type : 'text';
                var iconLeft = attrs.iconLeft ? attrs.iconLeft.indexOf('{') > -1 ? '<i class="icon icon-left ' + attrs.iconLeft + '"></i>' : '<i class="icon icon-left">' + attrs.iconLeft + '</i>' : '';
                var iconRight = attrs.iconRight ? attrs.iconRight.indexOf('{') > -1 ? '<i class="icon icon-right ' + attrs.iconRight + '"></i>' : '<i class="icon icon-right">' + attrs.iconRight + '</i>' : '';
                var placeholder = attrs.placeholder ? 'placeholder="' + attrs.placeholder + '"' : '';
                var errorLable = '';
                var valid = '';
                var name = attrs.name ? 'name="' + attrs.name + '"' : '';
                var model = attrs.model ? 'ng-model="' + attrs.model + '"' : '';
                var focus = attrs.model ? 'ng-focus' : '';
                if (attrs.valid) {
                    var required = attrs.required ? attrs.required : '';
                    var minlength = attrs.min ? attrs.min : '';
                    var maxlength = attrs.max ? attrs.max : '';
                    var pattern = attrs.pattern ? attrs.pattern : '';
                    switch (type) {
                    case 'email':
                        errorLable += '<span ng-show="' + attrs.form + '.' + attrs.name + '.$error.email" class="error-lable">请输入正确的电子邮件格式</span>';
                        break;
                    case 'number':
                        errorLable += '<span ng-show="' + attrs.form + '.' + attrs.name + '.$error.number" class="error-lable">请输入正确的数字</span>';
                        break;
                    case 'url':
                        errorLable += '<span ng-show="' + attrs.form + '.' + attrs.name + '.$error.url" class="error-lable">请输入正确的URL</span>';
                        break;
                    default:
                    }
                    if (required != '') {
                        valid += ' required=' + required;
                        errorLable += '<span ng-show="(' + attrs.form + '.' + attrs.name + '.$error.required&&' + attrs.form + '.' + attrs.name + '.$touched)||(' + attrs.form + '.' + attrs.name + '.$error.required&&' + attrs.form + '.$submitted)" class="error-lable">内容不可为空</span>';
                    }
                    if (minlength != '') {
                        valid += ' ng-minlength=' + minlength;
                        errorLable += '<span ng-show="' + attrs.form + '.' + attrs.name + '.$error.minlength" class="error-lable">内容不可少于' + minlength + '个字</span>';
                    }
                    if (maxlength != '') {
                        valid += ' ng-maxlength=' + maxlength;
                        valid += ' maxlength=' + maxlength;
                        errorLable += '<span ng-show="' + attrs.form + '.' + attrs.name + '.$error.maxlength" class="error-lable">内容不可多于' + maxlength + '个字</span>';
                    }
                    if (pattern != '') {
                        valid += ' ng-pattern=' + pattern;
                        errorLable += '<span ng-show="' + attrs.form + '.' + attrs.name + '.$error.pattern" class="error-lable">您输入的格式不正确</span>';
                    }
                }
                ;
                return '<div class="clearfix default-input">' + iconLeft + iconRight + '<input  type="' + type + '" ' + valid + ' ' + model + ' ' + placeholder + ' ' + name + ' ' + focus + ' autocomplete="off" />' + errorLable + '</div>';
            },
            replace: true,
            controller: function ($scope, $element, $attrs) {
                var opt = $parse($attrs.opt)($scope);
                var $this = $($element);
                if (opt && opt.class) {
                    $this.addClass(opt.class);
                }
            }
        };
    });
    appDirectives.directive('datePicker', function ($rootScope, $parse) {
        return {
            template: '<div class="clearfix default-input date-picker-wrapper"><i class="icon icon-right" ng-click="pickerToggle()">&#xe616;</i><input class="date-picker" readonly="readonly"/></div>',
            replace: true,
            scope: {
                model: '=',
                apply: '=',
                picker: '='
            },
            controller: function ($scope, $element, $attrs) {
                var $this = $($element);
                var $input = $this.find('input');
                var size = $attrs.size ? $attrs.size : null;
                var opt = $parse($attrs.opt)($scope);
                var thisClass = $attrs.class;
                var noToday = $attrs.noToday ? true : false;
                var options = {
                    orientation: 'right',
                    todayBtn: noToday ? false : 'linked',
                    endDate: noToday ? moment().subtract(1, 'days').format('YYYY-MM-DD') : new Date()
                };
                var opts = $.extend({ size: size }, options, opt);
                $input.datepicker(opts);
                console.log($scope.model);
                if (!$scope.model || $scope.model == '') {
                    if (noToday) {
                        $scope.model = moment().subtract(1, 'days').format('YYYY-MM-DD');
                    } else {
                        $scope.model = moment().format('YYYY-MM-DD');
                    }
                    ;
                    $input.val($scope.model);
                } else {
                    $input.datepicker('setDate', $scope.model);
                }
                ;
                $this.addClass(thisClass);
                $input.datepicker().on('show', function () {
                    $this.addClass('open');
                });
                $input.datepicker().on('hide', function () {
                    $this.removeClass('open');
                });
                if (!$attrs.free) {
                    $input.datepicker('setStartDate', moment().subtract(90, 'days').format('YYYY-MM-DD'));
                }
                ;
                $scope.pickerToggle = function () {
                    $input.datepicker('show');
                };
                $input.datepicker().on('hide', function (ev) {
                    if ($scope.model == $(this).val())
                        return;
                    $scope.model = $(this).val();
                    $rootScope.$digest();
                    if ($scope.apply) {
                        $scope.apply();
                    }
                    ;
                });
            }
        };
    });
    appDirectives.directive('dateRangePicker', function ($rootScope, $parse) {
        return {
            template: '<div class="clearfix default-input date-range-picker-wrapper"><i class="icon icon-right" ng-click="pickerToggle()">&#xe616;</i><input class="date-range-picker" readonly="readonly"/></div>',
            replace: true,
            scope: {
                model: '=',
                apply: '=?',
                opt: '=options',
                picker: '=?'
            },
            controller: function ($scope, $element, $attrs) {
                var $this = $($element);
                var $input = $this.find('input');
                var size = $attrs.size ? $attrs.size : null;
                var opt = $scope.opt ? $scope.opt : {};
                var thisClass = $attrs.class;
                var noToday = $attrs.noToday ? true : false;
                var options, startDate, endDate;
                if (!noToday) {
                    startDate = moment();
                    endDate = moment();
                    options = {
                        size: size,
                        maxDate: moment(),
                        ranges: {
                            '今天': [
                                moment(),
                                moment()
                            ],
                            '最近7天': [
                                moment().subtract(6, 'days'),
                                moment()
                            ],
                            '最近14天': [
                                moment().subtract(13, 'days'),
                                moment()
                            ],
                            '最近30天': [
                                moment().subtract(29, 'days'),
                                moment()
                            ]
                        }
                    };
                } else {
                    startDate = moment().subtract(7, 'days');
                    endDate = moment().subtract(1, 'days');
                    options = {
                        size: size,
                        maxDate: moment().subtract(1, 'days'),
                        startDate: moment().subtract(7, 'days'),
                        endDate: moment().subtract(1, 'days'),
                        ranges: {
                            '最近7天': [
                                moment().subtract(7, 'days'),
                                moment().subtract(1, 'days')
                            ],
                            '最近14天': [
                                moment().subtract(14, 'days'),
                                moment().subtract(1, 'days')
                            ],
                            '最近30天': [
                                moment().subtract(30, 'days'),
                                moment().subtract(1, 'days')
                            ]
                        }
                    };
                }
                ;
                var opts = $.extend({}, options, opt);
                if (!$attrs.free) {
                    opts.minDate = moment().subtract(90, 'days');
                }
                ;
                if (!$scope.model || $scope.model == '') {
                    $scope.model = undefined;
                } else {
                    opts.startDate = moment($scope.model.split('|')[0]);
                    opts.endDate = moment($scope.model.split('|')[1]);
                }
                ;
                $this.addClass(thisClass);
                $input.daterangepicker(opts);
                $scope.picker = $input.data('daterangepicker');
                $scope.pickerToggle = function () {
                    $scope.picker.show();
                };
                $input.on('show.daterangepicker', function () {
                    $this.addClass('open');
                });
                $input.on('hide.daterangepicker', function () {
                    $this.removeClass('open');
                });
                $input.on('apply.daterangepicker', function (ev, picker) {
                    console.log(picker);
                    $(this).val(picker.chosenLabel != '自定义时间' ? picker.chosenLabel : picker.startDate.format('YYYY-MM-DD') == picker.endDate.format('YYYY-MM-DD') ? picker.startDate.format('YYYY-MM-DD') : picker.startDate.format('YYYY-MM-DD') + '至' + picker.endDate.format('YYYY-MM-DD'));
                    $scope.model = picker.startDate.format('YYYY-MM-DD') + '|' + picker.endDate.format('YYYY-MM-DD');
                    $rootScope.$digest();
                    if ($scope.apply) {
                        $scope.apply();
                    }
                });
            }
        };
    });
    appDirectives.directive('ngFocus', [function () {
            var FOCUS_CLASS = 'ng-focused';
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function (scope, element, attrs, ctrl) {
                    ctrl.$focused = false;
                    element.bind('focus', function (evt) {
                        element.removeClass(FOCUS_CLASS);
                        scope.$apply(function () {
                            ctrl.$focused = false;
                        });
                    }).bind('blur', function (evt) {
                        element.addClass(FOCUS_CLASS);
                        scope.$apply(function () {
                            ctrl.$focused = true;
                        });
                    });
                }
            };
        }]);
    appDirectives.directive('noResult', function ($rootScope, $parse) {
        return {
            template: function ($element, $attrs) {
                var height = $($element).parent().height();
                var info = $attrs.info ? $attrs.info : '暂无结果';
                return '<div class="no-result" style="line-height:' + height + 'px">' + info + '</div>';
            },
            replace: true
        };
    });
});
(function () {
    ;
    (function (factory) {
        if (typeof define === 'function' && define.amd) {
            define('js.cookie', [], factory);
        } else if (typeof exports === 'object') {
            module.exports = factory();
        } else {
            var OldCookies = window.Cookies;
            var api = window.Cookies = factory();
            api.noConflict = function () {
                window.Cookies = OldCookies;
                return api;
            };
        }
    }(function () {
        function extend() {
            var i = 0;
            var result = {};
            for (; i < arguments.length; i++) {
                var attributes = arguments[i];
                for (var key in attributes) {
                    result[key] = attributes[key];
                }
            }
            return result;
        }
        function init(converter) {
            function api(key, value, attributes) {
                var result;
                if (typeof document === 'undefined') {
                    return;
                }
                if (arguments.length > 1) {
                    attributes = extend({ path: '/' }, api.defaults, attributes);
                    if (typeof attributes.expires === 'number') {
                        var expires = new Date();
                        expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 86400000);
                        attributes.expires = expires;
                    }
                    try {
                        result = JSON.stringify(value);
                        if (/^[\{\[]/.test(result)) {
                            value = result;
                        }
                    } catch (e) {
                    }
                    if (!converter.write) {
                        value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                    } else {
                        value = converter.write(value, key);
                    }
                    key = encodeURIComponent(String(key));
                    key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
                    key = key.replace(/[\(\)]/g, escape);
                    return document.cookie = [
                        key,
                        '=',
                        value,
                        attributes.expires && '; expires=' + attributes.expires.toUTCString(),
                        attributes.path && '; path=' + attributes.path,
                        attributes.domain && '; domain=' + attributes.domain,
                        attributes.secure ? '; secure' : ''
                    ].join('');
                }
                if (!key) {
                    result = {};
                }
                var cookies = document.cookie ? document.cookie.split('; ') : [];
                var rdecode = /(%[0-9A-Z]{2})+/g;
                var i = 0;
                for (; i < cookies.length; i++) {
                    var parts = cookies[i].split('=');
                    var name = parts[0].replace(rdecode, decodeURIComponent);
                    var cookie = parts.slice(1).join('=');
                    if (cookie.charAt(0) === '"') {
                        cookie = cookie.slice(1, -1);
                    }
                    try {
                        cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);
                        if (this.json) {
                            try {
                                cookie = JSON.parse(cookie);
                            } catch (e) {
                            }
                        }
                        if (key === name) {
                            result = cookie;
                            break;
                        }
                        if (!key) {
                            result[name] = cookie;
                        }
                    } catch (e) {
                    }
                }
                return result;
            }
            api.set = api;
            api.get = function (key) {
                return api(key);
            };
            api.getJSON = function () {
                return api.apply({ json: true }, [].slice.call(arguments));
            };
            api.defaults = {};
            api.remove = function (key, attributes) {
                api(key, '', extend(attributes, { expires: -1 }));
            };
            api.withConverter = init;
            return api;
        }
        return init(function () {
        });
    }));
}.call(this));
define('baseSet', [], function () {
    return {
        postServer: window.location.origin + '/',
        pageHost: './../'
    };
});
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define('sweetalert', [], factory) : global.Sweetalert2 = factory();
}(this, function () {
    'use strict';
    var defaultParams = {
        title: '',
        titleText: '',
        text: '',
        html: '',
        type: null,
        customClass: '',
        target: 'body',
        animation: true,
        allowOutsideClick: true,
        allowEscapeKey: true,
        allowEnterKey: true,
        showConfirmButton: true,
        showCancelButton: false,
        preConfirm: null,
        confirmButtonText: 'OK',
        confirmButtonColor: '#26B99A',
        confirmButtonClass: null,
        cancelButtonText: 'Cancel',
        cancelButtonColor: '#aaa',
        cancelButtonClass: null,
        buttonsStyling: true,
        reverseButtons: false,
        focusCancel: false,
        showCloseButton: false,
        showLoaderOnConfirm: false,
        imageUrl: null,
        imageWidth: null,
        imageHeight: null,
        imageClass: null,
        timer: null,
        width: 500,
        padding: 20,
        background: '#fff',
        input: null,
        inputPlaceholder: '',
        inputValue: '',
        inputOptions: {},
        inputAutoTrim: true,
        inputClass: null,
        inputAttributes: {},
        inputValidator: null,
        progressSteps: [],
        currentProgressStep: null,
        progressStepsDistance: '40px',
        onOpen: null,
        onClose: null,
        useRejections: true
    };
    var swalPrefix = 'swal2-';
    var prefix = function prefix(items) {
        var result = {};
        for (var i in items) {
            result[items[i]] = swalPrefix + items[i];
        }
        return result;
    };
    var swalClasses = prefix([
        'container',
        'shown',
        'iosfix',
        'modal',
        'overlay',
        'fade',
        'show',
        'hide',
        'noanimation',
        'close',
        'title',
        'content',
        'buttonswrapper',
        'confirm',
        'cancel',
        'icon',
        'image',
        'input',
        'file',
        'range',
        'select',
        'radio',
        'checkbox',
        'textarea',
        'inputerror',
        'validationerror',
        'progresssteps',
        'activeprogressstep',
        'progresscircle',
        'progressline',
        'loading',
        'styled'
    ]);
    var iconTypes = prefix([
        'success',
        'warning',
        'info',
        'question',
        'error'
    ]);
    var colorLuminance = function colorLuminance(hex, lum) {
        hex = String(hex).replace(/[^0-9a-f]/gi, '');
        if (hex.length < 6) {
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        lum = lum || 0;
        var rgb = '#';
        for (var i = 0; i < 3; i++) {
            var c = parseInt(hex.substr(i * 2, 2), 16);
            c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
            rgb += ('00' + c).substr(c.length);
        }
        return rgb;
    };
    var uniqueArray = function uniqueArray(arr) {
        var result = [];
        for (var i in arr) {
            if (result.indexOf(arr[i]) === -1) {
                result.push(arr[i]);
            }
        }
        return result;
    };
    var states = {
        previousWindowKeyDown: null,
        previousActiveElement: null,
        previousBodyPadding: null
    };
    var init = function init(params) {
        if (typeof document === 'undefined') {
            console.error('SweetAlert2 requires document to initialize');
            return;
        }
        var container = document.createElement('div');
        container.className = swalClasses.container;
        container.innerHTML = sweetHTML;
        var targetElement = document.querySelector(params.target);
        if (!targetElement) {
            console.warn('SweetAlert2: Can\'t find the target "' + params.target + '"');
            targetElement = document.body;
        }
        targetElement.appendChild(container);
        var modal = getModal();
        var input = getChildByClass(modal, swalClasses.input);
        var file = getChildByClass(modal, swalClasses.file);
        var range = modal.querySelector('.' + swalClasses.range + ' input');
        var rangeOutput = modal.querySelector('.' + swalClasses.range + ' output');
        var select = getChildByClass(modal, swalClasses.select);
        var checkbox = modal.querySelector('.' + swalClasses.checkbox + ' input');
        var textarea = getChildByClass(modal, swalClasses.textarea);
        input.oninput = function () {
            sweetAlert.resetValidationError();
        };
        input.onkeydown = function (event) {
            setTimeout(function () {
                if (event.keyCode === 13 && params.allowEnterKey) {
                    event.stopPropagation();
                    sweetAlert.clickConfirm();
                }
            }, 0);
        };
        file.onchange = function () {
            sweetAlert.resetValidationError();
        };
        range.oninput = function () {
            sweetAlert.resetValidationError();
            rangeOutput.value = range.value;
        };
        range.onchange = function () {
            sweetAlert.resetValidationError();
            range.previousSibling.value = range.value;
        };
        select.onchange = function () {
            sweetAlert.resetValidationError();
        };
        checkbox.onchange = function () {
            sweetAlert.resetValidationError();
        };
        textarea.oninput = function () {
            sweetAlert.resetValidationError();
        };
        return modal;
    };
    var sweetHTML = ('\n <div role="dialog" aria-labelledby="' + swalClasses.title + '" aria-describedby="' + swalClasses.content + '" class="' + swalClasses.modal + '" tabindex="-1">\n   <ul class="' + swalClasses.progresssteps + '"></ul>\n   <div class="' + swalClasses.icon + ' ' + iconTypes.error + '">\n     <span class="swal2-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span>\n   </div>\n   <div class="' + swalClasses.icon + ' ' + iconTypes.question + '">?</div>\n   <div class="' + swalClasses.icon + ' ' + iconTypes.warning + '">!</div>\n   <div class="' + swalClasses.icon + ' ' + iconTypes.info + '">i</div>\n   <div class="' + swalClasses.icon + ' ' + iconTypes.success + '">\n     <div class="swal2-success-circular-line-left"></div>\n     <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n     <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n     <div class="swal2-success-circular-line-right"></div>\n   </div>\n   <img class="' + swalClasses.image + '" />\n   <h2 class="' + swalClasses.title + '" id="' + swalClasses.title + '"></h2>\n   <div id="' + swalClasses.content + '" class="' + swalClasses.content + '"></div>\n   <input class="' + swalClasses.input + '" />\n   <input type="file" class="' + swalClasses.file + '" />\n   <div class="' + swalClasses.range + '">\n     <output></output>\n     <input type="range" />\n   </div>\n   <select class="' + swalClasses.select + '"></select>\n   <div class="' + swalClasses.radio + '"></div>\n   <label for="' + swalClasses.checkbox + '" class="' + swalClasses.checkbox + '">\n     <input type="checkbox" />\n   </label>\n   <textarea class="' + swalClasses.textarea + '"></textarea>\n   <div class="' + swalClasses.validationerror + '"></div>\n   <div class="' + swalClasses.buttonswrapper + '">\n     <button type="button" class="' + swalClasses.confirm + '">OK</button>\n     <button type="button" class="' + swalClasses.cancel + '">Cancel</button>\n   </div>\n   <button type="button" class="' + swalClasses.close + '" aria-label="Close this dialog">\xD7</button>\n </div>\n').replace(/(^|\n)\s*/g, '');
    var getContainer = function getContainer() {
        return document.body.querySelector('.' + swalClasses.container);
    };
    var getModal = function getModal() {
        return getContainer() ? getContainer().querySelector('.' + swalClasses.modal) : null;
    };
    var getIcons = function getIcons() {
        var modal = getModal();
        return modal.querySelectorAll('.' + swalClasses.icon);
    };
    var elementByClass = function elementByClass(className) {
        return getContainer() ? getContainer().querySelector('.' + className) : null;
    };
    var getTitle = function getTitle() {
        return elementByClass(swalClasses.title);
    };
    var getContent = function getContent() {
        return elementByClass(swalClasses.content);
    };
    var getImage = function getImage() {
        return elementByClass(swalClasses.image);
    };
    var getButtonsWrapper = function getButtonsWrapper() {
        return elementByClass(swalClasses.buttonswrapper);
    };
    var getProgressSteps = function getProgressSteps() {
        return elementByClass(swalClasses.progresssteps);
    };
    var getValidationError = function getValidationError() {
        return elementByClass(swalClasses.validationerror);
    };
    var getConfirmButton = function getConfirmButton() {
        return elementByClass(swalClasses.confirm);
    };
    var getCancelButton = function getCancelButton() {
        return elementByClass(swalClasses.cancel);
    };
    var getCloseButton = function getCloseButton() {
        return elementByClass(swalClasses.close);
    };
    var getFocusableElements = function getFocusableElements(focusCancel) {
        var buttons = [
            getConfirmButton(),
            getCancelButton()
        ];
        if (focusCancel) {
            buttons.reverse();
        }
        var focusableElements = buttons.concat(Array.prototype.slice.call(getModal().querySelectorAll('button, input:not([type=hidden]), textarea, select, a, *[tabindex]:not([tabindex="-1"])')));
        return uniqueArray(focusableElements);
    };
    var hasClass = function hasClass(elem, className) {
        if (elem.classList) {
            return elem.classList.contains(className);
        }
        return false;
    };
    var focusInput = function focusInput(input) {
        input.focus();
        if (input.type !== 'file') {
            var val = input.value;
            input.value = '';
            input.value = val;
        }
    };
    var addClass = function addClass(elem, className) {
        if (!elem || !className) {
            return;
        }
        var classes = className.split(/\s+/).filter(Boolean);
        classes.forEach(function (className) {
            elem.classList.add(className);
        });
    };
    var removeClass = function removeClass(elem, className) {
        if (!elem || !className) {
            return;
        }
        var classes = className.split(/\s+/).filter(Boolean);
        classes.forEach(function (className) {
            elem.classList.remove(className);
        });
    };
    var getChildByClass = function getChildByClass(elem, className) {
        for (var i = 0; i < elem.childNodes.length; i++) {
            if (hasClass(elem.childNodes[i], className)) {
                return elem.childNodes[i];
            }
        }
    };
    var show = function show(elem, display) {
        if (!display) {
            display = 'block';
        }
        elem.style.opacity = '';
        elem.style.display = display;
    };
    var hide = function hide(elem) {
        elem.style.opacity = '';
        elem.style.display = 'none';
    };
    var empty = function empty(elem) {
        while (elem.firstChild) {
            elem.removeChild(elem.firstChild);
        }
    };
    var isVisible = function isVisible(elem) {
        return elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length;
    };
    var removeStyleProperty = function removeStyleProperty(elem, property) {
        if (elem.style.removeProperty) {
            elem.style.removeProperty(property);
        } else {
            elem.style.removeAttribute(property);
        }
    };
    var fireClick = function fireClick(node) {
        if (!isVisible(node)) {
            return false;
        }
        if (typeof MouseEvent === 'function') {
            var mevt = new MouseEvent('click', {
                view: window,
                bubbles: false,
                cancelable: true
            });
            node.dispatchEvent(mevt);
        } else if (document.createEvent) {
            var evt = document.createEvent('MouseEvents');
            evt.initEvent('click', false, false);
            node.dispatchEvent(evt);
        } else if (document.createEventObject) {
            node.fireEvent('onclick');
        } else if (typeof node.onclick === 'function') {
            node.onclick();
        }
    };
    var animationEndEvent = function () {
        var testEl = document.createElement('div');
        var transEndEventNames = {
            'WebkitAnimation': 'webkitAnimationEnd',
            'OAnimation': 'oAnimationEnd oanimationend',
            'msAnimation': 'MSAnimationEnd',
            'animation': 'animationend'
        };
        for (var i in transEndEventNames) {
            if (transEndEventNames.hasOwnProperty(i) && testEl.style[i] !== undefined) {
                return transEndEventNames[i];
            }
        }
        return false;
    }();
    var resetPrevState = function resetPrevState() {
        window.onkeydown = states.previousWindowKeyDown;
        if (states.previousActiveElement && states.previousActiveElement.focus) {
            var x = window.scrollX;
            var y = window.scrollY;
            states.previousActiveElement.focus();
            if (x && y) {
                window.scrollTo(x, y);
            }
        }
    };
    var measureScrollbar = function measureScrollbar() {
        var supportsTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints;
        if (supportsTouch) {
            return 0;
        }
        var scrollDiv = document.createElement('div');
        scrollDiv.style.width = '50px';
        scrollDiv.style.height = '50px';
        scrollDiv.style.overflow = 'scroll';
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
    };
    var debounce = function debounce(func, wait) {
        var timeout = void 0;
        return function () {
            var later = function later() {
                timeout = null;
                func();
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var modalParams = _extends({}, defaultParams);
    var queue = [];
    var swal2Observer = void 0;
    var setParameters = function setParameters(params) {
        var modal = getModal() || init(params);
        for (var param in params) {
            if (!defaultParams.hasOwnProperty(param) && param !== 'extraParams') {
                console.warn('SweetAlert2: Unknown parameter "' + param + '"');
            }
        }
        modal.style.width = typeof params.width === 'number' ? params.width + 'px' : params.width;
        modal.style.padding = params.padding + 'px';
        modal.style.background = params.background;
        var successIconParts = modal.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');
        for (var i = 0; i < successIconParts.length; i++) {
            successIconParts[i].style.background = params.background;
        }
        var title = getTitle();
        var content = getContent();
        var buttonsWrapper = getButtonsWrapper();
        var confirmButton = getConfirmButton();
        var cancelButton = getCancelButton();
        var closeButton = getCloseButton();
        if (params.titleText) {
            title.innerText = params.titleText;
        } else {
            title.innerHTML = params.title.split('\n').join('<br />');
        }
        if (params.text || params.html) {
            if (_typeof(params.html) === 'object') {
                content.innerHTML = '';
                if (0 in params.html) {
                    for (var _i = 0; _i in params.html; _i++) {
                        content.appendChild(params.html[_i].cloneNode(true));
                    }
                } else {
                    content.appendChild(params.html.cloneNode(true));
                }
            } else if (params.html) {
                content.innerHTML = params.html;
            } else if (params.text) {
                content.textContent = params.text;
            }
            show(content);
        } else {
            hide(content);
        }
        if (params.showCloseButton) {
            show(closeButton);
        } else {
            hide(closeButton);
        }
        modal.className = swalClasses.modal;
        if (params.customClass) {
            addClass(modal, params.customClass);
        }
        var progressStepsContainer = getProgressSteps();
        var currentProgressStep = parseInt(params.currentProgressStep === null ? sweetAlert.getQueueStep() : params.currentProgressStep, 10);
        if (params.progressSteps.length) {
            show(progressStepsContainer);
            empty(progressStepsContainer);
            if (currentProgressStep >= params.progressSteps.length) {
                console.warn('SweetAlert2: Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');
            }
            params.progressSteps.forEach(function (step, index) {
                var circle = document.createElement('li');
                addClass(circle, swalClasses.progresscircle);
                circle.innerHTML = step;
                if (index === currentProgressStep) {
                    addClass(circle, swalClasses.activeprogressstep);
                }
                progressStepsContainer.appendChild(circle);
                if (index !== params.progressSteps.length - 1) {
                    var line = document.createElement('li');
                    addClass(line, swalClasses.progressline);
                    line.style.width = params.progressStepsDistance;
                    progressStepsContainer.appendChild(line);
                }
            });
        } else {
            hide(progressStepsContainer);
        }
        var icons = getIcons();
        for (var _i2 = 0; _i2 < icons.length; _i2++) {
            hide(icons[_i2]);
        }
        if (params.type) {
            var validType = false;
            for (var iconType in iconTypes) {
                if (params.type === iconType) {
                    validType = true;
                    break;
                }
            }
            if (!validType) {
                console.error('SweetAlert2: Unknown alert type: ' + params.type);
                return false;
            }
            var icon = modal.querySelector('.' + swalClasses.icon + '.' + iconTypes[params.type]);
            show(icon);
            if (params.animation) {
                switch (params.type) {
                case 'success':
                    addClass(icon, 'swal2-animate-success-icon');
                    addClass(icon.querySelector('.swal2-success-line-tip'), 'swal2-animate-success-line-tip');
                    addClass(icon.querySelector('.swal2-success-line-long'), 'swal2-animate-success-line-long');
                    break;
                case 'error':
                    addClass(icon, 'swal2-animate-error-icon');
                    addClass(icon.querySelector('.swal2-x-mark'), 'swal2-animate-x-mark');
                    break;
                default:
                    break;
                }
            }
        }
        var image = getImage();
        if (params.imageUrl) {
            image.setAttribute('src', params.imageUrl);
            show(image);
            if (params.imageWidth) {
                image.setAttribute('width', params.imageWidth);
            } else {
                image.removeAttribute('width');
            }
            if (params.imageHeight) {
                image.setAttribute('height', params.imageHeight);
            } else {
                image.removeAttribute('height');
            }
            image.className = swalClasses.image;
            if (params.imageClass) {
                addClass(image, params.imageClass);
            }
        } else {
            hide(image);
        }
        if (params.showCancelButton) {
            cancelButton.style.display = 'inline-block';
        } else {
            hide(cancelButton);
        }
        if (params.showConfirmButton) {
            removeStyleProperty(confirmButton, 'display');
        } else {
            hide(confirmButton);
        }
        if (!params.showConfirmButton && !params.showCancelButton) {
            hide(buttonsWrapper);
        } else {
            show(buttonsWrapper);
        }
        confirmButton.innerHTML = params.confirmButtonText;
        cancelButton.innerHTML = params.cancelButtonText;
        if (params.buttonsStyling) {
            confirmButton.style.backgroundColor = params.confirmButtonColor;
            cancelButton.style.backgroundColor = params.cancelButtonColor;
        }
        confirmButton.className = swalClasses.confirm;
        addClass(confirmButton, params.confirmButtonClass);
        cancelButton.className = swalClasses.cancel;
        addClass(cancelButton, params.cancelButtonClass);
        if (params.buttonsStyling) {
            addClass(confirmButton, swalClasses.styled);
            addClass(cancelButton, swalClasses.styled);
        } else {
            removeClass(confirmButton, swalClasses.styled);
            removeClass(cancelButton, swalClasses.styled);
            confirmButton.style.backgroundColor = confirmButton.style.borderLeftColor = confirmButton.style.borderRightColor = '';
            cancelButton.style.backgroundColor = cancelButton.style.borderLeftColor = cancelButton.style.borderRightColor = '';
        }
        if (params.animation === true) {
            removeClass(modal, swalClasses.noanimation);
        } else {
            addClass(modal, swalClasses.noanimation);
        }
    };
    var openModal = function openModal(animation, onComplete) {
        var container = getContainer();
        var modal = getModal();
        if (animation) {
            addClass(modal, swalClasses.show);
            addClass(container, swalClasses.fade);
            removeClass(modal, swalClasses.hide);
        } else {
            removeClass(modal, swalClasses.fade);
        }
        show(modal);
        container.style.overflowY = 'hidden';
        if (animationEndEvent && !hasClass(modal, swalClasses.noanimation)) {
            modal.addEventListener(animationEndEvent, function swalCloseEventFinished() {
                modal.removeEventListener(animationEndEvent, swalCloseEventFinished);
                container.style.overflowY = 'auto';
            });
        } else {
            container.style.overflowY = 'auto';
        }
        addClass(document.documentElement, swalClasses.shown);
        addClass(document.body, swalClasses.shown);
        addClass(container, swalClasses.shown);
        fixScrollbar();
        iOSfix();
        states.previousActiveElement = document.activeElement;
        if (onComplete !== null && typeof onComplete === 'function') {
            setTimeout(function () {
                onComplete(modal);
            });
        }
    };
    var fixScrollbar = function fixScrollbar() {
        if (states.previousBodyPadding !== null) {
            return;
        }
        if (document.body.scrollHeight > window.innerHeight) {
            states.previousBodyPadding = document.body.style.paddingRight;
            document.body.style.paddingRight = measureScrollbar() + 'px';
        }
    };
    var undoScrollbar = function undoScrollbar() {
        if (states.previousBodyPadding !== null) {
            document.body.style.paddingRight = states.previousBodyPadding;
            states.previousBodyPadding = null;
        }
    };
    var iOSfix = function iOSfix() {
        var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
            var offset = document.body.scrollTop;
            document.body.style.top = offset * -1 + 'px';
            addClass(document.body, swalClasses.iosfix);
        }
    };
    var undoIOSfix = function undoIOSfix() {
        if (hasClass(document.body, swalClasses.iosfix)) {
            var offset = parseInt(document.body.style.top, 10);
            removeClass(document.body, swalClasses.iosfix);
            document.body.style.top = '';
            document.body.scrollTop = offset * -1;
        }
    };
    var sweetAlert = function sweetAlert() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        if (args[0] === undefined) {
            console.error('SweetAlert2 expects at least 1 attribute!');
            return false;
        }
        var params = _extends({}, modalParams);
        switch (_typeof(args[0])) {
        case 'string':
            params.title = args[0];
            params.html = args[1];
            params.type = args[2];
            break;
        case 'object':
            _extends(params, args[0]);
            params.extraParams = args[0].extraParams;
            if (params.input === 'email' && params.inputValidator === null) {
                params.inputValidator = function (email) {
                    return new Promise(function (resolve, reject) {
                        var emailRegex = /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
                        if (emailRegex.test(email)) {
                            resolve();
                        } else {
                            reject('Invalid email address');
                        }
                    });
                };
            }
            if (params.input === 'url' && params.inputValidator === null) {
                params.inputValidator = function (url) {
                    return new Promise(function (resolve, reject) {
                        var urlRegex = /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&\/\/=]*)$/;
                        if (urlRegex.test(url)) {
                            resolve();
                        } else {
                            reject('Invalid URL');
                        }
                    });
                };
            }
            break;
        default:
            console.error('SweetAlert2: Unexpected type of argument! Expected "string" or "object", got ' + _typeof(args[0]));
            return false;
        }
        setParameters(params);
        var container = getContainer();
        var modal = getModal();
        return new Promise(function (resolve, reject) {
            if (params.timer) {
                modal.timeout = setTimeout(function () {
                    sweetAlert.closeModal(params.onClose);
                    if (params.useRejections) {
                        reject('timer');
                    } else {
                        resolve({ dismiss: 'timer' });
                    }
                }, params.timer);
            }
            var getInput = function getInput(inputType) {
                inputType = inputType || params.input;
                if (!inputType) {
                    return null;
                }
                switch (inputType) {
                case 'select':
                case 'textarea':
                case 'file':
                    return getChildByClass(modal, swalClasses[inputType]);
                case 'checkbox':
                    return modal.querySelector('.' + swalClasses.checkbox + ' input');
                case 'radio':
                    return modal.querySelector('.' + swalClasses.radio + ' input:checked') || modal.querySelector('.' + swalClasses.radio + ' input:first-child');
                case 'range':
                    return modal.querySelector('.' + swalClasses.range + ' input');
                default:
                    return getChildByClass(modal, swalClasses.input);
                }
            };
            var getInputValue = function getInputValue() {
                var input = getInput();
                if (!input) {
                    return null;
                }
                switch (params.input) {
                case 'checkbox':
                    return input.checked ? 1 : 0;
                case 'radio':
                    return input.checked ? input.value : null;
                case 'file':
                    return input.files.length ? input.files[0] : null;
                default:
                    return params.inputAutoTrim ? input.value.trim() : input.value;
                }
            };
            if (params.input) {
                setTimeout(function () {
                    var input = getInput();
                    if (input) {
                        focusInput(input);
                    }
                }, 0);
            }
            var confirm = function confirm(value) {
                if (params.showLoaderOnConfirm) {
                    sweetAlert.showLoading();
                }
                if (params.preConfirm) {
                    params.preConfirm(value, params.extraParams).then(function (preConfirmValue) {
                        sweetAlert.closeModal(params.onClose);
                        resolve(preConfirmValue || value);
                    }, function (error) {
                        sweetAlert.hideLoading();
                        if (error) {
                            sweetAlert.showValidationError(error);
                        }
                    });
                } else {
                    sweetAlert.closeModal(params.onClose);
                    if (params.useRejections) {
                        resolve(value);
                    } else {
                        resolve({ value: value });
                    }
                }
            };
            var onButtonEvent = function onButtonEvent(event) {
                var e = event || window.event;
                var target = e.target || e.srcElement;
                var confirmButton = getConfirmButton();
                var cancelButton = getCancelButton();
                var targetedConfirm = confirmButton && (confirmButton === target || confirmButton.contains(target));
                var targetedCancel = cancelButton && (cancelButton === target || cancelButton.contains(target));
                switch (e.type) {
                case 'mouseover':
                case 'mouseup':
                    if (params.buttonsStyling) {
                        if (targetedConfirm) {
                            confirmButton.style.backgroundColor = colorLuminance(params.confirmButtonColor, -0.1);
                        } else if (targetedCancel) {
                            cancelButton.style.backgroundColor = colorLuminance(params.cancelButtonColor, -0.1);
                        }
                    }
                    break;
                case 'mouseout':
                    if (params.buttonsStyling) {
                        if (targetedConfirm) {
                            confirmButton.style.backgroundColor = params.confirmButtonColor;
                        } else if (targetedCancel) {
                            cancelButton.style.backgroundColor = params.cancelButtonColor;
                        }
                    }
                    break;
                case 'mousedown':
                    if (params.buttonsStyling) {
                        if (targetedConfirm) {
                            confirmButton.style.backgroundColor = colorLuminance(params.confirmButtonColor, -0.2);
                        } else if (targetedCancel) {
                            cancelButton.style.backgroundColor = colorLuminance(params.cancelButtonColor, -0.2);
                        }
                    }
                    break;
                case 'click':
                    if (targetedConfirm && sweetAlert.isVisible()) {
                        sweetAlert.disableButtons();
                        if (params.input) {
                            var inputValue = getInputValue();
                            if (params.inputValidator) {
                                sweetAlert.disableInput();
                                params.inputValidator(inputValue, params.extraParams).then(function () {
                                    sweetAlert.enableButtons();
                                    sweetAlert.enableInput();
                                    confirm(inputValue);
                                }, function (error) {
                                    sweetAlert.enableButtons();
                                    sweetAlert.enableInput();
                                    if (error) {
                                        sweetAlert.showValidationError(error);
                                    }
                                });
                            } else {
                                confirm(inputValue);
                            }
                        } else {
                            confirm(true);
                        }
                    } else if (targetedCancel && sweetAlert.isVisible()) {
                        sweetAlert.disableButtons();
                        sweetAlert.closeModal(params.onClose);
                        if (params.useRejections) {
                            reject('cancel');
                        } else {
                            resolve({ dismiss: 'cancel' });
                        }
                    }
                    break;
                default:
                }
            };
            var buttons = modal.querySelectorAll('button');
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].onclick = onButtonEvent;
                buttons[i].onmouseover = onButtonEvent;
                buttons[i].onmouseout = onButtonEvent;
                buttons[i].onmousedown = onButtonEvent;
            }
            getCloseButton().onclick = function () {
                sweetAlert.closeModal(params.onClose);
                if (params.useRejections) {
                    reject('close');
                } else {
                    resolve({ dismiss: 'close' });
                }
            };
            container.onclick = function (e) {
                if (e.target !== container) {
                    return;
                }
                if (params.allowOutsideClick) {
                    sweetAlert.closeModal(params.onClose);
                    if (params.useRejections) {
                        reject('overlay');
                    } else {
                        resolve({ dismiss: 'overlay' });
                    }
                }
            };
            var buttonsWrapper = getButtonsWrapper();
            var confirmButton = getConfirmButton();
            var cancelButton = getCancelButton();
            if (params.reverseButtons) {
                confirmButton.parentNode.insertBefore(cancelButton, confirmButton);
            } else {
                confirmButton.parentNode.insertBefore(confirmButton, cancelButton);
            }
            var setFocus = function setFocus(index, increment) {
                var focusableElements = getFocusableElements(params.focusCancel);
                for (var _i3 = 0; _i3 < focusableElements.length; _i3++) {
                    index = index + increment;
                    if (index === focusableElements.length) {
                        index = 0;
                    } else if (index === -1) {
                        index = focusableElements.length - 1;
                    }
                    var el = focusableElements[index];
                    if (isVisible(el)) {
                        return el.focus();
                    }
                }
            };
            var handleKeyDown = function handleKeyDown(event) {
                var e = event || window.event;
                var keyCode = e.keyCode || e.which;
                if ([
                        9,
                        13,
                        32,
                        27,
                        37,
                        38,
                        39,
                        40
                    ].indexOf(keyCode) === -1) {
                    return;
                }
                var targetElement = e.target || e.srcElement;
                var focusableElements = getFocusableElements(params.focusCancel);
                var btnIndex = -1;
                for (var _i4 = 0; _i4 < focusableElements.length; _i4++) {
                    if (targetElement === focusableElements[_i4]) {
                        btnIndex = _i4;
                        break;
                    }
                }
                if (keyCode === 9) {
                    if (!e.shiftKey) {
                        setFocus(btnIndex, 1);
                    } else {
                        setFocus(btnIndex, -1);
                    }
                    e.stopPropagation();
                    e.preventDefault();
                } else if (keyCode === 37 || keyCode === 38 || keyCode === 39 || keyCode === 40) {
                    if (document.activeElement === confirmButton && isVisible(cancelButton)) {
                        cancelButton.focus();
                    } else if (document.activeElement === cancelButton && isVisible(confirmButton)) {
                        confirmButton.focus();
                    }
                } else if (keyCode === 13 || keyCode === 32) {
                    if (btnIndex === -1 && params.allowEnterKey) {
                        if (params.focusCancel) {
                            fireClick(cancelButton, e);
                        } else {
                            fireClick(confirmButton, e);
                        }
                        e.stopPropagation();
                        e.preventDefault();
                    }
                } else if (keyCode === 27 && params.allowEscapeKey === true) {
                    sweetAlert.closeModal(params.onClose);
                    if (params.useRejections) {
                        reject('esc');
                    } else {
                        resolve({ dismiss: 'esc' });
                    }
                }
            };
            if (!window.onkeydown || window.onkeydown.toString() !== handleKeyDown.toString()) {
                states.previousWindowKeyDown = window.onkeydown;
                window.onkeydown = handleKeyDown;
            }
            if (params.buttonsStyling) {
                confirmButton.style.borderLeftColor = params.confirmButtonColor;
                confirmButton.style.borderRightColor = params.confirmButtonColor;
            }
            sweetAlert.hideLoading = sweetAlert.disableLoading = function () {
                if (!params.showConfirmButton) {
                    hide(confirmButton);
                    if (!params.showCancelButton) {
                        hide(getButtonsWrapper());
                    }
                }
                removeClass(buttonsWrapper, swalClasses.loading);
                removeClass(modal, swalClasses.loading);
                confirmButton.disabled = false;
                cancelButton.disabled = false;
            };
            sweetAlert.getTitle = function () {
                return getTitle();
            };
            sweetAlert.getContent = function () {
                return getContent();
            };
            sweetAlert.getInput = function () {
                return getInput();
            };
            sweetAlert.getImage = function () {
                return getImage();
            };
            sweetAlert.getButtonsWrapper = function () {
                return getButtonsWrapper();
            };
            sweetAlert.getConfirmButton = function () {
                return getConfirmButton();
            };
            sweetAlert.getCancelButton = function () {
                return getCancelButton();
            };
            sweetAlert.enableButtons = function () {
                confirmButton.disabled = false;
                cancelButton.disabled = false;
            };
            sweetAlert.disableButtons = function () {
                confirmButton.disabled = true;
                cancelButton.disabled = true;
            };
            sweetAlert.enableConfirmButton = function () {
                confirmButton.disabled = false;
            };
            sweetAlert.disableConfirmButton = function () {
                confirmButton.disabled = true;
            };
            sweetAlert.enableInput = function () {
                var input = getInput();
                if (!input) {
                    return false;
                }
                if (input.type === 'radio') {
                    var radiosContainer = input.parentNode.parentNode;
                    var radios = radiosContainer.querySelectorAll('input');
                    for (var _i5 = 0; _i5 < radios.length; _i5++) {
                        radios[_i5].disabled = false;
                    }
                } else {
                    input.disabled = false;
                }
            };
            sweetAlert.disableInput = function () {
                var input = getInput();
                if (!input) {
                    return false;
                }
                if (input && input.type === 'radio') {
                    var radiosContainer = input.parentNode.parentNode;
                    var radios = radiosContainer.querySelectorAll('input');
                    for (var _i6 = 0; _i6 < radios.length; _i6++) {
                        radios[_i6].disabled = true;
                    }
                } else {
                    input.disabled = true;
                }
            };
            sweetAlert.recalculateHeight = debounce(function () {
                var modal = getModal();
                if (!modal) {
                    return;
                }
                var prevState = modal.style.display;
                modal.style.minHeight = '';
                show(modal);
                modal.style.minHeight = modal.scrollHeight + 1 + 'px';
                modal.style.display = prevState;
            }, 50);
            sweetAlert.showValidationError = function (error) {
                var validationError = getValidationError();
                validationError.innerHTML = error;
                show(validationError);
                var input = getInput();
                if (input) {
                    focusInput(input);
                    addClass(input, swalClasses.inputerror);
                }
            };
            sweetAlert.resetValidationError = function () {
                var validationError = getValidationError();
                hide(validationError);
                sweetAlert.recalculateHeight();
                var input = getInput();
                if (input) {
                    removeClass(input, swalClasses.inputerror);
                }
            };
            sweetAlert.getProgressSteps = function () {
                return params.progressSteps;
            };
            sweetAlert.setProgressSteps = function (progressSteps) {
                params.progressSteps = progressSteps;
                setParameters(params);
            };
            sweetAlert.showProgressSteps = function () {
                show(getProgressSteps());
            };
            sweetAlert.hideProgressSteps = function () {
                hide(getProgressSteps());
            };
            sweetAlert.enableButtons();
            sweetAlert.hideLoading();
            sweetAlert.resetValidationError();
            var inputTypes = [
                'input',
                'file',
                'range',
                'select',
                'radio',
                'checkbox',
                'textarea'
            ];
            var input = void 0;
            for (var _i7 = 0; _i7 < inputTypes.length; _i7++) {
                var inputClass = swalClasses[inputTypes[_i7]];
                var inputContainer = getChildByClass(modal, inputClass);
                input = getInput(inputTypes[_i7]);
                if (input) {
                    for (var j in input.attributes) {
                        if (input.attributes.hasOwnProperty(j)) {
                            var attrName = input.attributes[j].name;
                            if (attrName !== 'type' && attrName !== 'value') {
                                input.removeAttribute(attrName);
                            }
                        }
                    }
                    for (var attr in params.inputAttributes) {
                        input.setAttribute(attr, params.inputAttributes[attr]);
                    }
                }
                inputContainer.className = inputClass;
                if (params.inputClass) {
                    addClass(inputContainer, params.inputClass);
                }
                hide(inputContainer);
            }
            var populateInputOptions = void 0;
            switch (params.input) {
            case 'text':
            case 'email':
            case 'password':
            case 'number':
            case 'tel':
            case 'url':
                input = getChildByClass(modal, swalClasses.input);
                input.value = params.inputValue;
                input.placeholder = params.inputPlaceholder;
                input.type = params.input;
                show(input);
                break;
            case 'file':
                input = getChildByClass(modal, swalClasses.file);
                input.placeholder = params.inputPlaceholder;
                input.type = params.input;
                show(input);
                break;
            case 'range':
                var range = getChildByClass(modal, swalClasses.range);
                var rangeInput = range.querySelector('input');
                var rangeOutput = range.querySelector('output');
                rangeInput.value = params.inputValue;
                rangeInput.type = params.input;
                rangeOutput.value = params.inputValue;
                show(range);
                break;
            case 'select':
                var select = getChildByClass(modal, swalClasses.select);
                select.innerHTML = '';
                if (params.inputPlaceholder) {
                    var placeholder = document.createElement('option');
                    placeholder.innerHTML = params.inputPlaceholder;
                    placeholder.value = '';
                    placeholder.disabled = true;
                    placeholder.selected = true;
                    select.appendChild(placeholder);
                }
                populateInputOptions = function populateInputOptions(inputOptions) {
                    for (var optionValue in inputOptions) {
                        var option = document.createElement('option');
                        option.value = optionValue;
                        option.innerHTML = inputOptions[optionValue];
                        if (params.inputValue === optionValue) {
                            option.selected = true;
                        }
                        select.appendChild(option);
                    }
                    show(select);
                    select.focus();
                };
                break;
            case 'radio':
                var radio = getChildByClass(modal, swalClasses.radio);
                radio.innerHTML = '';
                populateInputOptions = function populateInputOptions(inputOptions) {
                    for (var radioValue in inputOptions) {
                        var radioInput = document.createElement('input');
                        var radioLabel = document.createElement('label');
                        var radioLabelSpan = document.createElement('span');
                        radioInput.type = 'radio';
                        radioInput.name = swalClasses.radio;
                        radioInput.value = radioValue;
                        if (params.inputValue === radioValue) {
                            radioInput.checked = true;
                        }
                        radioLabelSpan.innerHTML = inputOptions[radioValue];
                        radioLabel.appendChild(radioInput);
                        radioLabel.appendChild(radioLabelSpan);
                        radioLabel.for = radioInput.id;
                        radio.appendChild(radioLabel);
                    }
                    show(radio);
                    var radios = radio.querySelectorAll('input');
                    if (radios.length) {
                        radios[0].focus();
                    }
                };
                break;
            case 'checkbox':
                var checkbox = getChildByClass(modal, swalClasses.checkbox);
                var checkboxInput = getInput('checkbox');
                checkboxInput.type = 'checkbox';
                checkboxInput.value = 1;
                checkboxInput.id = swalClasses.checkbox;
                checkboxInput.checked = Boolean(params.inputValue);
                var label = checkbox.getElementsByTagName('span');
                if (label.length) {
                    checkbox.removeChild(label[0]);
                }
                label = document.createElement('span');
                label.innerHTML = params.inputPlaceholder;
                checkbox.appendChild(label);
                show(checkbox);
                break;
            case 'textarea':
                var textarea = getChildByClass(modal, swalClasses.textarea);
                textarea.value = params.inputValue;
                textarea.placeholder = params.inputPlaceholder;
                show(textarea);
                break;
            case null:
                break;
            default:
                console.error('SweetAlert2: Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "' + params.input + '"');
                break;
            }
            if (params.input === 'select' || params.input === 'radio') {
                if (params.inputOptions instanceof Promise) {
                    sweetAlert.showLoading();
                    params.inputOptions.then(function (inputOptions) {
                        sweetAlert.hideLoading();
                        populateInputOptions(inputOptions);
                    });
                } else if (_typeof(params.inputOptions) === 'object') {
                    populateInputOptions(params.inputOptions);
                } else {
                    console.error('SweetAlert2: Unexpected type of inputOptions! Expected object or Promise, got ' + _typeof(params.inputOptions));
                }
            }
            openModal(params.animation, params.onOpen);
            if (params.allowEnterKey) {
                setFocus(-1, 1);
            } else {
                if (document.activeElement) {
                    document.activeElement.blur();
                }
            }
            getContainer().scrollTop = 0;
            if (typeof MutationObserver !== 'undefined' && !swal2Observer) {
                swal2Observer = new MutationObserver(sweetAlert.recalculateHeight);
                swal2Observer.observe(modal, {
                    childList: true,
                    characterData: true,
                    subtree: true
                });
            }
        });
    };
    sweetAlert.isVisible = function () {
        return !!getModal();
    };
    sweetAlert.queue = function (steps) {
        queue = steps;
        var resetQueue = function resetQueue() {
            queue = [];
            document.body.removeAttribute('data-swal2-queue-step');
        };
        var queueResult = [];
        return new Promise(function (resolve, reject) {
            (function step(i, callback) {
                if (i < queue.length) {
                    document.body.setAttribute('data-swal2-queue-step', i);
                    sweetAlert(queue[i]).then(function (result) {
                        queueResult.push(result);
                        step(i + 1, callback);
                    }, function (dismiss) {
                        resetQueue();
                        reject(dismiss);
                    });
                } else {
                    resetQueue();
                    resolve(queueResult);
                }
            }(0));
        });
    };
    sweetAlert.getQueueStep = function () {
        return document.body.getAttribute('data-swal2-queue-step');
    };
    sweetAlert.insertQueueStep = function (step, index) {
        if (index && index < queue.length) {
            return queue.splice(index, 0, step);
        }
        return queue.push(step);
    };
    sweetAlert.deleteQueueStep = function (index) {
        if (typeof queue[index] !== 'undefined') {
            queue.splice(index, 1);
        }
    };
    sweetAlert.close = sweetAlert.closeModal = function (onComplete) {
        var container = getContainer();
        var modal = getModal();
        if (!modal) {
            return;
        }
        removeClass(modal, swalClasses.show);
        addClass(modal, swalClasses.hide);
        clearTimeout(modal.timeout);
        resetPrevState();
        var removeModalAndResetState = function removeModalAndResetState() {
            if (container.parentNode) {
                container.parentNode.removeChild(container);
            }
            removeClass(document.documentElement, swalClasses.shown);
            removeClass(document.body, swalClasses.shown);
            undoScrollbar();
            undoIOSfix();
        };
        if (animationEndEvent && !hasClass(modal, swalClasses.noanimation)) {
            modal.addEventListener(animationEndEvent, function swalCloseEventFinished() {
                modal.removeEventListener(animationEndEvent, swalCloseEventFinished);
                if (hasClass(modal, swalClasses.hide)) {
                    removeModalAndResetState();
                }
            });
        } else {
            removeModalAndResetState();
        }
        if (onComplete !== null && typeof onComplete === 'function') {
            setTimeout(function () {
                onComplete(modal);
            });
        }
    };
    sweetAlert.clickConfirm = function () {
        return getConfirmButton().click();
    };
    sweetAlert.clickCancel = function () {
        return getCancelButton().click();
    };
    sweetAlert.showLoading = sweetAlert.enableLoading = function () {
        var modal = getModal();
        if (!modal) {
            sweetAlert('');
        }
        var buttonsWrapper = getButtonsWrapper();
        var confirmButton = getConfirmButton();
        var cancelButton = getCancelButton();
        show(buttonsWrapper);
        show(confirmButton, 'inline-block');
        addClass(buttonsWrapper, swalClasses.loading);
        addClass(modal, swalClasses.loading);
        confirmButton.disabled = true;
        cancelButton.disabled = true;
    };
    sweetAlert.setDefaults = function (userParams) {
        if (!userParams || (typeof userParams === 'undefined' ? 'undefined' : _typeof(userParams)) !== 'object') {
            return console.error('SweetAlert2: the argument for setDefaults() is required and has to be a object');
        }
        for (var param in userParams) {
            if (!defaultParams.hasOwnProperty(param) && param !== 'extraParams') {
                console.warn('SweetAlert2: Unknown parameter "' + param + '"');
                delete userParams[param];
            }
        }
        _extends(modalParams, userParams);
    };
    sweetAlert.resetDefaults = function () {
        modalParams = _extends({}, defaultParams);
    };
    sweetAlert.noop = function () {
    };
    sweetAlert.version = '6.6.6';
    sweetAlert.default = sweetAlert;
    return sweetAlert;
}));
if (window.Sweetalert2)
    window.sweetAlert = window.swal = window.Sweetalert2;
define('appServices', [
    'angular',
    'js.cookie',
    'baseSet',
    'jquery',
    'sweetalert',
    'Ps'
], function (angular, Cookies, baseSet, $, swal) {
    'use strict';
    var userInfo = Cookies.getJSON('user') ? Cookies.getJSON('user') : {};
    console.log(userInfo);
    var appServices = angular.module('app.services', []);
    appServices.service('login', function ($http, $rootScope) {
        this.check = function (fn) {
            if (userInfo != null && userInfo != undefined && userInfo != '' && userInfo.token) {
                fn(userInfo.token);
            } else {
                window.location.href = 'login.html';
            }
            ;
        };
        this.logout = function (e) {
            Cookies.remove('user');
            window.location.href = 'login.html';
        };
    });
    appServices.service('appHttp', function ($http, login) {
        this.appGet = function (obj) {
            var suc = obj.success ? obj.success : function (e) {
                console.log(e);
            };
            var com = obj.complete ? obj.complete : function (e) {
            };
            var err = obj.error ? obj.error : function (e) {
                console.log(e);
            };
            delete obj.success;
            delete obj.complete;
            delete obj.error;
            login.check(function (token) {
                var getModel = {
                    url: '',
                    method: 'GET',
                    params: '',
                    headers: { token: token }
                };
                getModel = angular.merge({}, getModel, obj);
                $http(getModel).then(function (response) {
                    if (response.data.code == 0) {
                        suc(response.data.data);
                        if (getModel.deferred) {
                            getModel.deferred.resolve(response.data.data);
                        }
                    } else {
                        if (response.data.code == -1000) {
                            swal({
                                title: '登录信息异常,请重新登录',
                                confirmButtonText: '确定',
                                onClose: function () {
                                    window.location.href = 'login.html';
                                }
                            });
                        } else {
                            swal({
                                title: '错误信息',
                                text: response.data.message,
                                type: 'error',
                                confirmButtonText: '确定'
                            }).then(function () {
                                $('.inline-loading').remove();
                            });
                        }
                    }
                    com(response);
                }, function (response) {
                    console.log(response);
                    swal({
                        title: '错误信息',
                        text: '服务器/网络错误\uFF0C请稍后再试\u3002',
                        type: 'error',
                        confirmButtonText: '确定',
                        debug: true,
                        errorInfo: JSON.stringify(response)
                    }).then(function () {
                        console.log(666);
                        $('.inline-loading').remove();
                    });
                    err(response);
                });
            });
        };
        this.appDel = function (obj) {
            var suc = obj.success ? obj.success : function (e) {
                console.log(e);
            };
            var com = obj.complete ? obj.complete : function (e) {
            };
            var err = obj.error ? obj.error : function (e) {
                console.log(e);
            };
            delete obj.success;
            delete obj.complete;
            delete obj.error;
            login.check(function (token, id) {
                var delModel = {
                    url: '',
                    method: 'DELETE',
                    params: '',
                    headers: {}
                };
                delModel = angular.merge({}, delModel, obj);
                $http(delModel).then(function (response) {
                    if (response.data.code == 0) {
                        suc(response.data.data);
                        if (delModel.deferred) {
                            delModel.deferred.resolve(666);
                        }
                    } else {
                        if (response.data.code == -1000) {
                            swal({
                                title: '登录信息异常,请重新登录',
                                confirmButtonText: '确定',
                                onClose: function () {
                                    window.location.href = 'login.html';
                                }
                            });
                        } else {
                            swal({
                                title: '错误信息',
                                text: response.data.message,
                                type: 'error',
                                confirmButtonText: '确定'
                            }).then(function () {
                                $('.inline-loading').remove();
                            });
                        }
                    }
                    com(response);
                }, function (response) {
                    console.log(response);
                    swal({
                        title: '错误信息',
                        text: '服务器/网络错误\uFF0C请稍后再试\u3002',
                        type: 'error',
                        confirmButtonText: '确定',
                        debug: true,
                        errorInfo: JSON.stringify(response)
                    }).then(function () {
                        $('.inline-loading').remove();
                    });
                    err(response);
                });
            });
        };
        this.appPost = function (obj) {
            var suc = obj.success ? obj.success : function (e) {
                console.log(e);
            };
            var com = obj.complete ? obj.complete : function (e) {
            };
            var err = obj.error ? obj.error : function (e) {
                console.log(e);
            };
            delete obj.success;
            delete obj.complete;
            delete obj.error;
            login.check(function (token) {
                var getModel = {
                    url: '',
                    method: 'POST',
                    data: '',
                    headers: { token: token }
                };
                getModel = angular.merge({}, getModel, obj);
                $http(getModel).then(function (response) {
                    if (response.data.code == 0) {
                        suc(response.data.data);
                    } else {
                        if (response.data.code == -1000) {
                            swal({
                                title: '登录信息异常,请重新登录',
                                confirmButtonText: '确定',
                                onClose: function () {
                                    window.location.href = 'login.html';
                                }
                            });
                        } else {
                            swal({
                                title: '错误信息',
                                text: response.data.message,
                                type: 'error',
                                confirmButtonText: '确定'
                            }).then(function () {
                                $('.inline-loading').remove();
                            });
                        }
                    }
                    com(response);
                }, function (response) {
                    console.log(response);
                    swal({
                        title: '错误信息',
                        text: '服务器/网络错误\uFF0C请稍后再试\u3002',
                        type: 'error',
                        confirmButtonText: '确定',
                        debug: true,
                        errorInfo: JSON.stringify(response)
                    }).then(function () {
                        $('.inline-loading').remove();
                    });
                    err(response);
                });
            });
        };
    });
    appServices.service('appApi', [
        '$q',
        'appHttp',
        function ($q, appHttp) {
            this.kpiGetNav = function (suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/kpi/getNav',
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.kpiGetData = function (id, suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/kpi/getData',
                    params: { id: id },
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.getRewardNav = function (suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/reward/getAllBox',
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.getRewardOrder = function (params, suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/reward/getRewardOrder',
                    params: params,
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.sendReCallOrder = function (data, suc, com, err) {
                appHttp.appPost({
                    url: baseSet.postServer + 'manager/reward/sendReCallOrder',
                    data: data,
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.getServerBox = function (suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/serverSetting/getServerBox',
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.getServerInfo = function (id, suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/serverSetting/getServerInfo',
                    params: { serverId: id },
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.serverPost = function (data, suc, com, err) {
                appHttp.appPost({
                    url: baseSet.postServer + 'manager/serverSetting/update',
                    data: data,
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.getInform = function (suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/broadcast/history',
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.sendInform = function (data, suc, com, err) {
                appHttp.appPost({
                    url: baseSet.postServer + 'manager/broadcast/send',
                    data: data,
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.deleteInform = function (data, suc, com, err) {
                appHttp.appPost({
                    url: baseSet.postServer + 'manager/broadcast/delete',
                    data: data,
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.getPlayerInfo = function (params, suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/user/search',
                    params: params,
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.userUpdate = function (data, suc, com, err) {
                appHttp.appPost({
                    url: baseSet.postServer + 'manager/user/update',
                    data: [data],
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.getGameSetting = function (id, suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/gameSetting/getGameSetting',
                    params: { serverId: id },
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.getGameServerInfo = function (suc, com, err) {
                appHttp.appGet({
                    url: baseSet.postServer + 'manager/gameSetting/getServerBox',
                    success: suc,
                    complete: com,
                    error: err
                });
            };
            this.setGameServerInfo = function (data, suc, com, err) {
                appHttp.appPost({
                    url: baseSet.postServer + 'manager/gameSetting/update',
                    data: data,
                    success: suc,
                    complete: com,
                    error: err
                });
            };
        }
    ]);
    appServices.service('debug', function () {
        $(document).off('click', '.icon-debug', function () {
        });
        $(document).on('click', '.icon-debug', function () {
            swal({
                title: '错误信息',
                text: JSON.stringify($(this).data('config')),
                type: 'error',
                confirmButtonText: '确定',
                debug: false
            });
        });
    });
    appServices.service('dropdownMenuScrollbar', function ($rootScope) {
        $(document).on('shown.bs.dropdown', '.dropdown', function () {
            var $list = $(this).find('ul').parent('div');
            var $bar = $list.find('.ps-scrollbar-y');
            var listHiehgt = $list.find('ul').height();
            var $input = $(this).find('input');
            console.log($list.outerHeight());
            if ($list.find('li').length == 0 || $list.outerHeight() < 205)
                return;
            if ($input.length > 0) {
                $input.on('input', function () {
                    $list.perfectScrollbar('update');
                });
            }
            ;
            if ($list.find('.ps-scrollbar-y-rail').length > 0) {
                console.log(666);
                $list.perfectScrollbar('update');
            } else {
                $list.perfectScrollbar({ suppressScrollX: true });
            }
            ;
        });
    });
});
define('appFactorys', [
    'angular',
    'moment',
    'jquery'
], function (angular, moment, $) {
    'use strict';
    var appFactorys = angular.module('app.factorys', []);
    appFactorys.factory('destroy', function ($rootScope) {
        return function (scope) {
            $rootScope.$on('$routeChangeSuccess', function (evt, next, current) {
                if (scope != null) {
                    scope.$destroy();
                }
                scope = null;
            });
        };
    });
    appFactorys.factory('chartDestroy', function ($rootScope) {
        return function (chart) {
            $rootScope.$on('$routeChangeSuccess', function (evt, next, current) {
                if (chart != null) {
                    chart.dispose();
                }
                chart = null;
            });
        };
    });
    appFactorys.factory('watch', function ($rootScope) {
        return function (fn) {
            var watch = $rootScope.$watch('appid', function (newVal, oldVal) {
                if (newVal != oldVal) {
                    fn(newVal, oldVal);
                }
            });
            $rootScope.$on('$routeChangeStart', function (evt, next, current) {
                if (current) {
                    watch();
                }
            });
        };
    });
    appFactorys.factory('meta', function ($rootScope) {
        return function (fn) {
            var meta = $rootScope.$watch('meta', function (newVal, oldVal) {
                if (newVal) {
                    fn(newVal, oldVal);
                }
            });
            $rootScope.$on('$routeChangeStart', function (evt, next, current) {
                if (current) {
                    meta();
                }
            });
        };
    });
    appFactorys.factory('getMillisecond', function () {
        return function (d) {
            return moment(d).valueOf();
        };
    });
    appFactorys.factory('type', function () {
        return function (value) {
            var type = {};
            if (angular.isDefined(value)) {
                type.isDefined = true;
            }
            ;
            if (angular.isString(value)) {
                type.isString = true;
            }
            ;
            if (angular.isDate(value)) {
                type.isDate = true;
            }
            ;
            if (angular.isObject(value)) {
                type.isObject = true;
            }
            ;
            if (angular.isFunction(value)) {
                type.isFunction = true;
            }
            ;
            if (angular.isElement(value)) {
                type.isElement = true;
            }
            ;
            if (angular.isNumber(value)) {
                type.isNumber = true;
            }
            ;
            if (angular.isArray(value)) {
                type.isArray = true;
            }
            ;
            if (angular.isUndefined(value)) {
                type.isUndefined = true;
            }
            ;
            return type;
        };
    });
    appFactorys.factory('isArray', function ($rootScope) {
        return function (value) {
            if (value instanceof Array || (!(value instanceof Object) && Object.prototype.toString.call(value) == '[object Array]' || typeof value.length == 'number' && typeof value.splice != 'undefined' && typeof value.propertyIsEnumerable != 'undefined' && !value.propertyIsEnumerable('splice'))) {
                return true;
            }
        };
    });
    appFactorys.factory('hexToRgba', function ($rootScope) {
        return function (hex, o) {
            var color = [], rgb = [], opacity = o ? o : 1;
            hex = hex.replace(/#/, '');
            if (hex.length == 3) {
                var tmp = [];
                for (var i = 0; i < 3; i++) {
                    tmp.push(hex.charAt(i) + hex.charAt(i));
                }
                ;
                hex = tmp.join('');
            }
            ;
            for (var i = 0; i < 3; i++) {
                color[i] = '0x' + hex.substr(i * 2, 2);
                rgb.push(parseInt(Number(color[i])));
            }
            ;
            return 'rgba(' + rgb.join(',') + ',' + opacity + ')';
        };
    });
    appFactorys.factory('rgbToHex ', function ($rootScope) {
        return function (rgb) {
            var color = rgb.toString().match(/\d+/g);
            var hex = '#';
            for (var i = 0; i < 3; i++) {
                hex += ('0' + Number(color[i]).toString(16)).slice(-2);
            }
            return hex;
        };
    });
    appFactorys.factory('dataFormat', function () {
        return function (data) {
            if (data == null || data == undefined) {
                return '-';
            }
            ;
            if (data > 1500000000000) {
                return moment(data).format('YYYY-MM-DD HH:mm');
            }
            ;
            return data;
        };
    });
});
define('appTemplates', ['angular'], function (angular) {
    try {
        module = angular.module('app.template');
    } catch (e) {
        module = angular.module('app.template', []);
    }
    ;
    angular.module('app.template').run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('console.html', '<div class="module-wrapper server"><div class="row"><div class="col-xs-12"><div class="x_panel"><div class="x_title"><h2>日志统计</h2></div><div class="x_content"><div class="filter-bar form-line clearfix"><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">服务器选择</div><div class="channel-drapdown dropdown select form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="filterBarModel.serverName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><div class="dropdown-menu search animated fadeInUpSmall fast" role="menu"><ng-input class="sm" icon-left="&#xe623;" model="inputKey" type="text" placeholder="搜索服务器"></ng-input><div class="dropdown-list clearfix"><ul class="clearfix"><li role="presentation" ng-repeat="item in serverBox" ng-bind="item.serverName" ng-click="serverClick($event,item.serverName,item.serverId)" ng-show="drapListSearch(item.serverName)" ng-class="{\'active\':filterBarModel.serverId===item.serverId}"></li></ul></div></div></div></div><div class="pull-right form-item btn-wrap clearfix col-md-3 col-sm-12 col-xs-12"></div></div><table class="table table-striped table-hover table-bordered console-table"><thead><tr><th>时间</th><th>操作内容</th><th>修改内容</th></tr></thead><tbody></tbody></table></div></div></div></div></div>');
        }
    ]);
    angular.module('app.template').run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('delivery.html', '<div class="module-wrapper"><div class="row"><div class="col-xs-12"><div class="x_panel"><div class="x_title"><h2>发货管理</h2></div><div class="x_content"><!--filter-bar--><div class="filter-bar form-line clearfix"><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">货物类别</div><div class="channel-drapdown dropdown select form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="filterBarModel.itemTypeName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><div class="dropdown-menu search animated fadeInUpSmall fast" role="menu"><ng-input class="sm" icon-left="&#xe623;" model="inputKey" type="text" placeholder="搜索货物类别"></ng-input><div class="dropdown-list clearfix"><ul class="clearfix"><li role="presentation" ng-repeat="item in filterBarData.itemTypeBoxModel.itemTypeModelList" ng-bind="item.itemTypeName" ng-click="typeClick($event,item.itemTypeName,item.itemTypeId)" ng-show="drapListSearch(item.itemTypeName)" ng-class="{\'active\':filterBarModel.itemTypeId===item.itemTypeId}"></li></ul></div></div></div></div><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">状态</div><div class="channel-drapdown dropdown form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="filterBarModel.orderTypeName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><ul class="dropdown-menu animated fadeInUpSmall fast" role="menu"><li role="presentation" ng-repeat="item in filterBarData.orderTypeBoxModel.orderTypeModelList" ng-bind="item.orderTypeName" ng-click="stateClick($event,item.orderTypeName,item.orderTypeId)" ng-class="{\'active\':filterBarModel.orderTypeId===item.orderTypeId}"></li></ul></div></div><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">日期范围</div><div class="form-content has-daterangepicker"><date-range-picker class="md" model="QueryDate" picker="picker"></date-range-picker></div></div><div class="form-item btn-wrap clearfix col-md-3 col-sm-12 col-xs-12"><button type="submit" class="btn btn-success btn-query" ng-click="Query($event)"><span>查询</span> <i class="icon-loading"></i></button></div></div><!--datatable--><table class="table table-striped table-hover table-bordered delivery-data"><thead><tr><th>uid</th><th>服务单号</th><th>货物类别</th><th>数量</th><th>手机号</th><th>地址</th><th>状态</th><th>供货商单号</th><th>异常原因</th><th>订单时间</th><th>操作</th></tr></thead><tbody></tbody></table></div></div></div></div></div>');
        }
    ]);
    angular.module('app.template').run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('game.html', '<div class="module-wrapper"><div class="row"><div class="col-xs-12"><div class="x_panel"><div class="x_title"><h2>游戏管理</h2></div><div class="x_content"><!--filter-bar--><div class="filter-bar form-line clearfix"><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">服务器选择</div><div class="channel-drapdown dropdown select form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="filterBarModel.serverName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><div class="dropdown-menu search animated fadeInUpSmall fast" role="menu"><ng-input class="sm" icon-left="&#xe623;" model="inputKey" type="text" placeholder="搜索服务器"></ng-input><div class="dropdown-list clearfix"><ul class="clearfix"><li role="presentation" ng-repeat="item in serverBox" ng-bind="item.serverName" ng-click="serverClick($event,item.serverName,item.serverId)" ng-show="drapListSearch(item.serverName)" ng-class="{\'active\':filterBarModel.serverId===item.serverId}"></li></ul></div></div></div></div><div class="pull-right form-item btn-wrap clearfix col-md-3 col-sm-12 col-xs-12"><button type="submit" class="btn btn-success btn-query" ng-click="addGame($event)"><span>新增游戏配置</span> <i class="icon-loading"></i></button></div></div><!--datatable--><table class="table table-striped table-hover table-bordered game-table"><thead><tr><th>操作</th><th>编号</th><th>奖品大类型</th><th>比赛类别</th><th>比赛名称</th><th>比赛类型</th><th>最少开赛人数</th><th>最多开赛人数</th><th>金币场最低入门数量</th><th>金币场门槛最高</th><th>房费</th><!--10--><th>封顶分</th><th>初始底分</th><th>底分增长间隔时间</th><th>默认倍数</th><th>报名消耗物品id和数量</th><th>对应图标显示</th><th>奖励获取的最后为名次</th><th>初始开始分</th><th>开始淘汰的剩余人数</th><th>进入淘汰赛的人数</th><!--20--><th>淘汰赛进行的局数</th><th>定时赛开始的每个月的日期</th><th>比赛提前显示小时</th><th>比赛提前报名分钟</th><th>定时赛开始的每周几</th><th>定时赛开启的小时</th><th>定时赛开始的分钟</th><th>定时赛允许迟到的秒数</th><th>开放标志</th><!--29--></tr></thead><tbody></tbody></table></div></div></div></div></div><div class="modal fade custom-modal game-modal form-modal" tabindex="-1" role="dialog" aria-hidden="true"><div class="modal-dialog modal-md"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">\xD7</span></button><h4 class="modal-title text-center" id="myModalLabel"><span class="pull-left">{{title}}游戏配置</span></h4></div><div class="modal-body"><div class="body-container" ng-class="{\'success overflow\':success}"><div class="submit-success transition-05"><div class="center"><p class="icon"><i class="icon">&#xe60c;</i></p><p class="text">提交成功</p></div></div><form role="form" name="modalForm" class="clearfix transition-05" novalidate><div class="game-form-wrapper"><div class="form-line pull-left"><div class="form-tag">奖品大类型</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.match_item_type" valid="true" required="required" focus="focus" name="match_item_type"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">比赛类别</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.game_type" valid="true" required="required" focus="focus" name="game_type"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">比赛名称</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.name" valid="true" required="required" focus="focus" name="name"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">比赛类型</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.match_mode" valid="true" required="required" focus="focus" name="match_mode"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">最少开赛人数</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.min_start_player_num" valid="true" required="required" focus="focus" name="min_start_player_num"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">最多开赛人数</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.max_start_player_num" valid="true" required="required" focus="focus" name="max_start_player_num"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">金币场最低入门数量</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.can_int_min_coin" valid="true" required="required" focus="focus" name="can_int_min_coin"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">金币场门槛最高</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.can_in_max_coin" valid="true" required="required" focus="focus" name="can_in_max_coin"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">房费</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.table_cost" valid="true" required="required" focus="focus" name="table_cost"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">封顶分</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.max_point" valid="true" required="required" focus="focus" name="max_point"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">初始底分</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.init_base" valid="true" required="required" focus="focus" name="init_base"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">底分增长间隔时间</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.base_increase_second" valid="true" required="required" focus="focus" name="base_increase_second"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">默认倍数</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.base_times" valid="true" required="required" focus="focus" name="base_times"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">报名消耗物品id和数量</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.sign_cost" valid="true" required="required" focus="focus" name="sign_cost"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">对应图标显示</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.icon_id" valid="true" required="required" focus="focus" name="icon_id"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">奖励获取的最后为名次</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.winner_rewards" valid="true" required="required" focus="focus" name="winner_rewards"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">初始开始分</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.init_start_scores" valid="true" required="required" focus="focus" name="init_start_scores"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">开始淘汰的剩余人数</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.remain_player_num" valid="true" required="required" focus="focus" name="remain_player_num"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">进入淘汰赛的人数</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.second_round_player_number" valid="true" required="required" focus="focus" name="second_round_player_number"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">淘汰赛进行的局数</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.phase2_game_rounds" valid="true" required="required" focus="focus" name="phase2_game_rounds"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">比赛提前显示小时</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.early_show_hour" valid="true" required="required" focus="focus" name="early_show_hour"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">比赛提前报名分钟</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.early_exam_minute" valid="true" required="required" focus="focus" name="early_exam_minute"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">定时赛开始的每个月的日期</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.date_mon_day" valid="true" required="required" focus="focus" name="date_mon_day"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">定时赛开始的每周几</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.date_week_day" valid="true" required="required" focus="focus" name="date_week_day"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">定时赛开启的小时</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.date_day_hour" valid="true" required="required" focus="focus" name="date_day_hour"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">定时赛开始的分钟</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.date_hour_minute" valid="true" required="required" focus="focus" name="date_hour_minute"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">定时赛允许迟到的秒数</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.allow_late_minutes" valid="true" required="required" focus="focus" name="allow_late_minutes"></ng-input></div></div><div class="form-line pull-left last"><div class="form-tag">开放标志</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.open_flag" valid="true" required="required" focus="focus" name="open_flag"></ng-input></div></div></div></form></div></div><div class="modal-footer"><button type="button" class="btn btn-success btn-submit" ng-click="submitForm($event)" ng-bind="success?\'关闭\':\'提交\'"></button></div></div></div></div>');
        }
    ]);
    angular.module('app.template').run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('inform.html', '<div class="module-wrapper"><div class="row"><div class="col-xs-12"><div class="x_panel"><div class="x_title"><h2>广播管理</h2></div><div class="x_content"><!--filter-bar--><div class="filter-bar form-line clearfix"><!--<div class="form-item col-md-3 col-sm-12 col-xs-12">\n' + '\t\t\t\t\t\t\t<div class="form-tag">广播类型</div>\n' + '\t\t\t\t\t\t\t<div class="channel-drapdown dropdown form-content transition-02">\n' + '\t\t\t\t\t\t\t\t<a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false">\n' + '\t\t\t\t\t\t\t\t\t<span class="val pull-left" ng-bind="filterBarModel.serverName"></span>\n' + '\t\t\t\t\t\t\t\t\t<div class="pull-right">\n' + '\t\t\t\t\t\t\t\t\t\t<span class="caret icon-arrow"></span>\n' + '\t\t\t\t\t\t\t\t\t</div>\n' + '\t\t\t\t\t\t\t\t</a>\n' + '\t\t\t\t\t\t\t\t<ul class="dropdown-menu animated fadeInUpSmall fast" role="menu">\n' + '\t\t\t\t\t\t\t\t\t<li role="presentation" ng-repeat="item in serverBox" ng-bind="item.serverName" ng-click="serverClick($event,item.serverName,item.serverId)" ng-class="{\'active\':filterBarModel.serverId===item.serverId}"></li>\n' + '\t\t\t\t\t\t\t\t</ul>\n' + '\t\t\t\t\t\t\t</div>\n' + '\t\t\t\t\t\t</div>--><div class="form-item btn-wrap clearfix col-md-3 col-sm-12 col-xs-12"><button type="submit" class="btn btn-success btn-query" ng-click="Send($event)"><span>发送</span> <i class="icon-loading"></i></button></div></div><!--datatable--><table class="table table-striped table-hover table-bordered inform-data"><thead><tr><th>广播内容</th><th>广播类型</th><th>发送时间</th><th>发送人</th><!--<th>操作</th>--></tr></thead><tbody></tbody></table></div></div></div></div></div><div class="modal fade custom-modal inform-modal form-modal" tabindex="-1" role="dialog" aria-hidden="true"><div class="modal-dialog modal-md"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">\xD7</span></button><h4 class="modal-title text-center" id="myModalLabel"><span class="pull-left">发送广播</span></h4></div><div class="modal-body"><div class="body-container" ng-class="{\'success overflow\':success}"><div class="submit-success transition-05"><div class="center"><p class="icon"><i class="icon">&#xe60c;</i></p><p class="text">提交成功</p></div></div><form role="form" name="modalForm" class="clearfix transition-05" novalidate><div class="form-line pull-left"><div class="form-tag">服务器</div><div class="dropdown form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="formModel.serverName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><ul class="dropdown-menu animated fadeInUpSmall fast" role="menu"><li role="presentation" ng-repeat="item in serverBox" ng-bind="item.serverName" ng-click="serverClick($event,item.serverName,item.serverId)" ng-class="{\'active\':formModel.serverId===item.serverId}"></li></ul></div></div><div class="form-line pull-left has-textarea"><div class="form-tag">信息</div><div class="form-input"><div class="textarea-wrapper"><textarea name="message" ng-model="formModel.message" placeholder="请输入广播内容..." required></textarea><span class="error-lable" ng-show="(modalForm.message.$error.required&&modalForm.message.$touched)||(modalForm.message.$error.required&&modalForm.$submitted)">广播内容不可为空</span></div></div></div></form></div></div><div class="modal-footer"><button type="button" class="btn btn-success btn-submit" ng-click="submitForm($event)" ng-bind="success?\'关闭\':\'提交\'"></button></div></div></div></div>');
        }
    ]);
    angular.module('app.template').run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('kpi.html', '<div class="module-wrapper"><div class="row"><div class="col-xs-12"><div class="x_panel"><div class="x_title"><h2>数据统计</h2></div><div class="x_content"><!--filter-bar--><div class="filter-bar form-line clearfix"><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">统计类型</div><div class="channel-drapdown dropdown form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="filterBarModel.navName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><ul class="dropdown-menu animated fadeInUpSmall fast" role="menu"><li role="presentation" ng-repeat="item in allType" ng-bind="item.navName" ng-click="navClick($event,item.navName,item.kpiMetaModelList)" ng-class="{\'active\':filterBarModel.navName===item.navName}"></li></ul></div></div><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">统计选项</div><div class="channel-drapdown dropdown form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="filterBarModel.kpiName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><ul class="dropdown-menu animated fadeInUpSmall fast" role="menu"><li role="presentation" ng-repeat="item in filterBarModel.kpiMetaModelList" ng-bind="item.kpiName" ng-click="kpiClick($event,item.kpiName,item.kpiId)" ng-class="{\'active\':filterBarModel.kpiId===item.kpiId}"></li></ul></div></div><div class="form-item btn-wrap clearfix col-md-3 col-sm-12 col-xs-12"><button type="submit" class="btn btn-success btn-query" ng-click="Query($event)"><span>查询</span> <i class="icon-loading"></i></button></div></div><!--datatable--><table class="table table-striped table-hover table-bordered kpi-data"><thead><tr><th>渠道名称</th><th>应用名称</th><th>已复用应用数</th><th>操作</th></tr></thead><tbody></tbody></table></div></div></div></div></div>');
        }
    ]);
    angular.module('app.template').run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('player.html', '<div class="module-wrapper"><div class="row"><div class="col-xs-12"><div class="x_panel"><div class="x_title"><h2>玩家管理</h2></div><div class="x_content"><!--filter-bar--><div class="filter-bar form-line clearfix"><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">服务器选择</div><div class="channel-drapdown dropdown select form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="filterBarModel.serverName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><div class="dropdown-menu search animated fadeInUpSmall fast" role="menu"><ng-input class="sm" icon-left="&#xe623;" model="inputKey" type="text" placeholder="搜索服务器"></ng-input><div class="dropdown-list clearfix"><ul class="clearfix"><li role="presentation" ng-repeat="item in serverBox" ng-bind="item.serverName" ng-click="serverClick($event,item.serverName,item.serverId)" ng-show="drapListSearch(item.serverName)" ng-class="{\'active\':filterBarModel.serverId===item.serverId}"></li></ul></div></div></div></div><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">玩家搜索</div><div class="form-input transition-02"><ng-input class="md" type="number" placeholder="请输入uid..." model="filterBarModel.userId" valid="true"></ng-input></div></div><!--<div class="form-item col-md-3 col-sm-12 col-xs-12">\n' + '\t\t\t\t\t\t\t<div class="form-tag">角色名</div>\n' + '\t\t\t\t\t\t\t<div class="form-input transition-02">\n' + '\t\t\t\t\t\t\t\t<ng-input class="md" placeholder="请输入角色名..." model="filterBarModel.userName"  focus="focus"></ng-input>\n' + '\t\t\t\t\t\t\t</div>\n' + '\t\t\t\t\t\t</div>--><div class="form-item btn-wrap clearfix col-md-3 col-sm-12 col-xs-12"><button type="submit" class="btn btn-success btn-query" ng-click="Query($event)"><span>查询</span> <i class="icon-loading"></i></button> <span class="error-msg">{{errorMsg}}</span></div></div><!--datatable--><table class="table table-striped table-hover table-bordered player-table"><thead><tr><th>pid</th><th>用户名</th><th>金币</th><th>钻石</th><th>门票</th><th>优惠券</th><th>操作</th></tr></thead><tbody></tbody></table></div></div></div></div></div><div class="modal fade custom-modal palery-modal form-modal" tabindex="-1" role="dialog" aria-hidden="true"><div class="modal-dialog modal-md"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">\xD7</span></button><h4 class="modal-title text-center" id="myModalLabel"><span class="pull-left">{{title}}</span></h4></div><div class="modal-body"><div class="body-container" ng-class="{\'success overflow\':success}"><div class="submit-success transition-05"><div class="center"><p class="icon"><i class="icon">&#xe60c;</i></p><p class="text">提交成功</p></div></div><form role="form" name="modalForm" class="clearfix transition-05" novalidate><div class="form-line pull-left" ng-if="formModel.actionId==4"><div class="form-tag">玩家名称</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.userName" valid="true" required="required" focus="focus" name="name"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">金币</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.coins" valid="true" required="required" focus="focus" name="money"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">钻石</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.diamond" valid="true" required="required" focus="focus" name="coins"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">门票</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.ticket" valid="true" required="required" focus="focus" name="ticket"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">优惠券</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.counpon" valid="true" required="required" focus="focus" name="points"></ng-input></div></div></form></div></div><div class="modal-footer"><button type="button" class="btn btn-success btn-submit" ng-click="submitForm($event)" ng-bind="success?\'关闭\':\'提交\'"></button></div></div></div></div>');
        }
    ]);
    angular.module('app.template').run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('server.html', '<div class="module-wrapper server"><div class="row"><div class="col-xs-12"><div class="x_panel"><div class="x_title"><h2>服务器管理</h2></div><div class="x_content"><div class="filter-bar form-line clearfix"><div class="form-item col-md-3 col-sm-12 col-xs-12"><div class="form-tag">服务器选择</div><div class="channel-drapdown dropdown select form-content transition-02"><a href="#" class="dropdown-toggle clearfix" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false"><span class="val pull-left" ng-bind="filterBarModel.serverName"></span><div class="pull-right"><span class="caret icon-arrow"></span></div></a><div class="dropdown-menu search animated fadeInUpSmall fast" role="menu"><ng-input class="sm" icon-left="&#xe623;" model="inputKey" type="text" placeholder="搜索服务器"></ng-input><div class="dropdown-list clearfix"><ul class="clearfix"><li role="presentation" ng-repeat="item in serverBox" ng-bind="item.serverName" ng-click="serverClick($event,item.serverName,item.serverId)" ng-show="drapListSearch(item.serverName)" ng-class="{\'active\':filterBarModel.serverId===item.serverId}"></li></ul></div></div></div></div><div class="pull-right form-item btn-wrap clearfix col-md-3 col-sm-12 col-xs-12"><!--<button type="submit" class="btn btn-success btn-query" ng-click="addServer($event)">\n' + '\t\t\t\t\t\t\t\t<span>新增服务器</span>\n' + '\t\t\t\t\t\t\t\t<i class="icon-loading"></i>\n' + '\t\t\t\t\t\t\t</button>--></div></div><table class="table table-striped table-hover table-bordered server-table"><thead><tr><th>服务器名称</th><th>ip:port</th><th>状态</th><th>操作</th></tr></thead><tbody></tbody></table></div></div></div></div></div><div class="modal fade custom-modal server-modal form-modal" tabindex="-1" role="dialog" aria-hidden="true"><div class="modal-dialog modal-md"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">\xD7</span></button><h4 class="modal-title text-center" id="myModalLabel"><span class="pull-left">{{title}}服务器</span></h4></div><div class="modal-body"><div class="body-container" ng-class="{\'success overflow\':success}"><div class="submit-success transition-05"><div class="center"><p class="icon"><i class="icon">&#xe60c;</i></p><p class="text">提交成功</p></div></div><form role="form" name="modalForm" class="clearfix transition-05" novalidate><div class="form-line pull-left"><div class="form-tag">服务器名称</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.serverName" valid="true" required="required" focus="focus" name="serverName"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">服务器ID</div><div class="form-input"><ng-input class="sm" type="number" placeholder="请输入..." form="modalForm" model="formModel.serverId" valid="true" required="required" focus="focus" name="serverId"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">ipPort</div><div class="form-input"><ng-input class="sm" placeholder="请输入..." form="modalForm" model="formModel.ipPort" valid="true" required="required" focus="focus" name="ipPort"></ng-input></div></div><div class="form-line pull-left"><div class="form-tag">gmPort</div><div class="form-input"><ng-input class="sm" type="number" placeholder="请输入..." form="modalForm" model="formModel.gmPort" valid="true" required="required" focus="focus" name="gmPort"></ng-input></div></div></form></div></div><div class="modal-footer"><button type="button" class="btn btn-success btn-submit" ng-click="submitForm($event)" ng-bind="success?\'关闭\':\'提交\'"></button></div></div></div></div>');
        }
    ]);
    angular.module('app.template').run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('user.html', '<div class="module-wrapper"><div class="row"><div class="col-xs-12"><div class="x_panel"><div class="x_title"><h2>系统人员配置</h2></div><div class="x_content"><div class="filter-bar form-line clearfix"><div class="form-item btn-wrap clearfix col-md-3 col-sm-12 col-xs-12"><button type="submit" class="btn btn-success btn-query" ng-click="Query($event)"><span>新增系统人员</span> <i class="icon-loading"></i></button></div></div><table class="table table-striped table-hover table-bordered user-table"><thead><tr><th>账号</th><th>姓名</th><th>角色</th><th>最后登录时间</th><th>最后登录ip</th><th>操作</th></tr></thead><tbody></tbody></table></div></div></div></div></div>');
        }
    ]);
});
define('appController', ['angular'], function (angular) {
    'use strict';
    var appController = angular.module('app.controller', []);
    appController.controller('navController', function ($scope, login) {
        $scope.logout = login.logout;
    });
});
(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define('datatables', ['jquery'], function ($) {
            return factory($, window, document);
        });
    } else if (typeof exports === 'object') {
        module.exports = function (root, $) {
            if (!root) {
                root = window;
            }
            if (!$) {
                $ = typeof window !== 'undefined' ? require('jquery') : require('jquery')(root);
            }
            return factory($, root, root.document);
        };
    } else {
        factory(jQuery, window, document);
    }
}(function ($, window, document, undefined) {
    'use strict';
    var DataTable = function (options) {
        this.$ = function (sSelector, oOpts) {
            return this.api(true).$(sSelector, oOpts);
        };
        this._ = function (sSelector, oOpts) {
            return this.api(true).rows(sSelector, oOpts).data();
        };
        this.api = function (traditional) {
            return traditional ? new _Api(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api(this);
        };
        this.fnAddData = function (data, redraw) {
            var api = this.api(true);
            var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);
            if (redraw === undefined || redraw) {
                api.draw();
            }
            return rows.flatten().toArray();
        };
        this.fnAdjustColumnSizing = function (bRedraw) {
            var api = this.api(true).columns.adjust();
            var settings = api.settings()[0];
            var scroll = settings.oScroll;
            if (bRedraw === undefined || bRedraw) {
                api.draw(false);
            } else if (scroll.sX !== '' || scroll.sY !== '') {
                _fnScrollDraw(settings);
            }
        };
        this.fnClearTable = function (bRedraw) {
            var api = this.api(true).clear();
            if (bRedraw === undefined || bRedraw) {
                api.draw();
            }
        };
        this.fnClose = function (nTr) {
            this.api(true).row(nTr).child.hide();
        };
        this.fnDeleteRow = function (target, callback, redraw) {
            var api = this.api(true);
            var rows = api.rows(target);
            var settings = rows.settings()[0];
            var data = settings.aoData[rows[0][0]];
            rows.remove();
            if (callback) {
                callback.call(this, settings, data);
            }
            if (redraw === undefined || redraw) {
                api.draw();
            }
            return data;
        };
        this.fnDestroy = function (remove) {
            this.api(true).destroy(remove);
        };
        this.fnDraw = function (complete) {
            this.api(true).draw(complete);
        };
        this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
            var api = this.api(true);
            if (iColumn === null || iColumn === undefined) {
                api.search(sInput, bRegex, bSmart, bCaseInsensitive);
            } else {
                api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
            }
            api.draw();
        };
        this.fnGetData = function (src, col) {
            var api = this.api(true);
            if (src !== undefined) {
                var type = src.nodeName ? src.nodeName.toLowerCase() : '';
                return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;
            }
            return api.data().toArray();
        };
        this.fnGetNodes = function (iRow) {
            var api = this.api(true);
            return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
        };
        this.fnGetPosition = function (node) {
            var api = this.api(true);
            var nodeName = node.nodeName.toUpperCase();
            if (nodeName == 'TR') {
                return api.row(node).index();
            } else if (nodeName == 'TD' || nodeName == 'TH') {
                var cell = api.cell(node).index();
                return [
                    cell.row,
                    cell.columnVisible,
                    cell.column
                ];
            }
            return null;
        };
        this.fnIsOpen = function (nTr) {
            return this.api(true).row(nTr).child.isShown();
        };
        this.fnOpen = function (nTr, mHtml, sClass) {
            return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
        };
        this.fnPageChange = function (mAction, bRedraw) {
            var api = this.api(true).page(mAction);
            if (bRedraw === undefined || bRedraw) {
                api.draw(false);
            }
        };
        this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
            var api = this.api(true).column(iCol).visible(bShow);
            if (bRedraw === undefined || bRedraw) {
                api.columns.adjust().draw();
            }
        };
        this.fnSettings = function () {
            return _fnSettingsFromNode(this[_ext.iApiIndex]);
        };
        this.fnSort = function (aaSort) {
            this.api(true).order(aaSort).draw();
        };
        this.fnSortListener = function (nNode, iColumn, fnCallback) {
            this.api(true).order.listener(nNode, iColumn, fnCallback);
        };
        this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
            var api = this.api(true);
            if (iColumn === undefined || iColumn === null) {
                api.row(mRow).data(mData);
            } else {
                api.cell(mRow, iColumn).data(mData);
            }
            if (bAction === undefined || bAction) {
                api.columns.adjust();
            }
            if (bRedraw === undefined || bRedraw) {
                api.draw();
            }
            return 0;
        };
        this.fnVersionCheck = _ext.fnVersionCheck;
        var _that = this;
        var emptyInit = options === undefined;
        var len = this.length;
        if (emptyInit) {
            options = {};
        }
        this.oApi = this.internal = _ext.internal;
        for (var fn in DataTable.ext.internal) {
            if (fn) {
                this[fn] = _fnExternApiFunc(fn);
            }
        }
        this.each(function () {
            var o = {};
            var oInit = len > 1 ? _fnExtend(o, options, true) : options;
            var i = 0, iLen, j, jLen, k, kLen;
            var sId = this.getAttribute('id');
            var bInitHandedOff = false;
            var defaults = DataTable.defaults;
            var $this = $(this);
            if (this.nodeName.toLowerCase() != 'table') {
                _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);
                return;
            }
            _fnCompatOpts(defaults);
            _fnCompatCols(defaults.column);
            _fnCamelToHungarian(defaults, defaults, true);
            _fnCamelToHungarian(defaults.column, defaults.column, true);
            _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));
            var allSettings = DataTable.settings;
            for (i = 0, iLen = allSettings.length; i < iLen; i++) {
                var s = allSettings[i];
                if (s.nTable == this || s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
                    var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
                    var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
                    if (emptyInit || bRetrieve) {
                        return s.oInstance;
                    } else if (bDestroy) {
                        s.oInstance.fnDestroy();
                        break;
                    } else {
                        _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);
                        return;
                    }
                }
                if (s.sTableId == this.id) {
                    allSettings.splice(i, 1);
                    break;
                }
            }
            if (sId === null || sId === '') {
                sId = 'DataTables_Table_' + DataTable.ext._unique++;
                this.id = sId;
            }
            var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
                'sDestroyWidth': $this[0].style.width,
                'sInstance': sId,
                'sTableId': sId
            });
            oSettings.nTable = this;
            oSettings.oApi = _that.internal;
            oSettings.oInit = oInit;
            allSettings.push(oSettings);
            oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();
            _fnCompatOpts(oInit);
            if (oInit.oLanguage) {
                _fnLanguageCompat(oInit.oLanguage);
            }
            if (oInit.aLengthMenu && !oInit.iDisplayLength) {
                oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
            }
            oInit = _fnExtend($.extend(true, {}, defaults), oInit);
            _fnMap(oSettings.oFeatures, oInit, [
                'bPaginate',
                'bLengthChange',
                'bFilter',
                'bSort',
                'bSortMulti',
                'bInfo',
                'bProcessing',
                'bAutoWidth',
                'bSortClasses',
                'bServerSide',
                'bDeferRender'
            ]);
            _fnMap(oSettings, oInit, [
                'asStripeClasses',
                'ajax',
                'fnServerData',
                'fnFormatNumber',
                'sServerMethod',
                'aaSorting',
                'aaSortingFixed',
                'aLengthMenu',
                'sPaginationType',
                'sAjaxSource',
                'sAjaxDataProp',
                'iStateDuration',
                'sDom',
                'bSortCellsTop',
                'iTabIndex',
                'fnStateLoadCallback',
                'fnStateSaveCallback',
                'renderer',
                'searchDelay',
                'rowId',
                [
                    'iCookieDuration',
                    'iStateDuration'
                ],
                [
                    'oSearch',
                    'oPreviousSearch'
                ],
                [
                    'aoSearchCols',
                    'aoPreSearchCols'
                ],
                [
                    'iDisplayLength',
                    '_iDisplayLength'
                ],
                [
                    'bJQueryUI',
                    'bJUI'
                ]
            ]);
            _fnMap(oSettings.oScroll, oInit, [
                [
                    'sScrollX',
                    'sX'
                ],
                [
                    'sScrollXInner',
                    'sXInner'
                ],
                [
                    'sScrollY',
                    'sY'
                ],
                [
                    'bScrollCollapse',
                    'bCollapse'
                ]
            ]);
            _fnMap(oSettings.oLanguage, oInit, 'fnInfoCallback');
            _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');
            _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');
            _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');
            _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');
            _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');
            _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');
            _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');
            _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');
            _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');
            _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');
            _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');
            oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);
            _fnBrowserDetect(oSettings);
            var oClasses = oSettings.oClasses;
            if (oInit.bJQueryUI) {
                $.extend(oClasses, DataTable.ext.oJUIClasses, oInit.oClasses);
                if (oInit.sDom === defaults.sDom && defaults.sDom === 'lfrtip') {
                    oSettings.sDom = '<"H"lfr>t<"F"ip>';
                }
                if (!oSettings.renderer) {
                    oSettings.renderer = 'jqueryui';
                } else if ($.isPlainObject(oSettings.renderer) && !oSettings.renderer.header) {
                    oSettings.renderer.header = 'jqueryui';
                }
            } else {
                $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
            }
            $this.addClass(oClasses.sTable);
            if (oSettings.iInitDisplayStart === undefined) {
                oSettings.iInitDisplayStart = oInit.iDisplayStart;
                oSettings._iDisplayStart = oInit.iDisplayStart;
            }
            if (oInit.iDeferLoading !== null) {
                oSettings.bDeferLoading = true;
                var tmp = $.isArray(oInit.iDeferLoading);
                oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
                oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
            }
            var oLanguage = oSettings.oLanguage;
            $.extend(true, oLanguage, oInit.oLanguage);
            if (oLanguage.sUrl) {
                $.ajax({
                    dataType: 'json',
                    url: oLanguage.sUrl,
                    success: function (json) {
                        _fnLanguageCompat(json);
                        _fnCamelToHungarian(defaults.oLanguage, json);
                        $.extend(true, oLanguage, json);
                        _fnInitialise(oSettings);
                    },
                    error: function () {
                        _fnInitialise(oSettings);
                    }
                });
                bInitHandedOff = true;
            }
            if (oInit.asStripeClasses === null) {
                oSettings.asStripeClasses = [
                    oClasses.sStripeOdd,
                    oClasses.sStripeEven
                ];
            }
            var stripeClasses = oSettings.asStripeClasses;
            var rowOne = $this.children('tbody').find('tr').eq(0);
            if ($.inArray(true, $.map(stripeClasses, function (el, i) {
                    return rowOne.hasClass(el);
                })) !== -1) {
                $('tbody tr', this).removeClass(stripeClasses.join(' '));
                oSettings.asDestroyStripes = stripeClasses.slice();
            }
            var anThs = [];
            var aoColumnsInit;
            var nThead = this.getElementsByTagName('thead');
            if (nThead.length !== 0) {
                _fnDetectHeader(oSettings.aoHeader, nThead[0]);
                anThs = _fnGetUniqueThs(oSettings);
            }
            if (oInit.aoColumns === null) {
                aoColumnsInit = [];
                for (i = 0, iLen = anThs.length; i < iLen; i++) {
                    aoColumnsInit.push(null);
                }
            } else {
                aoColumnsInit = oInit.aoColumns;
            }
            for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
                _fnAddColumn(oSettings, anThs ? anThs[i] : null);
            }
            _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
                _fnColumnOptions(oSettings, iCol, oDef);
            });
            if (rowOne.length) {
                var a = function (cell, name) {
                    return cell.getAttribute('data-' + name) !== null ? name : null;
                };
                $(rowOne[0]).children('th, td').each(function (i, cell) {
                    var col = oSettings.aoColumns[i];
                    if (col.mData === i) {
                        var sort = a(cell, 'sort') || a(cell, 'order');
                        var filter = a(cell, 'filter') || a(cell, 'search');
                        if (sort !== null || filter !== null) {
                            col.mData = {
                                _: i + '.display',
                                sort: sort !== null ? i + '.@data-' + sort : undefined,
                                type: sort !== null ? i + '.@data-' + sort : undefined,
                                filter: filter !== null ? i + '.@data-' + filter : undefined
                            };
                            _fnColumnOptions(oSettings, i);
                        }
                    }
                });
            }
            var features = oSettings.oFeatures;
            var loadedInit = function () {
                if (oInit.aaSorting === undefined) {
                    var sorting = oSettings.aaSorting;
                    for (i = 0, iLen = sorting.length; i < iLen; i++) {
                        sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
                    }
                }
                _fnSortingClasses(oSettings);
                if (features.bSort) {
                    _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
                        if (oSettings.bSorted) {
                            var aSort = _fnSortFlatten(oSettings);
                            var sortedColumns = {};
                            $.each(aSort, function (i, val) {
                                sortedColumns[val.src] = val.dir;
                            });
                            _fnCallbackFire(oSettings, null, 'order', [
                                oSettings,
                                aSort,
                                sortedColumns
                            ]);
                            _fnSortAria(oSettings);
                        }
                    });
                }
                _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
                    if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
                        _fnSortingClasses(oSettings);
                    }
                }, 'sc');
                var captions = $this.children('caption').each(function () {
                    this._captionSide = $(this).css('caption-side');
                });
                var thead = $this.children('thead');
                if (thead.length === 0) {
                    thead = $('<thead/>').appendTo($this);
                }
                oSettings.nTHead = thead[0];
                var tbody = $this.children('tbody');
                if (tbody.length === 0) {
                    tbody = $('<tbody/>').appendTo($this);
                }
                oSettings.nTBody = tbody[0];
                var tfoot = $this.children('tfoot');
                if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== '' || oSettings.oScroll.sY !== '')) {
                    tfoot = $('<tfoot/>').appendTo($this);
                }
                if (tfoot.length === 0 || tfoot.children().length === 0) {
                    $this.addClass(oClasses.sNoFooter);
                } else if (tfoot.length > 0) {
                    oSettings.nTFoot = tfoot[0];
                    _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
                }
                if (oInit.aaData) {
                    for (i = 0; i < oInit.aaData.length; i++) {
                        _fnAddData(oSettings, oInit.aaData[i]);
                    }
                } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
                    _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
                }
                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
                oSettings.bInitialised = true;
                if (bInitHandedOff === false) {
                    _fnInitialise(oSettings);
                }
            };
            if (oInit.bStateSave) {
                features.bStateSave = true;
                _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');
                _fnLoadState(oSettings, oInit, loadedInit);
            } else {
                loadedInit();
            }
        });
        _that = null;
        return this;
    };
    var _ext;
    var _Api;
    var _api_register;
    var _api_registerPlural;
    var _re_dic = {};
    var _re_new_lines = /[\r\n]/g;
    var _re_html = /<.*?>/g;
    var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
    var _re_escape_regex = new RegExp('(\\' + [
        '/',
        '.',
        '*',
        '+',
        '?',
        '|',
        '(',
        ')',
        '[',
        ']',
        '{',
        '}',
        '\\',
        '$',
        '^',
        '-'
    ].join('|\\') + ')', 'g');
    var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;
    var _empty = function (d) {
        return !d || d === true || d === '-' ? true : false;
    };
    var _intVal = function (s) {
        var integer = parseInt(s, 10);
        return !isNaN(integer) && isFinite(s) ? integer : null;
    };
    var _numToDecimal = function (num, decimalPoint) {
        if (!_re_dic[decimalPoint]) {
            _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
        }
        return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') : num;
    };
    var _isNumber = function (d, decimalPoint, formatted) {
        var strType = typeof d === 'string';
        if (_empty(d)) {
            return true;
        }
        if (decimalPoint && strType) {
            d = _numToDecimal(d, decimalPoint);
        }
        if (formatted && strType) {
            d = d.replace(_re_formatted_numeric, '');
        }
        return !isNaN(parseFloat(d)) && isFinite(d);
    };
    var _isHtml = function (d) {
        return _empty(d) || typeof d === 'string';
    };
    var _htmlNumeric = function (d, decimalPoint, formatted) {
        if (_empty(d)) {
            return true;
        }
        var html = _isHtml(d);
        return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;
    };
    var _pluck = function (a, prop, prop2) {
        var out = [];
        var i = 0, ien = a.length;
        if (prop2 !== undefined) {
            for (; i < ien; i++) {
                if (a[i] && a[i][prop]) {
                    out.push(a[i][prop][prop2]);
                }
            }
        } else {
            for (; i < ien; i++) {
                if (a[i]) {
                    out.push(a[i][prop]);
                }
            }
        }
        return out;
    };
    var _pluck_order = function (a, order, prop, prop2) {
        var out = [];
        var i = 0, ien = order.length;
        if (prop2 !== undefined) {
            for (; i < ien; i++) {
                if (a[order[i]][prop]) {
                    out.push(a[order[i]][prop][prop2]);
                }
            }
        } else {
            for (; i < ien; i++) {
                out.push(a[order[i]][prop]);
            }
        }
        return out;
    };
    var _range = function (len, start) {
        var out = [];
        var end;
        if (start === undefined) {
            start = 0;
            end = len;
        } else {
            end = start;
            start = len;
        }
        for (var i = start; i < end; i++) {
            out.push(i);
        }
        return out;
    };
    var _removeEmpty = function (a) {
        var out = [];
        for (var i = 0, ien = a.length; i < ien; i++) {
            if (a[i]) {
                out.push(a[i]);
            }
        }
        return out;
    };
    var _stripHtml = function (d) {
        return d.replace(_re_html, '');
    };
    var _areAllUnique = function (src) {
        if (src.length < 2) {
            return true;
        }
        var sorted = src.slice().sort();
        var last = sorted[0];
        for (var i = 1, ien = sorted.length; i < ien; i++) {
            if (sorted[i] === last) {
                return false;
            }
            last = sorted[i];
        }
        return true;
    };
    var _unique = function (src) {
        if (_areAllUnique(src)) {
            return src.slice();
        }
        var out = [], val, i, ien = src.length, j, k = 0;
        again:
            for (i = 0; i < ien; i++) {
                val = src[i];
                for (j = 0; j < k; j++) {
                    if (out[j] === val) {
                        continue again;
                    }
                }
                out.push(val);
                k++;
            }
        return out;
    };
    DataTable.util = {
        throttle: function (fn, freq) {
            var frequency = freq !== undefined ? freq : 200, last, timer;
            return function () {
                var that = this, now = +new Date(), args = arguments;
                if (last && now < last + frequency) {
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        last = undefined;
                        fn.apply(that, args);
                    }, frequency);
                } else {
                    last = now;
                    fn.apply(that, args);
                }
            };
        },
        escapeRegex: function (val) {
            return val.replace(_re_escape_regex, '\\$1');
        }
    };
    function _fnHungarianMap(o) {
        var hungarian = 'a aa ai ao as b fn i m o s ', match, newKey, map = {};
        $.each(o, function (key, val) {
            match = key.match(/^([^A-Z]+?)([A-Z])/);
            if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
                newKey = key.replace(match[0], match[2].toLowerCase());
                map[newKey] = key;
                if (match[1] === 'o') {
                    _fnHungarianMap(o[key]);
                }
            }
        });
        o._hungarianMap = map;
    }
    function _fnCamelToHungarian(src, user, force) {
        if (!src._hungarianMap) {
            _fnHungarianMap(src);
        }
        var hungarianKey;
        $.each(user, function (key, val) {
            hungarianKey = src._hungarianMap[key];
            if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
                if (hungarianKey.charAt(0) === 'o') {
                    if (!user[hungarianKey]) {
                        user[hungarianKey] = {};
                    }
                    $.extend(true, user[hungarianKey], user[key]);
                    _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
                } else {
                    user[hungarianKey] = user[key];
                }
            }
        });
    }
    function _fnLanguageCompat(lang) {
        var defaults = DataTable.defaults.oLanguage;
        var zeroRecords = lang.sZeroRecords;
        if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === 'No data available in table') {
            _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
        }
        if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === 'Loading...') {
            _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
        }
        if (lang.sInfoThousands) {
            lang.sThousands = lang.sInfoThousands;
        }
        var decimal = lang.sDecimal;
        if (decimal) {
            _addNumericSort(decimal);
        }
    }
    var _fnCompatMap = function (o, knew, old) {
        if (o[knew] !== undefined) {
            o[old] = o[knew];
        }
    };
    function _fnCompatOpts(init) {
        _fnCompatMap(init, 'ordering', 'bSort');
        _fnCompatMap(init, 'orderMulti', 'bSortMulti');
        _fnCompatMap(init, 'orderClasses', 'bSortClasses');
        _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');
        _fnCompatMap(init, 'order', 'aaSorting');
        _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');
        _fnCompatMap(init, 'paging', 'bPaginate');
        _fnCompatMap(init, 'pagingType', 'sPaginationType');
        _fnCompatMap(init, 'pageLength', 'iDisplayLength');
        _fnCompatMap(init, 'searching', 'bFilter');
        if (typeof init.sScrollX === 'boolean') {
            init.sScrollX = init.sScrollX ? '100%' : '';
        }
        if (typeof init.scrollX === 'boolean') {
            init.scrollX = init.scrollX ? '100%' : '';
        }
        var searchCols = init.aoSearchCols;
        if (searchCols) {
            for (var i = 0, ien = searchCols.length; i < ien; i++) {
                if (searchCols[i]) {
                    _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
                }
            }
        }
    }
    function _fnCompatCols(init) {
        _fnCompatMap(init, 'orderable', 'bSortable');
        _fnCompatMap(init, 'orderData', 'aDataSort');
        _fnCompatMap(init, 'orderSequence', 'asSorting');
        _fnCompatMap(init, 'orderDataType', 'sortDataType');
        var dataSort = init.aDataSort;
        if (typeof dataSort === 'number' && !$.isArray(dataSort)) {
            init.aDataSort = [dataSort];
        }
    }
    function _fnBrowserDetect(settings) {
        if (!DataTable.__browser) {
            var browser = {};
            DataTable.__browser = browser;
            var n = $('<div/>').css({
                position: 'fixed',
                top: 0,
                left: $(window).scrollLeft() * -1,
                height: 1,
                width: 1,
                overflow: 'hidden'
            }).append($('<div/>').css({
                position: 'absolute',
                top: 1,
                left: 1,
                width: 100,
                overflow: 'scroll'
            }).append($('<div/>').css({
                width: '100%',
                height: 10
            }))).appendTo('body');
            var outer = n.children();
            var inner = outer.children();
            browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
            browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
            browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;
            browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
            n.remove();
        }
        $.extend(settings.oBrowser, DataTable.__browser);
        settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
    }
    function _fnReduce(that, fn, init, start, end, inc) {
        var i = start, value, isSet = false;
        if (init !== undefined) {
            value = init;
            isSet = true;
        }
        while (i !== end) {
            if (!that.hasOwnProperty(i)) {
                continue;
            }
            value = isSet ? fn(value, that[i], i, that) : that[i];
            isSet = true;
            i += inc;
        }
        return value;
    }
    function _fnAddColumn(oSettings, nTh) {
        var oDefaults = DataTable.defaults.column;
        var iCol = oSettings.aoColumns.length;
        var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
            'nTh': nTh ? nTh : document.createElement('th'),
            'sTitle': oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
            'aDataSort': oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
            'mData': oDefaults.mData ? oDefaults.mData : iCol,
            idx: iCol
        });
        oSettings.aoColumns.push(oCol);
        var searchCols = oSettings.aoPreSearchCols;
        searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);
        _fnColumnOptions(oSettings, iCol, $(nTh).data());
    }
    function _fnColumnOptions(oSettings, iCol, oOptions) {
        var oCol = oSettings.aoColumns[iCol];
        var oClasses = oSettings.oClasses;
        var th = $(oCol.nTh);
        if (!oCol.sWidthOrig) {
            oCol.sWidthOrig = th.attr('width') || null;
            var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
            if (t) {
                oCol.sWidthOrig = t[1];
            }
        }
        if (oOptions !== undefined && oOptions !== null) {
            _fnCompatCols(oOptions);
            _fnCamelToHungarian(DataTable.defaults.column, oOptions);
            if (oOptions.mDataProp !== undefined && !oOptions.mData) {
                oOptions.mData = oOptions.mDataProp;
            }
            if (oOptions.sType) {
                oCol._sManualType = oOptions.sType;
            }
            if (oOptions.className && !oOptions.sClass) {
                oOptions.sClass = oOptions.className;
            }
            $.extend(oCol, oOptions);
            _fnMap(oCol, oOptions, 'sWidth', 'sWidthOrig');
            if (oOptions.iDataSort !== undefined) {
                oCol.aDataSort = [oOptions.iDataSort];
            }
            _fnMap(oCol, oOptions, 'aDataSort');
        }
        var mDataSrc = oCol.mData;
        var mData = _fnGetObjectDataFn(mDataSrc);
        var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;
        var attrTest = function (src) {
            return typeof src === 'string' && src.indexOf('@') !== -1;
        };
        oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));
        oCol._setter = null;
        oCol.fnGetData = function (rowData, type, meta) {
            var innerData = mData(rowData, type, undefined, meta);
            return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
        };
        oCol.fnSetData = function (rowData, val, meta) {
            return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
        };
        if (typeof mDataSrc !== 'number') {
            oSettings._rowReadObject = true;
        }
        if (!oSettings.oFeatures.bSort) {
            oCol.bSortable = false;
            th.addClass(oClasses.sSortableNone);
        }
        var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
        var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
        if (!oCol.bSortable || !bAsc && !bDesc) {
            oCol.sSortingClass = oClasses.sSortableNone;
            oCol.sSortingClassJUI = '';
        } else if (bAsc && !bDesc) {
            oCol.sSortingClass = oClasses.sSortableAsc;
            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
        } else if (!bAsc && bDesc) {
            oCol.sSortingClass = oClasses.sSortableDesc;
            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
        } else {
            oCol.sSortingClass = oClasses.sSortable;
            oCol.sSortingClassJUI = oClasses.sSortJUI;
        }
    }
    function _fnAdjustColumnSizing(settings) {
        if (settings.oFeatures.bAutoWidth !== false) {
            var columns = settings.aoColumns;
            _fnCalculateColumnWidths(settings);
            for (var i = 0, iLen = columns.length; i < iLen; i++) {
                columns[i].nTh.style.width = columns[i].sWidth;
            }
        }
        var scroll = settings.oScroll;
        if (scroll.sY !== '' || scroll.sX !== '') {
            _fnScrollDraw(settings);
        }
        _fnCallbackFire(settings, null, 'column-sizing', [settings]);
    }
    function _fnVisibleToColumnIndex(oSettings, iMatch) {
        var aiVis = _fnGetColumns(oSettings, 'bVisible');
        return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;
    }
    function _fnColumnIndexToVisible(oSettings, iMatch) {
        var aiVis = _fnGetColumns(oSettings, 'bVisible');
        var iPos = $.inArray(iMatch, aiVis);
        return iPos !== -1 ? iPos : null;
    }
    function _fnVisbleColumns(oSettings) {
        var vis = 0;
        $.each(oSettings.aoColumns, function (i, col) {
            if (col.bVisible && $(col.nTh).css('display') !== 'none') {
                vis++;
            }
        });
        return vis;
    }
    function _fnGetColumns(oSettings, sParam) {
        var a = [];
        $.map(oSettings.aoColumns, function (val, i) {
            if (val[sParam]) {
                a.push(i);
            }
        });
        return a;
    }
    function _fnColumnTypes(settings) {
        var columns = settings.aoColumns;
        var data = settings.aoData;
        var types = DataTable.ext.type.detect;
        var i, ien, j, jen, k, ken;
        var col, cell, detectedType, cache;
        for (i = 0, ien = columns.length; i < ien; i++) {
            col = columns[i];
            cache = [];
            if (!col.sType && col._sManualType) {
                col.sType = col._sManualType;
            } else if (!col.sType) {
                for (j = 0, jen = types.length; j < jen; j++) {
                    for (k = 0, ken = data.length; k < ken; k++) {
                        if (cache[k] === undefined) {
                            cache[k] = _fnGetCellData(settings, k, i, 'type');
                        }
                        detectedType = types[j](cache[k], settings);
                        if (!detectedType && j !== types.length - 1) {
                            break;
                        }
                        if (detectedType === 'html') {
                            break;
                        }
                    }
                    if (detectedType) {
                        col.sType = detectedType;
                        break;
                    }
                }
                if (!col.sType) {
                    col.sType = 'string';
                }
            }
        }
    }
    function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
        var i, iLen, j, jLen, k, kLen, def;
        var columns = oSettings.aoColumns;
        if (aoColDefs) {
            for (i = aoColDefs.length - 1; i >= 0; i--) {
                def = aoColDefs[i];
                var aTargets = def.targets !== undefined ? def.targets : def.aTargets;
                if (!$.isArray(aTargets)) {
                    aTargets = [aTargets];
                }
                for (j = 0, jLen = aTargets.length; j < jLen; j++) {
                    if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
                        while (columns.length <= aTargets[j]) {
                            _fnAddColumn(oSettings);
                        }
                        fn(aTargets[j], def);
                    } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
                        fn(columns.length + aTargets[j], def);
                    } else if (typeof aTargets[j] === 'string') {
                        for (k = 0, kLen = columns.length; k < kLen; k++) {
                            if (aTargets[j] == '_all' || $(columns[k].nTh).hasClass(aTargets[j])) {
                                fn(k, def);
                            }
                        }
                    }
                }
            }
        }
        if (aoCols) {
            for (i = 0, iLen = aoCols.length; i < iLen; i++) {
                fn(i, aoCols[i]);
            }
        }
    }
    function _fnAddData(oSettings, aDataIn, nTr, anTds) {
        var iRow = oSettings.aoData.length;
        var oData = $.extend(true, {}, DataTable.models.oRow, {
            src: nTr ? 'dom' : 'data',
            idx: iRow
        });
        oData._aData = aDataIn;
        oSettings.aoData.push(oData);
        var nTd, sThisType;
        var columns = oSettings.aoColumns;
        for (var i = 0, iLen = columns.length; i < iLen; i++) {
            columns[i].sType = null;
        }
        oSettings.aiDisplayMaster.push(iRow);
        var id = oSettings.rowIdFn(aDataIn);
        if (id !== undefined) {
            oSettings.aIds[id] = oData;
        }
        if (nTr || !oSettings.oFeatures.bDeferRender) {
            _fnCreateTr(oSettings, iRow, nTr, anTds);
        }
        return iRow;
    }
    function _fnAddTr(settings, trs) {
        var row;
        if (!(trs instanceof $)) {
            trs = $(trs);
        }
        return trs.map(function (i, el) {
            row = _fnGetRowElements(settings, el);
            return _fnAddData(settings, row.data, el, row.cells);
        });
    }
    function _fnNodeToDataIndex(oSettings, n) {
        return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
    }
    function _fnNodeToColumnIndex(oSettings, iRow, n) {
        return $.inArray(n, oSettings.aoData[iRow].anCells);
    }
    function _fnGetCellData(settings, rowIdx, colIdx, type) {
        var draw = settings.iDraw;
        var col = settings.aoColumns[colIdx];
        var rowData = settings.aoData[rowIdx]._aData;
        var defaultContent = col.sDefaultContent;
        var cellData = col.fnGetData(rowData, type, {
            settings: settings,
            row: rowIdx,
            col: colIdx
        });
        if (cellData === undefined) {
            if (settings.iDrawError != draw && defaultContent === null) {
                _fnLog(settings, 0, 'Requested unknown parameter ' + (typeof col.mData == 'function' ? '{function}' : '\'' + col.mData + '\'') + ' for row ' + rowIdx + ', column ' + colIdx, 4);
                settings.iDrawError = draw;
            }
            return defaultContent;
        }
        if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {
            cellData = defaultContent;
        } else if (typeof cellData === 'function') {
            return cellData.call(rowData);
        }
        if (cellData === null && type == 'display') {
            return '';
        }
        return cellData;
    }
    function _fnSetCellData(settings, rowIdx, colIdx, val) {
        var col = settings.aoColumns[colIdx];
        var rowData = settings.aoData[rowIdx]._aData;
        col.fnSetData(rowData, val, {
            settings: settings,
            row: rowIdx,
            col: colIdx
        });
    }
    var __reArray = /\[.*?\]$/;
    var __reFn = /\(\)$/;
    function _fnSplitObjNotation(str) {
        return $.map(str.match(/(\\.|[^\.])+/g) || [''], function (s) {
            return s.replace(/\\\./g, '.');
        });
    }
    function _fnGetObjectDataFn(mSource) {
        if ($.isPlainObject(mSource)) {
            var o = {};
            $.each(mSource, function (key, val) {
                if (val) {
                    o[key] = _fnGetObjectDataFn(val);
                }
            });
            return function (data, type, row, meta) {
                var t = o[type] || o._;
                return t !== undefined ? t(data, type, row, meta) : data;
            };
        } else if (mSource === null) {
            return function (data) {
                return data;
            };
        } else if (typeof mSource === 'function') {
            return function (data, type, row, meta) {
                return mSource(data, type, row, meta);
            };
        } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
            var fetchData = function (data, type, src) {
                var arrayNotation, funcNotation, out, innerSrc;
                if (src !== '') {
                    var a = _fnSplitObjNotation(src);
                    for (var i = 0, iLen = a.length; i < iLen; i++) {
                        arrayNotation = a[i].match(__reArray);
                        funcNotation = a[i].match(__reFn);
                        if (arrayNotation) {
                            a[i] = a[i].replace(__reArray, '');
                            if (a[i] !== '') {
                                data = data[a[i]];
                            }
                            out = [];
                            a.splice(0, i + 1);
                            innerSrc = a.join('.');
                            if ($.isArray(data)) {
                                for (var j = 0, jLen = data.length; j < jLen; j++) {
                                    out.push(fetchData(data[j], type, innerSrc));
                                }
                            }
                            var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
                            data = join === '' ? out : out.join(join);
                            break;
                        } else if (funcNotation) {
                            a[i] = a[i].replace(__reFn, '');
                            data = data[a[i]]();
                            continue;
                        }
                        if (data === null || data[a[i]] === undefined) {
                            return undefined;
                        }
                        data = data[a[i]];
                    }
                }
                return data;
            };
            return function (data, type) {
                return fetchData(data, type, mSource);
            };
        } else {
            return function (data, type) {
                return data[mSource];
            };
        }
    }
    function _fnSetObjectDataFn(mSource) {
        if ($.isPlainObject(mSource)) {
            return _fnSetObjectDataFn(mSource._);
        } else if (mSource === null) {
            return function () {
            };
        } else if (typeof mSource === 'function') {
            return function (data, val, meta) {
                mSource(data, 'set', val, meta);
            };
        } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
            var setData = function (data, val, src) {
                var a = _fnSplitObjNotation(src), b;
                var aLast = a[a.length - 1];
                var arrayNotation, funcNotation, o, innerSrc;
                for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
                    arrayNotation = a[i].match(__reArray);
                    funcNotation = a[i].match(__reFn);
                    if (arrayNotation) {
                        a[i] = a[i].replace(__reArray, '');
                        data[a[i]] = [];
                        b = a.slice();
                        b.splice(0, i + 1);
                        innerSrc = b.join('.');
                        if ($.isArray(val)) {
                            for (var j = 0, jLen = val.length; j < jLen; j++) {
                                o = {};
                                setData(o, val[j], innerSrc);
                                data[a[i]].push(o);
                            }
                        } else {
                            data[a[i]] = val;
                        }
                        return;
                    } else if (funcNotation) {
                        a[i] = a[i].replace(__reFn, '');
                        data = data[a[i]](val);
                    }
                    if (data[a[i]] === null || data[a[i]] === undefined) {
                        data[a[i]] = {};
                    }
                    data = data[a[i]];
                }
                if (aLast.match(__reFn)) {
                    data = data[aLast.replace(__reFn, '')](val);
                } else {
                    data[aLast.replace(__reArray, '')] = val;
                }
            };
            return function (data, val) {
                return setData(data, val, mSource);
            };
        } else {
            return function (data, val) {
                data[mSource] = val;
            };
        }
    }
    function _fnGetDataMaster(settings) {
        return _pluck(settings.aoData, '_aData');
    }
    function _fnClearTable(settings) {
        settings.aoData.length = 0;
        settings.aiDisplayMaster.length = 0;
        settings.aiDisplay.length = 0;
        settings.aIds = {};
    }
    function _fnDeleteIndex(a, iTarget, splice) {
        var iTargetIndex = -1;
        for (var i = 0, iLen = a.length; i < iLen; i++) {
            if (a[i] == iTarget) {
                iTargetIndex = i;
            } else if (a[i] > iTarget) {
                a[i]--;
            }
        }
        if (iTargetIndex != -1 && splice === undefined) {
            a.splice(iTargetIndex, 1);
        }
    }
    function _fnInvalidate(settings, rowIdx, src, colIdx) {
        var row = settings.aoData[rowIdx];
        var i, ien;
        var cellWrite = function (cell, col) {
            while (cell.childNodes.length) {
                cell.removeChild(cell.firstChild);
            }
            cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
        };
        if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {
            row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;
        } else {
            var cells = row.anCells;
            if (cells) {
                if (colIdx !== undefined) {
                    cellWrite(cells[colIdx], colIdx);
                } else {
                    for (i = 0, ien = cells.length; i < ien; i++) {
                        cellWrite(cells[i], i);
                    }
                }
            }
        }
        row._aSortData = null;
        row._aFilterData = null;
        var cols = settings.aoColumns;
        if (colIdx !== undefined) {
            cols[colIdx].sType = null;
        } else {
            for (i = 0, ien = cols.length; i < ien; i++) {
                cols[i].sType = null;
            }
            _fnRowAttributes(settings, row);
        }
    }
    function _fnGetRowElements(settings, row, colIdx, d) {
        var tds = [], td = row.firstChild, name, col, o, i = 0, contents, columns = settings.aoColumns, objectRead = settings._rowReadObject;
        d = d !== undefined ? d : objectRead ? {} : [];
        var attr = function (str, td) {
            if (typeof str === 'string') {
                var idx = str.indexOf('@');
                if (idx !== -1) {
                    var attr = str.substring(idx + 1);
                    var setter = _fnSetObjectDataFn(str);
                    setter(d, td.getAttribute(attr));
                }
            }
        };
        var cellProcess = function (cell) {
            if (colIdx === undefined || colIdx === i) {
                col = columns[i];
                contents = $.trim(cell.innerHTML);
                if (col && col._bAttrSrc) {
                    var setter = _fnSetObjectDataFn(col.mData._);
                    setter(d, contents);
                    attr(col.mData.sort, cell);
                    attr(col.mData.type, cell);
                    attr(col.mData.filter, cell);
                } else {
                    if (objectRead) {
                        if (!col._setter) {
                            col._setter = _fnSetObjectDataFn(col.mData);
                        }
                        col._setter(d, contents);
                    } else {
                        d[i] = contents;
                    }
                }
            }
            i++;
        };
        if (td) {
            while (td) {
                name = td.nodeName.toUpperCase();
                if (name == 'TD' || name == 'TH') {
                    cellProcess(td);
                    tds.push(td);
                }
                td = td.nextSibling;
            }
        } else {
            tds = row.anCells;
            for (var j = 0, jen = tds.length; j < jen; j++) {
                cellProcess(tds[j]);
            }
        }
        var rowNode = row.firstChild ? row : row.nTr;
        if (rowNode) {
            var id = rowNode.getAttribute('id');
            if (id) {
                _fnSetObjectDataFn(settings.rowId)(d, id);
            }
        }
        return {
            data: d,
            cells: tds
        };
    }
    function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
        var row = oSettings.aoData[iRow], rowData = row._aData, cells = [], nTr, nTd, oCol, i, iLen;
        if (row.nTr === null) {
            nTr = nTrIn || document.createElement('tr');
            row.nTr = nTr;
            row.anCells = cells;
            nTr._DT_RowIndex = iRow;
            _fnRowAttributes(oSettings, row);
            for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
                oCol = oSettings.aoColumns[i];
                nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
                nTd._DT_CellIndex = {
                    row: iRow,
                    column: i
                };
                cells.push(nTd);
                if ((!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {
                    nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
                }
                if (oCol.sClass) {
                    nTd.className += ' ' + oCol.sClass;
                }
                if (oCol.bVisible && !nTrIn) {
                    nTr.appendChild(nTd);
                } else if (!oCol.bVisible && nTrIn) {
                    nTd.parentNode.removeChild(nTd);
                }
                if (oCol.fnCreatedCell) {
                    oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);
                }
            }
            _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [
                nTr,
                rowData,
                iRow
            ]);
        }
        row.nTr.setAttribute('role', 'row');
    }
    function _fnRowAttributes(settings, row) {
        var tr = row.nTr;
        var data = row._aData;
        if (tr) {
            var id = settings.rowIdFn(data);
            if (id) {
                tr.id = id;
            }
            if (data.DT_RowClass) {
                var a = data.DT_RowClass.split(' ');
                row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;
                $(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);
            }
            if (data.DT_RowAttr) {
                $(tr).attr(data.DT_RowAttr);
            }
            if (data.DT_RowData) {
                $(tr).data(data.DT_RowData);
            }
        }
    }
    function _fnBuildHead(oSettings) {
        var i, ien, cell, row, column;
        var thead = oSettings.nTHead;
        var tfoot = oSettings.nTFoot;
        var createHeader = $('th, td', thead).length === 0;
        var classes = oSettings.oClasses;
        var columns = oSettings.aoColumns;
        if (createHeader) {
            row = $('<tr/>').appendTo(thead);
        }
        for (i = 0, ien = columns.length; i < ien; i++) {
            column = columns[i];
            cell = $(column.nTh).addClass(column.sClass);
            if (createHeader) {
                cell.appendTo(row);
            }
            if (oSettings.oFeatures.bSort) {
                cell.addClass(column.sSortingClass);
                if (column.bSortable !== false) {
                    cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);
                    _fnSortAttachListener(oSettings, column.nTh, i);
                }
            }
            if (column.sTitle != cell[0].innerHTML) {
                cell.html(column.sTitle);
            }
            _fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);
        }
        if (createHeader) {
            _fnDetectHeader(oSettings.aoHeader, thead);
        }
        $(thead).find('>tr').attr('role', 'row');
        $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
        $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH);
        if (tfoot !== null) {
            var cells = oSettings.aoFooter[0];
            for (i = 0, ien = cells.length; i < ien; i++) {
                column = columns[i];
                column.nTf = cells[i].cell;
                if (column.sClass) {
                    $(column.nTf).addClass(column.sClass);
                }
            }
        }
    }
    function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
        var i, iLen, j, jLen, k, kLen, n, nLocalTr;
        var aoLocal = [];
        var aApplied = [];
        var iColumns = oSettings.aoColumns.length;
        var iRowspan, iColspan;
        if (!aoSource) {
            return;
        }
        if (bIncludeHidden === undefined) {
            bIncludeHidden = false;
        }
        for (i = 0, iLen = aoSource.length; i < iLen; i++) {
            aoLocal[i] = aoSource[i].slice();
            aoLocal[i].nTr = aoSource[i].nTr;
            for (j = iColumns - 1; j >= 0; j--) {
                if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
                    aoLocal[i].splice(j, 1);
                }
            }
            aApplied.push([]);
        }
        for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
            nLocalTr = aoLocal[i].nTr;
            if (nLocalTr) {
                while (n = nLocalTr.firstChild) {
                    nLocalTr.removeChild(n);
                }
            }
            for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
                iRowspan = 1;
                iColspan = 1;
                if (aApplied[i][j] === undefined) {
                    nLocalTr.appendChild(aoLocal[i][j].cell);
                    aApplied[i][j] = 1;
                    while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
                        aApplied[i + iRowspan][j] = 1;
                        iRowspan++;
                    }
                    while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
                        for (k = 0; k < iRowspan; k++) {
                            aApplied[i + k][j + iColspan] = 1;
                        }
                        iColspan++;
                    }
                    $(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);
                }
            }
        }
    }
    function _fnDraw(oSettings) {
        var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);
        if ($.inArray(false, aPreDraw) !== -1) {
            _fnProcessingDisplay(oSettings, false);
            return;
        }
        var i, iLen, n;
        var anRows = [];
        var iRowCount = 0;
        var asStripeClasses = oSettings.asStripeClasses;
        var iStripes = asStripeClasses.length;
        var iOpenRows = oSettings.aoOpenRows.length;
        var oLang = oSettings.oLanguage;
        var iInitDisplayStart = oSettings.iInitDisplayStart;
        var bServerSide = _fnDataSource(oSettings) == 'ssp';
        var aiDisplay = oSettings.aiDisplay;
        oSettings.bDrawing = true;
        if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
            oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;
            oSettings.iInitDisplayStart = -1;
        }
        var iDisplayStart = oSettings._iDisplayStart;
        var iDisplayEnd = oSettings.fnDisplayEnd();
        if (oSettings.bDeferLoading) {
            oSettings.bDeferLoading = false;
            oSettings.iDraw++;
            _fnProcessingDisplay(oSettings, false);
        } else if (!bServerSide) {
            oSettings.iDraw++;
        } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
            return;
        }
        if (aiDisplay.length !== 0) {
            var iStart = bServerSide ? 0 : iDisplayStart;
            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
            for (var j = iStart; j < iEnd; j++) {
                var iDataIndex = aiDisplay[j];
                var aoData = oSettings.aoData[iDataIndex];
                if (aoData.nTr === null) {
                    _fnCreateTr(oSettings, iDataIndex);
                }
                var nRow = aoData.nTr;
                if (iStripes !== 0) {
                    var sStripe = asStripeClasses[iRowCount % iStripes];
                    if (aoData._sRowStripe != sStripe) {
                        $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
                        aoData._sRowStripe = sStripe;
                    }
                }
                _fnCallbackFire(oSettings, 'aoRowCallback', null, [
                    nRow,
                    aoData._aData,
                    iRowCount,
                    j
                ]);
                anRows.push(nRow);
                iRowCount++;
            }
        } else {
            var sZero = oLang.sZeroRecords;
            if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
                sZero = oLang.sLoadingRecords;
            } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
                sZero = oLang.sEmptyTable;
            }
            anRows[0] = $('<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' }).append($('<td />', {
                'valign': 'top',
                'colSpan': _fnVisbleColumns(oSettings),
                'class': oSettings.oClasses.sRowEmpty
            }).html(sZero))[0];
        }
        _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [
            $(oSettings.nTHead).children('tr')[0],
            _fnGetDataMaster(oSettings),
            iDisplayStart,
            iDisplayEnd,
            aiDisplay
        ]);
        _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [
            $(oSettings.nTFoot).children('tr')[0],
            _fnGetDataMaster(oSettings),
            iDisplayStart,
            iDisplayEnd,
            aiDisplay
        ]);
        var body = $(oSettings.nTBody);
        body.children().detach();
        body.append($(anRows));
        _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);
        oSettings.bSorted = false;
        oSettings.bFiltered = false;
        oSettings.bDrawing = false;
    }
    function _fnReDraw(settings, holdPosition) {
        var features = settings.oFeatures, sort = features.bSort, filter = features.bFilter;
        if (sort) {
            _fnSort(settings);
        }
        if (filter) {
            _fnFilterComplete(settings, settings.oPreviousSearch);
        } else {
            settings.aiDisplay = settings.aiDisplayMaster.slice();
        }
        if (holdPosition !== true) {
            settings._iDisplayStart = 0;
        }
        settings._drawHold = holdPosition;
        _fnDraw(settings);
        settings._drawHold = false;
    }
    function _fnAddOptionsHtml(oSettings) {
        var classes = oSettings.oClasses;
        var table = $(oSettings.nTable);
        var holding = $('<div/>').insertBefore(table);
        var features = oSettings.oFeatures;
        var insert = $('<div/>', {
            id: oSettings.sTableId + '_wrapper',
            'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
        });
        oSettings.nHolding = holding[0];
        oSettings.nTableWrapper = insert[0];
        oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
        var aDom = oSettings.sDom.split('');
        var featureNode, cOption, nNewNode, cNext, sAttr, j;
        for (var i = 0; i < aDom.length; i++) {
            featureNode = null;
            cOption = aDom[i];
            if (cOption == '<') {
                nNewNode = $('<div/>')[0];
                cNext = aDom[i + 1];
                if (cNext == '\'' || cNext == '"') {
                    sAttr = '';
                    j = 2;
                    while (aDom[i + j] != cNext) {
                        sAttr += aDom[i + j];
                        j++;
                    }
                    if (sAttr == 'H') {
                        sAttr = classes.sJUIHeader;
                    } else if (sAttr == 'F') {
                        sAttr = classes.sJUIFooter;
                    }
                    if (sAttr.indexOf('.') != -1) {
                        var aSplit = sAttr.split('.');
                        nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
                        nNewNode.className = aSplit[1];
                    } else if (sAttr.charAt(0) == '#') {
                        nNewNode.id = sAttr.substr(1, sAttr.length - 1);
                    } else {
                        nNewNode.className = sAttr;
                    }
                    i += j;
                }
                insert.append(nNewNode);
                insert = $(nNewNode);
            } else if (cOption == '>') {
                insert = insert.parent();
            } else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
                featureNode = _fnFeatureHtmlLength(oSettings);
            } else if (cOption == 'f' && features.bFilter) {
                featureNode = _fnFeatureHtmlFilter(oSettings);
            } else if (cOption == 'r' && features.bProcessing) {
                featureNode = _fnFeatureHtmlProcessing(oSettings);
            } else if (cOption == 't') {
                featureNode = _fnFeatureHtmlTable(oSettings);
            } else if (cOption == 'i' && features.bInfo) {
                featureNode = _fnFeatureHtmlInfo(oSettings);
            } else if (cOption == 'p' && features.bPaginate) {
                featureNode = _fnFeatureHtmlPaginate(oSettings);
            } else if (DataTable.ext.feature.length !== 0) {
                var aoFeatures = DataTable.ext.feature;
                for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
                    if (cOption == aoFeatures[k].cFeature) {
                        featureNode = aoFeatures[k].fnInit(oSettings);
                        break;
                    }
                }
            }
            if (featureNode) {
                var aanFeatures = oSettings.aanFeatures;
                if (!aanFeatures[cOption]) {
                    aanFeatures[cOption] = [];
                }
                aanFeatures[cOption].push(featureNode);
                insert.append(featureNode);
            }
        }
        holding.replaceWith(insert);
        oSettings.nHolding = null;
    }
    function _fnDetectHeader(aLayout, nThead) {
        var nTrs = $(nThead).children('tr');
        var nTr, nCell;
        var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
        var bUnique;
        var fnShiftCol = function (a, i, j) {
            var k = a[i];
            while (k[j]) {
                j++;
            }
            return j;
        };
        aLayout.splice(0, aLayout.length);
        for (i = 0, iLen = nTrs.length; i < iLen; i++) {
            aLayout.push([]);
        }
        for (i = 0, iLen = nTrs.length; i < iLen; i++) {
            nTr = nTrs[i];
            iColumn = 0;
            nCell = nTr.firstChild;
            while (nCell) {
                if (nCell.nodeName.toUpperCase() == 'TD' || nCell.nodeName.toUpperCase() == 'TH') {
                    iColspan = nCell.getAttribute('colspan') * 1;
                    iRowspan = nCell.getAttribute('rowspan') * 1;
                    iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
                    iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;
                    iColShifted = fnShiftCol(aLayout, i, iColumn);
                    bUnique = iColspan === 1 ? true : false;
                    for (l = 0; l < iColspan; l++) {
                        for (k = 0; k < iRowspan; k++) {
                            aLayout[i + k][iColShifted + l] = {
                                'cell': nCell,
                                'unique': bUnique
                            };
                            aLayout[i + k].nTr = nTr;
                        }
                    }
                }
                nCell = nCell.nextSibling;
            }
        }
    }
    function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
        var aReturn = [];
        if (!aLayout) {
            aLayout = oSettings.aoHeader;
            if (nHeader) {
                aLayout = [];
                _fnDetectHeader(aLayout, nHeader);
            }
        }
        for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
            for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
                if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
                    aReturn[j] = aLayout[i][j].cell;
                }
            }
        }
        return aReturn;
    }
    function _fnBuildAjax(oSettings, data, fn) {
        _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]);
        if (data && $.isArray(data)) {
            var tmp = {};
            var rbracket = /(.*?)\[\]$/;
            $.each(data, function (key, val) {
                var match = val.name.match(rbracket);
                if (match) {
                    var name = match[0];
                    if (!tmp[name]) {
                        tmp[name] = [];
                    }
                    tmp[name].push(val.value);
                } else {
                    tmp[val.name] = val.value;
                }
            });
            data = tmp;
        }
        var ajaxData;
        var ajax = oSettings.ajax;
        var instance = oSettings.oInstance;
        var callback = function (json) {
            _fnCallbackFire(oSettings, null, 'xhr', [
                oSettings,
                json,
                oSettings.jqXHR
            ]);
            fn(json);
        };
        if ($.isPlainObject(ajax) && ajax.data) {
            ajaxData = ajax.data;
            var newData = $.isFunction(ajaxData) ? ajaxData(data, oSettings) : ajaxData;
            data = $.isFunction(ajaxData) && newData ? newData : $.extend(true, data, newData);
            delete ajax.data;
        }
        var baseAjax = {
            'data': data,
            'success': function (json) {
                var error = json.error || json.sError;
                if (error) {
                    _fnLog(oSettings, 0, error);
                }
                oSettings.json = json;
                callback(json);
            },
            'dataType': 'json',
            'cache': false,
            'type': oSettings.sServerMethod,
            'error': function (xhr, error, thrown) {
                var ret = _fnCallbackFire(oSettings, null, 'xhr', [
                    oSettings,
                    null,
                    oSettings.jqXHR
                ]);
                if ($.inArray(true, ret) === -1) {
                    if (error == 'parsererror') {
                        _fnLog(oSettings, 0, 'Invalid JSON response', 1);
                    } else if (xhr.readyState === 4) {
                        _fnLog(oSettings, 0, 'Ajax error', 7);
                    }
                }
                _fnProcessingDisplay(oSettings, false);
            }
        };
        oSettings.oAjaxData = data;
        _fnCallbackFire(oSettings, null, 'preXhr', [
            oSettings,
            data
        ]);
        if (oSettings.fnServerData) {
            oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {
                return {
                    name: key,
                    value: val
                };
            }), callback, oSettings);
        } else if (oSettings.sAjaxSource || typeof ajax === 'string') {
            oSettings.jqXHR = $.ajax($.extend(baseAjax, { url: ajax || oSettings.sAjaxSource }));
        } else if ($.isFunction(ajax)) {
            oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
        } else {
            oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));
            ajax.data = ajaxData;
        }
    }
    function _fnAjaxUpdate(settings) {
        if (settings.bAjaxDataGet) {
            settings.iDraw++;
            _fnProcessingDisplay(settings, true);
            _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {
                _fnAjaxUpdateDraw(settings, json);
            });
            return false;
        }
        return true;
    }
    function _fnAjaxParameters(settings) {
        var columns = settings.aoColumns, columnCount = columns.length, features = settings.oFeatures, preSearch = settings.oPreviousSearch, preColSearch = settings.aoPreSearchCols, i, data = [], dataProp, column, columnSearch, sort = _fnSortFlatten(settings), displayStart = settings._iDisplayStart, displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;
        var param = function (name, value) {
            data.push({
                'name': name,
                'value': value
            });
        };
        param('sEcho', settings.iDraw);
        param('iColumns', columnCount);
        param('sColumns', _pluck(columns, 'sName').join(','));
        param('iDisplayStart', displayStart);
        param('iDisplayLength', displayLength);
        var d = {
            draw: settings.iDraw,
            columns: [],
            order: [],
            start: displayStart,
            length: displayLength,
            search: {
                value: preSearch.sSearch,
                regex: preSearch.bRegex
            }
        };
        for (i = 0; i < columnCount; i++) {
            column = columns[i];
            columnSearch = preColSearch[i];
            dataProp = typeof column.mData == 'function' ? 'function' : column.mData;
            d.columns.push({
                data: dataProp,
                name: column.sName,
                searchable: column.bSearchable,
                orderable: column.bSortable,
                search: {
                    value: columnSearch.sSearch,
                    regex: columnSearch.bRegex
                }
            });
            param('mDataProp_' + i, dataProp);
            if (features.bFilter) {
                param('sSearch_' + i, columnSearch.sSearch);
                param('bRegex_' + i, columnSearch.bRegex);
                param('bSearchable_' + i, column.bSearchable);
            }
            if (features.bSort) {
                param('bSortable_' + i, column.bSortable);
            }
        }
        if (features.bFilter) {
            param('sSearch', preSearch.sSearch);
            param('bRegex', preSearch.bRegex);
        }
        if (features.bSort) {
            $.each(sort, function (i, val) {
                d.order.push({
                    column: val.col,
                    dir: val.dir
                });
                param('iSortCol_' + i, val.col);
                param('sSortDir_' + i, val.dir);
            });
            param('iSortingCols', sort.length);
        }
        var legacy = DataTable.ext.legacy.ajax;
        if (legacy === null) {
            return settings.sAjaxSource ? data : d;
        }
        return legacy ? data : d;
    }
    function _fnAjaxUpdateDraw(settings, json) {
        var compat = function (old, modern) {
            return json[old] !== undefined ? json[old] : json[modern];
        };
        var data = _fnAjaxDataSrc(settings, json);
        var draw = compat('sEcho', 'draw');
        var recordsTotal = compat('iTotalRecords', 'recordsTotal');
        var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');
        if (draw) {
            if (draw * 1 < settings.iDraw) {
                return;
            }
            settings.iDraw = draw * 1;
        }
        _fnClearTable(settings);
        settings._iRecordsTotal = parseInt(recordsTotal, 10);
        settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
        for (var i = 0, ien = data.length; i < ien; i++) {
            _fnAddData(settings, data[i]);
        }
        settings.aiDisplay = settings.aiDisplayMaster.slice();
        settings.bAjaxDataGet = false;
        _fnDraw(settings);
        if (!settings._bInitComplete) {
            _fnInitComplete(settings, json);
        }
        settings.bAjaxDataGet = true;
        _fnProcessingDisplay(settings, false);
    }
    function _fnAjaxDataSrc(oSettings, json) {
        var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp;
        if (dataSrc === 'data') {
            return json.aaData || json[dataSrc];
        }
        return dataSrc !== '' ? _fnGetObjectDataFn(dataSrc)(json) : json;
    }
    function _fnFeatureHtmlFilter(settings) {
        var classes = settings.oClasses;
        var tableId = settings.sTableId;
        var language = settings.oLanguage;
        var previousSearch = settings.oPreviousSearch;
        var features = settings.aanFeatures;
        var input = '<input type="search" class="' + classes.sFilterInput + '"/>';
        var str = language.sSearch;
        str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;
        var filter = $('<div/>', {
            'id': !features.f ? tableId + '_filter' : null,
            'class': classes.sFilter
        }).append($('<label/>').append(str));
        var searchFn = function () {
            var n = features.f;
            var val = !this.value ? '' : this.value;
            if (val != previousSearch.sSearch) {
                _fnFilterComplete(settings, {
                    'sSearch': val,
                    'bRegex': previousSearch.bRegex,
                    'bSmart': previousSearch.bSmart,
                    'bCaseInsensitive': previousSearch.bCaseInsensitive
                });
                settings._iDisplayStart = 0;
                _fnDraw(settings);
            }
        };
        var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;
        var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).on('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).on('keypress.DT', function (e) {
            if (e.keyCode == 13) {
                return false;
            }
        }).attr('aria-controls', tableId);
        $(settings.nTable).on('search.dt.DT', function (ev, s) {
            if (settings === s) {
                try {
                    if (jqFilter[0] !== document.activeElement) {
                        jqFilter.val(previousSearch.sSearch);
                    }
                } catch (e) {
                }
            }
        });
        return filter[0];
    }
    function _fnFilterComplete(oSettings, oInput, iForce) {
        var oPrevSearch = oSettings.oPreviousSearch;
        var aoPrevSearch = oSettings.aoPreSearchCols;
        var fnSaveFilter = function (oFilter) {
            oPrevSearch.sSearch = oFilter.sSearch;
            oPrevSearch.bRegex = oFilter.bRegex;
            oPrevSearch.bSmart = oFilter.bSmart;
            oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
        };
        var fnRegex = function (o) {
            return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
        };
        _fnColumnTypes(oSettings);
        if (_fnDataSource(oSettings) != 'ssp') {
            _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);
            fnSaveFilter(oInput);
            for (var i = 0; i < aoPrevSearch.length; i++) {
                _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
            }
            _fnFilterCustom(oSettings);
        } else {
            fnSaveFilter(oInput);
        }
        oSettings.bFiltered = true;
        _fnCallbackFire(oSettings, null, 'search', [oSettings]);
    }
    function _fnFilterCustom(settings) {
        var filters = DataTable.ext.search;
        var displayRows = settings.aiDisplay;
        var row, rowIdx;
        for (var i = 0, ien = filters.length; i < ien; i++) {
            var rows = [];
            for (var j = 0, jen = displayRows.length; j < jen; j++) {
                rowIdx = displayRows[j];
                row = settings.aoData[rowIdx];
                if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
                    rows.push(rowIdx);
                }
            }
            displayRows.length = 0;
            $.merge(displayRows, rows);
        }
    }
    function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
        if (searchStr === '') {
            return;
        }
        var data;
        var out = [];
        var display = settings.aiDisplay;
        var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);
        for (var i = 0; i < display.length; i++) {
            data = settings.aoData[display[i]]._aFilterData[colIdx];
            if (rpSearch.test(data)) {
                out.push(display[i]);
            }
        }
        settings.aiDisplay = out;
    }
    function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
        var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
        var prevSearch = settings.oPreviousSearch.sSearch;
        var displayMaster = settings.aiDisplayMaster;
        var display, invalidated, i;
        var filtered = [];
        if (DataTable.ext.search.length !== 0) {
            force = true;
        }
        invalidated = _fnFilterData(settings);
        if (input.length <= 0) {
            settings.aiDisplay = displayMaster.slice();
        } else {
            if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted) {
                settings.aiDisplay = displayMaster.slice();
            }
            display = settings.aiDisplay;
            for (i = 0; i < display.length; i++) {
                if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
                    filtered.push(display[i]);
                }
            }
            settings.aiDisplay = filtered;
        }
    }
    function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
        search = regex ? search : _fnEscapeRegex(search);
        if (smart) {
            var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function (word) {
                if (word.charAt(0) === '"') {
                    var m = word.match(/^"(.*)"$/);
                    word = m ? m[1] : word;
                }
                return word.replace('"', '');
            });
            search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
        }
        return new RegExp(search, caseInsensitive ? 'i' : '');
    }
    var _fnEscapeRegex = DataTable.util.escapeRegex;
    var __filter_div = $('<div>')[0];
    var __filter_div_textContent = __filter_div.textContent !== undefined;
    function _fnFilterData(settings) {
        var columns = settings.aoColumns;
        var column;
        var i, j, ien, jen, filterData, cellData, row;
        var fomatters = DataTable.ext.type.search;
        var wasInvalidated = false;
        for (i = 0, ien = settings.aoData.length; i < ien; i++) {
            row = settings.aoData[i];
            if (!row._aFilterData) {
                filterData = [];
                for (j = 0, jen = columns.length; j < jen; j++) {
                    column = columns[j];
                    if (column.bSearchable) {
                        cellData = _fnGetCellData(settings, i, j, 'filter');
                        if (fomatters[column.sType]) {
                            cellData = fomatters[column.sType](cellData);
                        }
                        if (cellData === null) {
                            cellData = '';
                        }
                        if (typeof cellData !== 'string' && cellData.toString) {
                            cellData = cellData.toString();
                        }
                    } else {
                        cellData = '';
                    }
                    if (cellData.indexOf && cellData.indexOf('&') !== -1) {
                        __filter_div.innerHTML = cellData;
                        cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;
                    }
                    if (cellData.replace) {
                        cellData = cellData.replace(/[\r\n]/g, '');
                    }
                    filterData.push(cellData);
                }
                row._aFilterData = filterData;
                row._sFilterRow = filterData.join('  ');
                wasInvalidated = true;
            }
        }
        return wasInvalidated;
    }
    function _fnSearchToCamel(obj) {
        return {
            search: obj.sSearch,
            smart: obj.bSmart,
            regex: obj.bRegex,
            caseInsensitive: obj.bCaseInsensitive
        };
    }
    function _fnSearchToHung(obj) {
        return {
            sSearch: obj.search,
            bSmart: obj.smart,
            bRegex: obj.regex,
            bCaseInsensitive: obj.caseInsensitive
        };
    }
    function _fnFeatureHtmlInfo(settings) {
        var tid = settings.sTableId, nodes = settings.aanFeatures.i, n = $('<div/>', {
                'class': settings.oClasses.sInfo,
                'id': !nodes ? tid + '_info' : null
            });
        if (!nodes) {
            settings.aoDrawCallback.push({
                'fn': _fnUpdateInfo,
                'sName': 'information'
            });
            n.attr('role', 'status').attr('aria-live', 'polite');
            $(settings.nTable).attr('aria-describedby', tid + '_info');
        }
        return n[0];
    }
    function _fnUpdateInfo(settings) {
        var nodes = settings.aanFeatures.i;
        if (nodes.length === 0) {
            return;
        }
        var lang = settings.oLanguage, start = settings._iDisplayStart + 1, end = settings.fnDisplayEnd(), max = settings.fnRecordsTotal(), total = settings.fnRecordsDisplay(), out = total ? lang.sInfo : lang.sInfoEmpty;
        if (total !== max) {
            out += ' ' + lang.sInfoFiltered;
        }
        out += lang.sInfoPostFix;
        out = _fnInfoMacros(settings, out);
        var callback = lang.fnInfoCallback;
        if (callback !== null) {
            out = callback.call(settings.oInstance, settings, start, end, max, total, out);
        }
        $(nodes).html(out);
    }
    function _fnInfoMacros(settings, str) {
        var formatter = settings.fnFormatNumber, start = settings._iDisplayStart + 1, len = settings._iDisplayLength, vis = settings.fnRecordsDisplay(), all = len === -1;
        return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
    }
    function _fnInitialise(settings) {
        var i, iLen, iAjaxStart = settings.iInitDisplayStart;
        var columns = settings.aoColumns, column;
        var features = settings.oFeatures;
        var deferLoading = settings.bDeferLoading;
        if (!settings.bInitialised) {
            setTimeout(function () {
                _fnInitialise(settings);
            }, 200);
            return;
        }
        _fnAddOptionsHtml(settings);
        _fnBuildHead(settings);
        _fnDrawHead(settings, settings.aoHeader);
        _fnDrawHead(settings, settings.aoFooter);
        _fnProcessingDisplay(settings, true);
        if (features.bAutoWidth) {
            _fnCalculateColumnWidths(settings);
        }
        for (i = 0, iLen = columns.length; i < iLen; i++) {
            column = columns[i];
            if (column.sWidth) {
                column.nTh.style.width = _fnStringToCss(column.sWidth);
            }
        }
        _fnCallbackFire(settings, null, 'preInit', [settings]);
        _fnReDraw(settings);
        var dataSrc = _fnDataSource(settings);
        if (dataSrc != 'ssp' || deferLoading) {
            if (dataSrc == 'ajax') {
                _fnBuildAjax(settings, [], function (json) {
                    var aData = _fnAjaxDataSrc(settings, json);
                    for (i = 0; i < aData.length; i++) {
                        _fnAddData(settings, aData[i]);
                    }
                    settings.iInitDisplayStart = iAjaxStart;
                    _fnReDraw(settings);
                    _fnProcessingDisplay(settings, false);
                    _fnInitComplete(settings, json);
                }, settings);
            } else {
                _fnProcessingDisplay(settings, false);
                _fnInitComplete(settings);
            }
        }
    }
    function _fnInitComplete(settings, json) {
        settings._bInitComplete = true;
        if (json || settings.oInit.aaData) {
            _fnAdjustColumnSizing(settings);
        }
        _fnCallbackFire(settings, null, 'plugin-init', [
            settings,
            json
        ]);
        _fnCallbackFire(settings, 'aoInitComplete', 'init', [
            settings,
            json
        ]);
    }
    function _fnLengthChange(settings, val) {
        var len = parseInt(val, 10);
        settings._iDisplayLength = len;
        _fnLengthOverflow(settings);
        _fnCallbackFire(settings, null, 'length', [
            settings,
            len
        ]);
    }
    function _fnFeatureHtmlLength(settings) {
        var classes = settings.oClasses, tableId = settings.sTableId, menu = settings.aLengthMenu, d2 = $.isArray(menu[0]), lengths = d2 ? menu[0] : menu, language = d2 ? menu[1] : menu;
        var select = $('<select/>', {
            'name': tableId + '_length',
            'aria-controls': tableId,
            'class': classes.sLengthSelect
        });
        for (var i = 0, ien = lengths.length; i < ien; i++) {
            select[0][i] = new Option(language[i], lengths[i]);
        }
        var div = $('<div><label/></div>').addClass(classes.sLength);
        if (!settings.aanFeatures.l) {
            div[0].id = tableId + '_length';
        }
        div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML));
        $('select', div).val(settings._iDisplayLength).on('change.DT', function (e) {
            _fnLengthChange(settings, $(this).val());
            _fnDraw(settings);
        });
        $(settings.nTable).on('length.dt.DT', function (e, s, len) {
            if (settings === s) {
                $('select', div).val(len);
            }
        });
        return div[0];
    }
    function _fnFeatureHtmlPaginate(settings) {
        var type = settings.sPaginationType, plugin = DataTable.ext.pager[type], modern = typeof plugin === 'function', redraw = function (settings) {
                _fnDraw(settings);
            }, node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0], features = settings.aanFeatures;
        if (!modern) {
            plugin.fnInit(settings, node, redraw);
        }
        if (!features.p) {
            node.id = settings.sTableId + '_paginate';
            settings.aoDrawCallback.push({
                'fn': function (settings) {
                    if (modern) {
                        var start = settings._iDisplayStart, len = settings._iDisplayLength, visRecords = settings.fnRecordsDisplay(), all = len === -1, page = all ? 0 : Math.ceil(start / len), pages = all ? 1 : Math.ceil(visRecords / len), buttons = plugin(page, pages), i, ien;
                        for (i = 0, ien = features.p.length; i < ien; i++) {
                            _fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);
                        }
                    } else {
                        plugin.fnUpdate(settings, redraw);
                    }
                },
                'sName': 'pagination'
            });
        }
        return node;
    }
    function _fnPageChange(settings, action, redraw) {
        var start = settings._iDisplayStart, len = settings._iDisplayLength, records = settings.fnRecordsDisplay();
        if (records === 0 || len === -1) {
            start = 0;
        } else if (typeof action === 'number') {
            start = action * len;
            if (start > records) {
                start = 0;
            }
        } else if (action == 'first') {
            start = 0;
        } else if (action == 'previous') {
            start = len >= 0 ? start - len : 0;
            if (start < 0) {
                start = 0;
            }
        } else if (action == 'next') {
            if (start + len < records) {
                start += len;
            }
        } else if (action == 'last') {
            start = Math.floor((records - 1) / len) * len;
        } else {
            _fnLog(settings, 0, 'Unknown paging action: ' + action, 5);
        }
        var changed = settings._iDisplayStart !== start;
        settings._iDisplayStart = start;
        if (changed) {
            _fnCallbackFire(settings, null, 'page', [settings]);
            if (redraw) {
                _fnDraw(settings);
            }
        }
        return changed;
    }
    function _fnFeatureHtmlProcessing(settings) {
        return $('<div/>', {
            'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
            'class': settings.oClasses.sProcessing
        }).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];
    }
    function _fnProcessingDisplay(settings, show) {
        if (settings.oFeatures.bProcessing) {
            $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
        }
        _fnCallbackFire(settings, null, 'processing', [
            settings,
            show
        ]);
    }
    function _fnFeatureHtmlTable(settings) {
        var table = $(settings.nTable);
        table.attr('role', 'grid');
        var scroll = settings.oScroll;
        if (scroll.sX === '' && scroll.sY === '') {
            return settings.nTable;
        }
        var scrollX = scroll.sX;
        var scrollY = scroll.sY;
        var classes = settings.oClasses;
        var caption = table.children('caption');
        var captionSide = caption.length ? caption[0]._captionSide : null;
        var headerClone = $(table[0].cloneNode(false));
        var footerClone = $(table[0].cloneNode(false));
        var footer = table.children('tfoot');
        var _div = '<div/>';
        var size = function (s) {
            return !s ? null : _fnStringToCss(s);
        };
        if (!footer.length) {
            footer = null;
        }
        var scroller = $(_div, { 'class': classes.sScrollWrapper }).append($(_div, { 'class': classes.sScrollHead }).css({
            overflow: 'hidden',
            position: 'relative',
            border: 0,
            width: scrollX ? size(scrollX) : '100%'
        }).append($(_div, { 'class': classes.sScrollHeadInner }).css({
            'box-sizing': 'content-box',
            width: scroll.sXInner || '100%'
        }).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, { 'class': classes.sScrollBody }).css({
            position: 'relative',
            overflow: 'auto',
            width: size(scrollX)
        }).append(table));
        if (footer) {
            scroller.append($(_div, { 'class': classes.sScrollFoot }).css({
                overflow: 'hidden',
                border: 0,
                width: scrollX ? size(scrollX) : '100%'
            }).append($(_div, { 'class': classes.sScrollFootInner }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));
        }
        var children = scroller.children();
        var scrollHead = children[0];
        var scrollBody = children[1];
        var scrollFoot = footer ? children[2] : null;
        if (scrollX) {
            $(scrollBody).on('scroll.DT', function (e) {
                var scrollLeft = this.scrollLeft;
                scrollHead.scrollLeft = scrollLeft;
                if (footer) {
                    scrollFoot.scrollLeft = scrollLeft;
                }
            });
        }
        $(scrollBody).css(scrollY && scroll.bCollapse ? 'max-height' : 'height', scrollY);
        settings.nScrollHead = scrollHead;
        settings.nScrollBody = scrollBody;
        settings.nScrollFoot = scrollFoot;
        settings.aoDrawCallback.push({
            'fn': _fnScrollDraw,
            'sName': 'scrolling'
        });
        return scroller[0];
    }
    function _fnScrollDraw(settings) {
        var scroll = settings.oScroll, scrollX = scroll.sX, scrollXInner = scroll.sXInner, scrollY = scroll.sY, barWidth = scroll.iBarWidth, divHeader = $(settings.nScrollHead), divHeaderStyle = divHeader[0].style, divHeaderInner = divHeader.children('div'), divHeaderInnerStyle = divHeaderInner[0].style, divHeaderTable = divHeaderInner.children('table'), divBodyEl = settings.nScrollBody, divBody = $(divBodyEl), divBodyStyle = divBodyEl.style, divFooter = $(settings.nScrollFoot), divFooterInner = divFooter.children('div'), divFooterTable = divFooterInner.children('table'), header = $(settings.nTHead), table = $(settings.nTable), tableEl = table[0], tableStyle = tableEl.style, footer = settings.nTFoot ? $(settings.nTFoot) : null, browser = settings.oBrowser, ie67 = browser.bScrollOversize, dtHeaderCells = _pluck(settings.aoColumns, 'nTh'), headerTrgEls, footerTrgEls, headerSrcEls, footerSrcEls, headerCopy, footerCopy, headerWidths = [], footerWidths = [], headerContent = [], footerContent = [], idx, correction, sanityWidth, zeroOut = function (nSizer) {
                var style = nSizer.style;
                style.paddingTop = '0';
                style.paddingBottom = '0';
                style.borderTopWidth = '0';
                style.borderBottomWidth = '0';
                style.height = 0;
            };
        var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
        if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {
            settings.scrollBarVis = scrollBarVis;
            _fnAdjustColumnSizing(settings);
            return;
        } else {
            settings.scrollBarVis = scrollBarVis;
        }
        table.children('thead, tfoot').remove();
        if (footer) {
            footerCopy = footer.clone().prependTo(table);
            footerTrgEls = footer.find('tr');
            footerSrcEls = footerCopy.find('tr');
        }
        headerCopy = header.clone().prependTo(table);
        headerTrgEls = header.find('tr');
        headerSrcEls = headerCopy.find('tr');
        headerCopy.find('th, td').removeAttr('tabindex');
        if (!scrollX) {
            divBodyStyle.width = '100%';
            divHeader[0].style.width = '100%';
        }
        $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
            idx = _fnVisibleToColumnIndex(settings, i);
            el.style.width = settings.aoColumns[idx].sWidth;
        });
        if (footer) {
            _fnApplyToChildren(function (n) {
                n.style.width = '';
            }, footerSrcEls);
        }
        sanityWidth = table.outerWidth();
        if (scrollX === '') {
            tableStyle.width = '100%';
            if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == 'scroll')) {
                tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
            }
            sanityWidth = table.outerWidth();
        } else if (scrollXInner !== '') {
            tableStyle.width = _fnStringToCss(scrollXInner);
            sanityWidth = table.outerWidth();
        }
        _fnApplyToChildren(zeroOut, headerSrcEls);
        _fnApplyToChildren(function (nSizer) {
            headerContent.push(nSizer.innerHTML);
            headerWidths.push(_fnStringToCss($(nSizer).css('width')));
        }, headerSrcEls);
        _fnApplyToChildren(function (nToSize, i) {
            if ($.inArray(nToSize, dtHeaderCells) !== -1) {
                nToSize.style.width = headerWidths[i];
            }
        }, headerTrgEls);
        $(headerSrcEls).height(0);
        if (footer) {
            _fnApplyToChildren(zeroOut, footerSrcEls);
            _fnApplyToChildren(function (nSizer) {
                footerContent.push(nSizer.innerHTML);
                footerWidths.push(_fnStringToCss($(nSizer).css('width')));
            }, footerSrcEls);
            _fnApplyToChildren(function (nToSize, i) {
                nToSize.style.width = footerWidths[i];
            }, footerTrgEls);
            $(footerSrcEls).height(0);
        }
        _fnApplyToChildren(function (nSizer, i) {
            nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + '</div>';
            nSizer.style.width = headerWidths[i];
        }, headerSrcEls);
        if (footer) {
            _fnApplyToChildren(function (nSizer, i) {
                nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + footerContent[i] + '</div>';
                nSizer.style.width = footerWidths[i];
            }, footerSrcEls);
        }
        if (table.outerWidth() < sanityWidth) {
            correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == 'scroll' ? sanityWidth + barWidth : sanityWidth;
            if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == 'scroll')) {
                tableStyle.width = _fnStringToCss(correction - barWidth);
            }
            if (scrollX === '' || scrollXInner !== '') {
                _fnLog(settings, 1, 'Possible column misalignment', 6);
            }
        } else {
            correction = '100%';
        }
        divBodyStyle.width = _fnStringToCss(correction);
        divHeaderStyle.width = _fnStringToCss(correction);
        if (footer) {
            settings.nScrollFoot.style.width = _fnStringToCss(correction);
        }
        if (!scrollY) {
            if (ie67) {
                divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
            }
        }
        var iOuterWidth = table.outerWidth();
        divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
        divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);
        var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == 'scroll';
        var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
        divHeaderInnerStyle[padding] = bScrolling ? barWidth + 'px' : '0px';
        if (footer) {
            divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
            divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
            divFooterInner[0].style[padding] = bScrolling ? barWidth + 'px' : '0px';
        }
        table.children('colgroup').insertBefore(table.children('thead'));
        divBody.scroll();
        if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
            divBodyEl.scrollTop = 0;
        }
    }
    function _fnApplyToChildren(fn, an1, an2) {
        var index = 0, i = 0, iLen = an1.length;
        var nNode1, nNode2;
        while (i < iLen) {
            nNode1 = an1[i].firstChild;
            nNode2 = an2 ? an2[i].firstChild : null;
            while (nNode1) {
                if (nNode1.nodeType === 1) {
                    if (an2) {
                        fn(nNode1, nNode2, index);
                    } else {
                        fn(nNode1, index);
                    }
                    index++;
                }
                nNode1 = nNode1.nextSibling;
                nNode2 = an2 ? nNode2.nextSibling : null;
            }
            i++;
        }
    }
    var __re_html_remove = /<.*?>/g;
    function _fnCalculateColumnWidths(oSettings) {
        var table = oSettings.nTable, columns = oSettings.aoColumns, scroll = oSettings.oScroll, scrollY = scroll.sY, scrollX = scroll.sX, scrollXInner = scroll.sXInner, columnCount = columns.length, visibleColumns = _fnGetColumns(oSettings, 'bVisible'), headerCells = $('th', oSettings.nTHead), tableWidthAttr = table.getAttribute('width'), tableContainer = table.parentNode, userInputs = false, i, column, columnIdx, width, outerWidth, browser = oSettings.oBrowser, ie67 = browser.bScrollOversize;
        var styleWidth = table.style.width;
        if (styleWidth && styleWidth.indexOf('%') !== -1) {
            tableWidthAttr = styleWidth;
        }
        for (i = 0; i < visibleColumns.length; i++) {
            column = columns[visibleColumns[i]];
            if (column.sWidth !== null) {
                column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);
                userInputs = true;
            }
        }
        if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {
            for (i = 0; i < columnCount; i++) {
                var colIdx = _fnVisibleToColumnIndex(oSettings, i);
                if (colIdx !== null) {
                    columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());
                }
            }
        } else {
            var tmpTable = $(table).clone().css('visibility', 'hidden').removeAttr('id');
            tmpTable.find('tbody tr').remove();
            var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));
            tmpTable.find('thead, tfoot').remove();
            tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone());
            tmpTable.find('tfoot th, tfoot td').css('width', '');
            headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);
            for (i = 0; i < visibleColumns.length; i++) {
                column = columns[visibleColumns[i]];
                headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : '';
                if (column.sWidthOrig && scrollX) {
                    $(headerCells[i]).append($('<div/>').css({
                        width: column.sWidthOrig,
                        margin: 0,
                        padding: 0,
                        border: 0,
                        height: 1
                    }));
                }
            }
            if (oSettings.aoData.length) {
                for (i = 0; i < visibleColumns.length; i++) {
                    columnIdx = visibleColumns[i];
                    column = columns[columnIdx];
                    $(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);
                }
            }
            $('[name]', tmpTable).removeAttr('name');
            var holder = $('<div/>').css(scrollX || scrollY ? {
                position: 'absolute',
                top: 0,
                left: 0,
                height: 1,
                right: 0,
                overflow: 'hidden'
            } : {}).append(tmpTable).appendTo(tableContainer);
            if (scrollX && scrollXInner) {
                tmpTable.width(scrollXInner);
            } else if (scrollX) {
                tmpTable.css('width', 'auto');
                tmpTable.removeAttr('width');
                if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
                    tmpTable.width(tableContainer.clientWidth);
                }
            } else if (scrollY) {
                tmpTable.width(tableContainer.clientWidth);
            } else if (tableWidthAttr) {
                tmpTable.width(tableWidthAttr);
            }
            var total = 0;
            for (i = 0; i < visibleColumns.length; i++) {
                var cell = $(headerCells[i]);
                var border = cell.outerWidth() - cell.width();
                var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth();
                total += bounding;
                columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);
            }
            table.style.width = _fnStringToCss(total);
            holder.remove();
        }
        if (tableWidthAttr) {
            table.style.width = _fnStringToCss(tableWidthAttr);
        }
        if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
            var bindResize = function () {
                $(window).on('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {
                    _fnAdjustColumnSizing(oSettings);
                }));
            };
            if (ie67) {
                setTimeout(bindResize, 1000);
            } else {
                bindResize();
            }
            oSettings._reszEvt = true;
        }
    }
    var _fnThrottle = DataTable.util.throttle;
    function _fnConvertToWidth(width, parent) {
        if (!width) {
            return 0;
        }
        var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);
        var val = n[0].offsetWidth;
        n.remove();
        return val;
    }
    function _fnGetWidestNode(settings, colIdx) {
        var idx = _fnGetMaxLenString(settings, colIdx);
        if (idx < 0) {
            return null;
        }
        var data = settings.aoData[idx];
        return !data.nTr ? $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];
    }
    function _fnGetMaxLenString(settings, colIdx) {
        var s, max = -1, maxIdx = -1;
        for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
            s = _fnGetCellData(settings, i, colIdx, 'display') + '';
            s = s.replace(__re_html_remove, '');
            s = s.replace(/&nbsp;/g, ' ');
            if (s.length > max) {
                max = s.length;
                maxIdx = i;
            }
        }
        return maxIdx;
    }
    function _fnStringToCss(s) {
        if (s === null) {
            return '0px';
        }
        if (typeof s == 'number') {
            return s < 0 ? '0px' : s + 'px';
        }
        return s.match(/\d$/) ? s + 'px' : s;
    }
    function _fnSortFlatten(settings) {
        var i, iLen, k, kLen, aSort = [], aiOrig = [], aoColumns = settings.aoColumns, aDataSort, iCol, sType, srcCol, fixed = settings.aaSortingFixed, fixedObj = $.isPlainObject(fixed), nestedSort = [], add = function (a) {
                if (a.length && !$.isArray(a[0])) {
                    nestedSort.push(a);
                } else {
                    $.merge(nestedSort, a);
                }
            };
        if ($.isArray(fixed)) {
            add(fixed);
        }
        if (fixedObj && fixed.pre) {
            add(fixed.pre);
        }
        add(settings.aaSorting);
        if (fixedObj && fixed.post) {
            add(fixed.post);
        }
        for (i = 0; i < nestedSort.length; i++) {
            srcCol = nestedSort[i][0];
            aDataSort = aoColumns[srcCol].aDataSort;
            for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
                iCol = aDataSort[k];
                sType = aoColumns[iCol].sType || 'string';
                if (nestedSort[i]._idx === undefined) {
                    nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
                }
                aSort.push({
                    src: srcCol,
                    col: iCol,
                    dir: nestedSort[i][1],
                    index: nestedSort[i]._idx,
                    type: sType,
                    formatter: DataTable.ext.type.order[sType + '-pre']
                });
            }
        }
        return aSort;
    }
    function _fnSort(oSettings) {
        var i, ien, iLen, j, jLen, k, kLen, sDataType, nTh, aiOrig = [], oExtSort = DataTable.ext.type.order, aoData = oSettings.aoData, aoColumns = oSettings.aoColumns, aDataSort, data, iCol, sType, oSort, formatters = 0, sortCol, displayMaster = oSettings.aiDisplayMaster, aSort;
        _fnColumnTypes(oSettings);
        aSort = _fnSortFlatten(oSettings);
        for (i = 0, ien = aSort.length; i < ien; i++) {
            sortCol = aSort[i];
            if (sortCol.formatter) {
                formatters++;
            }
            _fnSortData(oSettings, sortCol.col);
        }
        if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
            for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
                aiOrig[displayMaster[i]] = i;
            }
            if (formatters === aSort.length) {
                displayMaster.sort(function (a, b) {
                    var x, y, k, test, sort, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;
                    for (k = 0; k < len; k++) {
                        sort = aSort[k];
                        x = dataA[sort.col];
                        y = dataB[sort.col];
                        test = x < y ? -1 : x > y ? 1 : 0;
                        if (test !== 0) {
                            return sort.dir === 'asc' ? test : -test;
                        }
                    }
                    x = aiOrig[a];
                    y = aiOrig[b];
                    return x < y ? -1 : x > y ? 1 : 0;
                });
            } else {
                displayMaster.sort(function (a, b) {
                    var x, y, k, l, test, sort, fn, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;
                    for (k = 0; k < len; k++) {
                        sort = aSort[k];
                        x = dataA[sort.col];
                        y = dataB[sort.col];
                        fn = oExtSort[sort.type + '-' + sort.dir] || oExtSort['string-' + sort.dir];
                        test = fn(x, y);
                        if (test !== 0) {
                            return test;
                        }
                    }
                    x = aiOrig[a];
                    y = aiOrig[b];
                    return x < y ? -1 : x > y ? 1 : 0;
                });
            }
        }
        oSettings.bSorted = true;
    }
    function _fnSortAria(settings) {
        var label;
        var nextSort;
        var columns = settings.aoColumns;
        var aSort = _fnSortFlatten(settings);
        var oAria = settings.oLanguage.oAria;
        for (var i = 0, iLen = columns.length; i < iLen; i++) {
            var col = columns[i];
            var asSorting = col.asSorting;
            var sTitle = col.sTitle.replace(/<.*?>/g, '');
            var th = col.nTh;
            th.removeAttribute('aria-sort');
            if (col.bSortable) {
                if (aSort.length > 0 && aSort[0].col == i) {
                    th.setAttribute('aria-sort', aSort[0].dir == 'asc' ? 'ascending' : 'descending');
                    nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
                } else {
                    nextSort = asSorting[0];
                }
                label = sTitle + (nextSort === 'asc' ? oAria.sSortAscending : oAria.sSortDescending);
            } else {
                label = sTitle;
            }
            th.setAttribute('aria-label', label);
        }
    }
    function _fnSortListener(settings, colIdx, append, callback) {
        var col = settings.aoColumns[colIdx];
        var sorting = settings.aaSorting;
        var asSorting = col.asSorting;
        var nextSortIdx;
        var next = function (a, overflow) {
            var idx = a._idx;
            if (idx === undefined) {
                idx = $.inArray(a[1], asSorting);
            }
            return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
        };
        if (typeof sorting[0] === 'number') {
            sorting = settings.aaSorting = [sorting];
        }
        if (append && settings.oFeatures.bSortMulti) {
            var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));
            if (sortIdx !== -1) {
                nextSortIdx = next(sorting[sortIdx], true);
                if (nextSortIdx === null && sorting.length === 1) {
                    nextSortIdx = 0;
                }
                if (nextSortIdx === null) {
                    sorting.splice(sortIdx, 1);
                } else {
                    sorting[sortIdx][1] = asSorting[nextSortIdx];
                    sorting[sortIdx]._idx = nextSortIdx;
                }
            } else {
                sorting.push([
                    colIdx,
                    asSorting[0],
                    0
                ]);
                sorting[sorting.length - 1]._idx = 0;
            }
        } else if (sorting.length && sorting[0][0] == colIdx) {
            nextSortIdx = next(sorting[0]);
            sorting.length = 1;
            sorting[0][1] = asSorting[nextSortIdx];
            sorting[0]._idx = nextSortIdx;
        } else {
            sorting.length = 0;
            sorting.push([
                colIdx,
                asSorting[0]
            ]);
            sorting[0]._idx = 0;
        }
        _fnReDraw(settings);
        if (typeof callback == 'function') {
            callback(settings);
        }
    }
    function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
        var col = settings.aoColumns[colIdx];
        _fnBindAction(attachTo, {}, function (e) {
            if (col.bSortable === false) {
                return;
            }
            if (settings.oFeatures.bProcessing) {
                _fnProcessingDisplay(settings, true);
                setTimeout(function () {
                    _fnSortListener(settings, colIdx, e.shiftKey, callback);
                    if (_fnDataSource(settings) !== 'ssp') {
                        _fnProcessingDisplay(settings, false);
                    }
                }, 0);
            } else {
                _fnSortListener(settings, colIdx, e.shiftKey, callback);
            }
        });
    }
    function _fnSortingClasses(settings) {
        var oldSort = settings.aLastSort;
        var sortClass = settings.oClasses.sSortColumn;
        var sort = _fnSortFlatten(settings);
        var features = settings.oFeatures;
        var i, ien, colIdx;
        if (features.bSort && features.bSortClasses) {
            for (i = 0, ien = oldSort.length; i < ien; i++) {
                colIdx = oldSort[i].src;
                $(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));
            }
            for (i = 0, ien = sort.length; i < ien; i++) {
                colIdx = sort[i].src;
                $(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));
            }
        }
        settings.aLastSort = sort;
    }
    function _fnSortData(settings, idx) {
        var column = settings.aoColumns[idx];
        var customSort = DataTable.ext.order[column.sSortDataType];
        var customData;
        if (customSort) {
            customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));
        }
        var row, cellData;
        var formatter = DataTable.ext.type.order[column.sType + '-pre'];
        for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
            row = settings.aoData[i];
            if (!row._aSortData) {
                row._aSortData = [];
            }
            if (!row._aSortData[idx] || customSort) {
                cellData = customSort ? customData[i] : _fnGetCellData(settings, i, idx, 'sort');
                row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
            }
        }
    }
    function _fnSaveState(settings) {
        if (!settings.oFeatures.bStateSave || settings.bDestroying) {
            return;
        }
        var state = {
            time: +new Date(),
            start: settings._iDisplayStart,
            length: settings._iDisplayLength,
            order: $.extend(true, [], settings.aaSorting),
            search: _fnSearchToCamel(settings.oPreviousSearch),
            columns: $.map(settings.aoColumns, function (col, i) {
                return {
                    visible: col.bVisible,
                    search: _fnSearchToCamel(settings.aoPreSearchCols[i])
                };
            })
        };
        _fnCallbackFire(settings, 'aoStateSaveParams', 'stateSaveParams', [
            settings,
            state
        ]);
        settings.oSavedState = state;
        settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
    }
    function _fnLoadState(settings, oInit, callback) {
        var i, ien;
        var columns = settings.aoColumns;
        var loaded = function (s) {
            if (!s || !s.time) {
                callback();
                return;
            }
            var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [
                settings,
                s
            ]);
            if ($.inArray(false, abStateLoad) !== -1) {
                callback();
                return;
            }
            var duration = settings.iStateDuration;
            if (duration > 0 && s.time < +new Date() - duration * 1000) {
                callback();
                return;
            }
            if (s.columns && columns.length !== s.columns.length) {
                callback();
                return;
            }
            settings.oLoadedState = $.extend(true, {}, s);
            if (s.start !== undefined) {
                settings._iDisplayStart = s.start;
                settings.iInitDisplayStart = s.start;
            }
            if (s.length !== undefined) {
                settings._iDisplayLength = s.length;
            }
            if (s.order !== undefined) {
                settings.aaSorting = [];
                $.each(s.order, function (i, col) {
                    settings.aaSorting.push(col[0] >= columns.length ? [
                        0,
                        col[1]
                    ] : col);
                });
            }
            if (s.search !== undefined) {
                $.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));
            }
            if (s.columns) {
                for (i = 0, ien = s.columns.length; i < ien; i++) {
                    var col = s.columns[i];
                    if (col.visible !== undefined) {
                        columns[i].bVisible = col.visible;
                    }
                    if (col.search !== undefined) {
                        $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
                    }
                }
            }
            _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [
                settings,
                s
            ]);
            callback();
        };
        if (!settings.oFeatures.bStateSave) {
            callback();
            return;
        }
        var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);
        if (state !== undefined) {
            loaded(state);
        }
    }
    function _fnSettingsFromNode(table) {
        var settings = DataTable.settings;
        var idx = $.inArray(table, _pluck(settings, 'nTable'));
        return idx !== -1 ? settings[idx] : null;
    }
    function _fnLog(settings, level, msg, tn) {
        msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;
        if (tn) {
            msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;
        }
        if (!level) {
            var ext = DataTable.ext;
            var type = ext.sErrMode || ext.errMode;
            if (settings) {
                _fnCallbackFire(settings, null, 'error', [
                    settings,
                    tn,
                    msg
                ]);
            }
            if (type == 'alert') {
                alert(msg);
            } else if (type == 'throw') {
                throw new Error(msg);
            } else if (typeof type == 'function') {
                type(settings, tn, msg);
            }
        } else if (window.console && console.log) {
            console.log(msg);
        }
    }
    function _fnMap(ret, src, name, mappedName) {
        if ($.isArray(name)) {
            $.each(name, function (i, val) {
                if ($.isArray(val)) {
                    _fnMap(ret, src, val[0], val[1]);
                } else {
                    _fnMap(ret, src, val);
                }
            });
            return;
        }
        if (mappedName === undefined) {
            mappedName = name;
        }
        if (src[name] !== undefined) {
            ret[mappedName] = src[name];
        }
    }
    function _fnExtend(out, extender, breakRefs) {
        var val;
        for (var prop in extender) {
            if (extender.hasOwnProperty(prop)) {
                val = extender[prop];
                if ($.isPlainObject(val)) {
                    if (!$.isPlainObject(out[prop])) {
                        out[prop] = {};
                    }
                    $.extend(true, out[prop], val);
                } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
                    out[prop] = val.slice();
                } else {
                    out[prop] = val;
                }
            }
        }
        return out;
    }
    function _fnBindAction(n, oData, fn) {
        $(n).on('click.DT', oData, function (e) {
            n.blur();
            fn(e);
        }).on('keypress.DT', oData, function (e) {
            if (e.which === 13) {
                e.preventDefault();
                fn(e);
            }
        }).on('selectstart.DT', function () {
            return false;
        });
    }
    function _fnCallbackReg(oSettings, sStore, fn, sName) {
        if (fn) {
            oSettings[sStore].push({
                'fn': fn,
                'sName': sName
            });
        }
    }
    function _fnCallbackFire(settings, callbackArr, eventName, args) {
        var ret = [];
        if (callbackArr) {
            ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
                return val.fn.apply(settings.oInstance, args);
            });
        }
        if (eventName !== null) {
            var e = $.Event(eventName + '.dt');
            $(settings.nTable).trigger(e, args);
            ret.push(e.result);
        }
        return ret;
    }
    function _fnLengthOverflow(settings) {
        var start = settings._iDisplayStart, end = settings.fnDisplayEnd(), len = settings._iDisplayLength;
        if (start >= end) {
            start = end - len;
        }
        start -= start % len;
        if (len === -1 || start < 0) {
            start = 0;
        }
        settings._iDisplayStart = start;
    }
    function _fnRenderer(settings, type) {
        var renderer = settings.renderer;
        var host = DataTable.ext.renderer[type];
        if ($.isPlainObject(renderer) && renderer[type]) {
            return host[renderer[type]] || host._;
        } else if (typeof renderer === 'string') {
            return host[renderer] || host._;
        }
        return host._;
    }
    function _fnDataSource(settings) {
        if (settings.oFeatures.bServerSide) {
            return 'ssp';
        } else if (settings.ajax || settings.sAjaxSource) {
            return 'ajax';
        }
        return 'dom';
    }
    var __apiStruct = [];
    var __arrayProto = Array.prototype;
    var _toSettings = function (mixed) {
        var idx, jq;
        var settings = DataTable.settings;
        var tables = $.map(settings, function (el, i) {
            return el.nTable;
        });
        if (!mixed) {
            return [];
        } else if (mixed.nTable && mixed.oApi) {
            return [mixed];
        } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
            idx = $.inArray(mixed, tables);
            return idx !== -1 ? [settings[idx]] : null;
        } else if (mixed && typeof mixed.settings === 'function') {
            return mixed.settings().toArray();
        } else if (typeof mixed === 'string') {
            jq = $(mixed);
        } else if (mixed instanceof $) {
            jq = mixed;
        }
        if (jq) {
            return jq.map(function (i) {
                idx = $.inArray(this, tables);
                return idx !== -1 ? settings[idx] : null;
            }).toArray();
        }
    };
    _Api = function (context, data) {
        if (!(this instanceof _Api)) {
            return new _Api(context, data);
        }
        var settings = [];
        var ctxSettings = function (o) {
            var a = _toSettings(o);
            if (a) {
                settings = settings.concat(a);
            }
        };
        if ($.isArray(context)) {
            for (var i = 0, ien = context.length; i < ien; i++) {
                ctxSettings(context[i]);
            }
        } else {
            ctxSettings(context);
        }
        this.context = _unique(settings);
        if (data) {
            $.merge(this, data);
        }
        this.selector = {
            rows: null,
            cols: null,
            opts: null
        };
        _Api.extend(this, this, __apiStruct);
    };
    DataTable.Api = _Api;
    $.extend(_Api.prototype, {
        any: function () {
            return this.count() !== 0;
        },
        concat: __arrayProto.concat,
        context: [],
        count: function () {
            return this.flatten().length;
        },
        each: function (fn) {
            for (var i = 0, ien = this.length; i < ien; i++) {
                fn.call(this, this[i], i, this);
            }
            return this;
        },
        eq: function (idx) {
            var ctx = this.context;
            return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;
        },
        filter: function (fn) {
            var a = [];
            if (__arrayProto.filter) {
                a = __arrayProto.filter.call(this, fn, this);
            } else {
                for (var i = 0, ien = this.length; i < ien; i++) {
                    if (fn.call(this, this[i], i, this)) {
                        a.push(this[i]);
                    }
                }
            }
            return new _Api(this.context, a);
        },
        flatten: function () {
            var a = [];
            return new _Api(this.context, a.concat.apply(a, this.toArray()));
        },
        join: __arrayProto.join,
        indexOf: __arrayProto.indexOf || function (obj, start) {
            for (var i = start || 0, ien = this.length; i < ien; i++) {
                if (this[i] === obj) {
                    return i;
                }
            }
            return -1;
        },
        iterator: function (flatten, type, fn, alwaysNew) {
            var a = [], ret, i, ien, j, jen, context = this.context, rows, items, item, selector = this.selector;
            if (typeof flatten === 'string') {
                alwaysNew = fn;
                fn = type;
                type = flatten;
                flatten = false;
            }
            for (i = 0, ien = context.length; i < ien; i++) {
                var apiInst = new _Api(context[i]);
                if (type === 'table') {
                    ret = fn.call(apiInst, context[i], i);
                    if (ret !== undefined) {
                        a.push(ret);
                    }
                } else if (type === 'columns' || type === 'rows') {
                    ret = fn.call(apiInst, context[i], this[i], i);
                    if (ret !== undefined) {
                        a.push(ret);
                    }
                } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
                    items = this[i];
                    if (type === 'column-rows') {
                        rows = _selector_row_indexes(context[i], selector.opts);
                    }
                    for (j = 0, jen = items.length; j < jen; j++) {
                        item = items[j];
                        if (type === 'cell') {
                            ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
                        } else {
                            ret = fn.call(apiInst, context[i], item, i, j, rows);
                        }
                        if (ret !== undefined) {
                            a.push(ret);
                        }
                    }
                }
            }
            if (a.length || alwaysNew) {
                var api = new _Api(context, flatten ? a.concat.apply([], a) : a);
                var apiSelector = api.selector;
                apiSelector.rows = selector.rows;
                apiSelector.cols = selector.cols;
                apiSelector.opts = selector.opts;
                return api;
            }
            return this;
        },
        lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {
            return this.indexOf.apply(this.toArray.reverse(), arguments);
        },
        length: 0,
        map: function (fn) {
            var a = [];
            if (__arrayProto.map) {
                a = __arrayProto.map.call(this, fn, this);
            } else {
                for (var i = 0, ien = this.length; i < ien; i++) {
                    a.push(fn.call(this, this[i], i));
                }
            }
            return new _Api(this.context, a);
        },
        pluck: function (prop) {
            return this.map(function (el) {
                return el[prop];
            });
        },
        pop: __arrayProto.pop,
        push: __arrayProto.push,
        reduce: __arrayProto.reduce || function (fn, init) {
            return _fnReduce(this, fn, init, 0, this.length, 1);
        },
        reduceRight: __arrayProto.reduceRight || function (fn, init) {
            return _fnReduce(this, fn, init, this.length - 1, -1, -1);
        },
        reverse: __arrayProto.reverse,
        selector: null,
        shift: __arrayProto.shift,
        slice: function () {
            return new _Api(this.context, this);
        },
        sort: __arrayProto.sort,
        splice: __arrayProto.splice,
        toArray: function () {
            return __arrayProto.slice.call(this);
        },
        to$: function () {
            return $(this);
        },
        toJQuery: function () {
            return $(this);
        },
        unique: function () {
            return new _Api(this.context, _unique(this));
        },
        unshift: __arrayProto.unshift
    });
    _Api.extend = function (scope, obj, ext) {
        if (!ext.length || !obj || !(obj instanceof _Api) && !obj.__dt_wrapper) {
            return;
        }
        var i, ien, j, jen, struct, inner, methodScoping = function (scope, fn, struc) {
                return function () {
                    var ret = fn.apply(scope, arguments);
                    _Api.extend(ret, ret, struc.methodExt);
                    return ret;
                };
            };
        for (i = 0, ien = ext.length; i < ien; i++) {
            struct = ext[i];
            obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;
            obj[struct.name].__dt_wrapper = true;
            _Api.extend(scope, obj[struct.name], struct.propExt);
        }
    };
    _Api.register = _api_register = function (name, val) {
        if ($.isArray(name)) {
            for (var j = 0, jen = name.length; j < jen; j++) {
                _Api.register(name[j], val);
            }
            return;
        }
        var i, ien, heir = name.split('.'), struct = __apiStruct, key, method;
        var find = function (src, name) {
            for (var i = 0, ien = src.length; i < ien; i++) {
                if (src[i].name === name) {
                    return src[i];
                }
            }
            return null;
        };
        for (i = 0, ien = heir.length; i < ien; i++) {
            method = heir[i].indexOf('()') !== -1;
            key = method ? heir[i].replace('()', '') : heir[i];
            var src = find(struct, key);
            if (!src) {
                src = {
                    name: key,
                    val: {},
                    methodExt: [],
                    propExt: []
                };
                struct.push(src);
            }
            if (i === ien - 1) {
                src.val = val;
            } else {
                struct = method ? src.methodExt : src.propExt;
            }
        }
    };
    _Api.registerPlural = _api_registerPlural = function (pluralName, singularName, val) {
        _Api.register(pluralName, val);
        _Api.register(singularName, function () {
            var ret = val.apply(this, arguments);
            if (ret === this) {
                return this;
            } else if (ret instanceof _Api) {
                return ret.length ? $.isArray(ret[0]) ? new _Api(ret.context, ret[0]) : ret[0] : undefined;
            }
            return ret;
        });
    };
    var __table_selector = function (selector, a) {
        if (typeof selector === 'number') {
            return [a[selector]];
        }
        var nodes = $.map(a, function (el, i) {
            return el.nTable;
        });
        return $(nodes).filter(selector).map(function (i) {
            var idx = $.inArray(this, nodes);
            return a[idx];
        }).toArray();
    };
    _api_register('tables()', function (selector) {
        return selector ? new _Api(__table_selector(selector, this.context)) : this;
    });
    _api_register('table()', function (selector) {
        var tables = this.tables(selector);
        var ctx = tables.context;
        return ctx.length ? new _Api(ctx[0]) : tables;
    });
    _api_registerPlural('tables().nodes()', 'table().node()', function () {
        return this.iterator('table', function (ctx) {
            return ctx.nTable;
        }, 1);
    });
    _api_registerPlural('tables().body()', 'table().body()', function () {
        return this.iterator('table', function (ctx) {
            return ctx.nTBody;
        }, 1);
    });
    _api_registerPlural('tables().header()', 'table().header()', function () {
        return this.iterator('table', function (ctx) {
            return ctx.nTHead;
        }, 1);
    });
    _api_registerPlural('tables().footer()', 'table().footer()', function () {
        return this.iterator('table', function (ctx) {
            return ctx.nTFoot;
        }, 1);
    });
    _api_registerPlural('tables().containers()', 'table().container()', function () {
        return this.iterator('table', function (ctx) {
            return ctx.nTableWrapper;
        }, 1);
    });
    _api_register('draw()', function (paging) {
        return this.iterator('table', function (settings) {
            if (paging === 'page') {
                _fnDraw(settings);
            } else {
                if (typeof paging === 'string') {
                    paging = paging === 'full-hold' ? false : true;
                }
                _fnReDraw(settings, paging === false);
            }
        });
    });
    _api_register('page()', function (action) {
        if (action === undefined) {
            return this.page.info().page;
        }
        return this.iterator('table', function (settings) {
            _fnPageChange(settings, action);
        });
    });
    _api_register('page.info()', function (action) {
        if (this.context.length === 0) {
            return undefined;
        }
        var settings = this.context[0], start = settings._iDisplayStart, len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1, visRecords = settings.fnRecordsDisplay(), all = len === -1;
        return {
            'page': all ? 0 : Math.floor(start / len),
            'pages': all ? 1 : Math.ceil(visRecords / len),
            'start': start,
            'end': settings.fnDisplayEnd(),
            'length': len,
            'recordsTotal': settings.fnRecordsTotal(),
            'recordsDisplay': visRecords,
            'serverSide': _fnDataSource(settings) === 'ssp'
        };
    });
    _api_register('page.len()', function (len) {
        if (len === undefined) {
            return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;
        }
        return this.iterator('table', function (settings) {
            _fnLengthChange(settings, len);
        });
    });
    var __reload = function (settings, holdPosition, callback) {
        if (callback) {
            var api = new _Api(settings);
            api.one('draw', function () {
                callback(api.ajax.json());
            });
        }
        if (_fnDataSource(settings) == 'ssp') {
            _fnReDraw(settings, holdPosition);
        } else {
            _fnProcessingDisplay(settings, true);
            var xhr = settings.jqXHR;
            if (xhr && xhr.readyState !== 4) {
                xhr.abort();
            }
            _fnBuildAjax(settings, [], function (json) {
                _fnClearTable(settings);
                var data = _fnAjaxDataSrc(settings, json);
                for (var i = 0, ien = data.length; i < ien; i++) {
                    _fnAddData(settings, data[i]);
                }
                _fnReDraw(settings, holdPosition);
                _fnProcessingDisplay(settings, false);
            });
        }
    };
    _api_register('ajax.json()', function () {
        var ctx = this.context;
        if (ctx.length > 0) {
            return ctx[0].json;
        }
    });
    _api_register('ajax.params()', function () {
        var ctx = this.context;
        if (ctx.length > 0) {
            return ctx[0].oAjaxData;
        }
    });
    _api_register('ajax.reload()', function (callback, resetPaging) {
        return this.iterator('table', function (settings) {
            __reload(settings, resetPaging === false, callback);
        });
    });
    _api_register('ajax.url()', function (url) {
        var ctx = this.context;
        if (url === undefined) {
            if (ctx.length === 0) {
                return undefined;
            }
            ctx = ctx[0];
            return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;
        }
        return this.iterator('table', function (settings) {
            if ($.isPlainObject(settings.ajax)) {
                settings.ajax.url = url;
            } else {
                settings.ajax = url;
            }
        });
    });
    _api_register('ajax.url().load()', function (callback, resetPaging) {
        return this.iterator('table', function (ctx) {
            __reload(ctx, resetPaging === false, callback);
        });
    });
    var _selector_run = function (type, selector, selectFn, settings, opts) {
        var out = [], res, a, i, ien, j, jen, selectorType = typeof selector;
        if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
            selector = [selector];
        }
        for (i = 0, ien = selector.length; i < ien; i++) {
            a = selector[i] && selector[i].split && !selector[i].match(/[\[\(:]/) ? selector[i].split(',') : [selector[i]];
            for (j = 0, jen = a.length; j < jen; j++) {
                res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);
                if (res && res.length) {
                    out = out.concat(res);
                }
            }
        }
        var ext = _ext.selector[type];
        if (ext.length) {
            for (i = 0, ien = ext.length; i < ien; i++) {
                out = ext[i](settings, opts, out);
            }
        }
        return _unique(out);
    };
    var _selector_opts = function (opts) {
        if (!opts) {
            opts = {};
        }
        if (opts.filter && opts.search === undefined) {
            opts.search = opts.filter;
        }
        return $.extend({
            search: 'none',
            order: 'current',
            page: 'all'
        }, opts);
    };
    var _selector_first = function (inst) {
        for (var i = 0, ien = inst.length; i < ien; i++) {
            if (inst[i].length > 0) {
                inst[0] = inst[i];
                inst[0].length = 1;
                inst.length = 1;
                inst.context = [inst.context[i]];
                return inst;
            }
        }
        inst.length = 0;
        return inst;
    };
    var _selector_row_indexes = function (settings, opts) {
        var i, ien, tmp, a = [], displayFiltered = settings.aiDisplay, displayMaster = settings.aiDisplayMaster;
        var search = opts.search, order = opts.order, page = opts.page;
        if (_fnDataSource(settings) == 'ssp') {
            return search === 'removed' ? [] : _range(0, displayMaster.length);
        } else if (page == 'current') {
            for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {
                a.push(displayFiltered[i]);
            }
        } else if (order == 'current' || order == 'applied') {
            a = search == 'none' ? displayMaster.slice() : search == 'applied' ? displayFiltered.slice() : $.map(displayMaster, function (el, i) {
                return $.inArray(el, displayFiltered) === -1 ? el : null;
            });
        } else if (order == 'index' || order == 'original') {
            for (i = 0, ien = settings.aoData.length; i < ien; i++) {
                if (search == 'none') {
                    a.push(i);
                } else {
                    tmp = $.inArray(i, displayFiltered);
                    if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {
                        a.push(i);
                    }
                }
            }
        }
        return a;
    };
    var __row_selector = function (settings, selector, opts) {
        var rows;
        var run = function (sel) {
            var selInt = _intVal(sel);
            var i, ien;
            if (selInt !== null && !opts) {
                return [selInt];
            }
            if (!rows) {
                rows = _selector_row_indexes(settings, opts);
            }
            if (selInt !== null && $.inArray(selInt, rows) !== -1) {
                return [selInt];
            } else if (sel === null || sel === undefined || sel === '') {
                return rows;
            }
            if (typeof sel === 'function') {
                return $.map(rows, function (idx) {
                    var row = settings.aoData[idx];
                    return sel(idx, row._aData, row.nTr) ? idx : null;
                });
            }
            var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr'));
            if (sel.nodeName) {
                if (sel._DT_RowIndex !== undefined) {
                    return [sel._DT_RowIndex];
                } else if (sel._DT_CellIndex) {
                    return [sel._DT_CellIndex.row];
                } else {
                    var host = $(sel).closest('*[data-dt-row]');
                    return host.length ? [host.data('dt-row')] : [];
                }
            }
            if (typeof sel === 'string' && sel.charAt(0) === '#') {
                var rowObj = settings.aIds[sel.replace(/^#/, '')];
                if (rowObj !== undefined) {
                    return [rowObj.idx];
                }
            }
            return $(nodes).filter(sel).map(function () {
                return this._DT_RowIndex;
            }).toArray();
        };
        return _selector_run('row', selector, run, settings, opts);
    };
    _api_register('rows()', function (selector, opts) {
        if (selector === undefined) {
            selector = '';
        } else if ($.isPlainObject(selector)) {
            opts = selector;
            selector = '';
        }
        opts = _selector_opts(opts);
        var inst = this.iterator('table', function (settings) {
            return __row_selector(settings, selector, opts);
        }, 1);
        inst.selector.rows = selector;
        inst.selector.opts = opts;
        return inst;
    });
    _api_register('rows().nodes()', function () {
        return this.iterator('row', function (settings, row) {
            return settings.aoData[row].nTr || undefined;
        }, 1);
    });
    _api_register('rows().data()', function () {
        return this.iterator(true, 'rows', function (settings, rows) {
            return _pluck_order(settings.aoData, rows, '_aData');
        }, 1);
    });
    _api_registerPlural('rows().cache()', 'row().cache()', function (type) {
        return this.iterator('row', function (settings, row) {
            var r = settings.aoData[row];
            return type === 'search' ? r._aFilterData : r._aSortData;
        }, 1);
    });
    _api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {
        return this.iterator('row', function (settings, row) {
            _fnInvalidate(settings, row, src);
        });
    });
    _api_registerPlural('rows().indexes()', 'row().index()', function () {
        return this.iterator('row', function (settings, row) {
            return row;
        }, 1);
    });
    _api_registerPlural('rows().ids()', 'row().id()', function (hash) {
        var a = [];
        var context = this.context;
        for (var i = 0, ien = context.length; i < ien; i++) {
            for (var j = 0, jen = this[i].length; j < jen; j++) {
                var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
                a.push((hash === true ? '#' : '') + id);
            }
        }
        return new _Api(context, a);
    });
    _api_registerPlural('rows().remove()', 'row().remove()', function () {
        var that = this;
        this.iterator('row', function (settings, row, thatIdx) {
            var data = settings.aoData;
            var rowData = data[row];
            var i, ien, j, jen;
            var loopRow, loopCells;
            data.splice(row, 1);
            for (i = 0, ien = data.length; i < ien; i++) {
                loopRow = data[i];
                loopCells = loopRow.anCells;
                if (loopRow.nTr !== null) {
                    loopRow.nTr._DT_RowIndex = i;
                }
                if (loopCells !== null) {
                    for (j = 0, jen = loopCells.length; j < jen; j++) {
                        loopCells[j]._DT_CellIndex.row = i;
                    }
                }
            }
            _fnDeleteIndex(settings.aiDisplayMaster, row);
            _fnDeleteIndex(settings.aiDisplay, row);
            _fnDeleteIndex(that[thatIdx], row, false);
            _fnLengthOverflow(settings);
            var id = settings.rowIdFn(rowData._aData);
            if (id !== undefined) {
                delete settings.aIds[id];
            }
        });
        this.iterator('table', function (settings) {
            for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
                settings.aoData[i].idx = i;
            }
        });
        return this;
    });
    _api_register('rows.add()', function (rows) {
        var newRows = this.iterator('table', function (settings) {
            var row, i, ien;
            var out = [];
            for (i = 0, ien = rows.length; i < ien; i++) {
                row = rows[i];
                if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
                    out.push(_fnAddTr(settings, row)[0]);
                } else {
                    out.push(_fnAddData(settings, row));
                }
            }
            return out;
        }, 1);
        var modRows = this.rows(-1);
        modRows.pop();
        $.merge(modRows, newRows);
        return modRows;
    });
    _api_register('row()', function (selector, opts) {
        return _selector_first(this.rows(selector, opts));
    });
    _api_register('row().data()', function (data) {
        var ctx = this.context;
        if (data === undefined) {
            return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;
        }
        ctx[0].aoData[this[0]]._aData = data;
        _fnInvalidate(ctx[0], this[0], 'data');
        return this;
    });
    _api_register('row().node()', function () {
        var ctx = this.context;
        return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
    });
    _api_register('row.add()', function (row) {
        if (row instanceof $ && row.length) {
            row = row[0];
        }
        var rows = this.iterator('table', function (settings) {
            if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
                return _fnAddTr(settings, row)[0];
            }
            return _fnAddData(settings, row);
        });
        return this.row(rows[0]);
    });
    var __details_add = function (ctx, row, data, klass) {
        var rows = [];
        var addRow = function (r, k) {
            if ($.isArray(r) || r instanceof $) {
                for (var i = 0, ien = r.length; i < ien; i++) {
                    addRow(r[i], k);
                }
                return;
            }
            if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
                rows.push(r);
            } else {
                var created = $('<tr><td/></tr>').addClass(k);
                $('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);
                rows.push(created[0]);
            }
        };
        addRow(data, klass);
        if (row._details) {
            row._details.detach();
        }
        row._details = $(rows);
        if (row._detailsShow) {
            row._details.insertAfter(row.nTr);
        }
    };
    var __details_remove = function (api, idx) {
        var ctx = api.context;
        if (ctx.length) {
            var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];
            if (row && row._details) {
                row._details.remove();
                row._detailsShow = undefined;
                row._details = undefined;
            }
        }
    };
    var __details_display = function (api, show) {
        var ctx = api.context;
        if (ctx.length && api.length) {
            var row = ctx[0].aoData[api[0]];
            if (row._details) {
                row._detailsShow = show;
                if (show) {
                    row._details.insertAfter(row.nTr);
                } else {
                    row._details.detach();
                }
                __details_events(ctx[0]);
            }
        }
    };
    var __details_events = function (settings) {
        var api = new _Api(settings);
        var namespace = '.dt.DT_details';
        var drawEvent = 'draw' + namespace;
        var colvisEvent = 'column-visibility' + namespace;
        var destroyEvent = 'destroy' + namespace;
        var data = settings.aoData;
        api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);
        if (_pluck(data, '_details').length > 0) {
            api.on(drawEvent, function (e, ctx) {
                if (settings !== ctx) {
                    return;
                }
                api.rows({ page: 'current' }).eq(0).each(function (idx) {
                    var row = data[idx];
                    if (row._detailsShow) {
                        row._details.insertAfter(row.nTr);
                    }
                });
            });
            api.on(colvisEvent, function (e, ctx, idx, vis) {
                if (settings !== ctx) {
                    return;
                }
                var row, visible = _fnVisbleColumns(ctx);
                for (var i = 0, ien = data.length; i < ien; i++) {
                    row = data[i];
                    if (row._details) {
                        row._details.children('td[colspan]').attr('colspan', visible);
                    }
                }
            });
            api.on(destroyEvent, function (e, ctx) {
                if (settings !== ctx) {
                    return;
                }
                for (var i = 0, ien = data.length; i < ien; i++) {
                    if (data[i]._details) {
                        __details_remove(api, i);
                    }
                }
            });
        }
    };
    var _emp = '';
    var _child_obj = _emp + 'row().child';
    var _child_mth = _child_obj + '()';
    _api_register(_child_mth, function (data, klass) {
        var ctx = this.context;
        if (data === undefined) {
            return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;
        } else if (data === true) {
            this.child.show();
        } else if (data === false) {
            __details_remove(this);
        } else if (ctx.length && this.length) {
            __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
        }
        return this;
    });
    _api_register([
        _child_obj + '.show()',
        _child_mth + '.show()'
    ], function (show) {
        __details_display(this, true);
        return this;
    });
    _api_register([
        _child_obj + '.hide()',
        _child_mth + '.hide()'
    ], function () {
        __details_display(this, false);
        return this;
    });
    _api_register([
        _child_obj + '.remove()',
        _child_mth + '.remove()'
    ], function () {
        __details_remove(this);
        return this;
    });
    _api_register(_child_obj + '.isShown()', function () {
        var ctx = this.context;
        if (ctx.length && this.length) {
            return ctx[0].aoData[this[0]]._detailsShow || false;
        }
        return false;
    });
    var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
    var __columnData = function (settings, column, r1, r2, rows) {
        var a = [];
        for (var row = 0, ien = rows.length; row < ien; row++) {
            a.push(_fnGetCellData(settings, rows[row], column));
        }
        return a;
    };
    var __column_selector = function (settings, selector, opts) {
        var columns = settings.aoColumns, names = _pluck(columns, 'sName'), nodes = _pluck(columns, 'nTh');
        var run = function (s) {
            var selInt = _intVal(s);
            if (s === '') {
                return _range(columns.length);
            }
            if (selInt !== null) {
                return [selInt >= 0 ? selInt : columns.length + selInt];
            }
            if (typeof s === 'function') {
                var rows = _selector_row_indexes(settings, opts);
                return $.map(columns, function (col, idx) {
                    return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;
                });
            }
            var match = typeof s === 'string' ? s.match(__re_column_selector) : '';
            if (match) {
                switch (match[2]) {
                case 'visIdx':
                case 'visible':
                    var idx = parseInt(match[1], 10);
                    if (idx < 0) {
                        var visColumns = $.map(columns, function (col, i) {
                            return col.bVisible ? i : null;
                        });
                        return [visColumns[visColumns.length + idx]];
                    }
                    return [_fnVisibleToColumnIndex(settings, idx)];
                case 'name':
                    return $.map(names, function (name, i) {
                        return name === match[1] ? i : null;
                    });
                default:
                    return [];
                }
            }
            if (s.nodeName && s._DT_CellIndex) {
                return [s._DT_CellIndex.column];
            }
            var jqResult = $(nodes).filter(s).map(function () {
                return $.inArray(this, nodes);
            }).toArray();
            if (jqResult.length || !s.nodeName) {
                return jqResult;
            }
            var host = $(s).closest('*[data-dt-column]');
            return host.length ? [host.data('dt-column')] : [];
        };
        return _selector_run('column', selector, run, settings, opts);
    };
    var __setColumnVis = function (settings, column, vis) {
        var cols = settings.aoColumns, col = cols[column], data = settings.aoData, row, cells, i, ien, tr;
        if (vis === undefined) {
            return col.bVisible;
        }
        if (col.bVisible === vis) {
            return;
        }
        if (vis) {
            var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);
            for (i = 0, ien = data.length; i < ien; i++) {
                tr = data[i].nTr;
                cells = data[i].anCells;
                if (tr) {
                    tr.insertBefore(cells[column], cells[insertBefore] || null);
                }
            }
        } else {
            $(_pluck(settings.aoData, 'anCells', column)).detach();
        }
        col.bVisible = vis;
        _fnDrawHead(settings, settings.aoHeader);
        _fnDrawHead(settings, settings.aoFooter);
        _fnSaveState(settings);
    };
    _api_register('columns()', function (selector, opts) {
        if (selector === undefined) {
            selector = '';
        } else if ($.isPlainObject(selector)) {
            opts = selector;
            selector = '';
        }
        opts = _selector_opts(opts);
        var inst = this.iterator('table', function (settings) {
            return __column_selector(settings, selector, opts);
        }, 1);
        inst.selector.cols = selector;
        inst.selector.opts = opts;
        return inst;
    });
    _api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {
        return this.iterator('column', function (settings, column) {
            return settings.aoColumns[column].nTh;
        }, 1);
    });
    _api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {
        return this.iterator('column', function (settings, column) {
            return settings.aoColumns[column].nTf;
        }, 1);
    });
    _api_registerPlural('columns().data()', 'column().data()', function () {
        return this.iterator('column-rows', __columnData, 1);
    });
    _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {
        return this.iterator('column', function (settings, column) {
            return settings.aoColumns[column].mData;
        }, 1);
    });
    _api_registerPlural('columns().cache()', 'column().cache()', function (type) {
        return this.iterator('column-rows', function (settings, column, i, j, rows) {
            return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);
        }, 1);
    });
    _api_registerPlural('columns().nodes()', 'column().nodes()', function () {
        return this.iterator('column-rows', function (settings, column, i, j, rows) {
            return _pluck_order(settings.aoData, rows, 'anCells', column);
        }, 1);
    });
    _api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {
        var ret = this.iterator('column', function (settings, column) {
            if (vis === undefined) {
                return settings.aoColumns[column].bVisible;
            }
            __setColumnVis(settings, column, vis);
        });
        if (vis !== undefined) {
            this.iterator('column', function (settings, column) {
                _fnCallbackFire(settings, null, 'column-visibility', [
                    settings,
                    column,
                    vis,
                    calc
                ]);
            });
            if (calc === undefined || calc) {
                this.columns.adjust();
            }
        }
        return ret;
    });
    _api_registerPlural('columns().indexes()', 'column().index()', function (type) {
        return this.iterator('column', function (settings, column) {
            return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;
        }, 1);
    });
    _api_register('columns.adjust()', function () {
        return this.iterator('table', function (settings) {
            _fnAdjustColumnSizing(settings);
        }, 1);
    });
    _api_register('column.index()', function (type, idx) {
        if (this.context.length !== 0) {
            var ctx = this.context[0];
            if (type === 'fromVisible' || type === 'toData') {
                return _fnVisibleToColumnIndex(ctx, idx);
            } else if (type === 'fromData' || type === 'toVisible') {
                return _fnColumnIndexToVisible(ctx, idx);
            }
        }
    });
    _api_register('column()', function (selector, opts) {
        return _selector_first(this.columns(selector, opts));
    });
    var __cell_selector = function (settings, selector, opts) {
        var data = settings.aoData;
        var rows = _selector_row_indexes(settings, opts);
        var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));
        var allCells = $([].concat.apply([], cells));
        var row;
        var columns = settings.aoColumns.length;
        var a, i, ien, j, o, host;
        var run = function (s) {
            var fnSelector = typeof s === 'function';
            if (s === null || s === undefined || fnSelector) {
                a = [];
                for (i = 0, ien = rows.length; i < ien; i++) {
                    row = rows[i];
                    for (j = 0; j < columns; j++) {
                        o = {
                            row: row,
                            column: j
                        };
                        if (fnSelector) {
                            host = data[row];
                            if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
                                a.push(o);
                            }
                        } else {
                            a.push(o);
                        }
                    }
                }
                return a;
            }
            if ($.isPlainObject(s)) {
                return [s];
            }
            var jqResult = allCells.filter(s).map(function (i, el) {
                return {
                    row: el._DT_CellIndex.row,
                    column: el._DT_CellIndex.column
                };
            }).toArray();
            if (jqResult.length || !s.nodeName) {
                return jqResult;
            }
            host = $(s).closest('*[data-dt-row]');
            return host.length ? [{
                    row: host.data('dt-row'),
                    column: host.data('dt-column')
                }] : [];
        };
        return _selector_run('cell', selector, run, settings, opts);
    };
    _api_register('cells()', function (rowSelector, columnSelector, opts) {
        if ($.isPlainObject(rowSelector)) {
            if (rowSelector.row === undefined) {
                opts = rowSelector;
                rowSelector = null;
            } else {
                opts = columnSelector;
                columnSelector = null;
            }
        }
        if ($.isPlainObject(columnSelector)) {
            opts = columnSelector;
            columnSelector = null;
        }
        if (columnSelector === null || columnSelector === undefined) {
            return this.iterator('table', function (settings) {
                return __cell_selector(settings, rowSelector, _selector_opts(opts));
            });
        }
        var columns = this.columns(columnSelector, opts);
        var rows = this.rows(rowSelector, opts);
        var a, i, ien, j, jen;
        var cells = this.iterator('table', function (settings, idx) {
            a = [];
            for (i = 0, ien = rows[idx].length; i < ien; i++) {
                for (j = 0, jen = columns[idx].length; j < jen; j++) {
                    a.push({
                        row: rows[idx][i],
                        column: columns[idx][j]
                    });
                }
            }
            return a;
        }, 1);
        $.extend(cells.selector, {
            cols: columnSelector,
            rows: rowSelector,
            opts: opts
        });
        return cells;
    });
    _api_registerPlural('cells().nodes()', 'cell().node()', function () {
        return this.iterator('cell', function (settings, row, column) {
            var data = settings.aoData[row];
            return data && data.anCells ? data.anCells[column] : undefined;
        }, 1);
    });
    _api_register('cells().data()', function () {
        return this.iterator('cell', function (settings, row, column) {
            return _fnGetCellData(settings, row, column);
        }, 1);
    });
    _api_registerPlural('cells().cache()', 'cell().cache()', function (type) {
        type = type === 'search' ? '_aFilterData' : '_aSortData';
        return this.iterator('cell', function (settings, row, column) {
            return settings.aoData[row][type][column];
        }, 1);
    });
    _api_registerPlural('cells().render()', 'cell().render()', function (type) {
        return this.iterator('cell', function (settings, row, column) {
            return _fnGetCellData(settings, row, column, type);
        }, 1);
    });
    _api_registerPlural('cells().indexes()', 'cell().index()', function () {
        return this.iterator('cell', function (settings, row, column) {
            return {
                row: row,
                column: column,
                columnVisible: _fnColumnIndexToVisible(settings, column)
            };
        }, 1);
    });
    _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {
        return this.iterator('cell', function (settings, row, column) {
            _fnInvalidate(settings, row, src, column);
        });
    });
    _api_register('cell()', function (rowSelector, columnSelector, opts) {
        return _selector_first(this.cells(rowSelector, columnSelector, opts));
    });
    _api_register('cell().data()', function (data) {
        var ctx = this.context;
        var cell = this[0];
        if (data === undefined) {
            return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;
        }
        _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
        _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);
        return this;
    });
    _api_register('order()', function (order, dir) {
        var ctx = this.context;
        if (order === undefined) {
            return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
        }
        if (typeof order === 'number') {
            order = [[
                    order,
                    dir
                ]];
        } else if (order.length && !$.isArray(order[0])) {
            order = Array.prototype.slice.call(arguments);
        }
        return this.iterator('table', function (settings) {
            settings.aaSorting = order.slice();
        });
    });
    _api_register('order.listener()', function (node, column, callback) {
        return this.iterator('table', function (settings) {
            _fnSortAttachListener(settings, node, column, callback);
        });
    });
    _api_register('order.fixed()', function (set) {
        if (!set) {
            var ctx = this.context;
            var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;
            return $.isArray(fixed) ? { pre: fixed } : fixed;
        }
        return this.iterator('table', function (settings) {
            settings.aaSortingFixed = $.extend(true, {}, set);
        });
    });
    _api_register([
        'columns().order()',
        'column().order()'
    ], function (dir) {
        var that = this;
        return this.iterator('table', function (settings, i) {
            var sort = [];
            $.each(that[i], function (j, col) {
                sort.push([
                    col,
                    dir
                ]);
            });
            settings.aaSorting = sort;
        });
    });
    _api_register('search()', function (input, regex, smart, caseInsen) {
        var ctx = this.context;
        if (input === undefined) {
            return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;
        }
        return this.iterator('table', function (settings) {
            if (!settings.oFeatures.bFilter) {
                return;
            }
            _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
                'sSearch': input + '',
                'bRegex': regex === null ? false : regex,
                'bSmart': smart === null ? true : smart,
                'bCaseInsensitive': caseInsen === null ? true : caseInsen
            }), 1);
        });
    });
    _api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {
        return this.iterator('column', function (settings, column) {
            var preSearch = settings.aoPreSearchCols;
            if (input === undefined) {
                return preSearch[column].sSearch;
            }
            if (!settings.oFeatures.bFilter) {
                return;
            }
            $.extend(preSearch[column], {
                'sSearch': input + '',
                'bRegex': regex === null ? false : regex,
                'bSmart': smart === null ? true : smart,
                'bCaseInsensitive': caseInsen === null ? true : caseInsen
            });
            _fnFilterComplete(settings, settings.oPreviousSearch, 1);
        });
    });
    _api_register('state()', function () {
        return this.context.length ? this.context[0].oSavedState : null;
    });
    _api_register('state.clear()', function () {
        return this.iterator('table', function (settings) {
            settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
        });
    });
    _api_register('state.loaded()', function () {
        return this.context.length ? this.context[0].oLoadedState : null;
    });
    _api_register('state.save()', function () {
        return this.iterator('table', function (settings) {
            _fnSaveState(settings);
        });
    });
    DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {
        var aThis = DataTable.version.split('.');
        var aThat = version.split('.');
        var iThis, iThat;
        for (var i = 0, iLen = aThat.length; i < iLen; i++) {
            iThis = parseInt(aThis[i], 10) || 0;
            iThat = parseInt(aThat[i], 10) || 0;
            if (iThis === iThat) {
                continue;
            }
            return iThis > iThat;
        }
        return true;
    };
    DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {
        var t = $(table).get(0);
        var is = false;
        if (table instanceof DataTable.Api) {
            return true;
        }
        $.each(DataTable.settings, function (i, o) {
            var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
            var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
            if (o.nTable === t || head === t || foot === t) {
                is = true;
            }
        });
        return is;
    };
    DataTable.tables = DataTable.fnTables = function (visible) {
        var api = false;
        if ($.isPlainObject(visible)) {
            api = visible.api;
            visible = visible.visible;
        }
        var a = $.map(DataTable.settings, function (o) {
            if (!visible || visible && $(o.nTable).is(':visible')) {
                return o.nTable;
            }
        });
        return api ? new _Api(a) : a;
    };
    DataTable.camelToHungarian = _fnCamelToHungarian;
    _api_register('$()', function (selector, opts) {
        var rows = this.rows(opts).nodes(), jqRows = $(rows);
        return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));
    });
    $.each([
        'on',
        'one',
        'off'
    ], function (i, key) {
        _api_register(key + '()', function () {
            var args = Array.prototype.slice.call(arguments);
            args[0] = $.map(args[0].split(/\s/), function (e) {
                return !e.match(/\.dt\b/) ? e + '.dt' : e;
            }).join(' ');
            var inst = $(this.tables().nodes());
            inst[key].apply(inst, args);
            return this;
        });
    });
    _api_register('clear()', function () {
        return this.iterator('table', function (settings) {
            _fnClearTable(settings);
        });
    });
    _api_register('settings()', function () {
        return new _Api(this.context, this.context);
    });
    _api_register('init()', function () {
        var ctx = this.context;
        return ctx.length ? ctx[0].oInit : null;
    });
    _api_register('data()', function () {
        return this.iterator('table', function (settings) {
            return _pluck(settings.aoData, '_aData');
        }).flatten();
    });
    _api_register('destroy()', function (remove) {
        remove = remove || false;
        return this.iterator('table', function (settings) {
            var orig = settings.nTableWrapper.parentNode;
            var classes = settings.oClasses;
            var table = settings.nTable;
            var tbody = settings.nTBody;
            var thead = settings.nTHead;
            var tfoot = settings.nTFoot;
            var jqTable = $(table);
            var jqTbody = $(tbody);
            var jqWrapper = $(settings.nTableWrapper);
            var rows = $.map(settings.aoData, function (r) {
                return r.nTr;
            });
            var i, ien;
            settings.bDestroying = true;
            _fnCallbackFire(settings, 'aoDestroyCallback', 'destroy', [settings]);
            if (!remove) {
                new _Api(settings).columns().visible(true);
            }
            jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
            $(window).off('.DT-' + settings.sInstance);
            if (table != thead.parentNode) {
                jqTable.children('thead').detach();
                jqTable.append(thead);
            }
            if (tfoot && table != tfoot.parentNode) {
                jqTable.children('tfoot').detach();
                jqTable.append(tfoot);
            }
            settings.aaSorting = [];
            settings.aaSortingFixed = [];
            _fnSortingClasses(settings);
            $(rows).removeClass(settings.asStripeClasses.join(' '));
            $('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone);
            if (settings.bJUI) {
                $('th span.' + classes.sSortIcon + ', td span.' + classes.sSortIcon, thead).detach();
                $('th, td', thead).each(function () {
                    var wrapper = $('div.' + classes.sSortJUIWrapper, this);
                    $(this).append(wrapper.contents());
                    wrapper.detach();
                });
            }
            jqTbody.children().detach();
            jqTbody.append(rows);
            var removedMethod = remove ? 'remove' : 'detach';
            jqTable[removedMethod]();
            jqWrapper[removedMethod]();
            if (!remove && orig) {
                orig.insertBefore(table, settings.nTableReinsertBefore);
                jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable);
                ien = settings.asDestroyStripes.length;
                if (ien) {
                    jqTbody.children().each(function (i) {
                        $(this).addClass(settings.asDestroyStripes[i % ien]);
                    });
                }
            }
            var idx = $.inArray(settings, DataTable.settings);
            if (idx !== -1) {
                DataTable.settings.splice(idx, 1);
            }
        });
    });
    $.each([
        'column',
        'row',
        'cell'
    ], function (i, type) {
        _api_register(type + 's().every()', function (fn) {
            var opts = this.selector.opts;
            var api = this;
            return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {
                fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);
            });
        });
    });
    _api_register('i18n()', function (token, def, plural) {
        var ctx = this.context[0];
        var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);
        if (resolved === undefined) {
            resolved = def;
        }
        if (plural !== undefined && $.isPlainObject(resolved)) {
            resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;
        }
        return resolved.replace('%d', plural);
    });
    DataTable.version = '1.10.15';
    DataTable.settings = [];
    DataTable.models = {};
    DataTable.models.oSearch = {
        'bCaseInsensitive': true,
        'sSearch': '',
        'bRegex': false,
        'bSmart': true
    };
    DataTable.models.oRow = {
        'nTr': null,
        'anCells': null,
        '_aData': [],
        '_aSortData': null,
        '_aFilterData': null,
        '_sFilterRow': null,
        '_sRowStripe': '',
        'src': null,
        'idx': -1
    };
    DataTable.models.oColumn = {
        'idx': null,
        'aDataSort': null,
        'asSorting': null,
        'bSearchable': null,
        'bSortable': null,
        'bVisible': null,
        '_sManualType': null,
        '_bAttrSrc': false,
        'fnCreatedCell': null,
        'fnGetData': null,
        'fnSetData': null,
        'mData': null,
        'mRender': null,
        'nTh': null,
        'nTf': null,
        'sClass': null,
        'sContentPadding': null,
        'sDefaultContent': null,
        'sName': null,
        'sSortDataType': 'std',
        'sSortingClass': null,
        'sSortingClassJUI': null,
        'sTitle': null,
        'sType': null,
        'sWidth': null,
        'sWidthOrig': null
    };
    DataTable.defaults = {
        'aaData': null,
        'aaSorting': [[
                0,
                'asc'
            ]],
        'aaSortingFixed': [],
        'ajax': null,
        'aLengthMenu': [
            10,
            25,
            50,
            100
        ],
        'aoColumns': null,
        'aoColumnDefs': null,
        'aoSearchCols': [],
        'asStripeClasses': null,
        'bAutoWidth': true,
        'bDeferRender': false,
        'bDestroy': false,
        'bFilter': true,
        'bInfo': true,
        'bJQueryUI': false,
        'bLengthChange': true,
        'bPaginate': true,
        'bProcessing': false,
        'bRetrieve': false,
        'bScrollCollapse': false,
        'bServerSide': false,
        'bSort': true,
        'bSortMulti': true,
        'bSortCellsTop': false,
        'bSortClasses': true,
        'bStateSave': false,
        'fnCreatedRow': null,
        'fnDrawCallback': null,
        'fnFooterCallback': null,
        'fnFormatNumber': function (toFormat) {
            return toFormat.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
        },
        'fnHeaderCallback': null,
        'fnInfoCallback': null,
        'fnInitComplete': null,
        'fnPreDrawCallback': null,
        'fnRowCallback': null,
        'fnServerData': null,
        'fnServerParams': null,
        'fnStateLoadCallback': function (settings) {
            try {
                return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));
            } catch (e) {
            }
        },
        'fnStateLoadParams': null,
        'fnStateLoaded': null,
        'fnStateSaveCallback': function (settings, data) {
            try {
                (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));
            } catch (e) {
            }
        },
        'fnStateSaveParams': null,
        'iStateDuration': 7200,
        'iDeferLoading': null,
        'iDisplayLength': 10,
        'iDisplayStart': 0,
        'iTabIndex': 0,
        'oClasses': {},
        'oLanguage': {
            'oAria': {
                'sSortAscending': ': activate to sort column ascending',
                'sSortDescending': ': activate to sort column descending'
            },
            'oPaginate': {
                'sFirst': 'First',
                'sLast': 'Last',
                'sNext': 'Next',
                'sPrevious': 'Previous'
            },
            'sEmptyTable': 'No data available in table',
            'sInfo': 'Showing _START_ to _END_ of _TOTAL_ entries',
            'sInfoEmpty': 'Showing 0 to 0 of 0 entries',
            'sInfoFiltered': '(filtered from _MAX_ total entries)',
            'sInfoPostFix': '',
            'sDecimal': '',
            'sThousands': ',',
            'sLengthMenu': 'Show _MENU_ entries',
            'sLoadingRecords': 'Loading...',
            'sProcessing': 'Processing...',
            'sSearch': 'Search:',
            'sSearchPlaceholder': '',
            'sUrl': '',
            'sZeroRecords': 'No matching records found'
        },
        'oSearch': $.extend({}, DataTable.models.oSearch),
        'sAjaxDataProp': 'data',
        'sAjaxSource': null,
        'sDom': 'lfrtip',
        'searchDelay': null,
        'sPaginationType': 'simple_numbers',
        'sScrollX': '',
        'sScrollXInner': '',
        'sScrollY': '',
        'sServerMethod': 'GET',
        'renderer': null,
        'rowId': 'DT_RowId'
    };
    _fnHungarianMap(DataTable.defaults);
    DataTable.defaults.column = {
        'aDataSort': null,
        'iDataSort': -1,
        'asSorting': [
            'asc',
            'desc'
        ],
        'bSearchable': true,
        'bSortable': true,
        'bVisible': true,
        'fnCreatedCell': null,
        'mData': null,
        'mRender': null,
        'sCellType': 'td',
        'sClass': '',
        'sContentPadding': '',
        'sDefaultContent': null,
        'sName': '',
        'sSortDataType': 'std',
        'sTitle': null,
        'sType': null,
        'sWidth': null
    };
    _fnHungarianMap(DataTable.defaults.column);
    DataTable.models.oSettings = {
        'oFeatures': {
            'bAutoWidth': null,
            'bDeferRender': null,
            'bFilter': null,
            'bInfo': null,
            'bLengthChange': null,
            'bPaginate': null,
            'bProcessing': null,
            'bServerSide': null,
            'bSort': null,
            'bSortMulti': null,
            'bSortClasses': null,
            'bStateSave': null
        },
        'oScroll': {
            'bCollapse': null,
            'iBarWidth': 0,
            'sX': null,
            'sXInner': null,
            'sY': null
        },
        'oLanguage': { 'fnInfoCallback': null },
        'oBrowser': {
            'bScrollOversize': false,
            'bScrollbarLeft': false,
            'bBounding': false,
            'barWidth': 0
        },
        'ajax': null,
        'aanFeatures': [],
        'aoData': [],
        'aiDisplay': [],
        'aiDisplayMaster': [],
        'aIds': {},
        'aoColumns': [],
        'aoHeader': [],
        'aoFooter': [],
        'oPreviousSearch': {},
        'aoPreSearchCols': [],
        'aaSorting': null,
        'aaSortingFixed': [],
        'asStripeClasses': null,
        'asDestroyStripes': [],
        'sDestroyWidth': 0,
        'aoRowCallback': [],
        'aoHeaderCallback': [],
        'aoFooterCallback': [],
        'aoDrawCallback': [],
        'aoRowCreatedCallback': [],
        'aoPreDrawCallback': [],
        'aoInitComplete': [],
        'aoStateSaveParams': [],
        'aoStateLoadParams': [],
        'aoStateLoaded': [],
        'sTableId': '',
        'nTable': null,
        'nTHead': null,
        'nTFoot': null,
        'nTBody': null,
        'nTableWrapper': null,
        'bDeferLoading': false,
        'bInitialised': false,
        'aoOpenRows': [],
        'sDom': null,
        'searchDelay': null,
        'sPaginationType': 'two_button',
        'iStateDuration': 0,
        'aoStateSave': [],
        'aoStateLoad': [],
        'oSavedState': null,
        'oLoadedState': null,
        'sAjaxSource': null,
        'sAjaxDataProp': null,
        'bAjaxDataGet': true,
        'jqXHR': null,
        'json': undefined,
        'oAjaxData': undefined,
        'fnServerData': null,
        'aoServerParams': [],
        'sServerMethod': null,
        'fnFormatNumber': null,
        'aLengthMenu': null,
        'iDraw': 0,
        'bDrawing': false,
        'iDrawError': -1,
        '_iDisplayLength': 10,
        '_iDisplayStart': 0,
        '_iRecordsTotal': 0,
        '_iRecordsDisplay': 0,
        'bJUI': null,
        'oClasses': {},
        'bFiltered': false,
        'bSorted': false,
        'bSortCellsTop': null,
        'oInit': null,
        'aoDestroyCallback': [],
        'fnRecordsTotal': function () {
            return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;
        },
        'fnRecordsDisplay': function () {
            return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;
        },
        'fnDisplayEnd': function () {
            var len = this._iDisplayLength, start = this._iDisplayStart, calc = start + len, records = this.aiDisplay.length, features = this.oFeatures, paginate = features.bPaginate;
            if (features.bServerSide) {
                return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);
            } else {
                return !paginate || calc > records || len === -1 ? records : calc;
            }
        },
        'oInstance': null,
        'sInstance': null,
        'iTabIndex': 0,
        'nScrollHead': null,
        'nScrollFoot': null,
        'aLastSort': [],
        'oPlugins': {},
        'rowIdFn': null,
        'rowId': null
    };
    DataTable.ext = _ext = {
        buttons: {},
        classes: {},
        builder: '-source-',
        errMode: 'alert',
        feature: [],
        search: [],
        selector: {
            cell: [],
            column: [],
            row: []
        },
        internal: {},
        legacy: { ajax: null },
        pager: {},
        renderer: {
            pageButton: {},
            header: {}
        },
        order: {},
        type: {
            detect: [],
            search: {},
            order: {}
        },
        _unique: 0,
        fnVersionCheck: DataTable.fnVersionCheck,
        iApiIndex: 0,
        oJUIClasses: {},
        sVersion: DataTable.version
    };
    $.extend(_ext, {
        afnFiltering: _ext.search,
        aTypes: _ext.type.detect,
        ofnSearch: _ext.type.search,
        oSort: _ext.type.order,
        afnSortData: _ext.order,
        aoFeatures: _ext.feature,
        oApi: _ext.internal,
        oStdClasses: _ext.classes,
        oPagination: _ext.pager
    });
    $.extend(DataTable.ext.classes, {
        'sTable': 'dataTable',
        'sNoFooter': 'no-footer',
        'sPageButton': 'paginate_button',
        'sPageButtonActive': 'current',
        'sPageButtonDisabled': 'disabled',
        'sStripeOdd': 'odd',
        'sStripeEven': 'even',
        'sRowEmpty': 'dataTables_empty',
        'sWrapper': 'dataTables_wrapper',
        'sFilter': 'dataTables_filter',
        'sInfo': 'dataTables_info',
        'sPaging': 'dataTables_paginate paging_',
        'sLength': 'dataTables_length',
        'sProcessing': 'dataTables_processing',
        'sSortAsc': 'sorting_asc',
        'sSortDesc': 'sorting_desc',
        'sSortable': 'sorting',
        'sSortableAsc': 'sorting_asc_disabled',
        'sSortableDesc': 'sorting_desc_disabled',
        'sSortableNone': 'sorting_disabled',
        'sSortColumn': 'sorting_',
        'sFilterInput': '',
        'sLengthSelect': '',
        'sScrollWrapper': 'dataTables_scroll',
        'sScrollHead': 'dataTables_scrollHead',
        'sScrollHeadInner': 'dataTables_scrollHeadInner',
        'sScrollBody': 'dataTables_scrollBody',
        'sScrollFoot': 'dataTables_scrollFoot',
        'sScrollFootInner': 'dataTables_scrollFootInner',
        'sHeaderTH': '',
        'sFooterTH': '',
        'sSortJUIAsc': '',
        'sSortJUIDesc': '',
        'sSortJUI': '',
        'sSortJUIAscAllowed': '',
        'sSortJUIDescAllowed': '',
        'sSortJUIWrapper': '',
        'sSortIcon': '',
        'sJUIHeader': '',
        'sJUIFooter': ''
    });
    (function () {
        var _empty = '';
        _empty = '';
        var _stateDefault = _empty + 'ui-state-default';
        var _sortIcon = _empty + 'css_right ui-icon ui-icon-';
        var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';
        $.extend(DataTable.ext.oJUIClasses, DataTable.ext.classes, {
            'sPageButton': 'fg-button ui-button ' + _stateDefault,
            'sPageButtonActive': 'ui-state-disabled',
            'sPageButtonDisabled': 'ui-state-disabled',
            'sPaging': 'dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ' + 'ui-buttonset-multi paging_',
            'sSortAsc': _stateDefault + ' sorting_asc',
            'sSortDesc': _stateDefault + ' sorting_desc',
            'sSortable': _stateDefault + ' sorting',
            'sSortableAsc': _stateDefault + ' sorting_asc_disabled',
            'sSortableDesc': _stateDefault + ' sorting_desc_disabled',
            'sSortableNone': _stateDefault + ' sorting_disabled',
            'sSortJUIAsc': _sortIcon + 'triangle-1-n',
            'sSortJUIDesc': _sortIcon + 'triangle-1-s',
            'sSortJUI': _sortIcon + 'carat-2-n-s',
            'sSortJUIAscAllowed': _sortIcon + 'carat-1-n',
            'sSortJUIDescAllowed': _sortIcon + 'carat-1-s',
            'sSortJUIWrapper': 'DataTables_sort_wrapper',
            'sSortIcon': 'DataTables_sort_icon',
            'sScrollHead': 'dataTables_scrollHead ' + _stateDefault,
            'sScrollFoot': 'dataTables_scrollFoot ' + _stateDefault,
            'sHeaderTH': _stateDefault,
            'sFooterTH': _stateDefault,
            'sJUIHeader': _headerFooter + ' ui-corner-tl ui-corner-tr',
            'sJUIFooter': _headerFooter + ' ui-corner-bl ui-corner-br'
        });
    }());
    var extPagination = DataTable.ext.pager;
    function _numbers(page, pages) {
        var numbers = [], buttons = extPagination.numbers_length, half = Math.floor(buttons / 2), i = 1;
        if (pages <= buttons) {
            numbers = _range(0, pages);
        } else if (page <= half) {
            numbers = _range(0, buttons - 2);
            numbers.push('ellipsis');
            numbers.push(pages - 1);
        } else if (page >= pages - 1 - half) {
            numbers = _range(pages - (buttons - 2), pages);
            numbers.splice(0, 0, 'ellipsis');
            numbers.splice(0, 0, 0);
        } else {
            numbers = _range(page - half + 2, page + half - 1);
            numbers.push('ellipsis');
            numbers.push(pages - 1);
            numbers.splice(0, 0, 'ellipsis');
            numbers.splice(0, 0, 0);
        }
        numbers.DT_el = 'span';
        return numbers;
    }
    $.extend(extPagination, {
        simple: function (page, pages) {
            return [
                'previous',
                'next'
            ];
        },
        full: function (page, pages) {
            return [
                'first',
                'previous',
                'next',
                'last'
            ];
        },
        numbers: function (page, pages) {
            return [_numbers(page, pages)];
        },
        simple_numbers: function (page, pages) {
            return [
                'previous',
                _numbers(page, pages),
                'next'
            ];
        },
        full_numbers: function (page, pages) {
            return [
                'first',
                'previous',
                _numbers(page, pages),
                'next',
                'last'
            ];
        },
        first_last_numbers: function (page, pages) {
            return [
                'first',
                _numbers(page, pages),
                'last'
            ];
        },
        _numbers: _numbers,
        numbers_length: 7
    });
    $.extend(true, DataTable.ext.renderer, {
        pageButton: {
            _: function (settings, host, idx, buttons, page, pages) {
                var classes = settings.oClasses;
                var lang = settings.oLanguage.oPaginate;
                var aria = settings.oLanguage.oAria.paginate || {};
                var btnDisplay, btnClass, counter = 0;
                var attach = function (container, buttons) {
                    var i, ien, node, button;
                    var clickHandler = function (e) {
                        _fnPageChange(settings, e.data.action, true);
                    };
                    for (i = 0, ien = buttons.length; i < ien; i++) {
                        button = buttons[i];
                        if ($.isArray(button)) {
                            var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);
                            attach(inner, button);
                        } else {
                            btnDisplay = null;
                            btnClass = '';
                            switch (button) {
                            case 'ellipsis':
                                container.append('<span class="ellipsis">&#x2026;</span>');
                                break;
                            case 'first':
                                btnDisplay = lang.sFirst;
                                btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
                                break;
                            case 'previous':
                                btnDisplay = lang.sPrevious;
                                btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
                                break;
                            case 'next':
                                btnDisplay = lang.sNext;
                                btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
                                break;
                            case 'last':
                                btnDisplay = lang.sLast;
                                btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
                                break;
                            default:
                                btnDisplay = button + 1;
                                btnClass = page === button ? classes.sPageButtonActive : '';
                                break;
                            }
                            if (btnDisplay !== null) {
                                node = $('<a>', {
                                    'class': classes.sPageButton + ' ' + btnClass,
                                    'aria-controls': settings.sTableId,
                                    'aria-label': aria[button],
                                    'data-dt-idx': counter,
                                    'tabindex': settings.iTabIndex,
                                    'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
                                }).html(btnDisplay).appendTo(container);
                                _fnBindAction(node, { action: button }, clickHandler);
                                counter++;
                            }
                        }
                    }
                };
                var activeEl;
                try {
                    activeEl = $(host).find(document.activeElement).data('dt-idx');
                } catch (e) {
                }
                attach($(host).empty(), buttons);
                if (activeEl !== undefined) {
                    $(host).find('[data-dt-idx=' + activeEl + ']').focus();
                }
            }
        }
    });
    $.extend(DataTable.ext.type.detect, [
        function (d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _isNumber(d, decimal) ? 'num' + decimal : null;
        },
        function (d, settings) {
            if (d && !(d instanceof Date) && !_re_date.test(d)) {
                return null;
            }
            var parsed = Date.parse(d);
            return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;
        },
        function (d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
        },
        function (d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
        },
        function (d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
        },
        function (d, settings) {
            return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;
        }
    ]);
    $.extend(DataTable.ext.type.search, {
        html: function (data) {
            return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, ' ').replace(_re_html, '') : '';
        },
        string: function (data) {
            return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, ' ') : data;
        }
    });
    var __numericReplace = function (d, decimalPlace, re1, re2) {
        if (d !== 0 && (!d || d === '-')) {
            return -Infinity;
        }
        if (decimalPlace) {
            d = _numToDecimal(d, decimalPlace);
        }
        if (d.replace) {
            if (re1) {
                d = d.replace(re1, '');
            }
            if (re2) {
                d = d.replace(re2, '');
            }
        }
        return d * 1;
    };
    function _addNumericSort(decimalPlace) {
        $.each({
            'num': function (d) {
                return __numericReplace(d, decimalPlace);
            },
            'num-fmt': function (d) {
                return __numericReplace(d, decimalPlace, _re_formatted_numeric);
            },
            'html-num': function (d) {
                return __numericReplace(d, decimalPlace, _re_html);
            },
            'html-num-fmt': function (d) {
                return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
            }
        }, function (key, fn) {
            _ext.type.order[key + decimalPlace + '-pre'] = fn;
            if (key.match(/^html\-/)) {
                _ext.type.search[key + decimalPlace] = _ext.type.search.html;
            }
        });
    }
    $.extend(_ext.type.order, {
        'date-pre': function (d) {
            return Date.parse(d) || -Infinity;
        },
        'html-pre': function (a) {
            return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, '').toLowerCase() : a + '';
        },
        'string-pre': function (a) {
            return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();
        },
        'string-asc': function (x, y) {
            return x < y ? -1 : x > y ? 1 : 0;
        },
        'string-desc': function (x, y) {
            return x < y ? 1 : x > y ? -1 : 0;
        }
    });
    _addNumericSort('');
    $.extend(true, DataTable.ext.renderer, {
        header: {
            _: function (settings, cell, column, classes) {
                $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
                    if (settings !== ctx) {
                        return;
                    }
                    var colIdx = column.idx;
                    cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
                });
            },
            jqueryui: function (settings, cell, column, classes) {
                $('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell);
                $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
                    if (settings !== ctx) {
                        return;
                    }
                    var colIdx = column.idx;
                    cell.removeClass(classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
                    cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + ' ' + classes.sSortJUIDesc + ' ' + classes.sSortJUI + ' ' + classes.sSortJUIAscAllowed + ' ' + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);
                });
            }
        }
    });
    var __htmlEscapeEntities = function (d) {
        return typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : d;
    };
    DataTable.render = {
        number: function (thousands, decimal, precision, prefix, postfix) {
            return {
                display: function (d) {
                    if (typeof d !== 'number' && typeof d !== 'string') {
                        return d;
                    }
                    var negative = d < 0 ? '-' : '';
                    var flo = parseFloat(d);
                    if (isNaN(flo)) {
                        return __htmlEscapeEntities(d);
                    }
                    flo = flo.toFixed(precision);
                    d = Math.abs(flo);
                    var intPart = parseInt(d, 10);
                    var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';
                    return negative + (prefix || '') + intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) + floatPart + (postfix || '');
                }
            };
        },
        text: function () {
            return { display: __htmlEscapeEntities };
        }
    };
    function _fnExternApiFunc(fn) {
        return function () {
            var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
            return DataTable.ext.internal[fn].apply(this, args);
        };
    }
    $.extend(DataTable.ext.internal, {
        _fnExternApiFunc: _fnExternApiFunc,
        _fnBuildAjax: _fnBuildAjax,
        _fnAjaxUpdate: _fnAjaxUpdate,
        _fnAjaxParameters: _fnAjaxParameters,
        _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
        _fnAjaxDataSrc: _fnAjaxDataSrc,
        _fnAddColumn: _fnAddColumn,
        _fnColumnOptions: _fnColumnOptions,
        _fnAdjustColumnSizing: _fnAdjustColumnSizing,
        _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
        _fnColumnIndexToVisible: _fnColumnIndexToVisible,
        _fnVisbleColumns: _fnVisbleColumns,
        _fnGetColumns: _fnGetColumns,
        _fnColumnTypes: _fnColumnTypes,
        _fnApplyColumnDefs: _fnApplyColumnDefs,
        _fnHungarianMap: _fnHungarianMap,
        _fnCamelToHungarian: _fnCamelToHungarian,
        _fnLanguageCompat: _fnLanguageCompat,
        _fnBrowserDetect: _fnBrowserDetect,
        _fnAddData: _fnAddData,
        _fnAddTr: _fnAddTr,
        _fnNodeToDataIndex: _fnNodeToDataIndex,
        _fnNodeToColumnIndex: _fnNodeToColumnIndex,
        _fnGetCellData: _fnGetCellData,
        _fnSetCellData: _fnSetCellData,
        _fnSplitObjNotation: _fnSplitObjNotation,
        _fnGetObjectDataFn: _fnGetObjectDataFn,
        _fnSetObjectDataFn: _fnSetObjectDataFn,
        _fnGetDataMaster: _fnGetDataMaster,
        _fnClearTable: _fnClearTable,
        _fnDeleteIndex: _fnDeleteIndex,
        _fnInvalidate: _fnInvalidate,
        _fnGetRowElements: _fnGetRowElements,
        _fnCreateTr: _fnCreateTr,
        _fnBuildHead: _fnBuildHead,
        _fnDrawHead: _fnDrawHead,
        _fnDraw: _fnDraw,
        _fnReDraw: _fnReDraw,
        _fnAddOptionsHtml: _fnAddOptionsHtml,
        _fnDetectHeader: _fnDetectHeader,
        _fnGetUniqueThs: _fnGetUniqueThs,
        _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
        _fnFilterComplete: _fnFilterComplete,
        _fnFilterCustom: _fnFilterCustom,
        _fnFilterColumn: _fnFilterColumn,
        _fnFilter: _fnFilter,
        _fnFilterCreateSearch: _fnFilterCreateSearch,
        _fnEscapeRegex: _fnEscapeRegex,
        _fnFilterData: _fnFilterData,
        _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
        _fnUpdateInfo: _fnUpdateInfo,
        _fnInfoMacros: _fnInfoMacros,
        _fnInitialise: _fnInitialise,
        _fnInitComplete: _fnInitComplete,
        _fnLengthChange: _fnLengthChange,
        _fnFeatureHtmlLength: _fnFeatureHtmlLength,
        _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
        _fnPageChange: _fnPageChange,
        _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
        _fnProcessingDisplay: _fnProcessingDisplay,
        _fnFeatureHtmlTable: _fnFeatureHtmlTable,
        _fnScrollDraw: _fnScrollDraw,
        _fnApplyToChildren: _fnApplyToChildren,
        _fnCalculateColumnWidths: _fnCalculateColumnWidths,
        _fnThrottle: _fnThrottle,
        _fnConvertToWidth: _fnConvertToWidth,
        _fnGetWidestNode: _fnGetWidestNode,
        _fnGetMaxLenString: _fnGetMaxLenString,
        _fnStringToCss: _fnStringToCss,
        _fnSortFlatten: _fnSortFlatten,
        _fnSort: _fnSort,
        _fnSortAria: _fnSortAria,
        _fnSortListener: _fnSortListener,
        _fnSortAttachListener: _fnSortAttachListener,
        _fnSortingClasses: _fnSortingClasses,
        _fnSortData: _fnSortData,
        _fnSaveState: _fnSaveState,
        _fnLoadState: _fnLoadState,
        _fnSettingsFromNode: _fnSettingsFromNode,
        _fnLog: _fnLog,
        _fnMap: _fnMap,
        _fnBindAction: _fnBindAction,
        _fnCallbackReg: _fnCallbackReg,
        _fnCallbackFire: _fnCallbackFire,
        _fnLengthOverflow: _fnLengthOverflow,
        _fnRenderer: _fnRenderer,
        _fnDataSource: _fnDataSource,
        _fnRowAttributes: _fnRowAttributes,
        _fnCalculateEnd: function () {
        }
    });
    $.fn.dataTable = DataTable;
    DataTable.$ = $;
    $.fn.dataTableSettings = DataTable.settings;
    $.fn.dataTableExt = DataTable.ext;
    $.fn.DataTable = function (opts) {
        return $(this).dataTable(opts).api();
    };
    $.each(DataTable, function (prop, val) {
        $.fn.DataTable[prop] = val;
    });
    return $.fn.dataTable;
}));
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('datatables.bootstrap', [
            'jquery',
            'datatables'
        ], function ($) {
            return factory($, window, document);
        });
    } else if (typeof exports === 'object') {
        module.exports = function (root, $) {
            if (!root) {
                root = window;
            }
            if (!$ || !$.fn.dataTable) {
                $ = require('datatables.net')(root, $).$;
            }
            return factory($, root, root.document);
        };
    } else {
        factory(jQuery, window, document);
    }
}(function ($, window, document, undefined) {
    'use strict';
    var DataTable = $.fn.dataTable;
    $.extend(true, DataTable.defaults, {
        dom: '<\'row\'<\'col-sm-6\'l><\'col-sm-6\'f>>' + '<\'row\'<\'col-sm-12\'tr>>' + '<\'row\'<\'col-sm-5\'i><\'col-sm-7\'p>>',
        renderer: 'bootstrap'
    });
    $.extend(DataTable.ext.classes, {
        sWrapper: 'dataTables_wrapper form-inline dt-bootstrap',
        sFilterInput: 'form-control input-sm',
        sLengthSelect: 'form-control input-sm',
        sProcessing: 'dataTables_processing panel panel-default'
    });
    DataTable.ext.renderer.pageButton.bootstrap = function (settings, host, idx, buttons, page, pages) {
        var api = new DataTable.Api(settings);
        var classes = settings.oClasses;
        var lang = settings.oLanguage.oPaginate;
        var aria = settings.oLanguage.oAria.paginate || {};
        var btnDisplay, btnClass, counter = 0;
        var attach = function (container, buttons) {
            var i, ien, node, button;
            var clickHandler = function (e) {
                e.preventDefault();
                if (!$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action) {
                    api.page(e.data.action).draw('page');
                }
            };
            for (i = 0, ien = buttons.length; i < ien; i++) {
                button = buttons[i];
                if ($.isArray(button)) {
                    attach(container, button);
                } else {
                    btnDisplay = '';
                    btnClass = '';
                    switch (button) {
                    case 'ellipsis':
                        btnDisplay = '&#x2026;';
                        btnClass = 'disabled';
                        break;
                    case 'first':
                        btnDisplay = lang.sFirst;
                        btnClass = button + (page > 0 ? '' : ' disabled');
                        break;
                    case 'previous':
                        btnDisplay = lang.sPrevious;
                        btnClass = button + (page > 0 ? '' : ' disabled');
                        break;
                    case 'next':
                        btnDisplay = lang.sNext;
                        btnClass = button + (page < pages - 1 ? '' : ' disabled');
                        break;
                    case 'last':
                        btnDisplay = lang.sLast;
                        btnClass = button + (page < pages - 1 ? '' : ' disabled');
                        break;
                    default:
                        btnDisplay = button + 1;
                        btnClass = page === button ? 'active' : '';
                        break;
                    }
                    if (btnDisplay) {
                        node = $('<li>', {
                            'class': classes.sPageButton + ' ' + btnClass,
                            'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
                        }).append($('<a>', {
                            'href': '#',
                            'aria-controls': settings.sTableId,
                            'aria-label': aria[button],
                            'data-dt-idx': counter,
                            'tabindex': settings.iTabIndex
                        }).html(btnDisplay)).appendTo(container);
                        settings.oApi._fnBindAction(node, { action: button }, clickHandler);
                        counter++;
                    }
                }
            }
        };
        var activeEl;
        try {
            activeEl = $(host).find(document.activeElement).data('dt-idx');
        } catch (e) {
        }
        attach($(host).empty().html('<ul class="pagination"/>').children('ul'), buttons);
        if (activeEl !== undefined) {
            $(host).find('[data-dt-idx=' + activeEl + ']').focus();
        }
    };
    return DataTable;
}));
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('datatables.buttons', [
            'jquery',
            'datatables'
        ], function ($) {
            return factory($, window, document);
        });
    } else if (typeof exports === 'object') {
        module.exports = function (root, $) {
            if (!root) {
                root = window;
            }
            if (!$ || !$.fn.dataTable) {
                $ = require('datatables.net')(root, $).$;
            }
            return factory($, root, root.document);
        };
    } else {
        factory(jQuery, window, document);
    }
}(function ($, window, document, undefined) {
    'use strict';
    var DataTable = $.fn.dataTable;
    var _instCounter = 0;
    var _buttonCounter = 0;
    var _dtButtons = DataTable.ext.buttons;
    var Buttons = function (dt, config) {
        if (typeof config === 'undefined') {
            config = {};
        }
        if (config === true) {
            config = {};
        }
        if ($.isArray(config)) {
            config = { buttons: config };
        }
        this.c = $.extend(true, {}, Buttons.defaults, config);
        if (config.buttons) {
            this.c.buttons = config.buttons;
        }
        this.s = {
            dt: new DataTable.Api(dt),
            buttons: [],
            listenKeys: '',
            namespace: 'dtb' + _instCounter++
        };
        this.dom = { container: $('<' + this.c.dom.container.tag + '/>').addClass(this.c.dom.container.className) };
        this._constructor();
    };
    $.extend(Buttons.prototype, {
        action: function (node, action) {
            var button = this._nodeToButton(node);
            if (action === undefined) {
                return button.conf.action;
            }
            button.conf.action = action;
            return this;
        },
        active: function (node, flag) {
            var button = this._nodeToButton(node);
            var klass = this.c.dom.button.active;
            var jqNode = $(button.node);
            if (flag === undefined) {
                return jqNode.hasClass(klass);
            }
            jqNode.toggleClass(klass, flag === undefined ? true : flag);
            return this;
        },
        add: function (config, idx) {
            var buttons = this.s.buttons;
            if (typeof idx === 'string') {
                var split = idx.split('-');
                var base = this.s;
                for (var i = 0, ien = split.length - 1; i < ien; i++) {
                    base = base.buttons[split[i] * 1];
                }
                buttons = base.buttons;
                idx = split[split.length - 1] * 1;
            }
            this._expandButton(buttons, config, false, idx);
            this._draw();
            return this;
        },
        container: function () {
            return this.dom.container;
        },
        disable: function (node) {
            var button = this._nodeToButton(node);
            $(button.node).addClass(this.c.dom.button.disabled);
            return this;
        },
        destroy: function () {
            $('body').off('keyup.' + this.s.namespace);
            var buttons = this.s.buttons.slice();
            var i, ien;
            for (i = 0, ien = buttons.length; i < ien; i++) {
                this.remove(buttons[i].node);
            }
            this.dom.container.remove();
            var buttonInsts = this.s.dt.settings()[0];
            for (i = 0, ien = buttonInsts.length; i < ien; i++) {
                if (buttonInsts.inst === this) {
                    buttonInsts.splice(i, 1);
                    break;
                }
            }
            return this;
        },
        enable: function (node, flag) {
            if (flag === false) {
                return this.disable(node);
            }
            var button = this._nodeToButton(node);
            $(button.node).removeClass(this.c.dom.button.disabled);
            return this;
        },
        name: function () {
            return this.c.name;
        },
        node: function (node) {
            var button = this._nodeToButton(node);
            return $(button.node);
        },
        processing: function (node, flag) {
            var button = this._nodeToButton(node);
            if (flag === undefined) {
                return $(button.node).hasClass('processing');
            }
            $(button.node).toggleClass('processing', flag);
            return this;
        },
        remove: function (node) {
            var button = this._nodeToButton(node);
            var host = this._nodeToHost(node);
            var dt = this.s.dt;
            if (button.buttons.length) {
                for (var i = button.buttons.length - 1; i >= 0; i--) {
                    this.remove(button.buttons[i].node);
                }
            }
            if (button.conf.destroy) {
                button.conf.destroy.call(dt.button(node), dt, $(node), button.conf);
            }
            this._removeKey(button.conf);
            $(button.node).remove();
            var idx = $.inArray(button, host);
            host.splice(idx, 1);
            return this;
        },
        text: function (node, label) {
            var button = this._nodeToButton(node);
            var buttonLiner = this.c.dom.collection.buttonLiner;
            var linerTag = button.inCollection && buttonLiner && buttonLiner.tag ? buttonLiner.tag : this.c.dom.buttonLiner.tag;
            var dt = this.s.dt;
            var jqNode = $(button.node);
            var text = function (opt) {
                return typeof opt === 'function' ? opt(dt, jqNode, button.conf) : opt;
            };
            if (label === undefined) {
                return text(button.conf.text);
            }
            button.conf.text = label;
            if (linerTag) {
                jqNode.children(linerTag).html(text(label));
            } else {
                jqNode.html(text(label));
            }
            return this;
        },
        _constructor: function () {
            var that = this;
            var dt = this.s.dt;
            var dtSettings = dt.settings()[0];
            var buttons = this.c.buttons;
            if (!dtSettings._buttons) {
                dtSettings._buttons = [];
            }
            dtSettings._buttons.push({
                inst: this,
                name: this.c.name
            });
            for (var i = 0, ien = buttons.length; i < ien; i++) {
                this.add(buttons[i]);
            }
            dt.on('destroy', function () {
                that.destroy();
            });
            $('body').on('keyup.' + this.s.namespace, function (e) {
                if (!document.activeElement || document.activeElement === document.body) {
                    var character = String.fromCharCode(e.keyCode).toLowerCase();
                    if (that.s.listenKeys.toLowerCase().indexOf(character) !== -1) {
                        that._keypress(character, e);
                    }
                }
            });
        },
        _addKey: function (conf) {
            if (conf.key) {
                this.s.listenKeys += $.isPlainObject(conf.key) ? conf.key.key : conf.key;
            }
        },
        _draw: function (container, buttons) {
            if (!container) {
                container = this.dom.container;
                buttons = this.s.buttons;
            }
            container.children().detach();
            for (var i = 0, ien = buttons.length; i < ien; i++) {
                container.append(buttons[i].inserter);
                if (buttons[i].buttons && buttons[i].buttons.length) {
                    this._draw(buttons[i].collection, buttons[i].buttons);
                }
            }
        },
        _expandButton: function (attachTo, button, inCollection, attachPoint) {
            var dt = this.s.dt;
            var buttonCounter = 0;
            var buttons = !$.isArray(button) ? [button] : button;
            for (var i = 0, ien = buttons.length; i < ien; i++) {
                var conf = this._resolveExtends(buttons[i]);
                if (!conf) {
                    continue;
                }
                if ($.isArray(conf)) {
                    this._expandButton(attachTo, conf, inCollection, attachPoint);
                    continue;
                }
                var built = this._buildButton(conf, inCollection);
                if (!built) {
                    continue;
                }
                if (attachPoint !== undefined) {
                    attachTo.splice(attachPoint, 0, built);
                    attachPoint++;
                } else {
                    attachTo.push(built);
                }
                if (built.conf.buttons) {
                    var collectionDom = this.c.dom.collection;
                    built.collection = $('<' + collectionDom.tag + '/>').addClass(collectionDom.className).attr('role', 'menu');
                    built.conf._collection = built.collection;
                    this._expandButton(built.buttons, built.conf.buttons, true, attachPoint);
                }
                if (conf.init) {
                    conf.init.call(dt.button(built.node), dt, $(built.node), conf);
                }
                buttonCounter++;
            }
        },
        _buildButton: function (config, inCollection) {
            var buttonDom = this.c.dom.button;
            var linerDom = this.c.dom.buttonLiner;
            var collectionDom = this.c.dom.collection;
            var dt = this.s.dt;
            var text = function (opt) {
                return typeof opt === 'function' ? opt(dt, button, config) : opt;
            };
            if (inCollection && collectionDom.button) {
                buttonDom = collectionDom.button;
            }
            if (inCollection && collectionDom.buttonLiner) {
                linerDom = collectionDom.buttonLiner;
            }
            if (config.available && !config.available(dt, config)) {
                return false;
            }
            var action = function (e, dt, button, config) {
                config.action.call(dt.button(button), e, dt, button, config);
                $(dt.table().node()).triggerHandler('buttons-action.dt', [
                    dt.button(button),
                    dt,
                    button,
                    config
                ]);
            };
            var button = $('<' + buttonDom.tag + '/>').addClass(buttonDom.className).attr('tabindex', this.s.dt.settings()[0].iTabIndex).attr('aria-controls', this.s.dt.table().node().id).on('click.dtb', function (e) {
                e.preventDefault();
                if (!button.hasClass(buttonDom.disabled) && config.action) {
                    action(e, dt, button, config);
                }
                button.blur();
            }).on('keyup.dtb', function (e) {
                if (e.keyCode === 13) {
                    if (!button.hasClass(buttonDom.disabled) && config.action) {
                        action(e, dt, button, config);
                    }
                }
            });
            if (buttonDom.tag.toLowerCase() === 'a') {
                button.attr('href', '#');
            }
            if (linerDom.tag) {
                var liner = $('<' + linerDom.tag + '/>').html(text(config.text)).addClass(linerDom.className);
                if (linerDom.tag.toLowerCase() === 'a') {
                    liner.attr('href', '#');
                }
                button.append(liner);
            } else {
                button.html(text(config.text));
            }
            if (config.enabled === false) {
                button.addClass(buttonDom.disabled);
            }
            if (config.className) {
                button.addClass(config.className);
            }
            if (config.titleAttr) {
                button.attr('title', text(config.titleAttr));
            }
            if (!config.namespace) {
                config.namespace = '.dt-button-' + _buttonCounter++;
            }
            var buttonContainer = this.c.dom.buttonContainer;
            var inserter;
            if (buttonContainer && buttonContainer.tag) {
                inserter = $('<' + buttonContainer.tag + '/>').addClass(buttonContainer.className).append(button);
            } else {
                inserter = button;
            }
            this._addKey(config);
            return {
                conf: config,
                node: button.get(0),
                inserter: inserter,
                buttons: [],
                inCollection: inCollection,
                collection: null
            };
        },
        _nodeToButton: function (node, buttons) {
            if (!buttons) {
                buttons = this.s.buttons;
            }
            for (var i = 0, ien = buttons.length; i < ien; i++) {
                if (buttons[i].node === node) {
                    return buttons[i];
                }
                if (buttons[i].buttons.length) {
                    var ret = this._nodeToButton(node, buttons[i].buttons);
                    if (ret) {
                        return ret;
                    }
                }
            }
        },
        _nodeToHost: function (node, buttons) {
            if (!buttons) {
                buttons = this.s.buttons;
            }
            for (var i = 0, ien = buttons.length; i < ien; i++) {
                if (buttons[i].node === node) {
                    return buttons;
                }
                if (buttons[i].buttons.length) {
                    var ret = this._nodeToHost(node, buttons[i].buttons);
                    if (ret) {
                        return ret;
                    }
                }
            }
        },
        _keypress: function (character, e) {
            var run = function (conf, node) {
                if (!conf.key) {
                    return;
                }
                if (conf.key === character) {
                    $(node).click();
                } else if ($.isPlainObject(conf.key)) {
                    if (conf.key.key !== character) {
                        return;
                    }
                    if (conf.key.shiftKey && !e.shiftKey) {
                        return;
                    }
                    if (conf.key.altKey && !e.altKey) {
                        return;
                    }
                    if (conf.key.ctrlKey && !e.ctrlKey) {
                        return;
                    }
                    if (conf.key.metaKey && !e.metaKey) {
                        return;
                    }
                    $(node).click();
                }
            };
            var recurse = function (a) {
                for (var i = 0, ien = a.length; i < ien; i++) {
                    run(a[i].conf, a[i].node);
                    if (a[i].buttons.length) {
                        recurse(a[i].buttons);
                    }
                }
            };
            recurse(this.s.buttons);
        },
        _removeKey: function (conf) {
            if (conf.key) {
                var character = $.isPlainObject(conf.key) ? conf.key.key : conf.key;
                var a = this.s.listenKeys.split('');
                var idx = $.inArray(character, a);
                a.splice(idx, 1);
                this.s.listenKeys = a.join('');
            }
        },
        _resolveExtends: function (conf) {
            var dt = this.s.dt;
            var i, ien;
            var toConfObject = function (base) {
                var loop = 0;
                while (!$.isPlainObject(base) && !$.isArray(base)) {
                    if (base === undefined) {
                        return;
                    }
                    if (typeof base === 'function') {
                        base = base(dt, conf);
                        if (!base) {
                            return false;
                        }
                    } else if (typeof base === 'string') {
                        if (!_dtButtons[base]) {
                            throw 'Unknown button type: ' + base;
                        }
                        base = _dtButtons[base];
                    }
                    loop++;
                    if (loop > 30) {
                        throw 'Buttons: Too many iterations';
                    }
                }
                return $.isArray(base) ? base : $.extend({}, base);
            };
            conf = toConfObject(conf);
            while (conf && conf.extend) {
                if (!_dtButtons[conf.extend]) {
                    throw 'Cannot extend unknown button type: ' + conf.extend;
                }
                var objArray = toConfObject(_dtButtons[conf.extend]);
                if ($.isArray(objArray)) {
                    return objArray;
                } else if (!objArray) {
                    return false;
                }
                var originalClassName = objArray.className;
                conf = $.extend({}, objArray, conf);
                if (originalClassName && conf.className !== originalClassName) {
                    conf.className = originalClassName + ' ' + conf.className;
                }
                var postfixButtons = conf.postfixButtons;
                if (postfixButtons) {
                    if (!conf.buttons) {
                        conf.buttons = [];
                    }
                    for (i = 0, ien = postfixButtons.length; i < ien; i++) {
                        conf.buttons.push(postfixButtons[i]);
                    }
                    conf.postfixButtons = null;
                }
                var prefixButtons = conf.prefixButtons;
                if (prefixButtons) {
                    if (!conf.buttons) {
                        conf.buttons = [];
                    }
                    for (i = 0, ien = prefixButtons.length; i < ien; i++) {
                        conf.buttons.splice(i, 0, prefixButtons[i]);
                    }
                    conf.prefixButtons = null;
                }
                conf.extend = objArray.extend;
            }
            return conf;
        }
    });
    Buttons.background = function (show, className, fade) {
        if (fade === undefined) {
            fade = 400;
        }
        if (show) {
            $('<div/>').addClass(className).css('display', 'none').appendTo('body').fadeIn(fade);
        } else {
            $('body > div.' + className).fadeOut(fade, function () {
                $(this).removeClass(className).remove();
            });
        }
    };
    Buttons.instanceSelector = function (group, buttons) {
        if (!group) {
            return $.map(buttons, function (v) {
                return v.inst;
            });
        }
        var ret = [];
        var names = $.map(buttons, function (v) {
            return v.name;
        });
        var process = function (input) {
            if ($.isArray(input)) {
                for (var i = 0, ien = input.length; i < ien; i++) {
                    process(input[i]);
                }
                return;
            }
            if (typeof input === 'string') {
                if (input.indexOf(',') !== -1) {
                    process(input.split(','));
                } else {
                    var idx = $.inArray($.trim(input), names);
                    if (idx !== -1) {
                        ret.push(buttons[idx].inst);
                    }
                }
            } else if (typeof input === 'number') {
                ret.push(buttons[input].inst);
            }
        };
        process(group);
        return ret;
    };
    Buttons.buttonSelector = function (insts, selector) {
        var ret = [];
        var nodeBuilder = function (a, buttons, baseIdx) {
            var button;
            var idx;
            for (var i = 0, ien = buttons.length; i < ien; i++) {
                button = buttons[i];
                if (button) {
                    idx = baseIdx !== undefined ? baseIdx + i : i + '';
                    a.push({
                        node: button.node,
                        name: button.conf.name,
                        idx: idx
                    });
                    if (button.buttons) {
                        nodeBuilder(a, button.buttons, idx + '-');
                    }
                }
            }
        };
        var run = function (selector, inst) {
            var i, ien;
            var buttons = [];
            nodeBuilder(buttons, inst.s.buttons);
            var nodes = $.map(buttons, function (v) {
                return v.node;
            });
            if ($.isArray(selector) || selector instanceof $) {
                for (i = 0, ien = selector.length; i < ien; i++) {
                    run(selector[i], inst);
                }
                return;
            }
            if (selector === null || selector === undefined || selector === '*') {
                for (i = 0, ien = buttons.length; i < ien; i++) {
                    ret.push({
                        inst: inst,
                        node: buttons[i].node
                    });
                }
            } else if (typeof selector === 'number') {
                ret.push({
                    inst: inst,
                    node: inst.s.buttons[selector].node
                });
            } else if (typeof selector === 'string') {
                if (selector.indexOf(',') !== -1) {
                    var a = selector.split(',');
                    for (i = 0, ien = a.length; i < ien; i++) {
                        run($.trim(a[i]), inst);
                    }
                } else if (selector.match(/^\d+(\-\d+)*$/)) {
                    var indexes = $.map(buttons, function (v) {
                        return v.idx;
                    });
                    ret.push({
                        inst: inst,
                        node: buttons[$.inArray(selector, indexes)].node
                    });
                } else if (selector.indexOf(':name') !== -1) {
                    var name = selector.replace(':name', '');
                    for (i = 0, ien = buttons.length; i < ien; i++) {
                        if (buttons[i].name === name) {
                            ret.push({
                                inst: inst,
                                node: buttons[i].node
                            });
                        }
                    }
                } else {
                    $(nodes).filter(selector).each(function () {
                        ret.push({
                            inst: inst,
                            node: this
                        });
                    });
                }
            } else if (typeof selector === 'object' && selector.nodeName) {
                var idx = $.inArray(selector, nodes);
                if (idx !== -1) {
                    ret.push({
                        inst: inst,
                        node: nodes[idx]
                    });
                }
            }
        };
        for (var i = 0, ien = insts.length; i < ien; i++) {
            var inst = insts[i];
            run(selector, inst);
        }
        return ret;
    };
    Buttons.defaults = {
        buttons: [
            'copy',
            'excel',
            'csv',
            'pdf',
            'print'
        ],
        name: 'main',
        tabIndex: 0,
        dom: {
            container: {
                tag: 'div',
                className: 'dt-buttons'
            },
            collection: {
                tag: 'div',
                className: 'dt-button-collection'
            },
            button: {
                tag: 'a',
                className: 'dt-button',
                active: 'active',
                disabled: 'disabled'
            },
            buttonLiner: {
                tag: 'span',
                className: ''
            }
        }
    };
    Buttons.version = '1.3.1';
    $.extend(_dtButtons, {
        collection: {
            text: function (dt) {
                return dt.i18n('buttons.collection', 'Collection');
            },
            className: 'buttons-collection',
            action: function (e, dt, button, config) {
                var host = button;
                var hostOffset = host.offset();
                var tableContainer = $(dt.table().container());
                var multiLevel = false;
                if ($('div.dt-button-background').length) {
                    multiLevel = $('.dt-button-collection').offset();
                    $('body').trigger('click.dtb-collection');
                }
                config._collection.addClass(config.collectionLayout).css('display', 'none').appendTo('body').fadeIn(config.fade);
                var position = config._collection.css('position');
                if (multiLevel && position === 'absolute') {
                    config._collection.css({
                        top: multiLevel.top,
                        left: multiLevel.left
                    });
                } else if (position === 'absolute') {
                    config._collection.css({
                        top: hostOffset.top + host.outerHeight(),
                        left: hostOffset.left
                    });
                    var listRight = hostOffset.left + config._collection.outerWidth();
                    var tableRight = tableContainer.offset().left + tableContainer.width();
                    if (listRight > tableRight) {
                        config._collection.css('left', hostOffset.left - (listRight - tableRight));
                    }
                } else {
                    var top = config._collection.height() / 2;
                    if (top > $(window).height() / 2) {
                        top = $(window).height() / 2;
                    }
                    config._collection.css('marginTop', top * -1);
                }
                if (config.background) {
                    Buttons.background(true, config.backgroundClassName, config.fade);
                }
                setTimeout(function () {
                    $('div.dt-button-background').on('click.dtb-collection', function () {
                    });
                    $('body').on('click.dtb-collection', function (e) {
                        var back = $.fn.addBack ? 'addBack' : 'andSelf';
                        if (!$(e.target).parents()[back]().filter(config._collection).length) {
                            config._collection.fadeOut(config.fade, function () {
                                config._collection.detach();
                            });
                            $('div.dt-button-background').off('click.dtb-collection');
                            Buttons.background(false, config.backgroundClassName, config.fade);
                            $('body').off('click.dtb-collection');
                            dt.off('buttons-action.b-internal');
                        }
                    });
                }, 10);
                if (config.autoClose) {
                    dt.on('buttons-action.b-internal', function () {
                        $('div.dt-button-background').click();
                    });
                }
            },
            background: true,
            collectionLayout: '',
            backgroundClassName: 'dt-button-background',
            autoClose: false,
            fade: 400
        },
        copy: function (dt, conf) {
            if (_dtButtons.copyHtml5) {
                return 'copyHtml5';
            }
            if (_dtButtons.copyFlash && _dtButtons.copyFlash.available(dt, conf)) {
                return 'copyFlash';
            }
        },
        csv: function (dt, conf) {
            if (_dtButtons.csvHtml5 && _dtButtons.csvHtml5.available(dt, conf)) {
                return 'csvHtml5';
            }
            if (_dtButtons.csvFlash && _dtButtons.csvFlash.available(dt, conf)) {
                return 'csvFlash';
            }
        },
        excel: function (dt, conf) {
            if (_dtButtons.excelHtml5 && _dtButtons.excelHtml5.available(dt, conf)) {
                return 'excelHtml5';
            }
            if (_dtButtons.excelFlash && _dtButtons.excelFlash.available(dt, conf)) {
                return 'excelFlash';
            }
        },
        pdf: function (dt, conf) {
            if (_dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available(dt, conf)) {
                return 'pdfHtml5';
            }
            if (_dtButtons.pdfFlash && _dtButtons.pdfFlash.available(dt, conf)) {
                return 'pdfFlash';
            }
        },
        pageLength: function (dt) {
            var lengthMenu = dt.settings()[0].aLengthMenu;
            var vals = $.isArray(lengthMenu[0]) ? lengthMenu[0] : lengthMenu;
            var lang = $.isArray(lengthMenu[0]) ? lengthMenu[1] : lengthMenu;
            var text = function (dt) {
                return dt.i18n('buttons.pageLength', {
                    '-1': 'Show all rows',
                    _: 'Show %d rows'
                }, dt.page.len());
            };
            return {
                extend: 'collection',
                text: text,
                className: 'buttons-page-length',
                autoClose: true,
                buttons: $.map(vals, function (val, i) {
                    return {
                        text: lang[i],
                        className: 'button-page-length',
                        action: function (e, dt) {
                            dt.page.len(val).draw();
                        },
                        init: function (dt, node, conf) {
                            var that = this;
                            var fn = function () {
                                that.active(dt.page.len() === val);
                            };
                            dt.on('length.dt' + conf.namespace, fn);
                            fn();
                        },
                        destroy: function (dt, node, conf) {
                            dt.off('length.dt' + conf.namespace);
                        }
                    };
                }),
                init: function (dt, node, conf) {
                    var that = this;
                    dt.on('length.dt' + conf.namespace, function () {
                        that.text(text(dt));
                    });
                },
                destroy: function (dt, node, conf) {
                    dt.off('length.dt' + conf.namespace);
                }
            };
        }
    });
    DataTable.Api.register('buttons()', function (group, selector) {
        if (selector === undefined) {
            selector = group;
            group = undefined;
        }
        this.selector.buttonGroup = group;
        var res = this.iterator(true, 'table', function (ctx) {
            if (ctx._buttons) {
                return Buttons.buttonSelector(Buttons.instanceSelector(group, ctx._buttons), selector);
            }
        }, true);
        res._groupSelector = group;
        return res;
    });
    DataTable.Api.register('button()', function (group, selector) {
        var buttons = this.buttons(group, selector);
        if (buttons.length > 1) {
            buttons.splice(1, buttons.length);
        }
        return buttons;
    });
    DataTable.Api.registerPlural('buttons().active()', 'button().active()', function (flag) {
        if (flag === undefined) {
            return this.map(function (set) {
                return set.inst.active(set.node);
            });
        }
        return this.each(function (set) {
            set.inst.active(set.node, flag);
        });
    });
    DataTable.Api.registerPlural('buttons().action()', 'button().action()', function (action) {
        if (action === undefined) {
            return this.map(function (set) {
                return set.inst.action(set.node);
            });
        }
        return this.each(function (set) {
            set.inst.action(set.node, action);
        });
    });
    DataTable.Api.register([
        'buttons().enable()',
        'button().enable()'
    ], function (flag) {
        return this.each(function (set) {
            set.inst.enable(set.node, flag);
        });
    });
    DataTable.Api.register([
        'buttons().disable()',
        'button().disable()'
    ], function () {
        return this.each(function (set) {
            set.inst.disable(set.node);
        });
    });
    DataTable.Api.registerPlural('buttons().nodes()', 'button().node()', function () {
        var jq = $();
        $(this.each(function (set) {
            jq = jq.add(set.inst.node(set.node));
        }));
        return jq;
    });
    DataTable.Api.registerPlural('buttons().processing()', 'button().processing()', function (flag) {
        if (flag === undefined) {
            return this.map(function (set) {
                return set.inst.processing(set.node);
            });
        }
        return this.each(function (set) {
            set.inst.processing(set.node, flag);
        });
    });
    DataTable.Api.registerPlural('buttons().text()', 'button().text()', function (label) {
        if (label === undefined) {
            return this.map(function (set) {
                return set.inst.text(set.node);
            });
        }
        return this.each(function (set) {
            set.inst.text(set.node, label);
        });
    });
    DataTable.Api.registerPlural('buttons().trigger()', 'button().trigger()', function () {
        return this.each(function (set) {
            set.inst.node(set.node).trigger('click');
        });
    });
    DataTable.Api.registerPlural('buttons().containers()', 'buttons().container()', function () {
        var jq = $();
        var groupSelector = this._groupSelector;
        this.iterator(true, 'table', function (ctx) {
            if (ctx._buttons) {
                var insts = Buttons.instanceSelector(groupSelector, ctx._buttons);
                for (var i = 0, ien = insts.length; i < ien; i++) {
                    jq = jq.add(insts[i].container());
                }
            }
        });
        return jq;
    });
    DataTable.Api.register('button().add()', function (idx, conf) {
        var ctx = this.context;
        if (ctx.length) {
            var inst = Buttons.instanceSelector(this._groupSelector, ctx[0]._buttons);
            if (inst.length) {
                inst[0].add(conf, idx);
            }
        }
        return this.button(this._groupSelector, idx);
    });
    DataTable.Api.register('buttons().destroy()', function () {
        this.pluck('inst').unique().each(function (inst) {
            inst.destroy();
        });
        return this;
    });
    DataTable.Api.registerPlural('buttons().remove()', 'buttons().remove()', function () {
        this.each(function (set) {
            set.inst.remove(set.node);
        });
        return this;
    });
    var _infoTimer;
    DataTable.Api.register('buttons.info()', function (title, message, time) {
        var that = this;
        if (title === false) {
            $('#datatables_buttons_info').fadeOut(function () {
                $(this).remove();
            });
            clearTimeout(_infoTimer);
            _infoTimer = null;
            return this;
        }
        if (_infoTimer) {
            clearTimeout(_infoTimer);
        }
        if ($('#datatables_buttons_info').length) {
            $('#datatables_buttons_info').remove();
        }
        title = title ? '<h2>' + title + '</h2>' : '';
        $('<div id="datatables_buttons_info" class="dt-button-info"/>').html(title).append($('<div/>')[typeof message === 'string' ? 'html' : 'append'](message)).css('display', 'none').appendTo('body').fadeIn();
        if (time !== undefined && time !== 0) {
            _infoTimer = setTimeout(function () {
                that.buttons.info(false);
            }, time);
        }
        return this;
    });
    DataTable.Api.register('buttons.exportData()', function (options) {
        if (this.context.length) {
            return _exportData(new DataTable.Api(this.context[0]), options);
        }
    });
    var _exportTextarea = $('<textarea/>')[0];
    var _exportData = function (dt, inOpts) {
        var config = $.extend(true, {}, {
            rows: null,
            columns: '',
            modifier: {
                search: 'applied',
                order: 'applied'
            },
            orthogonal: 'display',
            stripHtml: true,
            stripNewlines: true,
            decodeEntities: true,
            trim: true,
            format: {
                header: function (d) {
                    return strip(d);
                },
                footer: function (d) {
                    return strip(d);
                },
                body: function (d) {
                    return strip(d);
                }
            }
        }, inOpts);
        var strip = function (str) {
            if (typeof str !== 'string') {
                return str;
            }
            str = str.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
            if (config.stripHtml) {
                str = str.replace(/<[^>]*>/g, '');
            }
            if (config.trim) {
                str = str.replace(/^\s+|\s+$/g, '');
            }
            if (config.stripNewlines) {
                str = str.replace(/\n/g, ' ');
            }
            if (config.decodeEntities) {
                _exportTextarea.innerHTML = str;
                str = _exportTextarea.value;
            }
            return str;
        };
        var header = dt.columns(config.columns).indexes().map(function (idx) {
            var el = dt.column(idx).header();
            return config.format.header(el.innerHTML, idx, el);
        }).toArray();
        var footer = dt.table().footer() ? dt.columns(config.columns).indexes().map(function (idx) {
            var el = dt.column(idx).footer();
            return config.format.footer(el ? el.innerHTML : '', idx, el);
        }).toArray() : null;
        var rowIndexes = dt.rows(config.rows, config.modifier).indexes().toArray();
        var selectedCells = dt.cells(rowIndexes, config.columns);
        var cells = selectedCells.render(config.orthogonal).toArray();
        var cellNodes = selectedCells.nodes().toArray();
        var columns = header.length;
        var rows = columns > 0 ? cells.length / columns : 0;
        var body = new Array(rows);
        var cellCounter = 0;
        for (var i = 0, ien = rows; i < ien; i++) {
            var row = new Array(columns);
            for (var j = 0; j < columns; j++) {
                row[j] = config.format.body(cells[cellCounter], i, j, cellNodes[cellCounter]);
                cellCounter++;
            }
            body[i] = row;
        }
        return {
            header: header,
            footer: footer,
            body: body
        };
    };
    $.fn.dataTable.Buttons = Buttons;
    $.fn.DataTable.Buttons = Buttons;
    $(document).on('init.dt plugin-init.dt', function (e, settings) {
        if (e.namespace !== 'dt') {
            return;
        }
        var opts = settings.oInit.buttons || DataTable.defaults.buttons;
        if (opts && !settings._buttons) {
            new Buttons(settings, opts).container();
        }
    });
    DataTable.ext.feature.push({
        fnInit: function (settings) {
            var api = new DataTable.Api(settings);
            var opts = api.init().buttons || DataTable.defaults.buttons;
            return new Buttons(api, opts).container();
        },
        cFeature: 'B'
    });
    return Buttons;
}));
(function () {
    (function (f) {
        if (typeof exports === 'object' && typeof module !== 'undefined') {
            module.exports = f();
        } else if (typeof define === 'function' && define.amd) {
            define('jszip', [], f);
        } else {
            var g;
            if (typeof window !== 'undefined') {
                g = window;
            } else if (typeof global !== 'undefined') {
                g = global;
            } else if (typeof self !== 'undefined') {
                g = self;
            } else {
                g = this;
            }
            g.JSZip = f();
        }
    }(function () {
        var define, module, exports;
        return function e(t, n, r) {
            function s(o, u) {
                if (!n[o]) {
                    if (!t[o]) {
                        var a = typeof require == 'function' && require;
                        if (!u && a)
                            return a(o, !0);
                        if (i)
                            return i(o, !0);
                        var f = new Error('Cannot find module \'' + o + '\'');
                        throw f.code = 'MODULE_NOT_FOUND', f;
                    }
                    var l = n[o] = { exports: {} };
                    t[o][0].call(l.exports, function (e) {
                        var n = t[o][1][e];
                        return s(n ? n : e);
                    }, l, l.exports, e, t, n, r);
                }
                return n[o].exports;
            }
            var i = typeof require == 'function' && require;
            for (var o = 0; o < r.length; o++)
                s(r[o]);
            return s;
        }({
            1: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('./utils');
                    var support = require('./support');
                    var _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                    exports.encode = function (input) {
                        var output = [];
                        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
                        var i = 0, len = input.length, remainingBytes = len;
                        var isArray = utils.getTypeOf(input) !== 'string';
                        while (i < input.length) {
                            remainingBytes = len - i;
                            if (!isArray) {
                                chr1 = input.charCodeAt(i++);
                                chr2 = i < len ? input.charCodeAt(i++) : 0;
                                chr3 = i < len ? input.charCodeAt(i++) : 0;
                            } else {
                                chr1 = input[i++];
                                chr2 = i < len ? input[i++] : 0;
                                chr3 = i < len ? input[i++] : 0;
                            }
                            enc1 = chr1 >> 2;
                            enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                            enc3 = remainingBytes > 1 ? (chr2 & 15) << 2 | chr3 >> 6 : 64;
                            enc4 = remainingBytes > 2 ? chr3 & 63 : 64;
                            output.push(_keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4));
                        }
                        return output.join('');
                    };
                    exports.decode = function (input) {
                        var chr1, chr2, chr3;
                        var enc1, enc2, enc3, enc4;
                        var i = 0, resultIndex = 0;
                        var dataUrlPrefix = 'data:';
                        if (input.substr(0, dataUrlPrefix.length) === dataUrlPrefix) {
                            throw new Error('Invalid base64 input, it looks like a data url.');
                        }
                        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
                        var totalLength = input.length * 3 / 4;
                        if (input.charAt(input.length - 1) === _keyStr.charAt(64)) {
                            totalLength--;
                        }
                        if (input.charAt(input.length - 2) === _keyStr.charAt(64)) {
                            totalLength--;
                        }
                        if (totalLength % 1 !== 0) {
                            throw new Error('Invalid base64 input, bad content length.');
                        }
                        var output;
                        if (support.uint8array) {
                            output = new Uint8Array(totalLength | 0);
                        } else {
                            output = new Array(totalLength | 0);
                        }
                        while (i < input.length) {
                            enc1 = _keyStr.indexOf(input.charAt(i++));
                            enc2 = _keyStr.indexOf(input.charAt(i++));
                            enc3 = _keyStr.indexOf(input.charAt(i++));
                            enc4 = _keyStr.indexOf(input.charAt(i++));
                            chr1 = enc1 << 2 | enc2 >> 4;
                            chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                            chr3 = (enc3 & 3) << 6 | enc4;
                            output[resultIndex++] = chr1;
                            if (enc3 !== 64) {
                                output[resultIndex++] = chr2;
                            }
                            if (enc4 !== 64) {
                                output[resultIndex++] = chr3;
                            }
                        }
                        return output;
                    };
                },
                {
                    './support': 30,
                    './utils': 32
                }
            ],
            2: [
                function (require, module, exports) {
                    'use strict';
                    var external = require('./external');
                    var DataWorker = require('./stream/DataWorker');
                    var DataLengthProbe = require('./stream/DataLengthProbe');
                    var Crc32Probe = require('./stream/Crc32Probe');
                    var DataLengthProbe = require('./stream/DataLengthProbe');
                    function CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {
                        this.compressedSize = compressedSize;
                        this.uncompressedSize = uncompressedSize;
                        this.crc32 = crc32;
                        this.compression = compression;
                        this.compressedContent = data;
                    }
                    CompressedObject.prototype = {
                        getContentWorker: function () {
                            var worker = new DataWorker(external.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new DataLengthProbe('data_length'));
                            var that = this;
                            worker.on('end', function () {
                                if (this.streamInfo['data_length'] !== that.uncompressedSize) {
                                    throw new Error('Bug : uncompressed data size mismatch');
                                }
                            });
                            return worker;
                        },
                        getCompressedWorker: function () {
                            return new DataWorker(external.Promise.resolve(this.compressedContent)).withStreamInfo('compressedSize', this.compressedSize).withStreamInfo('uncompressedSize', this.uncompressedSize).withStreamInfo('crc32', this.crc32).withStreamInfo('compression', this.compression);
                        }
                    };
                    CompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {
                        return uncompressedWorker.pipe(new Crc32Probe()).pipe(new DataLengthProbe('uncompressedSize')).pipe(compression.compressWorker(compressionOptions)).pipe(new DataLengthProbe('compressedSize')).withStreamInfo('compression', compression);
                    };
                    module.exports = CompressedObject;
                },
                {
                    './external': 6,
                    './stream/Crc32Probe': 25,
                    './stream/DataLengthProbe': 26,
                    './stream/DataWorker': 27
                }
            ],
            3: [
                function (require, module, exports) {
                    'use strict';
                    var GenericWorker = require('./stream/GenericWorker');
                    exports.STORE = {
                        magic: '\0\0',
                        compressWorker: function (compressionOptions) {
                            return new GenericWorker('STORE compression');
                        },
                        uncompressWorker: function () {
                            return new GenericWorker('STORE decompression');
                        }
                    };
                    exports.DEFLATE = require('./flate');
                },
                {
                    './flate': 7,
                    './stream/GenericWorker': 28
                }
            ],
            4: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('./utils');
                    function makeTable() {
                        var c, table = [];
                        for (var n = 0; n < 256; n++) {
                            c = n;
                            for (var k = 0; k < 8; k++) {
                                c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
                            }
                            table[n] = c;
                        }
                        return table;
                    }
                    var crcTable = makeTable();
                    function crc32(crc, buf, len, pos) {
                        var t = crcTable, end = pos + len;
                        crc = crc ^ -1;
                        for (var i = pos; i < end; i++) {
                            crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
                        }
                        return crc ^ -1;
                    }
                    function crc32str(crc, str, len, pos) {
                        var t = crcTable, end = pos + len;
                        crc = crc ^ -1;
                        for (var i = pos; i < end; i++) {
                            crc = crc >>> 8 ^ t[(crc ^ str.charCodeAt(i)) & 255];
                        }
                        return crc ^ -1;
                    }
                    module.exports = function crc32wrapper(input, crc) {
                        if (typeof input === 'undefined' || !input.length) {
                            return 0;
                        }
                        var isArray = utils.getTypeOf(input) !== 'string';
                        if (isArray) {
                            return crc32(crc | 0, input, input.length, 0);
                        } else {
                            return crc32str(crc | 0, input, input.length, 0);
                        }
                    };
                },
                { './utils': 32 }
            ],
            5: [
                function (require, module, exports) {
                    'use strict';
                    exports.base64 = false;
                    exports.binary = false;
                    exports.dir = false;
                    exports.createFolders = true;
                    exports.date = null;
                    exports.compression = null;
                    exports.compressionOptions = null;
                    exports.comment = null;
                    exports.unixPermissions = null;
                    exports.dosPermissions = null;
                },
                {}
            ],
            6: [
                function (require, module, exports) {
                    'use strict';
                    var ES6Promise = null;
                    if (typeof Promise !== 'undefined') {
                        ES6Promise = Promise;
                    } else {
                        ES6Promise = require('lie');
                    }
                    module.exports = { Promise: ES6Promise };
                },
                { 'lie': 58 }
            ],
            7: [
                function (require, module, exports) {
                    'use strict';
                    var USE_TYPEDARRAY = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Uint32Array !== 'undefined';
                    var pako = require('pako');
                    var utils = require('./utils');
                    var GenericWorker = require('./stream/GenericWorker');
                    var ARRAY_TYPE = USE_TYPEDARRAY ? 'uint8array' : 'array';
                    exports.magic = '\b\0';
                    function FlateWorker(action, options) {
                        GenericWorker.call(this, 'FlateWorker/' + action);
                        this._pako = new pako[action]({
                            raw: true,
                            level: options.level || -1
                        });
                        this.meta = {};
                        var self = this;
                        this._pako.onData = function (data) {
                            self.push({
                                data: data,
                                meta: self.meta
                            });
                        };
                    }
                    utils.inherits(FlateWorker, GenericWorker);
                    FlateWorker.prototype.processChunk = function (chunk) {
                        this.meta = chunk.meta;
                        this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);
                    };
                    FlateWorker.prototype.flush = function () {
                        GenericWorker.prototype.flush.call(this);
                        this._pako.push([], true);
                    };
                    FlateWorker.prototype.cleanUp = function () {
                        GenericWorker.prototype.cleanUp.call(this);
                        this._pako = null;
                    };
                    exports.compressWorker = function (compressionOptions) {
                        return new FlateWorker('Deflate', compressionOptions);
                    };
                    exports.uncompressWorker = function () {
                        return new FlateWorker('Inflate', {});
                    };
                },
                {
                    './stream/GenericWorker': 28,
                    './utils': 32,
                    'pako': 59
                }
            ],
            8: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils');
                    var GenericWorker = require('../stream/GenericWorker');
                    var utf8 = require('../utf8');
                    var crc32 = require('../crc32');
                    var signature = require('../signature');
                    var decToHex = function (dec, bytes) {
                        var hex = '', i;
                        for (i = 0; i < bytes; i++) {
                            hex += String.fromCharCode(dec & 255);
                            dec = dec >>> 8;
                        }
                        return hex;
                    };
                    var generateUnixExternalFileAttr = function (unixPermissions, isDir) {
                        var result = unixPermissions;
                        if (!unixPermissions) {
                            result = isDir ? 16893 : 33204;
                        }
                        return (result & 65535) << 16;
                    };
                    var generateDosExternalFileAttr = function (dosPermissions, isDir) {
                        return (dosPermissions || 0) & 63;
                    };
                    var generateZipParts = function (streamInfo, streamedContent, streamingEnded, offset, platform, encodeFileName) {
                        var file = streamInfo['file'], compression = streamInfo['compression'], useCustomEncoding = encodeFileName !== utf8.utf8encode, encodedFileName = utils.transformTo('string', encodeFileName(file.name)), utfEncodedFileName = utils.transformTo('string', utf8.utf8encode(file.name)), comment = file.comment, encodedComment = utils.transformTo('string', encodeFileName(comment)), utfEncodedComment = utils.transformTo('string', utf8.utf8encode(comment)), useUTF8ForFileName = utfEncodedFileName.length !== file.name.length, useUTF8ForComment = utfEncodedComment.length !== comment.length, dosTime, dosDate, extraFields = '', unicodePathExtraField = '', unicodeCommentExtraField = '', dir = file.dir, date = file.date;
                        var dataInfo = {
                            crc32: 0,
                            compressedSize: 0,
                            uncompressedSize: 0
                        };
                        if (!streamedContent || streamingEnded) {
                            dataInfo.crc32 = streamInfo['crc32'];
                            dataInfo.compressedSize = streamInfo['compressedSize'];
                            dataInfo.uncompressedSize = streamInfo['uncompressedSize'];
                        }
                        var bitflag = 0;
                        if (streamedContent) {
                            bitflag |= 8;
                        }
                        if (!useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment)) {
                            bitflag |= 2048;
                        }
                        var extFileAttr = 0;
                        var versionMadeBy = 0;
                        if (dir) {
                            extFileAttr |= 16;
                        }
                        if (platform === 'UNIX') {
                            versionMadeBy = 798;
                            extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
                        } else {
                            versionMadeBy = 20;
                            extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
                        }
                        dosTime = date.getUTCHours();
                        dosTime = dosTime << 6;
                        dosTime = dosTime | date.getUTCMinutes();
                        dosTime = dosTime << 5;
                        dosTime = dosTime | date.getUTCSeconds() / 2;
                        dosDate = date.getUTCFullYear() - 1980;
                        dosDate = dosDate << 4;
                        dosDate = dosDate | date.getUTCMonth() + 1;
                        dosDate = dosDate << 5;
                        dosDate = dosDate | date.getUTCDate();
                        if (useUTF8ForFileName) {
                            unicodePathExtraField = decToHex(1, 1) + decToHex(crc32(encodedFileName), 4) + utfEncodedFileName;
                            extraFields += 'up' + decToHex(unicodePathExtraField.length, 2) + unicodePathExtraField;
                        }
                        if (useUTF8ForComment) {
                            unicodeCommentExtraField = decToHex(1, 1) + decToHex(crc32(encodedComment), 4) + utfEncodedComment;
                            extraFields += 'uc' + decToHex(unicodeCommentExtraField.length, 2) + unicodeCommentExtraField;
                        }
                        var header = '';
                        header += '\n\0';
                        header += decToHex(bitflag, 2);
                        header += compression.magic;
                        header += decToHex(dosTime, 2);
                        header += decToHex(dosDate, 2);
                        header += decToHex(dataInfo.crc32, 4);
                        header += decToHex(dataInfo.compressedSize, 4);
                        header += decToHex(dataInfo.uncompressedSize, 4);
                        header += decToHex(encodedFileName.length, 2);
                        header += decToHex(extraFields.length, 2);
                        var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;
                        var dirRecord = signature.CENTRAL_FILE_HEADER + decToHex(versionMadeBy, 2) + header + decToHex(encodedComment.length, 2) + '\0\0' + '\0\0' + decToHex(extFileAttr, 4) + decToHex(offset, 4) + encodedFileName + extraFields + encodedComment;
                        return {
                            fileRecord: fileRecord,
                            dirRecord: dirRecord
                        };
                    };
                    var generateCentralDirectoryEnd = function (entriesCount, centralDirLength, localDirLength, comment, encodeFileName) {
                        var dirEnd = '';
                        var encodedComment = utils.transformTo('string', encodeFileName(comment));
                        dirEnd = signature.CENTRAL_DIRECTORY_END + '\0\0' + '\0\0' + decToHex(entriesCount, 2) + decToHex(entriesCount, 2) + decToHex(centralDirLength, 4) + decToHex(localDirLength, 4) + decToHex(encodedComment.length, 2) + encodedComment;
                        return dirEnd;
                    };
                    var generateDataDescriptors = function (streamInfo) {
                        var descriptor = '';
                        descriptor = signature.DATA_DESCRIPTOR + decToHex(streamInfo['crc32'], 4) + decToHex(streamInfo['compressedSize'], 4) + decToHex(streamInfo['uncompressedSize'], 4);
                        return descriptor;
                    };
                    function ZipFileWorker(streamFiles, comment, platform, encodeFileName) {
                        GenericWorker.call(this, 'ZipFileWorker');
                        this.bytesWritten = 0;
                        this.zipComment = comment;
                        this.zipPlatform = platform;
                        this.encodeFileName = encodeFileName;
                        this.streamFiles = streamFiles;
                        this.accumulate = false;
                        this.contentBuffer = [];
                        this.dirRecords = [];
                        this.currentSourceOffset = 0;
                        this.entriesCount = 0;
                        this.currentFile = null;
                        this._sources = [];
                    }
                    utils.inherits(ZipFileWorker, GenericWorker);
                    ZipFileWorker.prototype.push = function (chunk) {
                        var currentFilePercent = chunk.meta.percent || 0;
                        var entriesCount = this.entriesCount;
                        var remainingFiles = this._sources.length;
                        if (this.accumulate) {
                            this.contentBuffer.push(chunk);
                        } else {
                            this.bytesWritten += chunk.data.length;
                            GenericWorker.prototype.push.call(this, {
                                data: chunk.data,
                                meta: {
                                    currentFile: this.currentFile,
                                    percent: entriesCount ? (currentFilePercent + 100 * (entriesCount - remainingFiles - 1)) / entriesCount : 100
                                }
                            });
                        }
                    };
                    ZipFileWorker.prototype.openedSource = function (streamInfo) {
                        this.currentSourceOffset = this.bytesWritten;
                        this.currentFile = streamInfo['file'].name;
                        var streamedContent = this.streamFiles && !streamInfo['file'].dir;
                        if (streamedContent) {
                            var record = generateZipParts(streamInfo, streamedContent, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
                            this.push({
                                data: record.fileRecord,
                                meta: { percent: 0 }
                            });
                        } else {
                            this.accumulate = true;
                        }
                    };
                    ZipFileWorker.prototype.closedSource = function (streamInfo) {
                        this.accumulate = false;
                        var streamedContent = this.streamFiles && !streamInfo['file'].dir;
                        var record = generateZipParts(streamInfo, streamedContent, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
                        this.dirRecords.push(record.dirRecord);
                        if (streamedContent) {
                            this.push({
                                data: generateDataDescriptors(streamInfo),
                                meta: { percent: 100 }
                            });
                        } else {
                            this.push({
                                data: record.fileRecord,
                                meta: { percent: 0 }
                            });
                            while (this.contentBuffer.length) {
                                this.push(this.contentBuffer.shift());
                            }
                        }
                        this.currentFile = null;
                    };
                    ZipFileWorker.prototype.flush = function () {
                        var localDirLength = this.bytesWritten;
                        for (var i = 0; i < this.dirRecords.length; i++) {
                            this.push({
                                data: this.dirRecords[i],
                                meta: { percent: 100 }
                            });
                        }
                        var centralDirLength = this.bytesWritten - localDirLength;
                        var dirEnd = generateCentralDirectoryEnd(this.dirRecords.length, centralDirLength, localDirLength, this.zipComment, this.encodeFileName);
                        this.push({
                            data: dirEnd,
                            meta: { percent: 100 }
                        });
                    };
                    ZipFileWorker.prototype.prepareNextSource = function () {
                        this.previous = this._sources.shift();
                        this.openedSource(this.previous.streamInfo);
                        if (this.isPaused) {
                            this.previous.pause();
                        } else {
                            this.previous.resume();
                        }
                    };
                    ZipFileWorker.prototype.registerPrevious = function (previous) {
                        this._sources.push(previous);
                        var self = this;
                        previous.on('data', function (chunk) {
                            self.processChunk(chunk);
                        });
                        previous.on('end', function () {
                            self.closedSource(self.previous.streamInfo);
                            if (self._sources.length) {
                                self.prepareNextSource();
                            } else {
                                self.end();
                            }
                        });
                        previous.on('error', function (e) {
                            self.error(e);
                        });
                        return this;
                    };
                    ZipFileWorker.prototype.resume = function () {
                        if (!GenericWorker.prototype.resume.call(this)) {
                            return false;
                        }
                        if (!this.previous && this._sources.length) {
                            this.prepareNextSource();
                            return true;
                        }
                        if (!this.previous && !this._sources.length && !this.generatedError) {
                            this.end();
                            return true;
                        }
                    };
                    ZipFileWorker.prototype.error = function (e) {
                        var sources = this._sources;
                        if (!GenericWorker.prototype.error.call(this, e)) {
                            return false;
                        }
                        for (var i = 0; i < sources.length; i++) {
                            try {
                                sources[i].error(e);
                            } catch (e) {
                            }
                        }
                        return true;
                    };
                    ZipFileWorker.prototype.lock = function () {
                        GenericWorker.prototype.lock.call(this);
                        var sources = this._sources;
                        for (var i = 0; i < sources.length; i++) {
                            sources[i].lock();
                        }
                    };
                    module.exports = ZipFileWorker;
                },
                {
                    '../crc32': 4,
                    '../signature': 23,
                    '../stream/GenericWorker': 28,
                    '../utf8': 31,
                    '../utils': 32
                }
            ],
            9: [
                function (require, module, exports) {
                    'use strict';
                    var compressions = require('../compressions');
                    var ZipFileWorker = require('./ZipFileWorker');
                    var getCompression = function (fileCompression, zipCompression) {
                        var compressionName = fileCompression || zipCompression;
                        var compression = compressions[compressionName];
                        if (!compression) {
                            throw new Error(compressionName + ' is not a valid compression method !');
                        }
                        return compression;
                    };
                    exports.generateWorker = function (zip, options, comment) {
                        var zipFileWorker = new ZipFileWorker(options.streamFiles, comment, options.platform, options.encodeFileName);
                        var entriesCount = 0;
                        try {
                            zip.forEach(function (relativePath, file) {
                                entriesCount++;
                                var compression = getCompression(file.options.compression, options.compression);
                                var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};
                                var dir = file.dir, date = file.date;
                                file._compressWorker(compression, compressionOptions).withStreamInfo('file', {
                                    name: relativePath,
                                    dir: dir,
                                    date: date,
                                    comment: file.comment || '',
                                    unixPermissions: file.unixPermissions,
                                    dosPermissions: file.dosPermissions
                                }).pipe(zipFileWorker);
                            });
                            zipFileWorker.entriesCount = entriesCount;
                        } catch (e) {
                            zipFileWorker.error(e);
                        }
                        return zipFileWorker;
                    };
                },
                {
                    '../compressions': 3,
                    './ZipFileWorker': 8
                }
            ],
            10: [
                function (require, module, exports) {
                    'use strict';
                    function JSZip() {
                        if (!(this instanceof JSZip)) {
                            return new JSZip();
                        }
                        if (arguments.length) {
                            throw new Error('The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.');
                        }
                        this.files = {};
                        this.comment = null;
                        this.root = '';
                        this.clone = function () {
                            var newObj = new JSZip();
                            for (var i in this) {
                                if (typeof this[i] !== 'function') {
                                    newObj[i] = this[i];
                                }
                            }
                            return newObj;
                        };
                    }
                    JSZip.prototype = require('./object');
                    JSZip.prototype.loadAsync = require('./load');
                    JSZip.support = require('./support');
                    JSZip.defaults = require('./defaults');
                    JSZip.version = '3.1.3';
                    JSZip.loadAsync = function (content, options) {
                        return new JSZip().loadAsync(content, options);
                    };
                    JSZip.external = require('./external');
                    module.exports = JSZip;
                },
                {
                    './defaults': 5,
                    './external': 6,
                    './load': 11,
                    './object': 15,
                    './support': 30
                }
            ],
            11: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('./utils');
                    var external = require('./external');
                    var utf8 = require('./utf8');
                    var utils = require('./utils');
                    var ZipEntries = require('./zipEntries');
                    var Crc32Probe = require('./stream/Crc32Probe');
                    var nodejsUtils = require('./nodejsUtils');
                    function checkEntryCRC32(zipEntry) {
                        return new external.Promise(function (resolve, reject) {
                            var worker = zipEntry.decompressed.getContentWorker().pipe(new Crc32Probe());
                            worker.on('error', function (e) {
                                reject(e);
                            }).on('end', function () {
                                if (worker.streamInfo.crc32 !== zipEntry.decompressed.crc32) {
                                    reject(new Error('Corrupted zip : CRC32 mismatch'));
                                } else {
                                    resolve();
                                }
                            }).resume();
                        });
                    }
                    module.exports = function (data, options) {
                        var zip = this;
                        options = utils.extend(options || {}, {
                            base64: false,
                            checkCRC32: false,
                            optimizedBinaryString: false,
                            createFolders: false,
                            decodeFileName: utf8.utf8decode
                        });
                        if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {
                            return external.Promise.reject(new Error('JSZip can\'t accept a stream when loading a zip file.'));
                        }
                        return utils.prepareContent('the loaded zip file', data, true, options.optimizedBinaryString, options.base64).then(function (data) {
                            var zipEntries = new ZipEntries(options);
                            zipEntries.load(data);
                            return zipEntries;
                        }).then(function checkCRC32(zipEntries) {
                            var promises = [external.Promise.resolve(zipEntries)];
                            var files = zipEntries.files;
                            if (options.checkCRC32) {
                                for (var i = 0; i < files.length; i++) {
                                    promises.push(checkEntryCRC32(files[i]));
                                }
                            }
                            return external.Promise.all(promises);
                        }).then(function addFiles(results) {
                            var zipEntries = results.shift();
                            var files = zipEntries.files;
                            for (var i = 0; i < files.length; i++) {
                                var input = files[i];
                                zip.file(input.fileNameStr, input.decompressed, {
                                    binary: true,
                                    optimizedBinaryString: true,
                                    date: input.date,
                                    dir: input.dir,
                                    comment: input.fileCommentStr.length ? input.fileCommentStr : null,
                                    unixPermissions: input.unixPermissions,
                                    dosPermissions: input.dosPermissions,
                                    createFolders: options.createFolders
                                });
                            }
                            if (zipEntries.zipComment.length) {
                                zip.comment = zipEntries.zipComment;
                            }
                            return zip;
                        });
                    };
                },
                {
                    './external': 6,
                    './nodejsUtils': 14,
                    './stream/Crc32Probe': 25,
                    './utf8': 31,
                    './utils': 32,
                    './zipEntries': 33
                }
            ],
            12: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils');
                    var GenericWorker = require('../stream/GenericWorker');
                    function NodejsStreamInputAdapter(filename, stream) {
                        GenericWorker.call(this, 'Nodejs stream input adapter for ' + filename);
                        this._upstreamEnded = false;
                        this._bindStream(stream);
                    }
                    utils.inherits(NodejsStreamInputAdapter, GenericWorker);
                    NodejsStreamInputAdapter.prototype._bindStream = function (stream) {
                        var self = this;
                        this._stream = stream;
                        stream.pause();
                        stream.on('data', function (chunk) {
                            self.push({
                                data: chunk,
                                meta: { percent: 0 }
                            });
                        }).on('error', function (e) {
                            if (self.isPaused) {
                                this.generatedError = e;
                            } else {
                                self.error(e);
                            }
                        }).on('end', function () {
                            if (self.isPaused) {
                                self._upstreamEnded = true;
                            } else {
                                self.end();
                            }
                        });
                    };
                    NodejsStreamInputAdapter.prototype.pause = function () {
                        if (!GenericWorker.prototype.pause.call(this)) {
                            return false;
                        }
                        this._stream.pause();
                        return true;
                    };
                    NodejsStreamInputAdapter.prototype.resume = function () {
                        if (!GenericWorker.prototype.resume.call(this)) {
                            return false;
                        }
                        if (this._upstreamEnded) {
                            this.end();
                        } else {
                            this._stream.resume();
                        }
                        return true;
                    };
                    module.exports = NodejsStreamInputAdapter;
                },
                {
                    '../stream/GenericWorker': 28,
                    '../utils': 32
                }
            ],
            13: [
                function (require, module, exports) {
                    'use strict';
                    var Readable = require('readable-stream').Readable;
                    var util = require('util');
                    util.inherits(NodejsStreamOutputAdapter, Readable);
                    function NodejsStreamOutputAdapter(helper, options, updateCb) {
                        Readable.call(this, options);
                        this._helper = helper;
                        var self = this;
                        helper.on('data', function (data, meta) {
                            if (!self.push(data)) {
                                self._helper.pause();
                            }
                            if (updateCb) {
                                updateCb(meta);
                            }
                        }).on('error', function (e) {
                            self.emit('error', e);
                        }).on('end', function () {
                            self.push(null);
                        });
                    }
                    NodejsStreamOutputAdapter.prototype._read = function () {
                        this._helper.resume();
                    };
                    module.exports = NodejsStreamOutputAdapter;
                },
                {
                    'readable-stream': 16,
                    'util': undefined
                }
            ],
            14: [
                function (require, module, exports) {
                    'use strict';
                    module.exports = {
                        isNode: typeof Buffer !== 'undefined',
                        newBuffer: function (data, encoding) {
                            return new Buffer(data, encoding);
                        },
                        isBuffer: function (b) {
                            return Buffer.isBuffer(b);
                        },
                        isStream: function (obj) {
                            return obj && typeof obj.on === 'function' && typeof obj.pause === 'function' && typeof obj.resume === 'function';
                        }
                    };
                },
                {}
            ],
            15: [
                function (require, module, exports) {
                    'use strict';
                    var utf8 = require('./utf8');
                    var utils = require('./utils');
                    var GenericWorker = require('./stream/GenericWorker');
                    var StreamHelper = require('./stream/StreamHelper');
                    var defaults = require('./defaults');
                    var CompressedObject = require('./compressedObject');
                    var ZipObject = require('./zipObject');
                    var generate = require('./generate');
                    var nodejsUtils = require('./nodejsUtils');
                    var NodejsStreamInputAdapter = require('./nodejs/NodejsStreamInputAdapter');
                    var fileAdd = function (name, data, originalOptions) {
                        var dataType = utils.getTypeOf(data), parent;
                        var o = utils.extend(originalOptions || {}, defaults);
                        o.date = o.date || new Date();
                        if (o.compression !== null) {
                            o.compression = o.compression.toUpperCase();
                        }
                        if (typeof o.unixPermissions === 'string') {
                            o.unixPermissions = parseInt(o.unixPermissions, 8);
                        }
                        if (o.unixPermissions && o.unixPermissions & 16384) {
                            o.dir = true;
                        }
                        if (o.dosPermissions && o.dosPermissions & 16) {
                            o.dir = true;
                        }
                        if (o.dir) {
                            name = forceTrailingSlash(name);
                        }
                        if (o.createFolders && (parent = parentFolder(name))) {
                            folderAdd.call(this, parent, true);
                        }
                        var isUnicodeString = dataType === 'string' && o.binary === false && o.base64 === false;
                        if (!originalOptions || typeof originalOptions.binary === 'undefined') {
                            o.binary = !isUnicodeString;
                        }
                        var isCompressedEmpty = data instanceof CompressedObject && data.uncompressedSize === 0;
                        if (isCompressedEmpty || o.dir || !data || data.length === 0) {
                            o.base64 = false;
                            o.binary = true;
                            data = '';
                            o.compression = 'STORE';
                            dataType = 'string';
                        }
                        var zipObjectContent = null;
                        if (data instanceof CompressedObject || data instanceof GenericWorker) {
                            zipObjectContent = data;
                        } else if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {
                            zipObjectContent = new NodejsStreamInputAdapter(name, data);
                        } else {
                            zipObjectContent = utils.prepareContent(name, data, o.binary, o.optimizedBinaryString, o.base64);
                        }
                        var object = new ZipObject(name, zipObjectContent, o);
                        this.files[name] = object;
                    };
                    var parentFolder = function (path) {
                        if (path.slice(-1) === '/') {
                            path = path.substring(0, path.length - 1);
                        }
                        var lastSlash = path.lastIndexOf('/');
                        return lastSlash > 0 ? path.substring(0, lastSlash) : '';
                    };
                    var forceTrailingSlash = function (path) {
                        if (path.slice(-1) !== '/') {
                            path += '/';
                        }
                        return path;
                    };
                    var folderAdd = function (name, createFolders) {
                        createFolders = typeof createFolders !== 'undefined' ? createFolders : defaults.createFolders;
                        name = forceTrailingSlash(name);
                        if (!this.files[name]) {
                            fileAdd.call(this, name, null, {
                                dir: true,
                                createFolders: createFolders
                            });
                        }
                        return this.files[name];
                    };
                    function isRegExp(object) {
                        return Object.prototype.toString.call(object) === '[object RegExp]';
                    }
                    var out = {
                        load: function () {
                            throw new Error('This method has been removed in JSZip 3.0, please check the upgrade guide.');
                        },
                        forEach: function (cb) {
                            var filename, relativePath, file;
                            for (filename in this.files) {
                                if (!this.files.hasOwnProperty(filename)) {
                                    continue;
                                }
                                file = this.files[filename];
                                relativePath = filename.slice(this.root.length, filename.length);
                                if (relativePath && filename.slice(0, this.root.length) === this.root) {
                                    cb(relativePath, file);
                                }
                            }
                        },
                        filter: function (search) {
                            var result = [];
                            this.forEach(function (relativePath, entry) {
                                if (search(relativePath, entry)) {
                                    result.push(entry);
                                }
                            });
                            return result;
                        },
                        file: function (name, data, o) {
                            if (arguments.length === 1) {
                                if (isRegExp(name)) {
                                    var regexp = name;
                                    return this.filter(function (relativePath, file) {
                                        return !file.dir && regexp.test(relativePath);
                                    });
                                } else {
                                    var obj = this.files[this.root + name];
                                    if (obj && !obj.dir) {
                                        return obj;
                                    } else {
                                        return null;
                                    }
                                }
                            } else {
                                name = this.root + name;
                                fileAdd.call(this, name, data, o);
                            }
                            return this;
                        },
                        folder: function (arg) {
                            if (!arg) {
                                return this;
                            }
                            if (isRegExp(arg)) {
                                return this.filter(function (relativePath, file) {
                                    return file.dir && arg.test(relativePath);
                                });
                            }
                            var name = this.root + arg;
                            var newFolder = folderAdd.call(this, name);
                            var ret = this.clone();
                            ret.root = newFolder.name;
                            return ret;
                        },
                        remove: function (name) {
                            name = this.root + name;
                            var file = this.files[name];
                            if (!file) {
                                if (name.slice(-1) !== '/') {
                                    name += '/';
                                }
                                file = this.files[name];
                            }
                            if (file && !file.dir) {
                                delete this.files[name];
                            } else {
                                var kids = this.filter(function (relativePath, file) {
                                    return file.name.slice(0, name.length) === name;
                                });
                                for (var i = 0; i < kids.length; i++) {
                                    delete this.files[kids[i].name];
                                }
                            }
                            return this;
                        },
                        generate: function (options) {
                            throw new Error('This method has been removed in JSZip 3.0, please check the upgrade guide.');
                        },
                        generateInternalStream: function (options) {
                            var worker, opts = {};
                            try {
                                opts = utils.extend(options || {}, {
                                    streamFiles: false,
                                    compression: 'STORE',
                                    compressionOptions: null,
                                    type: '',
                                    platform: 'DOS',
                                    comment: null,
                                    mimeType: 'application/zip',
                                    encodeFileName: utf8.utf8encode
                                });
                                opts.type = opts.type.toLowerCase();
                                opts.compression = opts.compression.toUpperCase();
                                if (opts.type === 'binarystring') {
                                    opts.type = 'string';
                                }
                                if (!opts.type) {
                                    throw new Error('No output type specified.');
                                }
                                utils.checkSupport(opts.type);
                                if (opts.platform === 'darwin' || opts.platform === 'freebsd' || opts.platform === 'linux' || opts.platform === 'sunos') {
                                    opts.platform = 'UNIX';
                                }
                                if (opts.platform === 'win32') {
                                    opts.platform = 'DOS';
                                }
                                var comment = opts.comment || this.comment || '';
                                worker = generate.generateWorker(this, opts, comment);
                            } catch (e) {
                                worker = new GenericWorker('error');
                                worker.error(e);
                            }
                            return new StreamHelper(worker, opts.type || 'string', opts.mimeType);
                        },
                        generateAsync: function (options, onUpdate) {
                            return this.generateInternalStream(options).accumulate(onUpdate);
                        },
                        generateNodeStream: function (options, onUpdate) {
                            options = options || {};
                            if (!options.type) {
                                options.type = 'nodebuffer';
                            }
                            return this.generateInternalStream(options).toNodejsStream(onUpdate);
                        }
                    };
                    module.exports = out;
                },
                {
                    './compressedObject': 2,
                    './defaults': 5,
                    './generate': 9,
                    './nodejs/NodejsStreamInputAdapter': 12,
                    './nodejsUtils': 14,
                    './stream/GenericWorker': 28,
                    './stream/StreamHelper': 29,
                    './utf8': 31,
                    './utils': 32,
                    './zipObject': 35
                }
            ],
            16: [
                function (require, module, exports) {
                    module.exports = require('stream');
                },
                { 'stream': undefined }
            ],
            17: [
                function (require, module, exports) {
                    'use strict';
                    var DataReader = require('./DataReader');
                    var utils = require('../utils');
                    function ArrayReader(data) {
                        DataReader.call(this, data);
                        for (var i = 0; i < this.data.length; i++) {
                            data[i] = data[i] & 255;
                        }
                    }
                    utils.inherits(ArrayReader, DataReader);
                    ArrayReader.prototype.byteAt = function (i) {
                        return this.data[this.zero + i];
                    };
                    ArrayReader.prototype.lastIndexOfSignature = function (sig) {
                        var sig0 = sig.charCodeAt(0), sig1 = sig.charCodeAt(1), sig2 = sig.charCodeAt(2), sig3 = sig.charCodeAt(3);
                        for (var i = this.length - 4; i >= 0; --i) {
                            if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
                                return i - this.zero;
                            }
                        }
                        return -1;
                    };
                    ArrayReader.prototype.readAndCheckSignature = function (sig) {
                        var sig0 = sig.charCodeAt(0), sig1 = sig.charCodeAt(1), sig2 = sig.charCodeAt(2), sig3 = sig.charCodeAt(3), data = this.readData(4);
                        return sig0 === data[0] && sig1 === data[1] && sig2 === data[2] && sig3 === data[3];
                    };
                    ArrayReader.prototype.readData = function (size) {
                        this.checkOffset(size);
                        if (size === 0) {
                            return [];
                        }
                        var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
                        this.index += size;
                        return result;
                    };
                    module.exports = ArrayReader;
                },
                {
                    '../utils': 32,
                    './DataReader': 18
                }
            ],
            18: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils');
                    function DataReader(data) {
                        this.data = data;
                        this.length = data.length;
                        this.index = 0;
                        this.zero = 0;
                    }
                    DataReader.prototype = {
                        checkOffset: function (offset) {
                            this.checkIndex(this.index + offset);
                        },
                        checkIndex: function (newIndex) {
                            if (this.length < this.zero + newIndex || newIndex < 0) {
                                throw new Error('End of data reached (data length = ' + this.length + ', asked index = ' + newIndex + '). Corrupted zip ?');
                            }
                        },
                        setIndex: function (newIndex) {
                            this.checkIndex(newIndex);
                            this.index = newIndex;
                        },
                        skip: function (n) {
                            this.setIndex(this.index + n);
                        },
                        byteAt: function (i) {
                        },
                        readInt: function (size) {
                            var result = 0, i;
                            this.checkOffset(size);
                            for (i = this.index + size - 1; i >= this.index; i--) {
                                result = (result << 8) + this.byteAt(i);
                            }
                            this.index += size;
                            return result;
                        },
                        readString: function (size) {
                            return utils.transformTo('string', this.readData(size));
                        },
                        readData: function (size) {
                        },
                        lastIndexOfSignature: function (sig) {
                        },
                        readAndCheckSignature: function (sig) {
                        },
                        readDate: function () {
                            var dostime = this.readInt(4);
                            return new Date(Date.UTC((dostime >> 25 & 127) + 1980, (dostime >> 21 & 15) - 1, dostime >> 16 & 31, dostime >> 11 & 31, dostime >> 5 & 63, (dostime & 31) << 1));
                        }
                    };
                    module.exports = DataReader;
                },
                { '../utils': 32 }
            ],
            19: [
                function (require, module, exports) {
                    'use strict';
                    var Uint8ArrayReader = require('./Uint8ArrayReader');
                    var utils = require('../utils');
                    function NodeBufferReader(data) {
                        Uint8ArrayReader.call(this, data);
                    }
                    utils.inherits(NodeBufferReader, Uint8ArrayReader);
                    NodeBufferReader.prototype.readData = function (size) {
                        this.checkOffset(size);
                        var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
                        this.index += size;
                        return result;
                    };
                    module.exports = NodeBufferReader;
                },
                {
                    '../utils': 32,
                    './Uint8ArrayReader': 21
                }
            ],
            20: [
                function (require, module, exports) {
                    'use strict';
                    var DataReader = require('./DataReader');
                    var utils = require('../utils');
                    function StringReader(data) {
                        DataReader.call(this, data);
                    }
                    utils.inherits(StringReader, DataReader);
                    StringReader.prototype.byteAt = function (i) {
                        return this.data.charCodeAt(this.zero + i);
                    };
                    StringReader.prototype.lastIndexOfSignature = function (sig) {
                        return this.data.lastIndexOf(sig) - this.zero;
                    };
                    StringReader.prototype.readAndCheckSignature = function (sig) {
                        var data = this.readData(4);
                        return sig === data;
                    };
                    StringReader.prototype.readData = function (size) {
                        this.checkOffset(size);
                        var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
                        this.index += size;
                        return result;
                    };
                    module.exports = StringReader;
                },
                {
                    '../utils': 32,
                    './DataReader': 18
                }
            ],
            21: [
                function (require, module, exports) {
                    'use strict';
                    var ArrayReader = require('./ArrayReader');
                    var utils = require('../utils');
                    function Uint8ArrayReader(data) {
                        ArrayReader.call(this, data);
                    }
                    utils.inherits(Uint8ArrayReader, ArrayReader);
                    Uint8ArrayReader.prototype.readData = function (size) {
                        this.checkOffset(size);
                        if (size === 0) {
                            return new Uint8Array(0);
                        }
                        var result = this.data.subarray(this.zero + this.index, this.zero + this.index + size);
                        this.index += size;
                        return result;
                    };
                    module.exports = Uint8ArrayReader;
                },
                {
                    '../utils': 32,
                    './ArrayReader': 17
                }
            ],
            22: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils');
                    var support = require('../support');
                    var ArrayReader = require('./ArrayReader');
                    var StringReader = require('./StringReader');
                    var NodeBufferReader = require('./NodeBufferReader');
                    var Uint8ArrayReader = require('./Uint8ArrayReader');
                    module.exports = function (data) {
                        var type = utils.getTypeOf(data);
                        utils.checkSupport(type);
                        if (type === 'string' && !support.uint8array) {
                            return new StringReader(data);
                        }
                        if (type === 'nodebuffer') {
                            return new NodeBufferReader(data);
                        }
                        if (support.uint8array) {
                            return new Uint8ArrayReader(utils.transformTo('uint8array', data));
                        }
                        return new ArrayReader(utils.transformTo('array', data));
                    };
                },
                {
                    '../support': 30,
                    '../utils': 32,
                    './ArrayReader': 17,
                    './NodeBufferReader': 19,
                    './StringReader': 20,
                    './Uint8ArrayReader': 21
                }
            ],
            23: [
                function (require, module, exports) {
                    'use strict';
                    exports.LOCAL_FILE_HEADER = 'PK\x03\x04';
                    exports.CENTRAL_FILE_HEADER = 'PK\x01\x02';
                    exports.CENTRAL_DIRECTORY_END = 'PK\x05\x06';
                    exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = 'PK\x06\x07';
                    exports.ZIP64_CENTRAL_DIRECTORY_END = 'PK\x06\x06';
                    exports.DATA_DESCRIPTOR = 'PK\x07\b';
                },
                {}
            ],
            24: [
                function (require, module, exports) {
                    'use strict';
                    var GenericWorker = require('./GenericWorker');
                    var utils = require('../utils');
                    function ConvertWorker(destType) {
                        GenericWorker.call(this, 'ConvertWorker to ' + destType);
                        this.destType = destType;
                    }
                    utils.inherits(ConvertWorker, GenericWorker);
                    ConvertWorker.prototype.processChunk = function (chunk) {
                        this.push({
                            data: utils.transformTo(this.destType, chunk.data),
                            meta: chunk.meta
                        });
                    };
                    module.exports = ConvertWorker;
                },
                {
                    '../utils': 32,
                    './GenericWorker': 28
                }
            ],
            25: [
                function (require, module, exports) {
                    'use strict';
                    var GenericWorker = require('./GenericWorker');
                    var crc32 = require('../crc32');
                    var utils = require('../utils');
                    function Crc32Probe() {
                        GenericWorker.call(this, 'Crc32Probe');
                        this.withStreamInfo('crc32', 0);
                    }
                    utils.inherits(Crc32Probe, GenericWorker);
                    Crc32Probe.prototype.processChunk = function (chunk) {
                        this.streamInfo.crc32 = crc32(chunk.data, this.streamInfo.crc32 || 0);
                        this.push(chunk);
                    };
                    module.exports = Crc32Probe;
                },
                {
                    '../crc32': 4,
                    '../utils': 32,
                    './GenericWorker': 28
                }
            ],
            26: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils');
                    var GenericWorker = require('./GenericWorker');
                    function DataLengthProbe(propName) {
                        GenericWorker.call(this, 'DataLengthProbe for ' + propName);
                        this.propName = propName;
                        this.withStreamInfo(propName, 0);
                    }
                    utils.inherits(DataLengthProbe, GenericWorker);
                    DataLengthProbe.prototype.processChunk = function (chunk) {
                        if (chunk) {
                            var length = this.streamInfo[this.propName] || 0;
                            this.streamInfo[this.propName] = length + chunk.data.length;
                        }
                        GenericWorker.prototype.processChunk.call(this, chunk);
                    };
                    module.exports = DataLengthProbe;
                },
                {
                    '../utils': 32,
                    './GenericWorker': 28
                }
            ],
            27: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils');
                    var GenericWorker = require('./GenericWorker');
                    var DEFAULT_BLOCK_SIZE = 16 * 1024;
                    function DataWorker(dataP) {
                        GenericWorker.call(this, 'DataWorker');
                        var self = this;
                        this.dataIsReady = false;
                        this.index = 0;
                        this.max = 0;
                        this.data = null;
                        this.type = '';
                        this._tickScheduled = false;
                        dataP.then(function (data) {
                            self.dataIsReady = true;
                            self.data = data;
                            self.max = data && data.length || 0;
                            self.type = utils.getTypeOf(data);
                            if (!self.isPaused) {
                                self._tickAndRepeat();
                            }
                        }, function (e) {
                            self.error(e);
                        });
                    }
                    utils.inherits(DataWorker, GenericWorker);
                    DataWorker.prototype.cleanUp = function () {
                        GenericWorker.prototype.cleanUp.call(this);
                        this.data = null;
                    };
                    DataWorker.prototype.resume = function () {
                        if (!GenericWorker.prototype.resume.call(this)) {
                            return false;
                        }
                        if (!this._tickScheduled && this.dataIsReady) {
                            this._tickScheduled = true;
                            utils.delay(this._tickAndRepeat, [], this);
                        }
                        return true;
                    };
                    DataWorker.prototype._tickAndRepeat = function () {
                        this._tickScheduled = false;
                        if (this.isPaused || this.isFinished) {
                            return;
                        }
                        this._tick();
                        if (!this.isFinished) {
                            utils.delay(this._tickAndRepeat, [], this);
                            this._tickScheduled = true;
                        }
                    };
                    DataWorker.prototype._tick = function () {
                        if (this.isPaused || this.isFinished) {
                            return false;
                        }
                        var size = DEFAULT_BLOCK_SIZE;
                        var data = null, nextIndex = Math.min(this.max, this.index + size);
                        if (this.index >= this.max) {
                            return this.end();
                        } else {
                            switch (this.type) {
                            case 'string':
                                data = this.data.substring(this.index, nextIndex);
                                break;
                            case 'uint8array':
                                data = this.data.subarray(this.index, nextIndex);
                                break;
                            case 'array':
                            case 'nodebuffer':
                                data = this.data.slice(this.index, nextIndex);
                                break;
                            }
                            this.index = nextIndex;
                            return this.push({
                                data: data,
                                meta: { percent: this.max ? this.index / this.max * 100 : 0 }
                            });
                        }
                    };
                    module.exports = DataWorker;
                },
                {
                    '../utils': 32,
                    './GenericWorker': 28
                }
            ],
            28: [
                function (require, module, exports) {
                    'use strict';
                    function GenericWorker(name) {
                        this.name = name || 'default';
                        this.streamInfo = {};
                        this.generatedError = null;
                        this.extraStreamInfo = {};
                        this.isPaused = true;
                        this.isFinished = false;
                        this.isLocked = false;
                        this._listeners = {
                            'data': [],
                            'end': [],
                            'error': []
                        };
                        this.previous = null;
                    }
                    GenericWorker.prototype = {
                        push: function (chunk) {
                            this.emit('data', chunk);
                        },
                        end: function () {
                            if (this.isFinished) {
                                return false;
                            }
                            this.flush();
                            try {
                                this.emit('end');
                                this.cleanUp();
                                this.isFinished = true;
                            } catch (e) {
                                this.emit('error', e);
                            }
                            return true;
                        },
                        error: function (e) {
                            if (this.isFinished) {
                                return false;
                            }
                            if (this.isPaused) {
                                this.generatedError = e;
                            } else {
                                this.isFinished = true;
                                this.emit('error', e);
                                if (this.previous) {
                                    this.previous.error(e);
                                }
                                this.cleanUp();
                            }
                            return true;
                        },
                        on: function (name, listener) {
                            this._listeners[name].push(listener);
                            return this;
                        },
                        cleanUp: function () {
                            this.streamInfo = this.generatedError = this.extraStreamInfo = null;
                            this._listeners = [];
                        },
                        emit: function (name, arg) {
                            if (this._listeners[name]) {
                                for (var i = 0; i < this._listeners[name].length; i++) {
                                    this._listeners[name][i].call(this, arg);
                                }
                            }
                        },
                        pipe: function (next) {
                            return next.registerPrevious(this);
                        },
                        registerPrevious: function (previous) {
                            if (this.isLocked) {
                                throw new Error('The stream \'' + this + '\' has already been used.');
                            }
                            this.streamInfo = previous.streamInfo;
                            this.mergeStreamInfo();
                            this.previous = previous;
                            var self = this;
                            previous.on('data', function (chunk) {
                                self.processChunk(chunk);
                            });
                            previous.on('end', function () {
                                self.end();
                            });
                            previous.on('error', function (e) {
                                self.error(e);
                            });
                            return this;
                        },
                        pause: function () {
                            if (this.isPaused || this.isFinished) {
                                return false;
                            }
                            this.isPaused = true;
                            if (this.previous) {
                                this.previous.pause();
                            }
                            return true;
                        },
                        resume: function () {
                            if (!this.isPaused || this.isFinished) {
                                return false;
                            }
                            this.isPaused = false;
                            var withError = false;
                            if (this.generatedError) {
                                this.error(this.generatedError);
                                withError = true;
                            }
                            if (this.previous) {
                                this.previous.resume();
                            }
                            return !withError;
                        },
                        flush: function () {
                        },
                        processChunk: function (chunk) {
                            this.push(chunk);
                        },
                        withStreamInfo: function (key, value) {
                            this.extraStreamInfo[key] = value;
                            this.mergeStreamInfo();
                            return this;
                        },
                        mergeStreamInfo: function () {
                            for (var key in this.extraStreamInfo) {
                                if (!this.extraStreamInfo.hasOwnProperty(key)) {
                                    continue;
                                }
                                this.streamInfo[key] = this.extraStreamInfo[key];
                            }
                        },
                        lock: function () {
                            if (this.isLocked) {
                                throw new Error('The stream \'' + this + '\' has already been used.');
                            }
                            this.isLocked = true;
                            if (this.previous) {
                                this.previous.lock();
                            }
                        },
                        toString: function () {
                            var me = 'Worker ' + this.name;
                            if (this.previous) {
                                return this.previous + ' -> ' + me;
                            } else {
                                return me;
                            }
                        }
                    };
                    module.exports = GenericWorker;
                },
                {}
            ],
            29: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils');
                    var ConvertWorker = require('./ConvertWorker');
                    var GenericWorker = require('./GenericWorker');
                    var base64 = require('../base64');
                    var support = require('../support');
                    var external = require('../external');
                    var NodejsStreamOutputAdapter = null;
                    if (support.nodestream) {
                        try {
                            NodejsStreamOutputAdapter = require('../nodejs/NodejsStreamOutputAdapter');
                        } catch (e) {
                        }
                    }
                    function transformZipOutput(resultType, chunkType, dataArray, mimeType) {
                        var content = null;
                        switch (resultType) {
                        case 'blob':
                            return utils.newBlob(dataArray, mimeType);
                        case 'base64':
                            content = concat(chunkType, dataArray);
                            return base64.encode(content);
                        default:
                            content = concat(chunkType, dataArray);
                            return utils.transformTo(resultType, content);
                        }
                    }
                    function concat(type, dataArray) {
                        var i, index = 0, res = null, totalLength = 0;
                        for (i = 0; i < dataArray.length; i++) {
                            totalLength += dataArray[i].length;
                        }
                        switch (type) {
                        case 'string':
                            return dataArray.join('');
                        case 'array':
                            return Array.prototype.concat.apply([], dataArray);
                        case 'uint8array':
                            res = new Uint8Array(totalLength);
                            for (i = 0; i < dataArray.length; i++) {
                                res.set(dataArray[i], index);
                                index += dataArray[i].length;
                            }
                            return res;
                        case 'nodebuffer':
                            return Buffer.concat(dataArray);
                        default:
                            throw new Error('concat : unsupported type \'' + type + '\'');
                        }
                    }
                    function accumulate(helper, updateCallback) {
                        return new external.Promise(function (resolve, reject) {
                            var dataArray = [];
                            var chunkType = helper._internalType, resultType = helper._outputType, mimeType = helper._mimeType;
                            helper.on('data', function (data, meta) {
                                dataArray.push(data);
                                if (updateCallback) {
                                    updateCallback(meta);
                                }
                            }).on('error', function (err) {
                                dataArray = [];
                                reject(err);
                            }).on('end', function () {
                                try {
                                    var result = transformZipOutput(resultType, chunkType, dataArray, mimeType);
                                    resolve(result);
                                } catch (e) {
                                    reject(e);
                                }
                                dataArray = [];
                            }).resume();
                        });
                    }
                    function StreamHelper(worker, outputType, mimeType) {
                        var internalType = outputType;
                        switch (outputType) {
                        case 'blob':
                            internalType = 'arraybuffer';
                            break;
                        case 'arraybuffer':
                            internalType = 'uint8array';
                            break;
                        case 'base64':
                            internalType = 'string';
                            break;
                        }
                        try {
                            this._internalType = internalType;
                            this._outputType = outputType;
                            this._mimeType = mimeType;
                            utils.checkSupport(internalType);
                            this._worker = worker.pipe(new ConvertWorker(internalType));
                            worker.lock();
                        } catch (e) {
                            this._worker = new GenericWorker('error');
                            this._worker.error(e);
                        }
                    }
                    StreamHelper.prototype = {
                        accumulate: function (updateCb) {
                            return accumulate(this, updateCb);
                        },
                        on: function (evt, fn) {
                            var self = this;
                            if (evt === 'data') {
                                this._worker.on(evt, function (chunk) {
                                    fn.call(self, chunk.data, chunk.meta);
                                });
                            } else {
                                this._worker.on(evt, function () {
                                    utils.delay(fn, arguments, self);
                                });
                            }
                            return this;
                        },
                        resume: function () {
                            utils.delay(this._worker.resume, [], this._worker);
                            return this;
                        },
                        pause: function () {
                            this._worker.pause();
                            return this;
                        },
                        toNodejsStream: function (updateCb) {
                            utils.checkSupport('nodestream');
                            if (this._outputType !== 'nodebuffer') {
                                throw new Error(this._outputType + ' is not supported by this method');
                            }
                            return new NodejsStreamOutputAdapter(this, { objectMode: this._outputType !== 'nodebuffer' }, updateCb);
                        }
                    };
                    module.exports = StreamHelper;
                },
                {
                    '../base64': 1,
                    '../external': 6,
                    '../nodejs/NodejsStreamOutputAdapter': 13,
                    '../support': 30,
                    '../utils': 32,
                    './ConvertWorker': 24,
                    './GenericWorker': 28
                }
            ],
            30: [
                function (require, module, exports) {
                    'use strict';
                    exports.base64 = true;
                    exports.array = true;
                    exports.string = true;
                    exports.arraybuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined';
                    exports.nodebuffer = typeof Buffer !== 'undefined';
                    exports.uint8array = typeof Uint8Array !== 'undefined';
                    if (typeof ArrayBuffer === 'undefined') {
                        exports.blob = false;
                    } else {
                        var buffer = new ArrayBuffer(0);
                        try {
                            exports.blob = new Blob([buffer], { type: 'application/zip' }).size === 0;
                        } catch (e) {
                            try {
                                var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                                var builder = new Builder();
                                builder.append(buffer);
                                exports.blob = builder.getBlob('application/zip').size === 0;
                            } catch (e) {
                                exports.blob = false;
                            }
                        }
                    }
                    try {
                        exports.nodestream = !!require('readable-stream').Readable;
                    } catch (e) {
                        exports.nodestream = false;
                    }
                },
                { 'readable-stream': 16 }
            ],
            31: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('./utils');
                    var support = require('./support');
                    var nodejsUtils = require('./nodejsUtils');
                    var GenericWorker = require('./stream/GenericWorker');
                    var _utf8len = new Array(256);
                    for (var i = 0; i < 256; i++) {
                        _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
                    }
                    _utf8len[254] = _utf8len[254] = 1;
                    var string2buf = function (str) {
                        var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
                        for (m_pos = 0; m_pos < str_len; m_pos++) {
                            c = str.charCodeAt(m_pos);
                            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                                c2 = str.charCodeAt(m_pos + 1);
                                if ((c2 & 64512) === 56320) {
                                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                                    m_pos++;
                                }
                            }
                            buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
                        }
                        if (support.uint8array) {
                            buf = new Uint8Array(buf_len);
                        } else {
                            buf = new Array(buf_len);
                        }
                        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
                            c = str.charCodeAt(m_pos);
                            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                                c2 = str.charCodeAt(m_pos + 1);
                                if ((c2 & 64512) === 56320) {
                                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                                    m_pos++;
                                }
                            }
                            if (c < 128) {
                                buf[i++] = c;
                            } else if (c < 2048) {
                                buf[i++] = 192 | c >>> 6;
                                buf[i++] = 128 | c & 63;
                            } else if (c < 65536) {
                                buf[i++] = 224 | c >>> 12;
                                buf[i++] = 128 | c >>> 6 & 63;
                                buf[i++] = 128 | c & 63;
                            } else {
                                buf[i++] = 240 | c >>> 18;
                                buf[i++] = 128 | c >>> 12 & 63;
                                buf[i++] = 128 | c >>> 6 & 63;
                                buf[i++] = 128 | c & 63;
                            }
                        }
                        return buf;
                    };
                    var utf8border = function (buf, max) {
                        var pos;
                        max = max || buf.length;
                        if (max > buf.length) {
                            max = buf.length;
                        }
                        pos = max - 1;
                        while (pos >= 0 && (buf[pos] & 192) === 128) {
                            pos--;
                        }
                        if (pos < 0) {
                            return max;
                        }
                        if (pos === 0) {
                            return max;
                        }
                        return pos + _utf8len[buf[pos]] > max ? pos : max;
                    };
                    var buf2string = function (buf) {
                        var str, i, out, c, c_len;
                        var len = buf.length;
                        var utf16buf = new Array(len * 2);
                        for (out = 0, i = 0; i < len;) {
                            c = buf[i++];
                            if (c < 128) {
                                utf16buf[out++] = c;
                                continue;
                            }
                            c_len = _utf8len[c];
                            if (c_len > 4) {
                                utf16buf[out++] = 65533;
                                i += c_len - 1;
                                continue;
                            }
                            c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
                            while (c_len > 1 && i < len) {
                                c = c << 6 | buf[i++] & 63;
                                c_len--;
                            }
                            if (c_len > 1) {
                                utf16buf[out++] = 65533;
                                continue;
                            }
                            if (c < 65536) {
                                utf16buf[out++] = c;
                            } else {
                                c -= 65536;
                                utf16buf[out++] = 55296 | c >> 10 & 1023;
                                utf16buf[out++] = 56320 | c & 1023;
                            }
                        }
                        if (utf16buf.length !== out) {
                            if (utf16buf.subarray) {
                                utf16buf = utf16buf.subarray(0, out);
                            } else {
                                utf16buf.length = out;
                            }
                        }
                        return utils.applyFromCharCode(utf16buf);
                    };
                    exports.utf8encode = function utf8encode(str) {
                        if (support.nodebuffer) {
                            return nodejsUtils.newBuffer(str, 'utf-8');
                        }
                        return string2buf(str);
                    };
                    exports.utf8decode = function utf8decode(buf) {
                        if (support.nodebuffer) {
                            return utils.transformTo('nodebuffer', buf).toString('utf-8');
                        }
                        buf = utils.transformTo(support.uint8array ? 'uint8array' : 'array', buf);
                        return buf2string(buf);
                    };
                    function Utf8DecodeWorker() {
                        GenericWorker.call(this, 'utf-8 decode');
                        this.leftOver = null;
                    }
                    utils.inherits(Utf8DecodeWorker, GenericWorker);
                    Utf8DecodeWorker.prototype.processChunk = function (chunk) {
                        var data = utils.transformTo(support.uint8array ? 'uint8array' : 'array', chunk.data);
                        if (this.leftOver && this.leftOver.length) {
                            if (support.uint8array) {
                                var previousData = data;
                                data = new Uint8Array(previousData.length + this.leftOver.length);
                                data.set(this.leftOver, 0);
                                data.set(previousData, this.leftOver.length);
                            } else {
                                data = this.leftOver.concat(data);
                            }
                            this.leftOver = null;
                        }
                        var nextBoundary = utf8border(data);
                        var usableData = data;
                        if (nextBoundary !== data.length) {
                            if (support.uint8array) {
                                usableData = data.subarray(0, nextBoundary);
                                this.leftOver = data.subarray(nextBoundary, data.length);
                            } else {
                                usableData = data.slice(0, nextBoundary);
                                this.leftOver = data.slice(nextBoundary, data.length);
                            }
                        }
                        this.push({
                            data: exports.utf8decode(usableData),
                            meta: chunk.meta
                        });
                    };
                    Utf8DecodeWorker.prototype.flush = function () {
                        if (this.leftOver && this.leftOver.length) {
                            this.push({
                                data: exports.utf8decode(this.leftOver),
                                meta: {}
                            });
                            this.leftOver = null;
                        }
                    };
                    exports.Utf8DecodeWorker = Utf8DecodeWorker;
                    function Utf8EncodeWorker() {
                        GenericWorker.call(this, 'utf-8 encode');
                    }
                    utils.inherits(Utf8EncodeWorker, GenericWorker);
                    Utf8EncodeWorker.prototype.processChunk = function (chunk) {
                        this.push({
                            data: exports.utf8encode(chunk.data),
                            meta: chunk.meta
                        });
                    };
                    exports.Utf8EncodeWorker = Utf8EncodeWorker;
                },
                {
                    './nodejsUtils': 14,
                    './stream/GenericWorker': 28,
                    './support': 30,
                    './utils': 32
                }
            ],
            32: [
                function (require, module, exports) {
                    'use strict';
                    var support = require('./support');
                    var base64 = require('./base64');
                    var nodejsUtils = require('./nodejsUtils');
                    var setImmediate = require('core-js/library/fn/set-immediate');
                    var external = require('./external');
                    function string2binary(str) {
                        var result = null;
                        if (support.uint8array) {
                            result = new Uint8Array(str.length);
                        } else {
                            result = new Array(str.length);
                        }
                        return stringToArrayLike(str, result);
                    }
                    exports.newBlob = function (parts, type) {
                        exports.checkSupport('blob');
                        try {
                            return new Blob(parts, { type: type });
                        } catch (e) {
                            try {
                                var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                                var builder = new Builder();
                                for (var i = 0; i < parts.length; i++) {
                                    builder.append(parts[i]);
                                }
                                return builder.getBlob(type);
                            } catch (e) {
                                throw new Error('Bug : can\'t construct the Blob.');
                            }
                        }
                    };
                    function identity(input) {
                        return input;
                    }
                    function stringToArrayLike(str, array) {
                        for (var i = 0; i < str.length; ++i) {
                            array[i] = str.charCodeAt(i) & 255;
                        }
                        return array;
                    }
                    var arrayToStringHelper = {
                        stringifyByChunk: function (array, type, chunk) {
                            var result = [], k = 0, len = array.length;
                            if (len <= chunk) {
                                return String.fromCharCode.apply(null, array);
                            }
                            while (k < len) {
                                if (type === 'array' || type === 'nodebuffer') {
                                    result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
                                } else {
                                    result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
                                }
                                k += chunk;
                            }
                            return result.join('');
                        },
                        stringifyByChar: function (array) {
                            var resultStr = '';
                            for (var i = 0; i < array.length; i++) {
                                resultStr += String.fromCharCode(array[i]);
                            }
                            return resultStr;
                        },
                        applyCanBeUsed: {
                            uint8array: function () {
                                try {
                                    return support.uint8array && String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;
                                } catch (e) {
                                    return false;
                                }
                            }(),
                            nodebuffer: function () {
                                try {
                                    return support.nodebuffer && String.fromCharCode.apply(null, nodejsUtils.newBuffer(1)).length === 1;
                                } catch (e) {
                                    return false;
                                }
                            }()
                        }
                    };
                    function arrayLikeToString(array) {
                        var chunk = 65536, type = exports.getTypeOf(array), canUseApply = true;
                        if (type === 'uint8array') {
                            canUseApply = arrayToStringHelper.applyCanBeUsed.uint8array;
                        } else if (type === 'nodebuffer') {
                            canUseApply = arrayToStringHelper.applyCanBeUsed.nodebuffer;
                        }
                        if (canUseApply) {
                            while (chunk > 1) {
                                try {
                                    return arrayToStringHelper.stringifyByChunk(array, type, chunk);
                                } catch (e) {
                                    chunk = Math.floor(chunk / 2);
                                }
                            }
                        }
                        return arrayToStringHelper.stringifyByChar(array);
                    }
                    exports.applyFromCharCode = arrayLikeToString;
                    function arrayLikeToArrayLike(arrayFrom, arrayTo) {
                        for (var i = 0; i < arrayFrom.length; i++) {
                            arrayTo[i] = arrayFrom[i];
                        }
                        return arrayTo;
                    }
                    var transform = {};
                    transform['string'] = {
                        'string': identity,
                        'array': function (input) {
                            return stringToArrayLike(input, new Array(input.length));
                        },
                        'arraybuffer': function (input) {
                            return transform['string']['uint8array'](input).buffer;
                        },
                        'uint8array': function (input) {
                            return stringToArrayLike(input, new Uint8Array(input.length));
                        },
                        'nodebuffer': function (input) {
                            return stringToArrayLike(input, nodejsUtils.newBuffer(input.length));
                        }
                    };
                    transform['array'] = {
                        'string': arrayLikeToString,
                        'array': identity,
                        'arraybuffer': function (input) {
                            return new Uint8Array(input).buffer;
                        },
                        'uint8array': function (input) {
                            return new Uint8Array(input);
                        },
                        'nodebuffer': function (input) {
                            return nodejsUtils.newBuffer(input);
                        }
                    };
                    transform['arraybuffer'] = {
                        'string': function (input) {
                            return arrayLikeToString(new Uint8Array(input));
                        },
                        'array': function (input) {
                            return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
                        },
                        'arraybuffer': identity,
                        'uint8array': function (input) {
                            return new Uint8Array(input);
                        },
                        'nodebuffer': function (input) {
                            return nodejsUtils.newBuffer(new Uint8Array(input));
                        }
                    };
                    transform['uint8array'] = {
                        'string': arrayLikeToString,
                        'array': function (input) {
                            return arrayLikeToArrayLike(input, new Array(input.length));
                        },
                        'arraybuffer': function (input) {
                            var copy = new Uint8Array(input.length);
                            if (input.length) {
                                copy.set(input, 0);
                            }
                            return copy.buffer;
                        },
                        'uint8array': identity,
                        'nodebuffer': function (input) {
                            return nodejsUtils.newBuffer(input);
                        }
                    };
                    transform['nodebuffer'] = {
                        'string': arrayLikeToString,
                        'array': function (input) {
                            return arrayLikeToArrayLike(input, new Array(input.length));
                        },
                        'arraybuffer': function (input) {
                            return transform['nodebuffer']['uint8array'](input).buffer;
                        },
                        'uint8array': function (input) {
                            return arrayLikeToArrayLike(input, new Uint8Array(input.length));
                        },
                        'nodebuffer': identity
                    };
                    exports.transformTo = function (outputType, input) {
                        if (!input) {
                            input = '';
                        }
                        if (!outputType) {
                            return input;
                        }
                        exports.checkSupport(outputType);
                        var inputType = exports.getTypeOf(input);
                        var result = transform[inputType][outputType](input);
                        return result;
                    };
                    exports.getTypeOf = function (input) {
                        if (typeof input === 'string') {
                            return 'string';
                        }
                        if (Object.prototype.toString.call(input) === '[object Array]') {
                            return 'array';
                        }
                        if (support.nodebuffer && nodejsUtils.isBuffer(input)) {
                            return 'nodebuffer';
                        }
                        if (support.uint8array && input instanceof Uint8Array) {
                            return 'uint8array';
                        }
                        if (support.arraybuffer && input instanceof ArrayBuffer) {
                            return 'arraybuffer';
                        }
                    };
                    exports.checkSupport = function (type) {
                        var supported = support[type.toLowerCase()];
                        if (!supported) {
                            throw new Error(type + ' is not supported by this platform');
                        }
                    };
                    exports.MAX_VALUE_16BITS = 65535;
                    exports.MAX_VALUE_32BITS = -1;
                    exports.pretty = function (str) {
                        var res = '', code, i;
                        for (i = 0; i < (str || '').length; i++) {
                            code = str.charCodeAt(i);
                            res += '\\x' + (code < 16 ? '0' : '') + code.toString(16).toUpperCase();
                        }
                        return res;
                    };
                    exports.delay = function (callback, args, self) {
                        setImmediate(function () {
                            callback.apply(self || null, args || []);
                        });
                    };
                    exports.inherits = function (ctor, superCtor) {
                        var Obj = function () {
                        };
                        Obj.prototype = superCtor.prototype;
                        ctor.prototype = new Obj();
                    };
                    exports.extend = function () {
                        var result = {}, i, attr;
                        for (i = 0; i < arguments.length; i++) {
                            for (attr in arguments[i]) {
                                if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === 'undefined') {
                                    result[attr] = arguments[i][attr];
                                }
                            }
                        }
                        return result;
                    };
                    exports.prepareContent = function (name, inputData, isBinary, isOptimizedBinaryString, isBase64) {
                        var promise = external.Promise.resolve(inputData).then(function (data) {
                            var isBlob = support.blob && (data instanceof Blob || [
                                '[object File]',
                                '[object Blob]'
                            ].indexOf(Object.prototype.toString.call(data)) !== -1);
                            if (isBlob && typeof FileReader !== 'undefined') {
                                return new external.Promise(function (resolve, reject) {
                                    var reader = new FileReader();
                                    reader.onload = function (e) {
                                        resolve(e.target.result);
                                    };
                                    reader.onerror = function (e) {
                                        reject(e.target.error);
                                    };
                                    reader.readAsArrayBuffer(data);
                                });
                            } else {
                                return data;
                            }
                        });
                        return promise.then(function (data) {
                            var dataType = exports.getTypeOf(data);
                            if (!dataType) {
                                return external.Promise.reject(new Error('The data of \'' + name + '\' is in an unsupported format !'));
                            }
                            if (dataType === 'arraybuffer') {
                                data = exports.transformTo('uint8array', data);
                            } else if (dataType === 'string') {
                                if (isBase64) {
                                    data = base64.decode(data);
                                } else if (isBinary) {
                                    if (isOptimizedBinaryString !== true) {
                                        data = string2binary(data);
                                    }
                                }
                            }
                            return data;
                        });
                    };
                },
                {
                    './base64': 1,
                    './external': 6,
                    './nodejsUtils': 14,
                    './support': 30,
                    'core-js/library/fn/set-immediate': 36
                }
            ],
            33: [
                function (require, module, exports) {
                    'use strict';
                    var readerFor = require('./reader/readerFor');
                    var utils = require('./utils');
                    var sig = require('./signature');
                    var ZipEntry = require('./zipEntry');
                    var utf8 = require('./utf8');
                    var support = require('./support');
                    function ZipEntries(loadOptions) {
                        this.files = [];
                        this.loadOptions = loadOptions;
                    }
                    ZipEntries.prototype = {
                        checkSignature: function (expectedSignature) {
                            if (!this.reader.readAndCheckSignature(expectedSignature)) {
                                this.reader.index -= 4;
                                var signature = this.reader.readString(4);
                                throw new Error('Corrupted zip or bug : unexpected signature ' + '(' + utils.pretty(signature) + ', expected ' + utils.pretty(expectedSignature) + ')');
                            }
                        },
                        isSignature: function (askedIndex, expectedSignature) {
                            var currentIndex = this.reader.index;
                            this.reader.setIndex(askedIndex);
                            var signature = this.reader.readString(4);
                            var result = signature === expectedSignature;
                            this.reader.setIndex(currentIndex);
                            return result;
                        },
                        readBlockEndOfCentral: function () {
                            this.diskNumber = this.reader.readInt(2);
                            this.diskWithCentralDirStart = this.reader.readInt(2);
                            this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
                            this.centralDirRecords = this.reader.readInt(2);
                            this.centralDirSize = this.reader.readInt(4);
                            this.centralDirOffset = this.reader.readInt(4);
                            this.zipCommentLength = this.reader.readInt(2);
                            var zipComment = this.reader.readData(this.zipCommentLength);
                            var decodeParamType = support.uint8array ? 'uint8array' : 'array';
                            var decodeContent = utils.transformTo(decodeParamType, zipComment);
                            this.zipComment = this.loadOptions.decodeFileName(decodeContent);
                        },
                        readBlockZip64EndOfCentral: function () {
                            this.zip64EndOfCentralSize = this.reader.readInt(8);
                            this.reader.skip(4);
                            this.diskNumber = this.reader.readInt(4);
                            this.diskWithCentralDirStart = this.reader.readInt(4);
                            this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
                            this.centralDirRecords = this.reader.readInt(8);
                            this.centralDirSize = this.reader.readInt(8);
                            this.centralDirOffset = this.reader.readInt(8);
                            this.zip64ExtensibleData = {};
                            var extraDataSize = this.zip64EndOfCentralSize - 44, index = 0, extraFieldId, extraFieldLength, extraFieldValue;
                            while (index < extraDataSize) {
                                extraFieldId = this.reader.readInt(2);
                                extraFieldLength = this.reader.readInt(4);
                                extraFieldValue = this.reader.readData(extraFieldLength);
                                this.zip64ExtensibleData[extraFieldId] = {
                                    id: extraFieldId,
                                    length: extraFieldLength,
                                    value: extraFieldValue
                                };
                            }
                        },
                        readBlockZip64EndOfCentralLocator: function () {
                            this.diskWithZip64CentralDirStart = this.reader.readInt(4);
                            this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
                            this.disksCount = this.reader.readInt(4);
                            if (this.disksCount > 1) {
                                throw new Error('Multi-volumes zip are not supported');
                            }
                        },
                        readLocalFiles: function () {
                            var i, file;
                            for (i = 0; i < this.files.length; i++) {
                                file = this.files[i];
                                this.reader.setIndex(file.localHeaderOffset);
                                this.checkSignature(sig.LOCAL_FILE_HEADER);
                                file.readLocalPart(this.reader);
                                file.handleUTF8();
                                file.processAttributes();
                            }
                        },
                        readCentralDir: function () {
                            var file;
                            this.reader.setIndex(this.centralDirOffset);
                            while (this.reader.readAndCheckSignature(sig.CENTRAL_FILE_HEADER)) {
                                file = new ZipEntry({ zip64: this.zip64 }, this.loadOptions);
                                file.readCentralPart(this.reader);
                                this.files.push(file);
                            }
                            if (this.centralDirRecords !== this.files.length) {
                                if (this.centralDirRecords !== 0 && this.files.length === 0) {
                                    throw new Error('Corrupted zip or bug: expected ' + this.centralDirRecords + ' records in central dir, got ' + this.files.length);
                                } else {
                                }
                            }
                        },
                        readEndOfCentral: function () {
                            var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
                            if (offset < 0) {
                                var isGarbage = !this.isSignature(0, sig.LOCAL_FILE_HEADER);
                                if (isGarbage) {
                                    throw new Error('Can\'t find end of central directory : is this a zip file ? ' + 'If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html');
                                } else {
                                    throw new Error('Corrupted zip : can\'t find end of central directory');
                                }
                            }
                            this.reader.setIndex(offset);
                            var endOfCentralDirOffset = offset;
                            this.checkSignature(sig.CENTRAL_DIRECTORY_END);
                            this.readBlockEndOfCentral();
                            if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
                                this.zip64 = true;
                                offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                                if (offset < 0) {
                                    throw new Error('Corrupted zip : can\'t find the ZIP64 end of central directory locator');
                                }
                                this.reader.setIndex(offset);
                                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                                this.readBlockZip64EndOfCentralLocator();
                                if (!this.isSignature(this.relativeOffsetEndOfZip64CentralDir, sig.ZIP64_CENTRAL_DIRECTORY_END)) {
                                    this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
                                    if (this.relativeOffsetEndOfZip64CentralDir < 0) {
                                        throw new Error('Corrupted zip : can\'t find the ZIP64 end of central directory');
                                    }
                                }
                                this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
                                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
                                this.readBlockZip64EndOfCentral();
                            }
                            var expectedEndOfCentralDirOffset = this.centralDirOffset + this.centralDirSize;
                            if (this.zip64) {
                                expectedEndOfCentralDirOffset += 20;
                                expectedEndOfCentralDirOffset += 12 + this.zip64EndOfCentralSize;
                            }
                            var extraBytes = endOfCentralDirOffset - expectedEndOfCentralDirOffset;
                            if (extraBytes > 0) {
                                if (this.isSignature(endOfCentralDirOffset, sig.CENTRAL_FILE_HEADER)) {
                                } else {
                                    this.reader.zero = extraBytes;
                                }
                            } else if (extraBytes < 0) {
                                throw new Error('Corrupted zip: missing ' + Math.abs(extraBytes) + ' bytes.');
                            }
                        },
                        prepareReader: function (data) {
                            this.reader = readerFor(data);
                        },
                        load: function (data) {
                            this.prepareReader(data);
                            this.readEndOfCentral();
                            this.readCentralDir();
                            this.readLocalFiles();
                        }
                    };
                    module.exports = ZipEntries;
                },
                {
                    './reader/readerFor': 22,
                    './signature': 23,
                    './support': 30,
                    './utf8': 31,
                    './utils': 32,
                    './zipEntry': 34
                }
            ],
            34: [
                function (require, module, exports) {
                    'use strict';
                    var readerFor = require('./reader/readerFor');
                    var utils = require('./utils');
                    var CompressedObject = require('./compressedObject');
                    var crc32fn = require('./crc32');
                    var utf8 = require('./utf8');
                    var compressions = require('./compressions');
                    var support = require('./support');
                    var MADE_BY_DOS = 0;
                    var MADE_BY_UNIX = 3;
                    var findCompression = function (compressionMethod) {
                        for (var method in compressions) {
                            if (!compressions.hasOwnProperty(method)) {
                                continue;
                            }
                            if (compressions[method].magic === compressionMethod) {
                                return compressions[method];
                            }
                        }
                        return null;
                    };
                    function ZipEntry(options, loadOptions) {
                        this.options = options;
                        this.loadOptions = loadOptions;
                    }
                    ZipEntry.prototype = {
                        isEncrypted: function () {
                            return (this.bitFlag & 1) === 1;
                        },
                        useUTF8: function () {
                            return (this.bitFlag & 2048) === 2048;
                        },
                        readLocalPart: function (reader) {
                            var compression, localExtraFieldsLength;
                            reader.skip(22);
                            this.fileNameLength = reader.readInt(2);
                            localExtraFieldsLength = reader.readInt(2);
                            this.fileName = reader.readData(this.fileNameLength);
                            reader.skip(localExtraFieldsLength);
                            if (this.compressedSize === -1 || this.uncompressedSize === -1) {
                                throw new Error('Bug or corrupted zip : didn\'t get enough informations from the central directory ' + '(compressedSize === -1 || uncompressedSize === -1)');
                            }
                            compression = findCompression(this.compressionMethod);
                            if (compression === null) {
                                throw new Error('Corrupted zip : compression ' + utils.pretty(this.compressionMethod) + ' unknown (inner file : ' + utils.transformTo('string', this.fileName) + ')');
                            }
                            this.decompressed = new CompressedObject(this.compressedSize, this.uncompressedSize, this.crc32, compression, reader.readData(this.compressedSize));
                        },
                        readCentralPart: function (reader) {
                            this.versionMadeBy = reader.readInt(2);
                            reader.skip(2);
                            this.bitFlag = reader.readInt(2);
                            this.compressionMethod = reader.readString(2);
                            this.date = reader.readDate();
                            this.crc32 = reader.readInt(4);
                            this.compressedSize = reader.readInt(4);
                            this.uncompressedSize = reader.readInt(4);
                            var fileNameLength = reader.readInt(2);
                            this.extraFieldsLength = reader.readInt(2);
                            this.fileCommentLength = reader.readInt(2);
                            this.diskNumberStart = reader.readInt(2);
                            this.internalFileAttributes = reader.readInt(2);
                            this.externalFileAttributes = reader.readInt(4);
                            this.localHeaderOffset = reader.readInt(4);
                            if (this.isEncrypted()) {
                                throw new Error('Encrypted zip are not supported');
                            }
                            reader.skip(fileNameLength);
                            this.readExtraFields(reader);
                            this.parseZIP64ExtraField(reader);
                            this.fileComment = reader.readData(this.fileCommentLength);
                        },
                        processAttributes: function () {
                            this.unixPermissions = null;
                            this.dosPermissions = null;
                            var madeBy = this.versionMadeBy >> 8;
                            this.dir = this.externalFileAttributes & 16 ? true : false;
                            if (madeBy === MADE_BY_DOS) {
                                this.dosPermissions = this.externalFileAttributes & 63;
                            }
                            if (madeBy === MADE_BY_UNIX) {
                                this.unixPermissions = this.externalFileAttributes >> 16 & 65535;
                            }
                            if (!this.dir && this.fileNameStr.slice(-1) === '/') {
                                this.dir = true;
                            }
                        },
                        parseZIP64ExtraField: function (reader) {
                            if (!this.extraFields[1]) {
                                return;
                            }
                            var extraReader = readerFor(this.extraFields[1].value);
                            if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
                                this.uncompressedSize = extraReader.readInt(8);
                            }
                            if (this.compressedSize === utils.MAX_VALUE_32BITS) {
                                this.compressedSize = extraReader.readInt(8);
                            }
                            if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
                                this.localHeaderOffset = extraReader.readInt(8);
                            }
                            if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
                                this.diskNumberStart = extraReader.readInt(4);
                            }
                        },
                        readExtraFields: function (reader) {
                            var end = reader.index + this.extraFieldsLength, extraFieldId, extraFieldLength, extraFieldValue;
                            if (!this.extraFields) {
                                this.extraFields = {};
                            }
                            while (reader.index < end) {
                                extraFieldId = reader.readInt(2);
                                extraFieldLength = reader.readInt(2);
                                extraFieldValue = reader.readData(extraFieldLength);
                                this.extraFields[extraFieldId] = {
                                    id: extraFieldId,
                                    length: extraFieldLength,
                                    value: extraFieldValue
                                };
                            }
                        },
                        handleUTF8: function () {
                            var decodeParamType = support.uint8array ? 'uint8array' : 'array';
                            if (this.useUTF8()) {
                                this.fileNameStr = utf8.utf8decode(this.fileName);
                                this.fileCommentStr = utf8.utf8decode(this.fileComment);
                            } else {
                                var upath = this.findExtraFieldUnicodePath();
                                if (upath !== null) {
                                    this.fileNameStr = upath;
                                } else {
                                    var fileNameByteArray = utils.transformTo(decodeParamType, this.fileName);
                                    this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);
                                }
                                var ucomment = this.findExtraFieldUnicodeComment();
                                if (ucomment !== null) {
                                    this.fileCommentStr = ucomment;
                                } else {
                                    var commentByteArray = utils.transformTo(decodeParamType, this.fileComment);
                                    this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);
                                }
                            }
                        },
                        findExtraFieldUnicodePath: function () {
                            var upathField = this.extraFields[28789];
                            if (upathField) {
                                var extraReader = readerFor(upathField.value);
                                if (extraReader.readInt(1) !== 1) {
                                    return null;
                                }
                                if (crc32fn(this.fileName) !== extraReader.readInt(4)) {
                                    return null;
                                }
                                return utf8.utf8decode(extraReader.readData(upathField.length - 5));
                            }
                            return null;
                        },
                        findExtraFieldUnicodeComment: function () {
                            var ucommentField = this.extraFields[25461];
                            if (ucommentField) {
                                var extraReader = readerFor(ucommentField.value);
                                if (extraReader.readInt(1) !== 1) {
                                    return null;
                                }
                                if (crc32fn(this.fileComment) !== extraReader.readInt(4)) {
                                    return null;
                                }
                                return utf8.utf8decode(extraReader.readData(ucommentField.length - 5));
                            }
                            return null;
                        }
                    };
                    module.exports = ZipEntry;
                },
                {
                    './compressedObject': 2,
                    './compressions': 3,
                    './crc32': 4,
                    './reader/readerFor': 22,
                    './support': 30,
                    './utf8': 31,
                    './utils': 32
                }
            ],
            35: [
                function (require, module, exports) {
                    'use strict';
                    var StreamHelper = require('./stream/StreamHelper');
                    var DataWorker = require('./stream/DataWorker');
                    var utf8 = require('./utf8');
                    var CompressedObject = require('./compressedObject');
                    var GenericWorker = require('./stream/GenericWorker');
                    var ZipObject = function (name, data, options) {
                        this.name = name;
                        this.dir = options.dir;
                        this.date = options.date;
                        this.comment = options.comment;
                        this.unixPermissions = options.unixPermissions;
                        this.dosPermissions = options.dosPermissions;
                        this._data = data;
                        this._dataBinary = options.binary;
                        this.options = {
                            compression: options.compression,
                            compressionOptions: options.compressionOptions
                        };
                    };
                    ZipObject.prototype = {
                        internalStream: function (type) {
                            var outputType = type.toLowerCase();
                            var askUnicodeString = outputType === 'string' || outputType === 'text';
                            if (outputType === 'binarystring' || outputType === 'text') {
                                outputType = 'string';
                            }
                            var result = this._decompressWorker();
                            var isUnicodeString = !this._dataBinary;
                            if (isUnicodeString && !askUnicodeString) {
                                result = result.pipe(new utf8.Utf8EncodeWorker());
                            }
                            if (!isUnicodeString && askUnicodeString) {
                                result = result.pipe(new utf8.Utf8DecodeWorker());
                            }
                            return new StreamHelper(result, outputType, '');
                        },
                        async: function (type, onUpdate) {
                            return this.internalStream(type).accumulate(onUpdate);
                        },
                        nodeStream: function (type, onUpdate) {
                            return this.internalStream(type || 'nodebuffer').toNodejsStream(onUpdate);
                        },
                        _compressWorker: function (compression, compressionOptions) {
                            if (this._data instanceof CompressedObject && this._data.compression.magic === compression.magic) {
                                return this._data.getCompressedWorker();
                            } else {
                                var result = this._decompressWorker();
                                if (!this._dataBinary) {
                                    result = result.pipe(new utf8.Utf8EncodeWorker());
                                }
                                return CompressedObject.createWorkerFrom(result, compression, compressionOptions);
                            }
                        },
                        _decompressWorker: function () {
                            if (this._data instanceof CompressedObject) {
                                return this._data.getContentWorker();
                            } else if (this._data instanceof GenericWorker) {
                                return this._data;
                            } else {
                                return new DataWorker(this._data);
                            }
                        }
                    };
                    var removedMethods = [
                        'asText',
                        'asBinary',
                        'asNodeBuffer',
                        'asUint8Array',
                        'asArrayBuffer'
                    ];
                    var removedFn = function () {
                        throw new Error('This method has been removed in JSZip 3.0, please check the upgrade guide.');
                    };
                    for (var i = 0; i < removedMethods.length; i++) {
                        ZipObject.prototype[removedMethods[i]] = removedFn;
                    }
                    module.exports = ZipObject;
                },
                {
                    './compressedObject': 2,
                    './stream/DataWorker': 27,
                    './stream/GenericWorker': 28,
                    './stream/StreamHelper': 29,
                    './utf8': 31
                }
            ],
            36: [
                function (require, module, exports) {
                    require('../modules/web.immediate');
                    module.exports = require('../modules/_core').setImmediate;
                },
                {
                    '../modules/_core': 40,
                    '../modules/web.immediate': 56
                }
            ],
            37: [
                function (require, module, exports) {
                    module.exports = function (it) {
                        if (typeof it != 'function')
                            throw TypeError(it + ' is not a function!');
                        return it;
                    };
                },
                {}
            ],
            38: [
                function (require, module, exports) {
                    var isObject = require('./_is-object');
                    module.exports = function (it) {
                        if (!isObject(it))
                            throw TypeError(it + ' is not an object!');
                        return it;
                    };
                },
                { './_is-object': 51 }
            ],
            39: [
                function (require, module, exports) {
                    var toString = {}.toString;
                    module.exports = function (it) {
                        return toString.call(it).slice(8, -1);
                    };
                },
                {}
            ],
            40: [
                function (require, module, exports) {
                    var core = module.exports = { version: '2.3.0' };
                    if (typeof __e == 'number')
                        __e = core;
                },
                {}
            ],
            41: [
                function (require, module, exports) {
                    var aFunction = require('./_a-function');
                    module.exports = function (fn, that, length) {
                        aFunction(fn);
                        if (that === undefined)
                            return fn;
                        switch (length) {
                        case 1:
                            return function (a) {
                                return fn.call(that, a);
                            };
                        case 2:
                            return function (a, b) {
                                return fn.call(that, a, b);
                            };
                        case 3:
                            return function (a, b, c) {
                                return fn.call(that, a, b, c);
                            };
                        }
                        return function () {
                            return fn.apply(that, arguments);
                        };
                    };
                },
                { './_a-function': 37 }
            ],
            42: [
                function (require, module, exports) {
                    module.exports = !require('./_fails')(function () {
                        return Object.defineProperty({}, 'a', {
                            get: function () {
                                return 7;
                            }
                        }).a != 7;
                    });
                },
                { './_fails': 45 }
            ],
            43: [
                function (require, module, exports) {
                    var isObject = require('./_is-object'), document = require('./_global').document, is = isObject(document) && isObject(document.createElement);
                    module.exports = function (it) {
                        return is ? document.createElement(it) : {};
                    };
                },
                {
                    './_global': 46,
                    './_is-object': 51
                }
            ],
            44: [
                function (require, module, exports) {
                    var global = require('./_global'), core = require('./_core'), ctx = require('./_ctx'), hide = require('./_hide'), PROTOTYPE = 'prototype';
                    var $export = function (type, name, source) {
                        var IS_FORCED = type & $export.F, IS_GLOBAL = type & $export.G, IS_STATIC = type & $export.S, IS_PROTO = type & $export.P, IS_BIND = type & $export.B, IS_WRAP = type & $export.W, exports = IS_GLOBAL ? core : core[name] || (core[name] = {}), expProto = exports[PROTOTYPE], target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE], key, own, out;
                        if (IS_GLOBAL)
                            source = name;
                        for (key in source) {
                            own = !IS_FORCED && target && target[key] !== undefined;
                            if (own && key in exports)
                                continue;
                            out = own ? target[key] : source[key];
                            exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function (C) {
                                var F = function (a, b, c) {
                                    if (this instanceof C) {
                                        switch (arguments.length) {
                                        case 0:
                                            return new C();
                                        case 1:
                                            return new C(a);
                                        case 2:
                                            return new C(a, b);
                                        }
                                        return new C(a, b, c);
                                    }
                                    return C.apply(this, arguments);
                                };
                                F[PROTOTYPE] = C[PROTOTYPE];
                                return F;
                            }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                            if (IS_PROTO) {
                                (exports.virtual || (exports.virtual = {}))[key] = out;
                                if (type & $export.R && expProto && !expProto[key])
                                    hide(expProto, key, out);
                            }
                        }
                    };
                    $export.F = 1;
                    $export.G = 2;
                    $export.S = 4;
                    $export.P = 8;
                    $export.B = 16;
                    $export.W = 32;
                    $export.U = 64;
                    $export.R = 128;
                    module.exports = $export;
                },
                {
                    './_core': 40,
                    './_ctx': 41,
                    './_global': 46,
                    './_hide': 47
                }
            ],
            45: [
                function (require, module, exports) {
                    module.exports = function (exec) {
                        try {
                            return !!exec();
                        } catch (e) {
                            return true;
                        }
                    };
                },
                {}
            ],
            46: [
                function (require, module, exports) {
                    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                    if (typeof __g == 'number')
                        __g = global;
                },
                {}
            ],
            47: [
                function (require, module, exports) {
                    var dP = require('./_object-dp'), createDesc = require('./_property-desc');
                    module.exports = require('./_descriptors') ? function (object, key, value) {
                        return dP.f(object, key, createDesc(1, value));
                    } : function (object, key, value) {
                        object[key] = value;
                        return object;
                    };
                },
                {
                    './_descriptors': 42,
                    './_object-dp': 52,
                    './_property-desc': 53
                }
            ],
            48: [
                function (require, module, exports) {
                    module.exports = require('./_global').document && document.documentElement;
                },
                { './_global': 46 }
            ],
            49: [
                function (require, module, exports) {
                    module.exports = !require('./_descriptors') && !require('./_fails')(function () {
                        return Object.defineProperty(require('./_dom-create')('div'), 'a', {
                            get: function () {
                                return 7;
                            }
                        }).a != 7;
                    });
                },
                {
                    './_descriptors': 42,
                    './_dom-create': 43,
                    './_fails': 45
                }
            ],
            50: [
                function (require, module, exports) {
                    module.exports = function (fn, args, that) {
                        var un = that === undefined;
                        switch (args.length) {
                        case 0:
                            return un ? fn() : fn.call(that);
                        case 1:
                            return un ? fn(args[0]) : fn.call(that, args[0]);
                        case 2:
                            return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                        case 3:
                            return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                        case 4:
                            return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                        }
                        return fn.apply(that, args);
                    };
                },
                {}
            ],
            51: [
                function (require, module, exports) {
                    module.exports = function (it) {
                        return typeof it === 'object' ? it !== null : typeof it === 'function';
                    };
                },
                {}
            ],
            52: [
                function (require, module, exports) {
                    var anObject = require('./_an-object'), IE8_DOM_DEFINE = require('./_ie8-dom-define'), toPrimitive = require('./_to-primitive'), dP = Object.defineProperty;
                    exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                        anObject(O);
                        P = toPrimitive(P, true);
                        anObject(Attributes);
                        if (IE8_DOM_DEFINE)
                            try {
                                return dP(O, P, Attributes);
                            } catch (e) {
                            }
                        if ('get' in Attributes || 'set' in Attributes)
                            throw TypeError('Accessors not supported!');
                        if ('value' in Attributes)
                            O[P] = Attributes.value;
                        return O;
                    };
                },
                {
                    './_an-object': 38,
                    './_descriptors': 42,
                    './_ie8-dom-define': 49,
                    './_to-primitive': 55
                }
            ],
            53: [
                function (require, module, exports) {
                    module.exports = function (bitmap, value) {
                        return {
                            enumerable: !(bitmap & 1),
                            configurable: !(bitmap & 2),
                            writable: !(bitmap & 4),
                            value: value
                        };
                    };
                },
                {}
            ],
            54: [
                function (require, module, exports) {
                    var ctx = require('./_ctx'), invoke = require('./_invoke'), html = require('./_html'), cel = require('./_dom-create'), global = require('./_global'), process = global.process, setTask = global.setImmediate, clearTask = global.clearImmediate, MessageChannel = global.MessageChannel, counter = 0, queue = {}, ONREADYSTATECHANGE = 'onreadystatechange', defer, channel, port;
                    var run = function () {
                        var id = +this;
                        if (queue.hasOwnProperty(id)) {
                            var fn = queue[id];
                            delete queue[id];
                            fn();
                        }
                    };
                    var listener = function (event) {
                        run.call(event.data);
                    };
                    if (!setTask || !clearTask) {
                        setTask = function setImmediate(fn) {
                            var args = [], i = 1;
                            while (arguments.length > i)
                                args.push(arguments[i++]);
                            queue[++counter] = function () {
                                invoke(typeof fn == 'function' ? fn : Function(fn), args);
                            };
                            defer(counter);
                            return counter;
                        };
                        clearTask = function clearImmediate(id) {
                            delete queue[id];
                        };
                        if (require('./_cof')(process) == 'process') {
                            defer = function (id) {
                                process.nextTick(ctx(run, id, 1));
                            };
                        } else if (MessageChannel) {
                            channel = new MessageChannel();
                            port = channel.port2;
                            channel.port1.onmessage = listener;
                            defer = ctx(port.postMessage, port, 1);
                        } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
                            defer = function (id) {
                                global.postMessage(id + '', '*');
                            };
                            global.addEventListener('message', listener, false);
                        } else if (ONREADYSTATECHANGE in cel('script')) {
                            defer = function (id) {
                                html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
                                    html.removeChild(this);
                                    run.call(id);
                                };
                            };
                        } else {
                            defer = function (id) {
                                setTimeout(ctx(run, id, 1), 0);
                            };
                        }
                    }
                    module.exports = {
                        set: setTask,
                        clear: clearTask
                    };
                },
                {
                    './_cof': 39,
                    './_ctx': 41,
                    './_dom-create': 43,
                    './_global': 46,
                    './_html': 48,
                    './_invoke': 50
                }
            ],
            55: [
                function (require, module, exports) {
                    var isObject = require('./_is-object');
                    module.exports = function (it, S) {
                        if (!isObject(it))
                            return it;
                        var fn, val;
                        if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))
                            return val;
                        if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))
                            return val;
                        if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))
                            return val;
                        throw TypeError('Can\'t convert object to primitive value');
                    };
                },
                { './_is-object': 51 }
            ],
            56: [
                function (require, module, exports) {
                    var $export = require('./_export'), $task = require('./_task');
                    $export($export.G + $export.B, {
                        setImmediate: $task.set,
                        clearImmediate: $task.clear
                    });
                },
                {
                    './_export': 44,
                    './_task': 54
                }
            ],
            57: [
                function (require, module, exports) {
                    (function (global) {
                        'use strict';
                        var Mutation = global.MutationObserver || global.WebKitMutationObserver;
                        var scheduleDrain;
                        {
                            if (Mutation) {
                                var called = 0;
                                var observer = new Mutation(nextTick);
                                var element = global.document.createTextNode('');
                                observer.observe(element, { characterData: true });
                                scheduleDrain = function () {
                                    element.data = called = ++called % 2;
                                };
                            } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
                                var channel = new global.MessageChannel();
                                channel.port1.onmessage = nextTick;
                                scheduleDrain = function () {
                                    channel.port2.postMessage(0);
                                };
                            } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
                                scheduleDrain = function () {
                                    var scriptEl = global.document.createElement('script');
                                    scriptEl.onreadystatechange = function () {
                                        nextTick();
                                        scriptEl.onreadystatechange = null;
                                        scriptEl.parentNode.removeChild(scriptEl);
                                        scriptEl = null;
                                    };
                                    global.document.documentElement.appendChild(scriptEl);
                                };
                            } else {
                                scheduleDrain = function () {
                                    setTimeout(nextTick, 0);
                                };
                            }
                        }
                        var draining;
                        var queue = [];
                        function nextTick() {
                            draining = true;
                            var i, oldQueue;
                            var len = queue.length;
                            while (len) {
                                oldQueue = queue;
                                queue = [];
                                i = -1;
                                while (++i < len) {
                                    oldQueue[i]();
                                }
                                len = queue.length;
                            }
                            draining = false;
                        }
                        module.exports = immediate;
                        function immediate(task) {
                            if (queue.push(task) === 1 && !draining) {
                                scheduleDrain();
                            }
                        }
                    }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
                },
                {}
            ],
            58: [
                function (require, module, exports) {
                    'use strict';
                    var immediate = require('immediate');
                    function INTERNAL() {
                    }
                    var handlers = {};
                    var REJECTED = ['REJECTED'];
                    var FULFILLED = ['FULFILLED'];
                    var PENDING = ['PENDING'];
                    module.exports = Promise;
                    function Promise(resolver) {
                        if (typeof resolver !== 'function') {
                            throw new TypeError('resolver must be a function');
                        }
                        this.state = PENDING;
                        this.queue = [];
                        this.outcome = void 0;
                        if (resolver !== INTERNAL) {
                            safelyResolveThenable(this, resolver);
                        }
                    }
                    Promise.prototype['catch'] = function (onRejected) {
                        return this.then(null, onRejected);
                    };
                    Promise.prototype.then = function (onFulfilled, onRejected) {
                        if (typeof onFulfilled !== 'function' && this.state === FULFILLED || typeof onRejected !== 'function' && this.state === REJECTED) {
                            return this;
                        }
                        var promise = new this.constructor(INTERNAL);
                        if (this.state !== PENDING) {
                            var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
                            unwrap(promise, resolver, this.outcome);
                        } else {
                            this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
                        }
                        return promise;
                    };
                    function QueueItem(promise, onFulfilled, onRejected) {
                        this.promise = promise;
                        if (typeof onFulfilled === 'function') {
                            this.onFulfilled = onFulfilled;
                            this.callFulfilled = this.otherCallFulfilled;
                        }
                        if (typeof onRejected === 'function') {
                            this.onRejected = onRejected;
                            this.callRejected = this.otherCallRejected;
                        }
                    }
                    QueueItem.prototype.callFulfilled = function (value) {
                        handlers.resolve(this.promise, value);
                    };
                    QueueItem.prototype.otherCallFulfilled = function (value) {
                        unwrap(this.promise, this.onFulfilled, value);
                    };
                    QueueItem.prototype.callRejected = function (value) {
                        handlers.reject(this.promise, value);
                    };
                    QueueItem.prototype.otherCallRejected = function (value) {
                        unwrap(this.promise, this.onRejected, value);
                    };
                    function unwrap(promise, func, value) {
                        immediate(function () {
                            var returnValue;
                            try {
                                returnValue = func(value);
                            } catch (e) {
                                return handlers.reject(promise, e);
                            }
                            if (returnValue === promise) {
                                handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
                            } else {
                                handlers.resolve(promise, returnValue);
                            }
                        });
                    }
                    handlers.resolve = function (self, value) {
                        var result = tryCatch(getThen, value);
                        if (result.status === 'error') {
                            return handlers.reject(self, result.value);
                        }
                        var thenable = result.value;
                        if (thenable) {
                            safelyResolveThenable(self, thenable);
                        } else {
                            self.state = FULFILLED;
                            self.outcome = value;
                            var i = -1;
                            var len = self.queue.length;
                            while (++i < len) {
                                self.queue[i].callFulfilled(value);
                            }
                        }
                        return self;
                    };
                    handlers.reject = function (self, error) {
                        self.state = REJECTED;
                        self.outcome = error;
                        var i = -1;
                        var len = self.queue.length;
                        while (++i < len) {
                            self.queue[i].callRejected(error);
                        }
                        return self;
                    };
                    function getThen(obj) {
                        var then = obj && obj.then;
                        if (obj && typeof obj === 'object' && typeof then === 'function') {
                            return function appyThen() {
                                then.apply(obj, arguments);
                            };
                        }
                    }
                    function safelyResolveThenable(self, thenable) {
                        var called = false;
                        function onError(value) {
                            if (called) {
                                return;
                            }
                            called = true;
                            handlers.reject(self, value);
                        }
                        function onSuccess(value) {
                            if (called) {
                                return;
                            }
                            called = true;
                            handlers.resolve(self, value);
                        }
                        function tryToUnwrap() {
                            thenable(onSuccess, onError);
                        }
                        var result = tryCatch(tryToUnwrap);
                        if (result.status === 'error') {
                            onError(result.value);
                        }
                    }
                    function tryCatch(func, value) {
                        var out = {};
                        try {
                            out.value = func(value);
                            out.status = 'success';
                        } catch (e) {
                            out.status = 'error';
                            out.value = e;
                        }
                        return out;
                    }
                    Promise.resolve = resolve;
                    function resolve(value) {
                        if (value instanceof this) {
                            return value;
                        }
                        return handlers.resolve(new this(INTERNAL), value);
                    }
                    Promise.reject = reject;
                    function reject(reason) {
                        var promise = new this(INTERNAL);
                        return handlers.reject(promise, reason);
                    }
                    Promise.all = all;
                    function all(iterable) {
                        var self = this;
                        if (Object.prototype.toString.call(iterable) !== '[object Array]') {
                            return this.reject(new TypeError('must be an array'));
                        }
                        var len = iterable.length;
                        var called = false;
                        if (!len) {
                            return this.resolve([]);
                        }
                        var values = new Array(len);
                        var resolved = 0;
                        var i = -1;
                        var promise = new this(INTERNAL);
                        while (++i < len) {
                            allResolver(iterable[i], i);
                        }
                        return promise;
                        function allResolver(value, i) {
                            self.resolve(value).then(resolveFromAll, function (error) {
                                if (!called) {
                                    called = true;
                                    handlers.reject(promise, error);
                                }
                            });
                            function resolveFromAll(outValue) {
                                values[i] = outValue;
                                if (++resolved === len && !called) {
                                    called = true;
                                    handlers.resolve(promise, values);
                                }
                            }
                        }
                    }
                    Promise.race = race;
                    function race(iterable) {
                        var self = this;
                        if (Object.prototype.toString.call(iterable) !== '[object Array]') {
                            return this.reject(new TypeError('must be an array'));
                        }
                        var len = iterable.length;
                        var called = false;
                        if (!len) {
                            return this.resolve([]);
                        }
                        var i = -1;
                        var promise = new this(INTERNAL);
                        while (++i < len) {
                            resolver(iterable[i]);
                        }
                        return promise;
                        function resolver(value) {
                            self.resolve(value).then(function (response) {
                                if (!called) {
                                    called = true;
                                    handlers.resolve(promise, response);
                                }
                            }, function (error) {
                                if (!called) {
                                    called = true;
                                    handlers.reject(promise, error);
                                }
                            });
                        }
                    }
                },
                { 'immediate': 57 }
            ],
            59: [
                function (require, module, exports) {
                    'use strict';
                    var assign = require('./lib/utils/common').assign;
                    var deflate = require('./lib/deflate');
                    var inflate = require('./lib/inflate');
                    var constants = require('./lib/zlib/constants');
                    var pako = {};
                    assign(pako, deflate, inflate, constants);
                    module.exports = pako;
                },
                {
                    './lib/deflate': 60,
                    './lib/inflate': 61,
                    './lib/utils/common': 62,
                    './lib/zlib/constants': 65
                }
            ],
            60: [
                function (require, module, exports) {
                    'use strict';
                    var zlib_deflate = require('./zlib/deflate');
                    var utils = require('./utils/common');
                    var strings = require('./utils/strings');
                    var msg = require('./zlib/messages');
                    var ZStream = require('./zlib/zstream');
                    var toString = Object.prototype.toString;
                    var Z_NO_FLUSH = 0;
                    var Z_FINISH = 4;
                    var Z_OK = 0;
                    var Z_STREAM_END = 1;
                    var Z_SYNC_FLUSH = 2;
                    var Z_DEFAULT_COMPRESSION = -1;
                    var Z_DEFAULT_STRATEGY = 0;
                    var Z_DEFLATED = 8;
                    function Deflate(options) {
                        if (!(this instanceof Deflate))
                            return new Deflate(options);
                        this.options = utils.assign({
                            level: Z_DEFAULT_COMPRESSION,
                            method: Z_DEFLATED,
                            chunkSize: 16384,
                            windowBits: 15,
                            memLevel: 8,
                            strategy: Z_DEFAULT_STRATEGY,
                            to: ''
                        }, options || {});
                        var opt = this.options;
                        if (opt.raw && opt.windowBits > 0) {
                            opt.windowBits = -opt.windowBits;
                        } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
                            opt.windowBits += 16;
                        }
                        this.err = 0;
                        this.msg = '';
                        this.ended = false;
                        this.chunks = [];
                        this.strm = new ZStream();
                        this.strm.avail_out = 0;
                        var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);
                        if (status !== Z_OK) {
                            throw new Error(msg[status]);
                        }
                        if (opt.header) {
                            zlib_deflate.deflateSetHeader(this.strm, opt.header);
                        }
                        if (opt.dictionary) {
                            var dict;
                            if (typeof opt.dictionary === 'string') {
                                dict = strings.string2buf(opt.dictionary);
                            } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
                                dict = new Uint8Array(opt.dictionary);
                            } else {
                                dict = opt.dictionary;
                            }
                            status = zlib_deflate.deflateSetDictionary(this.strm, dict);
                            if (status !== Z_OK) {
                                throw new Error(msg[status]);
                            }
                            this._dict_set = true;
                        }
                    }
                    Deflate.prototype.push = function (data, mode) {
                        var strm = this.strm;
                        var chunkSize = this.options.chunkSize;
                        var status, _mode;
                        if (this.ended) {
                            return false;
                        }
                        _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH;
                        if (typeof data === 'string') {
                            strm.input = strings.string2buf(data);
                        } else if (toString.call(data) === '[object ArrayBuffer]') {
                            strm.input = new Uint8Array(data);
                        } else {
                            strm.input = data;
                        }
                        strm.next_in = 0;
                        strm.avail_in = strm.input.length;
                        do {
                            if (strm.avail_out === 0) {
                                strm.output = new utils.Buf8(chunkSize);
                                strm.next_out = 0;
                                strm.avail_out = chunkSize;
                            }
                            status = zlib_deflate.deflate(strm, _mode);
                            if (status !== Z_STREAM_END && status !== Z_OK) {
                                this.onEnd(status);
                                this.ended = true;
                                return false;
                            }
                            if (strm.avail_out === 0 || strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH)) {
                                if (this.options.to === 'string') {
                                    this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
                                } else {
                                    this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                                }
                            }
                        } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);
                        if (_mode === Z_FINISH) {
                            status = zlib_deflate.deflateEnd(this.strm);
                            this.onEnd(status);
                            this.ended = true;
                            return status === Z_OK;
                        }
                        if (_mode === Z_SYNC_FLUSH) {
                            this.onEnd(Z_OK);
                            strm.avail_out = 0;
                            return true;
                        }
                        return true;
                    };
                    Deflate.prototype.onData = function (chunk) {
                        this.chunks.push(chunk);
                    };
                    Deflate.prototype.onEnd = function (status) {
                        if (status === Z_OK) {
                            if (this.options.to === 'string') {
                                this.result = this.chunks.join('');
                            } else {
                                this.result = utils.flattenChunks(this.chunks);
                            }
                        }
                        this.chunks = [];
                        this.err = status;
                        this.msg = this.strm.msg;
                    };
                    function deflate(input, options) {
                        var deflator = new Deflate(options);
                        deflator.push(input, true);
                        if (deflator.err) {
                            throw deflator.msg;
                        }
                        return deflator.result;
                    }
                    function deflateRaw(input, options) {
                        options = options || {};
                        options.raw = true;
                        return deflate(input, options);
                    }
                    function gzip(input, options) {
                        options = options || {};
                        options.gzip = true;
                        return deflate(input, options);
                    }
                    exports.Deflate = Deflate;
                    exports.deflate = deflate;
                    exports.deflateRaw = deflateRaw;
                    exports.gzip = gzip;
                },
                {
                    './utils/common': 62,
                    './utils/strings': 63,
                    './zlib/deflate': 67,
                    './zlib/messages': 72,
                    './zlib/zstream': 74
                }
            ],
            61: [
                function (require, module, exports) {
                    'use strict';
                    var zlib_inflate = require('./zlib/inflate');
                    var utils = require('./utils/common');
                    var strings = require('./utils/strings');
                    var c = require('./zlib/constants');
                    var msg = require('./zlib/messages');
                    var ZStream = require('./zlib/zstream');
                    var GZheader = require('./zlib/gzheader');
                    var toString = Object.prototype.toString;
                    function Inflate(options) {
                        if (!(this instanceof Inflate))
                            return new Inflate(options);
                        this.options = utils.assign({
                            chunkSize: 16384,
                            windowBits: 0,
                            to: ''
                        }, options || {});
                        var opt = this.options;
                        if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
                            opt.windowBits = -opt.windowBits;
                            if (opt.windowBits === 0) {
                                opt.windowBits = -15;
                            }
                        }
                        if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
                            opt.windowBits += 32;
                        }
                        if (opt.windowBits > 15 && opt.windowBits < 48) {
                            if ((opt.windowBits & 15) === 0) {
                                opt.windowBits |= 15;
                            }
                        }
                        this.err = 0;
                        this.msg = '';
                        this.ended = false;
                        this.chunks = [];
                        this.strm = new ZStream();
                        this.strm.avail_out = 0;
                        var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);
                        if (status !== c.Z_OK) {
                            throw new Error(msg[status]);
                        }
                        this.header = new GZheader();
                        zlib_inflate.inflateGetHeader(this.strm, this.header);
                    }
                    Inflate.prototype.push = function (data, mode) {
                        var strm = this.strm;
                        var chunkSize = this.options.chunkSize;
                        var dictionary = this.options.dictionary;
                        var status, _mode;
                        var next_out_utf8, tail, utf8str;
                        var dict;
                        var allowBufError = false;
                        if (this.ended) {
                            return false;
                        }
                        _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH;
                        if (typeof data === 'string') {
                            strm.input = strings.binstring2buf(data);
                        } else if (toString.call(data) === '[object ArrayBuffer]') {
                            strm.input = new Uint8Array(data);
                        } else {
                            strm.input = data;
                        }
                        strm.next_in = 0;
                        strm.avail_in = strm.input.length;
                        do {
                            if (strm.avail_out === 0) {
                                strm.output = new utils.Buf8(chunkSize);
                                strm.next_out = 0;
                                strm.avail_out = chunkSize;
                            }
                            status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
                            if (status === c.Z_NEED_DICT && dictionary) {
                                if (typeof dictionary === 'string') {
                                    dict = strings.string2buf(dictionary);
                                } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
                                    dict = new Uint8Array(dictionary);
                                } else {
                                    dict = dictionary;
                                }
                                status = zlib_inflate.inflateSetDictionary(this.strm, dict);
                            }
                            if (status === c.Z_BUF_ERROR && allowBufError === true) {
                                status = c.Z_OK;
                                allowBufError = false;
                            }
                            if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
                                this.onEnd(status);
                                this.ended = true;
                                return false;
                            }
                            if (strm.next_out) {
                                if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {
                                    if (this.options.to === 'string') {
                                        next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                                        tail = strm.next_out - next_out_utf8;
                                        utf8str = strings.buf2string(strm.output, next_out_utf8);
                                        strm.next_out = tail;
                                        strm.avail_out = chunkSize - tail;
                                        if (tail) {
                                            utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                                        }
                                        this.onData(utf8str);
                                    } else {
                                        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                                    }
                                }
                            }
                            if (strm.avail_in === 0 && strm.avail_out === 0) {
                                allowBufError = true;
                            }
                        } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);
                        if (status === c.Z_STREAM_END) {
                            _mode = c.Z_FINISH;
                        }
                        if (_mode === c.Z_FINISH) {
                            status = zlib_inflate.inflateEnd(this.strm);
                            this.onEnd(status);
                            this.ended = true;
                            return status === c.Z_OK;
                        }
                        if (_mode === c.Z_SYNC_FLUSH) {
                            this.onEnd(c.Z_OK);
                            strm.avail_out = 0;
                            return true;
                        }
                        return true;
                    };
                    Inflate.prototype.onData = function (chunk) {
                        this.chunks.push(chunk);
                    };
                    Inflate.prototype.onEnd = function (status) {
                        if (status === c.Z_OK) {
                            if (this.options.to === 'string') {
                                this.result = this.chunks.join('');
                            } else {
                                this.result = utils.flattenChunks(this.chunks);
                            }
                        }
                        this.chunks = [];
                        this.err = status;
                        this.msg = this.strm.msg;
                    };
                    function inflate(input, options) {
                        var inflator = new Inflate(options);
                        inflator.push(input, true);
                        if (inflator.err) {
                            throw inflator.msg;
                        }
                        return inflator.result;
                    }
                    function inflateRaw(input, options) {
                        options = options || {};
                        options.raw = true;
                        return inflate(input, options);
                    }
                    exports.Inflate = Inflate;
                    exports.inflate = inflate;
                    exports.inflateRaw = inflateRaw;
                    exports.ungzip = inflate;
                },
                {
                    './utils/common': 62,
                    './utils/strings': 63,
                    './zlib/constants': 65,
                    './zlib/gzheader': 68,
                    './zlib/inflate': 70,
                    './zlib/messages': 72,
                    './zlib/zstream': 74
                }
            ],
            62: [
                function (require, module, exports) {
                    'use strict';
                    var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';
                    exports.assign = function (obj) {
                        var sources = Array.prototype.slice.call(arguments, 1);
                        while (sources.length) {
                            var source = sources.shift();
                            if (!source) {
                                continue;
                            }
                            if (typeof source !== 'object') {
                                throw new TypeError(source + 'must be non-object');
                            }
                            for (var p in source) {
                                if (source.hasOwnProperty(p)) {
                                    obj[p] = source[p];
                                }
                            }
                        }
                        return obj;
                    };
                    exports.shrinkBuf = function (buf, size) {
                        if (buf.length === size) {
                            return buf;
                        }
                        if (buf.subarray) {
                            return buf.subarray(0, size);
                        }
                        buf.length = size;
                        return buf;
                    };
                    var fnTyped = {
                        arraySet: function (dest, src, src_offs, len, dest_offs) {
                            if (src.subarray && dest.subarray) {
                                dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                                return;
                            }
                            for (var i = 0; i < len; i++) {
                                dest[dest_offs + i] = src[src_offs + i];
                            }
                        },
                        flattenChunks: function (chunks) {
                            var i, l, len, pos, chunk, result;
                            len = 0;
                            for (i = 0, l = chunks.length; i < l; i++) {
                                len += chunks[i].length;
                            }
                            result = new Uint8Array(len);
                            pos = 0;
                            for (i = 0, l = chunks.length; i < l; i++) {
                                chunk = chunks[i];
                                result.set(chunk, pos);
                                pos += chunk.length;
                            }
                            return result;
                        }
                    };
                    var fnUntyped = {
                        arraySet: function (dest, src, src_offs, len, dest_offs) {
                            for (var i = 0; i < len; i++) {
                                dest[dest_offs + i] = src[src_offs + i];
                            }
                        },
                        flattenChunks: function (chunks) {
                            return [].concat.apply([], chunks);
                        }
                    };
                    exports.setTyped = function (on) {
                        if (on) {
                            exports.Buf8 = Uint8Array;
                            exports.Buf16 = Uint16Array;
                            exports.Buf32 = Int32Array;
                            exports.assign(exports, fnTyped);
                        } else {
                            exports.Buf8 = Array;
                            exports.Buf16 = Array;
                            exports.Buf32 = Array;
                            exports.assign(exports, fnUntyped);
                        }
                    };
                    exports.setTyped(TYPED_OK);
                },
                {}
            ],
            63: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('./common');
                    var STR_APPLY_OK = true;
                    var STR_APPLY_UIA_OK = true;
                    try {
                        String.fromCharCode.apply(null, [0]);
                    } catch (__) {
                        STR_APPLY_OK = false;
                    }
                    try {
                        String.fromCharCode.apply(null, new Uint8Array(1));
                    } catch (__) {
                        STR_APPLY_UIA_OK = false;
                    }
                    var _utf8len = new utils.Buf8(256);
                    for (var q = 0; q < 256; q++) {
                        _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
                    }
                    _utf8len[254] = _utf8len[254] = 1;
                    exports.string2buf = function (str) {
                        var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
                        for (m_pos = 0; m_pos < str_len; m_pos++) {
                            c = str.charCodeAt(m_pos);
                            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                                c2 = str.charCodeAt(m_pos + 1);
                                if ((c2 & 64512) === 56320) {
                                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                                    m_pos++;
                                }
                            }
                            buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
                        }
                        buf = new utils.Buf8(buf_len);
                        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
                            c = str.charCodeAt(m_pos);
                            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                                c2 = str.charCodeAt(m_pos + 1);
                                if ((c2 & 64512) === 56320) {
                                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                                    m_pos++;
                                }
                            }
                            if (c < 128) {
                                buf[i++] = c;
                            } else if (c < 2048) {
                                buf[i++] = 192 | c >>> 6;
                                buf[i++] = 128 | c & 63;
                            } else if (c < 65536) {
                                buf[i++] = 224 | c >>> 12;
                                buf[i++] = 128 | c >>> 6 & 63;
                                buf[i++] = 128 | c & 63;
                            } else {
                                buf[i++] = 240 | c >>> 18;
                                buf[i++] = 128 | c >>> 12 & 63;
                                buf[i++] = 128 | c >>> 6 & 63;
                                buf[i++] = 128 | c & 63;
                            }
                        }
                        return buf;
                    };
                    function buf2binstring(buf, len) {
                        if (len < 65537) {
                            if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
                                return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
                            }
                        }
                        var result = '';
                        for (var i = 0; i < len; i++) {
                            result += String.fromCharCode(buf[i]);
                        }
                        return result;
                    }
                    exports.buf2binstring = function (buf) {
                        return buf2binstring(buf, buf.length);
                    };
                    exports.binstring2buf = function (str) {
                        var buf = new utils.Buf8(str.length);
                        for (var i = 0, len = buf.length; i < len; i++) {
                            buf[i] = str.charCodeAt(i);
                        }
                        return buf;
                    };
                    exports.buf2string = function (buf, max) {
                        var i, out, c, c_len;
                        var len = max || buf.length;
                        var utf16buf = new Array(len * 2);
                        for (out = 0, i = 0; i < len;) {
                            c = buf[i++];
                            if (c < 128) {
                                utf16buf[out++] = c;
                                continue;
                            }
                            c_len = _utf8len[c];
                            if (c_len > 4) {
                                utf16buf[out++] = 65533;
                                i += c_len - 1;
                                continue;
                            }
                            c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
                            while (c_len > 1 && i < len) {
                                c = c << 6 | buf[i++] & 63;
                                c_len--;
                            }
                            if (c_len > 1) {
                                utf16buf[out++] = 65533;
                                continue;
                            }
                            if (c < 65536) {
                                utf16buf[out++] = c;
                            } else {
                                c -= 65536;
                                utf16buf[out++] = 55296 | c >> 10 & 1023;
                                utf16buf[out++] = 56320 | c & 1023;
                            }
                        }
                        return buf2binstring(utf16buf, out);
                    };
                    exports.utf8border = function (buf, max) {
                        var pos;
                        max = max || buf.length;
                        if (max > buf.length) {
                            max = buf.length;
                        }
                        pos = max - 1;
                        while (pos >= 0 && (buf[pos] & 192) === 128) {
                            pos--;
                        }
                        if (pos < 0) {
                            return max;
                        }
                        if (pos === 0) {
                            return max;
                        }
                        return pos + _utf8len[buf[pos]] > max ? pos : max;
                    };
                },
                { './common': 62 }
            ],
            64: [
                function (require, module, exports) {
                    'use strict';
                    function adler32(adler, buf, len, pos) {
                        var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
                        while (len !== 0) {
                            n = len > 2000 ? 2000 : len;
                            len -= n;
                            do {
                                s1 = s1 + buf[pos++] | 0;
                                s2 = s2 + s1 | 0;
                            } while (--n);
                            s1 %= 65521;
                            s2 %= 65521;
                        }
                        return s1 | s2 << 16 | 0;
                    }
                    module.exports = adler32;
                },
                {}
            ],
            65: [
                function (require, module, exports) {
                    'use strict';
                    module.exports = {
                        Z_NO_FLUSH: 0,
                        Z_PARTIAL_FLUSH: 1,
                        Z_SYNC_FLUSH: 2,
                        Z_FULL_FLUSH: 3,
                        Z_FINISH: 4,
                        Z_BLOCK: 5,
                        Z_TREES: 6,
                        Z_OK: 0,
                        Z_STREAM_END: 1,
                        Z_NEED_DICT: 2,
                        Z_ERRNO: -1,
                        Z_STREAM_ERROR: -2,
                        Z_DATA_ERROR: -3,
                        Z_BUF_ERROR: -5,
                        Z_NO_COMPRESSION: 0,
                        Z_BEST_SPEED: 1,
                        Z_BEST_COMPRESSION: 9,
                        Z_DEFAULT_COMPRESSION: -1,
                        Z_FILTERED: 1,
                        Z_HUFFMAN_ONLY: 2,
                        Z_RLE: 3,
                        Z_FIXED: 4,
                        Z_DEFAULT_STRATEGY: 0,
                        Z_BINARY: 0,
                        Z_TEXT: 1,
                        Z_UNKNOWN: 2,
                        Z_DEFLATED: 8
                    };
                },
                {}
            ],
            66: [
                function (require, module, exports) {
                    'use strict';
                    function makeTable() {
                        var c, table = [];
                        for (var n = 0; n < 256; n++) {
                            c = n;
                            for (var k = 0; k < 8; k++) {
                                c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
                            }
                            table[n] = c;
                        }
                        return table;
                    }
                    var crcTable = makeTable();
                    function crc32(crc, buf, len, pos) {
                        var t = crcTable, end = pos + len;
                        crc ^= -1;
                        for (var i = pos; i < end; i++) {
                            crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
                        }
                        return crc ^ -1;
                    }
                    module.exports = crc32;
                },
                {}
            ],
            67: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils/common');
                    var trees = require('./trees');
                    var adler32 = require('./adler32');
                    var crc32 = require('./crc32');
                    var msg = require('./messages');
                    var Z_NO_FLUSH = 0;
                    var Z_PARTIAL_FLUSH = 1;
                    var Z_FULL_FLUSH = 3;
                    var Z_FINISH = 4;
                    var Z_BLOCK = 5;
                    var Z_OK = 0;
                    var Z_STREAM_END = 1;
                    var Z_STREAM_ERROR = -2;
                    var Z_DATA_ERROR = -3;
                    var Z_BUF_ERROR = -5;
                    var Z_DEFAULT_COMPRESSION = -1;
                    var Z_FILTERED = 1;
                    var Z_HUFFMAN_ONLY = 2;
                    var Z_RLE = 3;
                    var Z_FIXED = 4;
                    var Z_DEFAULT_STRATEGY = 0;
                    var Z_UNKNOWN = 2;
                    var Z_DEFLATED = 8;
                    var MAX_MEM_LEVEL = 9;
                    var MAX_WBITS = 15;
                    var DEF_MEM_LEVEL = 8;
                    var LENGTH_CODES = 29;
                    var LITERALS = 256;
                    var L_CODES = LITERALS + 1 + LENGTH_CODES;
                    var D_CODES = 30;
                    var BL_CODES = 19;
                    var HEAP_SIZE = 2 * L_CODES + 1;
                    var MAX_BITS = 15;
                    var MIN_MATCH = 3;
                    var MAX_MATCH = 258;
                    var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
                    var PRESET_DICT = 32;
                    var INIT_STATE = 42;
                    var EXTRA_STATE = 69;
                    var NAME_STATE = 73;
                    var COMMENT_STATE = 91;
                    var HCRC_STATE = 103;
                    var BUSY_STATE = 113;
                    var FINISH_STATE = 666;
                    var BS_NEED_MORE = 1;
                    var BS_BLOCK_DONE = 2;
                    var BS_FINISH_STARTED = 3;
                    var BS_FINISH_DONE = 4;
                    var OS_CODE = 3;
                    function err(strm, errorCode) {
                        strm.msg = msg[errorCode];
                        return errorCode;
                    }
                    function rank(f) {
                        return (f << 1) - (f > 4 ? 9 : 0);
                    }
                    function zero(buf) {
                        var len = buf.length;
                        while (--len >= 0) {
                            buf[len] = 0;
                        }
                    }
                    function flush_pending(strm) {
                        var s = strm.state;
                        var len = s.pending;
                        if (len > strm.avail_out) {
                            len = strm.avail_out;
                        }
                        if (len === 0) {
                            return;
                        }
                        utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
                        strm.next_out += len;
                        s.pending_out += len;
                        strm.total_out += len;
                        strm.avail_out -= len;
                        s.pending -= len;
                        if (s.pending === 0) {
                            s.pending_out = 0;
                        }
                    }
                    function flush_block_only(s, last) {
                        trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
                        s.block_start = s.strstart;
                        flush_pending(s.strm);
                    }
                    function put_byte(s, b) {
                        s.pending_buf[s.pending++] = b;
                    }
                    function putShortMSB(s, b) {
                        s.pending_buf[s.pending++] = b >>> 8 & 255;
                        s.pending_buf[s.pending++] = b & 255;
                    }
                    function read_buf(strm, buf, start, size) {
                        var len = strm.avail_in;
                        if (len > size) {
                            len = size;
                        }
                        if (len === 0) {
                            return 0;
                        }
                        strm.avail_in -= len;
                        utils.arraySet(buf, strm.input, strm.next_in, len, start);
                        if (strm.state.wrap === 1) {
                            strm.adler = adler32(strm.adler, buf, len, start);
                        } else if (strm.state.wrap === 2) {
                            strm.adler = crc32(strm.adler, buf, len, start);
                        }
                        strm.next_in += len;
                        strm.total_in += len;
                        return len;
                    }
                    function longest_match(s, cur_match) {
                        var chain_length = s.max_chain_length;
                        var scan = s.strstart;
                        var match;
                        var len;
                        var best_len = s.prev_length;
                        var nice_match = s.nice_match;
                        var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
                        var _win = s.window;
                        var wmask = s.w_mask;
                        var prev = s.prev;
                        var strend = s.strstart + MAX_MATCH;
                        var scan_end1 = _win[scan + best_len - 1];
                        var scan_end = _win[scan + best_len];
                        if (s.prev_length >= s.good_match) {
                            chain_length >>= 2;
                        }
                        if (nice_match > s.lookahead) {
                            nice_match = s.lookahead;
                        }
                        do {
                            match = cur_match;
                            if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
                                continue;
                            }
                            scan += 2;
                            match++;
                            do {
                            } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
                            len = MAX_MATCH - (strend - scan);
                            scan = strend - MAX_MATCH;
                            if (len > best_len) {
                                s.match_start = cur_match;
                                best_len = len;
                                if (len >= nice_match) {
                                    break;
                                }
                                scan_end1 = _win[scan + best_len - 1];
                                scan_end = _win[scan + best_len];
                            }
                        } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
                        if (best_len <= s.lookahead) {
                            return best_len;
                        }
                        return s.lookahead;
                    }
                    function fill_window(s) {
                        var _w_size = s.w_size;
                        var p, n, m, more, str;
                        do {
                            more = s.window_size - s.lookahead - s.strstart;
                            if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
                                utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
                                s.match_start -= _w_size;
                                s.strstart -= _w_size;
                                s.block_start -= _w_size;
                                n = s.hash_size;
                                p = n;
                                do {
                                    m = s.head[--p];
                                    s.head[p] = m >= _w_size ? m - _w_size : 0;
                                } while (--n);
                                n = _w_size;
                                p = n;
                                do {
                                    m = s.prev[--p];
                                    s.prev[p] = m >= _w_size ? m - _w_size : 0;
                                } while (--n);
                                more += _w_size;
                            }
                            if (s.strm.avail_in === 0) {
                                break;
                            }
                            n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
                            s.lookahead += n;
                            if (s.lookahead + s.insert >= MIN_MATCH) {
                                str = s.strstart - s.insert;
                                s.ins_h = s.window[str];
                                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
                                while (s.insert) {
                                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
                                    s.prev[str & s.w_mask] = s.head[s.ins_h];
                                    s.head[s.ins_h] = str;
                                    str++;
                                    s.insert--;
                                    if (s.lookahead + s.insert < MIN_MATCH) {
                                        break;
                                    }
                                }
                            }
                        } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
                    }
                    function deflate_stored(s, flush) {
                        var max_block_size = 65535;
                        if (max_block_size > s.pending_buf_size - 5) {
                            max_block_size = s.pending_buf_size - 5;
                        }
                        for (;;) {
                            if (s.lookahead <= 1) {
                                fill_window(s);
                                if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                if (s.lookahead === 0) {
                                    break;
                                }
                            }
                            s.strstart += s.lookahead;
                            s.lookahead = 0;
                            var max_start = s.block_start + max_block_size;
                            if (s.strstart === 0 || s.strstart >= max_start) {
                                s.lookahead = s.strstart - max_start;
                                s.strstart = max_start;
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                            }
                            if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                            }
                        }
                        s.insert = 0;
                        if (flush === Z_FINISH) {
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            return BS_FINISH_DONE;
                        }
                        if (s.strstart > s.block_start) {
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                        }
                        return BS_NEED_MORE;
                    }
                    function deflate_fast(s, flush) {
                        var hash_head;
                        var bflush;
                        for (;;) {
                            if (s.lookahead < MIN_LOOKAHEAD) {
                                fill_window(s);
                                if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                if (s.lookahead === 0) {
                                    break;
                                }
                            }
                            hash_head = 0;
                            if (s.lookahead >= MIN_MATCH) {
                                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = s.strstart;
                            }
                            if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
                                s.match_length = longest_match(s, hash_head);
                            }
                            if (s.match_length >= MIN_MATCH) {
                                bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
                                s.lookahead -= s.match_length;
                                if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
                                    s.match_length--;
                                    do {
                                        s.strstart++;
                                        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                        s.head[s.ins_h] = s.strstart;
                                    } while (--s.match_length !== 0);
                                    s.strstart++;
                                } else {
                                    s.strstart += s.match_length;
                                    s.match_length = 0;
                                    s.ins_h = s.window[s.strstart];
                                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
                                }
                            } else {
                                bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                                s.lookahead--;
                                s.strstart++;
                            }
                            if (bflush) {
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                            }
                        }
                        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
                        if (flush === Z_FINISH) {
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            return BS_FINISH_DONE;
                        }
                        if (s.last_lit) {
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                        }
                        return BS_BLOCK_DONE;
                    }
                    function deflate_slow(s, flush) {
                        var hash_head;
                        var bflush;
                        var max_insert;
                        for (;;) {
                            if (s.lookahead < MIN_LOOKAHEAD) {
                                fill_window(s);
                                if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                if (s.lookahead === 0) {
                                    break;
                                }
                            }
                            hash_head = 0;
                            if (s.lookahead >= MIN_MATCH) {
                                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = s.strstart;
                            }
                            s.prev_length = s.match_length;
                            s.prev_match = s.match_start;
                            s.match_length = MIN_MATCH - 1;
                            if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
                                s.match_length = longest_match(s, hash_head);
                                if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
                                    s.match_length = MIN_MATCH - 1;
                                }
                            }
                            if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
                                max_insert = s.strstart + s.lookahead - MIN_MATCH;
                                bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
                                s.lookahead -= s.prev_length - 1;
                                s.prev_length -= 2;
                                do {
                                    if (++s.strstart <= max_insert) {
                                        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                        s.head[s.ins_h] = s.strstart;
                                    }
                                } while (--s.prev_length !== 0);
                                s.match_available = 0;
                                s.match_length = MIN_MATCH - 1;
                                s.strstart++;
                                if (bflush) {
                                    flush_block_only(s, false);
                                    if (s.strm.avail_out === 0) {
                                        return BS_NEED_MORE;
                                    }
                                }
                            } else if (s.match_available) {
                                bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
                                if (bflush) {
                                    flush_block_only(s, false);
                                }
                                s.strstart++;
                                s.lookahead--;
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                            } else {
                                s.match_available = 1;
                                s.strstart++;
                                s.lookahead--;
                            }
                        }
                        if (s.match_available) {
                            bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
                            s.match_available = 0;
                        }
                        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
                        if (flush === Z_FINISH) {
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            return BS_FINISH_DONE;
                        }
                        if (s.last_lit) {
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                        }
                        return BS_BLOCK_DONE;
                    }
                    function deflate_rle(s, flush) {
                        var bflush;
                        var prev;
                        var scan, strend;
                        var _win = s.window;
                        for (;;) {
                            if (s.lookahead <= MAX_MATCH) {
                                fill_window(s);
                                if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                if (s.lookahead === 0) {
                                    break;
                                }
                            }
                            s.match_length = 0;
                            if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
                                scan = s.strstart - 1;
                                prev = _win[scan];
                                if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                                    strend = s.strstart + MAX_MATCH;
                                    do {
                                    } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
                                    s.match_length = MAX_MATCH - (strend - scan);
                                    if (s.match_length > s.lookahead) {
                                        s.match_length = s.lookahead;
                                    }
                                }
                            }
                            if (s.match_length >= MIN_MATCH) {
                                bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
                                s.lookahead -= s.match_length;
                                s.strstart += s.match_length;
                                s.match_length = 0;
                            } else {
                                bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                                s.lookahead--;
                                s.strstart++;
                            }
                            if (bflush) {
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                            }
                        }
                        s.insert = 0;
                        if (flush === Z_FINISH) {
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            return BS_FINISH_DONE;
                        }
                        if (s.last_lit) {
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                        }
                        return BS_BLOCK_DONE;
                    }
                    function deflate_huff(s, flush) {
                        var bflush;
                        for (;;) {
                            if (s.lookahead === 0) {
                                fill_window(s);
                                if (s.lookahead === 0) {
                                    if (flush === Z_NO_FLUSH) {
                                        return BS_NEED_MORE;
                                    }
                                    break;
                                }
                            }
                            s.match_length = 0;
                            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                            s.lookahead--;
                            s.strstart++;
                            if (bflush) {
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                            }
                        }
                        s.insert = 0;
                        if (flush === Z_FINISH) {
                            flush_block_only(s, true);
                            if (s.strm.avail_out === 0) {
                                return BS_FINISH_STARTED;
                            }
                            return BS_FINISH_DONE;
                        }
                        if (s.last_lit) {
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                        }
                        return BS_BLOCK_DONE;
                    }
                    function Config(good_length, max_lazy, nice_length, max_chain, func) {
                        this.good_length = good_length;
                        this.max_lazy = max_lazy;
                        this.nice_length = nice_length;
                        this.max_chain = max_chain;
                        this.func = func;
                    }
                    var configuration_table;
                    configuration_table = [
                        new Config(0, 0, 0, 0, deflate_stored),
                        new Config(4, 4, 8, 4, deflate_fast),
                        new Config(4, 5, 16, 8, deflate_fast),
                        new Config(4, 6, 32, 32, deflate_fast),
                        new Config(4, 4, 16, 16, deflate_slow),
                        new Config(8, 16, 32, 32, deflate_slow),
                        new Config(8, 16, 128, 128, deflate_slow),
                        new Config(8, 32, 128, 256, deflate_slow),
                        new Config(32, 128, 258, 1024, deflate_slow),
                        new Config(32, 258, 258, 4096, deflate_slow)
                    ];
                    function lm_init(s) {
                        s.window_size = 2 * s.w_size;
                        zero(s.head);
                        s.max_lazy_match = configuration_table[s.level].max_lazy;
                        s.good_match = configuration_table[s.level].good_length;
                        s.nice_match = configuration_table[s.level].nice_length;
                        s.max_chain_length = configuration_table[s.level].max_chain;
                        s.strstart = 0;
                        s.block_start = 0;
                        s.lookahead = 0;
                        s.insert = 0;
                        s.match_length = s.prev_length = MIN_MATCH - 1;
                        s.match_available = 0;
                        s.ins_h = 0;
                    }
                    function DeflateState() {
                        this.strm = null;
                        this.status = 0;
                        this.pending_buf = null;
                        this.pending_buf_size = 0;
                        this.pending_out = 0;
                        this.pending = 0;
                        this.wrap = 0;
                        this.gzhead = null;
                        this.gzindex = 0;
                        this.method = Z_DEFLATED;
                        this.last_flush = -1;
                        this.w_size = 0;
                        this.w_bits = 0;
                        this.w_mask = 0;
                        this.window = null;
                        this.window_size = 0;
                        this.prev = null;
                        this.head = null;
                        this.ins_h = 0;
                        this.hash_size = 0;
                        this.hash_bits = 0;
                        this.hash_mask = 0;
                        this.hash_shift = 0;
                        this.block_start = 0;
                        this.match_length = 0;
                        this.prev_match = 0;
                        this.match_available = 0;
                        this.strstart = 0;
                        this.match_start = 0;
                        this.lookahead = 0;
                        this.prev_length = 0;
                        this.max_chain_length = 0;
                        this.max_lazy_match = 0;
                        this.level = 0;
                        this.strategy = 0;
                        this.good_match = 0;
                        this.nice_match = 0;
                        this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
                        this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
                        this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
                        zero(this.dyn_ltree);
                        zero(this.dyn_dtree);
                        zero(this.bl_tree);
                        this.l_desc = null;
                        this.d_desc = null;
                        this.bl_desc = null;
                        this.bl_count = new utils.Buf16(MAX_BITS + 1);
                        this.heap = new utils.Buf16(2 * L_CODES + 1);
                        zero(this.heap);
                        this.heap_len = 0;
                        this.heap_max = 0;
                        this.depth = new utils.Buf16(2 * L_CODES + 1);
                        zero(this.depth);
                        this.l_buf = 0;
                        this.lit_bufsize = 0;
                        this.last_lit = 0;
                        this.d_buf = 0;
                        this.opt_len = 0;
                        this.static_len = 0;
                        this.matches = 0;
                        this.insert = 0;
                        this.bi_buf = 0;
                        this.bi_valid = 0;
                    }
                    function deflateResetKeep(strm) {
                        var s;
                        if (!strm || !strm.state) {
                            return err(strm, Z_STREAM_ERROR);
                        }
                        strm.total_in = strm.total_out = 0;
                        strm.data_type = Z_UNKNOWN;
                        s = strm.state;
                        s.pending = 0;
                        s.pending_out = 0;
                        if (s.wrap < 0) {
                            s.wrap = -s.wrap;
                        }
                        s.status = s.wrap ? INIT_STATE : BUSY_STATE;
                        strm.adler = s.wrap === 2 ? 0 : 1;
                        s.last_flush = Z_NO_FLUSH;
                        trees._tr_init(s);
                        return Z_OK;
                    }
                    function deflateReset(strm) {
                        var ret = deflateResetKeep(strm);
                        if (ret === Z_OK) {
                            lm_init(strm.state);
                        }
                        return ret;
                    }
                    function deflateSetHeader(strm, head) {
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        if (strm.state.wrap !== 2) {
                            return Z_STREAM_ERROR;
                        }
                        strm.state.gzhead = head;
                        return Z_OK;
                    }
                    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
                        if (!strm) {
                            return Z_STREAM_ERROR;
                        }
                        var wrap = 1;
                        if (level === Z_DEFAULT_COMPRESSION) {
                            level = 6;
                        }
                        if (windowBits < 0) {
                            wrap = 0;
                            windowBits = -windowBits;
                        } else if (windowBits > 15) {
                            wrap = 2;
                            windowBits -= 16;
                        }
                        if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
                            return err(strm, Z_STREAM_ERROR);
                        }
                        if (windowBits === 8) {
                            windowBits = 9;
                        }
                        var s = new DeflateState();
                        strm.state = s;
                        s.strm = strm;
                        s.wrap = wrap;
                        s.gzhead = null;
                        s.w_bits = windowBits;
                        s.w_size = 1 << s.w_bits;
                        s.w_mask = s.w_size - 1;
                        s.hash_bits = memLevel + 7;
                        s.hash_size = 1 << s.hash_bits;
                        s.hash_mask = s.hash_size - 1;
                        s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
                        s.window = new utils.Buf8(s.w_size * 2);
                        s.head = new utils.Buf16(s.hash_size);
                        s.prev = new utils.Buf16(s.w_size);
                        s.lit_bufsize = 1 << memLevel + 6;
                        s.pending_buf_size = s.lit_bufsize * 4;
                        s.pending_buf = new utils.Buf8(s.pending_buf_size);
                        s.d_buf = 1 * s.lit_bufsize;
                        s.l_buf = (1 + 2) * s.lit_bufsize;
                        s.level = level;
                        s.strategy = strategy;
                        s.method = method;
                        return deflateReset(strm);
                    }
                    function deflateInit(strm, level) {
                        return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
                    }
                    function deflate(strm, flush) {
                        var old_flush, s;
                        var beg, val;
                        if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
                            return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
                        }
                        s = strm.state;
                        if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
                            return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
                        }
                        s.strm = strm;
                        old_flush = s.last_flush;
                        s.last_flush = flush;
                        if (s.status === INIT_STATE) {
                            if (s.wrap === 2) {
                                strm.adler = 0;
                                put_byte(s, 31);
                                put_byte(s, 139);
                                put_byte(s, 8);
                                if (!s.gzhead) {
                                    put_byte(s, 0);
                                    put_byte(s, 0);
                                    put_byte(s, 0);
                                    put_byte(s, 0);
                                    put_byte(s, 0);
                                    put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                                    put_byte(s, OS_CODE);
                                    s.status = BUSY_STATE;
                                } else {
                                    put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
                                    put_byte(s, s.gzhead.time & 255);
                                    put_byte(s, s.gzhead.time >> 8 & 255);
                                    put_byte(s, s.gzhead.time >> 16 & 255);
                                    put_byte(s, s.gzhead.time >> 24 & 255);
                                    put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                                    put_byte(s, s.gzhead.os & 255);
                                    if (s.gzhead.extra && s.gzhead.extra.length) {
                                        put_byte(s, s.gzhead.extra.length & 255);
                                        put_byte(s, s.gzhead.extra.length >> 8 & 255);
                                    }
                                    if (s.gzhead.hcrc) {
                                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
                                    }
                                    s.gzindex = 0;
                                    s.status = EXTRA_STATE;
                                }
                            } else {
                                var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
                                var level_flags = -1;
                                if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                                    level_flags = 0;
                                } else if (s.level < 6) {
                                    level_flags = 1;
                                } else if (s.level === 6) {
                                    level_flags = 2;
                                } else {
                                    level_flags = 3;
                                }
                                header |= level_flags << 6;
                                if (s.strstart !== 0) {
                                    header |= PRESET_DICT;
                                }
                                header += 31 - header % 31;
                                s.status = BUSY_STATE;
                                putShortMSB(s, header);
                                if (s.strstart !== 0) {
                                    putShortMSB(s, strm.adler >>> 16);
                                    putShortMSB(s, strm.adler & 65535);
                                }
                                strm.adler = 1;
                            }
                        }
                        if (s.status === EXTRA_STATE) {
                            if (s.gzhead.extra) {
                                beg = s.pending;
                                while (s.gzindex < (s.gzhead.extra.length & 65535)) {
                                    if (s.pending === s.pending_buf_size) {
                                        if (s.gzhead.hcrc && s.pending > beg) {
                                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                        }
                                        flush_pending(strm);
                                        beg = s.pending;
                                        if (s.pending === s.pending_buf_size) {
                                            break;
                                        }
                                    }
                                    put_byte(s, s.gzhead.extra[s.gzindex] & 255);
                                    s.gzindex++;
                                }
                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                if (s.gzindex === s.gzhead.extra.length) {
                                    s.gzindex = 0;
                                    s.status = NAME_STATE;
                                }
                            } else {
                                s.status = NAME_STATE;
                            }
                        }
                        if (s.status === NAME_STATE) {
                            if (s.gzhead.name) {
                                beg = s.pending;
                                do {
                                    if (s.pending === s.pending_buf_size) {
                                        if (s.gzhead.hcrc && s.pending > beg) {
                                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                        }
                                        flush_pending(strm);
                                        beg = s.pending;
                                        if (s.pending === s.pending_buf_size) {
                                            val = 1;
                                            break;
                                        }
                                    }
                                    if (s.gzindex < s.gzhead.name.length) {
                                        val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
                                    } else {
                                        val = 0;
                                    }
                                    put_byte(s, val);
                                } while (val !== 0);
                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                if (val === 0) {
                                    s.gzindex = 0;
                                    s.status = COMMENT_STATE;
                                }
                            } else {
                                s.status = COMMENT_STATE;
                            }
                        }
                        if (s.status === COMMENT_STATE) {
                            if (s.gzhead.comment) {
                                beg = s.pending;
                                do {
                                    if (s.pending === s.pending_buf_size) {
                                        if (s.gzhead.hcrc && s.pending > beg) {
                                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                        }
                                        flush_pending(strm);
                                        beg = s.pending;
                                        if (s.pending === s.pending_buf_size) {
                                            val = 1;
                                            break;
                                        }
                                    }
                                    if (s.gzindex < s.gzhead.comment.length) {
                                        val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
                                    } else {
                                        val = 0;
                                    }
                                    put_byte(s, val);
                                } while (val !== 0);
                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                if (val === 0) {
                                    s.status = HCRC_STATE;
                                }
                            } else {
                                s.status = HCRC_STATE;
                            }
                        }
                        if (s.status === HCRC_STATE) {
                            if (s.gzhead.hcrc) {
                                if (s.pending + 2 > s.pending_buf_size) {
                                    flush_pending(strm);
                                }
                                if (s.pending + 2 <= s.pending_buf_size) {
                                    put_byte(s, strm.adler & 255);
                                    put_byte(s, strm.adler >> 8 & 255);
                                    strm.adler = 0;
                                    s.status = BUSY_STATE;
                                }
                            } else {
                                s.status = BUSY_STATE;
                            }
                        }
                        if (s.pending !== 0) {
                            flush_pending(strm);
                            if (strm.avail_out === 0) {
                                s.last_flush = -1;
                                return Z_OK;
                            }
                        } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
                            return err(strm, Z_BUF_ERROR);
                        }
                        if (s.status === FINISH_STATE && strm.avail_in !== 0) {
                            return err(strm, Z_BUF_ERROR);
                        }
                        if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
                            var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
                            if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
                                s.status = FINISH_STATE;
                            }
                            if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
                                if (strm.avail_out === 0) {
                                    s.last_flush = -1;
                                }
                                return Z_OK;
                            }
                            if (bstate === BS_BLOCK_DONE) {
                                if (flush === Z_PARTIAL_FLUSH) {
                                    trees._tr_align(s);
                                } else if (flush !== Z_BLOCK) {
                                    trees._tr_stored_block(s, 0, 0, false);
                                    if (flush === Z_FULL_FLUSH) {
                                        zero(s.head);
                                        if (s.lookahead === 0) {
                                            s.strstart = 0;
                                            s.block_start = 0;
                                            s.insert = 0;
                                        }
                                    }
                                }
                                flush_pending(strm);
                                if (strm.avail_out === 0) {
                                    s.last_flush = -1;
                                    return Z_OK;
                                }
                            }
                        }
                        if (flush !== Z_FINISH) {
                            return Z_OK;
                        }
                        if (s.wrap <= 0) {
                            return Z_STREAM_END;
                        }
                        if (s.wrap === 2) {
                            put_byte(s, strm.adler & 255);
                            put_byte(s, strm.adler >> 8 & 255);
                            put_byte(s, strm.adler >> 16 & 255);
                            put_byte(s, strm.adler >> 24 & 255);
                            put_byte(s, strm.total_in & 255);
                            put_byte(s, strm.total_in >> 8 & 255);
                            put_byte(s, strm.total_in >> 16 & 255);
                            put_byte(s, strm.total_in >> 24 & 255);
                        } else {
                            putShortMSB(s, strm.adler >>> 16);
                            putShortMSB(s, strm.adler & 65535);
                        }
                        flush_pending(strm);
                        if (s.wrap > 0) {
                            s.wrap = -s.wrap;
                        }
                        return s.pending !== 0 ? Z_OK : Z_STREAM_END;
                    }
                    function deflateEnd(strm) {
                        var status;
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        status = strm.state.status;
                        if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
                            return err(strm, Z_STREAM_ERROR);
                        }
                        strm.state = null;
                        return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
                    }
                    function deflateSetDictionary(strm, dictionary) {
                        var dictLength = dictionary.length;
                        var s;
                        var str, n;
                        var wrap;
                        var avail;
                        var next;
                        var input;
                        var tmpDict;
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        s = strm.state;
                        wrap = s.wrap;
                        if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
                            return Z_STREAM_ERROR;
                        }
                        if (wrap === 1) {
                            strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
                        }
                        s.wrap = 0;
                        if (dictLength >= s.w_size) {
                            if (wrap === 0) {
                                zero(s.head);
                                s.strstart = 0;
                                s.block_start = 0;
                                s.insert = 0;
                            }
                            tmpDict = new utils.Buf8(s.w_size);
                            utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
                            dictionary = tmpDict;
                            dictLength = s.w_size;
                        }
                        avail = strm.avail_in;
                        next = strm.next_in;
                        input = strm.input;
                        strm.avail_in = dictLength;
                        strm.next_in = 0;
                        strm.input = dictionary;
                        fill_window(s);
                        while (s.lookahead >= MIN_MATCH) {
                            str = s.strstart;
                            n = s.lookahead - (MIN_MATCH - 1);
                            do {
                                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
                                s.prev[str & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = str;
                                str++;
                            } while (--n);
                            s.strstart = str;
                            s.lookahead = MIN_MATCH - 1;
                            fill_window(s);
                        }
                        s.strstart += s.lookahead;
                        s.block_start = s.strstart;
                        s.insert = s.lookahead;
                        s.lookahead = 0;
                        s.match_length = s.prev_length = MIN_MATCH - 1;
                        s.match_available = 0;
                        strm.next_in = next;
                        strm.input = input;
                        strm.avail_in = avail;
                        s.wrap = wrap;
                        return Z_OK;
                    }
                    exports.deflateInit = deflateInit;
                    exports.deflateInit2 = deflateInit2;
                    exports.deflateReset = deflateReset;
                    exports.deflateResetKeep = deflateResetKeep;
                    exports.deflateSetHeader = deflateSetHeader;
                    exports.deflate = deflate;
                    exports.deflateEnd = deflateEnd;
                    exports.deflateSetDictionary = deflateSetDictionary;
                    exports.deflateInfo = 'pako deflate (from Nodeca project)';
                },
                {
                    '../utils/common': 62,
                    './adler32': 64,
                    './crc32': 66,
                    './messages': 72,
                    './trees': 73
                }
            ],
            68: [
                function (require, module, exports) {
                    'use strict';
                    function GZheader() {
                        this.text = 0;
                        this.time = 0;
                        this.xflags = 0;
                        this.os = 0;
                        this.extra = null;
                        this.extra_len = 0;
                        this.name = '';
                        this.comment = '';
                        this.hcrc = 0;
                        this.done = false;
                    }
                    module.exports = GZheader;
                },
                {}
            ],
            69: [
                function (require, module, exports) {
                    'use strict';
                    var BAD = 30;
                    var TYPE = 12;
                    module.exports = function inflate_fast(strm, start) {
                        var state;
                        var _in;
                        var last;
                        var _out;
                        var beg;
                        var end;
                        var dmax;
                        var wsize;
                        var whave;
                        var wnext;
                        var s_window;
                        var hold;
                        var bits;
                        var lcode;
                        var dcode;
                        var lmask;
                        var dmask;
                        var here;
                        var op;
                        var len;
                        var dist;
                        var from;
                        var from_source;
                        var input, output;
                        state = strm.state;
                        _in = strm.next_in;
                        input = strm.input;
                        last = _in + (strm.avail_in - 5);
                        _out = strm.next_out;
                        output = strm.output;
                        beg = _out - (start - strm.avail_out);
                        end = _out + (strm.avail_out - 257);
                        dmax = state.dmax;
                        wsize = state.wsize;
                        whave = state.whave;
                        wnext = state.wnext;
                        s_window = state.window;
                        hold = state.hold;
                        bits = state.bits;
                        lcode = state.lencode;
                        dcode = state.distcode;
                        lmask = (1 << state.lenbits) - 1;
                        dmask = (1 << state.distbits) - 1;
                        top:
                            do {
                                if (bits < 15) {
                                    hold += input[_in++] << bits;
                                    bits += 8;
                                    hold += input[_in++] << bits;
                                    bits += 8;
                                }
                                here = lcode[hold & lmask];
                                dolen:
                                    for (;;) {
                                        op = here >>> 24;
                                        hold >>>= op;
                                        bits -= op;
                                        op = here >>> 16 & 255;
                                        if (op === 0) {
                                            output[_out++] = here & 65535;
                                        } else if (op & 16) {
                                            len = here & 65535;
                                            op &= 15;
                                            if (op) {
                                                if (bits < op) {
                                                    hold += input[_in++] << bits;
                                                    bits += 8;
                                                }
                                                len += hold & (1 << op) - 1;
                                                hold >>>= op;
                                                bits -= op;
                                            }
                                            if (bits < 15) {
                                                hold += input[_in++] << bits;
                                                bits += 8;
                                                hold += input[_in++] << bits;
                                                bits += 8;
                                            }
                                            here = dcode[hold & dmask];
                                            dodist:
                                                for (;;) {
                                                    op = here >>> 24;
                                                    hold >>>= op;
                                                    bits -= op;
                                                    op = here >>> 16 & 255;
                                                    if (op & 16) {
                                                        dist = here & 65535;
                                                        op &= 15;
                                                        if (bits < op) {
                                                            hold += input[_in++] << bits;
                                                            bits += 8;
                                                            if (bits < op) {
                                                                hold += input[_in++] << bits;
                                                                bits += 8;
                                                            }
                                                        }
                                                        dist += hold & (1 << op) - 1;
                                                        if (dist > dmax) {
                                                            strm.msg = 'invalid distance too far back';
                                                            state.mode = BAD;
                                                            break top;
                                                        }
                                                        hold >>>= op;
                                                        bits -= op;
                                                        op = _out - beg;
                                                        if (dist > op) {
                                                            op = dist - op;
                                                            if (op > whave) {
                                                                if (state.sane) {
                                                                    strm.msg = 'invalid distance too far back';
                                                                    state.mode = BAD;
                                                                    break top;
                                                                }
                                                            }
                                                            from = 0;
                                                            from_source = s_window;
                                                            if (wnext === 0) {
                                                                from += wsize - op;
                                                                if (op < len) {
                                                                    len -= op;
                                                                    do {
                                                                        output[_out++] = s_window[from++];
                                                                    } while (--op);
                                                                    from = _out - dist;
                                                                    from_source = output;
                                                                }
                                                            } else if (wnext < op) {
                                                                from += wsize + wnext - op;
                                                                op -= wnext;
                                                                if (op < len) {
                                                                    len -= op;
                                                                    do {
                                                                        output[_out++] = s_window[from++];
                                                                    } while (--op);
                                                                    from = 0;
                                                                    if (wnext < len) {
                                                                        op = wnext;
                                                                        len -= op;
                                                                        do {
                                                                            output[_out++] = s_window[from++];
                                                                        } while (--op);
                                                                        from = _out - dist;
                                                                        from_source = output;
                                                                    }
                                                                }
                                                            } else {
                                                                from += wnext - op;
                                                                if (op < len) {
                                                                    len -= op;
                                                                    do {
                                                                        output[_out++] = s_window[from++];
                                                                    } while (--op);
                                                                    from = _out - dist;
                                                                    from_source = output;
                                                                }
                                                            }
                                                            while (len > 2) {
                                                                output[_out++] = from_source[from++];
                                                                output[_out++] = from_source[from++];
                                                                output[_out++] = from_source[from++];
                                                                len -= 3;
                                                            }
                                                            if (len) {
                                                                output[_out++] = from_source[from++];
                                                                if (len > 1) {
                                                                    output[_out++] = from_source[from++];
                                                                }
                                                            }
                                                        } else {
                                                            from = _out - dist;
                                                            do {
                                                                output[_out++] = output[from++];
                                                                output[_out++] = output[from++];
                                                                output[_out++] = output[from++];
                                                                len -= 3;
                                                            } while (len > 2);
                                                            if (len) {
                                                                output[_out++] = output[from++];
                                                                if (len > 1) {
                                                                    output[_out++] = output[from++];
                                                                }
                                                            }
                                                        }
                                                    } else if ((op & 64) === 0) {
                                                        here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                                                        continue dodist;
                                                    } else {
                                                        strm.msg = 'invalid distance code';
                                                        state.mode = BAD;
                                                        break top;
                                                    }
                                                    break;
                                                }
                                        } else if ((op & 64) === 0) {
                                            here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                                            continue dolen;
                                        } else if (op & 32) {
                                            state.mode = TYPE;
                                            break top;
                                        } else {
                                            strm.msg = 'invalid literal/length code';
                                            state.mode = BAD;
                                            break top;
                                        }
                                        break;
                                    }
                            } while (_in < last && _out < end);
                        len = bits >> 3;
                        _in -= len;
                        bits -= len << 3;
                        hold &= (1 << bits) - 1;
                        strm.next_in = _in;
                        strm.next_out = _out;
                        strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
                        strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
                        state.hold = hold;
                        state.bits = bits;
                        return;
                    };
                },
                {}
            ],
            70: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils/common');
                    var adler32 = require('./adler32');
                    var crc32 = require('./crc32');
                    var inflate_fast = require('./inffast');
                    var inflate_table = require('./inftrees');
                    var CODES = 0;
                    var LENS = 1;
                    var DISTS = 2;
                    var Z_FINISH = 4;
                    var Z_BLOCK = 5;
                    var Z_TREES = 6;
                    var Z_OK = 0;
                    var Z_STREAM_END = 1;
                    var Z_NEED_DICT = 2;
                    var Z_STREAM_ERROR = -2;
                    var Z_DATA_ERROR = -3;
                    var Z_MEM_ERROR = -4;
                    var Z_BUF_ERROR = -5;
                    var Z_DEFLATED = 8;
                    var HEAD = 1;
                    var FLAGS = 2;
                    var TIME = 3;
                    var OS = 4;
                    var EXLEN = 5;
                    var EXTRA = 6;
                    var NAME = 7;
                    var COMMENT = 8;
                    var HCRC = 9;
                    var DICTID = 10;
                    var DICT = 11;
                    var TYPE = 12;
                    var TYPEDO = 13;
                    var STORED = 14;
                    var COPY_ = 15;
                    var COPY = 16;
                    var TABLE = 17;
                    var LENLENS = 18;
                    var CODELENS = 19;
                    var LEN_ = 20;
                    var LEN = 21;
                    var LENEXT = 22;
                    var DIST = 23;
                    var DISTEXT = 24;
                    var MATCH = 25;
                    var LIT = 26;
                    var CHECK = 27;
                    var LENGTH = 28;
                    var DONE = 29;
                    var BAD = 30;
                    var MEM = 31;
                    var SYNC = 32;
                    var ENOUGH_LENS = 852;
                    var ENOUGH_DISTS = 592;
                    var MAX_WBITS = 15;
                    var DEF_WBITS = MAX_WBITS;
                    function zswap32(q) {
                        return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
                    }
                    function InflateState() {
                        this.mode = 0;
                        this.last = false;
                        this.wrap = 0;
                        this.havedict = false;
                        this.flags = 0;
                        this.dmax = 0;
                        this.check = 0;
                        this.total = 0;
                        this.head = null;
                        this.wbits = 0;
                        this.wsize = 0;
                        this.whave = 0;
                        this.wnext = 0;
                        this.window = null;
                        this.hold = 0;
                        this.bits = 0;
                        this.length = 0;
                        this.offset = 0;
                        this.extra = 0;
                        this.lencode = null;
                        this.distcode = null;
                        this.lenbits = 0;
                        this.distbits = 0;
                        this.ncode = 0;
                        this.nlen = 0;
                        this.ndist = 0;
                        this.have = 0;
                        this.next = null;
                        this.lens = new utils.Buf16(320);
                        this.work = new utils.Buf16(288);
                        this.lendyn = null;
                        this.distdyn = null;
                        this.sane = 0;
                        this.back = 0;
                        this.was = 0;
                    }
                    function inflateResetKeep(strm) {
                        var state;
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        strm.total_in = strm.total_out = state.total = 0;
                        strm.msg = '';
                        if (state.wrap) {
                            strm.adler = state.wrap & 1;
                        }
                        state.mode = HEAD;
                        state.last = 0;
                        state.havedict = 0;
                        state.dmax = 32768;
                        state.head = null;
                        state.hold = 0;
                        state.bits = 0;
                        state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
                        state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
                        state.sane = 1;
                        state.back = -1;
                        return Z_OK;
                    }
                    function inflateReset(strm) {
                        var state;
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        state.wsize = 0;
                        state.whave = 0;
                        state.wnext = 0;
                        return inflateResetKeep(strm);
                    }
                    function inflateReset2(strm, windowBits) {
                        var wrap;
                        var state;
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        if (windowBits < 0) {
                            wrap = 0;
                            windowBits = -windowBits;
                        } else {
                            wrap = (windowBits >> 4) + 1;
                            if (windowBits < 48) {
                                windowBits &= 15;
                            }
                        }
                        if (windowBits && (windowBits < 8 || windowBits > 15)) {
                            return Z_STREAM_ERROR;
                        }
                        if (state.window !== null && state.wbits !== windowBits) {
                            state.window = null;
                        }
                        state.wrap = wrap;
                        state.wbits = windowBits;
                        return inflateReset(strm);
                    }
                    function inflateInit2(strm, windowBits) {
                        var ret;
                        var state;
                        if (!strm) {
                            return Z_STREAM_ERROR;
                        }
                        state = new InflateState();
                        strm.state = state;
                        state.window = null;
                        ret = inflateReset2(strm, windowBits);
                        if (ret !== Z_OK) {
                            strm.state = null;
                        }
                        return ret;
                    }
                    function inflateInit(strm) {
                        return inflateInit2(strm, DEF_WBITS);
                    }
                    var virgin = true;
                    var lenfix, distfix;
                    function fixedtables(state) {
                        if (virgin) {
                            var sym;
                            lenfix = new utils.Buf32(512);
                            distfix = new utils.Buf32(32);
                            sym = 0;
                            while (sym < 144) {
                                state.lens[sym++] = 8;
                            }
                            while (sym < 256) {
                                state.lens[sym++] = 9;
                            }
                            while (sym < 280) {
                                state.lens[sym++] = 7;
                            }
                            while (sym < 288) {
                                state.lens[sym++] = 8;
                            }
                            inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
                            sym = 0;
                            while (sym < 32) {
                                state.lens[sym++] = 5;
                            }
                            inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
                            virgin = false;
                        }
                        state.lencode = lenfix;
                        state.lenbits = 9;
                        state.distcode = distfix;
                        state.distbits = 5;
                    }
                    function updatewindow(strm, src, end, copy) {
                        var dist;
                        var state = strm.state;
                        if (state.window === null) {
                            state.wsize = 1 << state.wbits;
                            state.wnext = 0;
                            state.whave = 0;
                            state.window = new utils.Buf8(state.wsize);
                        }
                        if (copy >= state.wsize) {
                            utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
                            state.wnext = 0;
                            state.whave = state.wsize;
                        } else {
                            dist = state.wsize - state.wnext;
                            if (dist > copy) {
                                dist = copy;
                            }
                            utils.arraySet(state.window, src, end - copy, dist, state.wnext);
                            copy -= dist;
                            if (copy) {
                                utils.arraySet(state.window, src, end - copy, copy, 0);
                                state.wnext = copy;
                                state.whave = state.wsize;
                            } else {
                                state.wnext += dist;
                                if (state.wnext === state.wsize) {
                                    state.wnext = 0;
                                }
                                if (state.whave < state.wsize) {
                                    state.whave += dist;
                                }
                            }
                        }
                        return 0;
                    }
                    function inflate(strm, flush) {
                        var state;
                        var input, output;
                        var next;
                        var put;
                        var have, left;
                        var hold;
                        var bits;
                        var _in, _out;
                        var copy;
                        var from;
                        var from_source;
                        var here = 0;
                        var here_bits, here_op, here_val;
                        var last_bits, last_op, last_val;
                        var len;
                        var ret;
                        var hbuf = new utils.Buf8(4);
                        var opts;
                        var n;
                        var order = [
                            16,
                            17,
                            18,
                            0,
                            8,
                            7,
                            9,
                            6,
                            10,
                            5,
                            11,
                            4,
                            12,
                            3,
                            13,
                            2,
                            14,
                            1,
                            15
                        ];
                        if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        if (state.mode === TYPE) {
                            state.mode = TYPEDO;
                        }
                        put = strm.next_out;
                        output = strm.output;
                        left = strm.avail_out;
                        next = strm.next_in;
                        input = strm.input;
                        have = strm.avail_in;
                        hold = state.hold;
                        bits = state.bits;
                        _in = have;
                        _out = left;
                        ret = Z_OK;
                        inf_leave:
                            for (;;) {
                                switch (state.mode) {
                                case HEAD:
                                    if (state.wrap === 0) {
                                        state.mode = TYPEDO;
                                        break;
                                    }
                                    while (bits < 16) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    if (state.wrap & 2 && hold === 35615) {
                                        state.check = 0;
                                        hbuf[0] = hold & 255;
                                        hbuf[1] = hold >>> 8 & 255;
                                        state.check = crc32(state.check, hbuf, 2, 0);
                                        hold = 0;
                                        bits = 0;
                                        state.mode = FLAGS;
                                        break;
                                    }
                                    state.flags = 0;
                                    if (state.head) {
                                        state.head.done = false;
                                    }
                                    if (!(state.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) {
                                        strm.msg = 'incorrect header check';
                                        state.mode = BAD;
                                        break;
                                    }
                                    if ((hold & 15) !== Z_DEFLATED) {
                                        strm.msg = 'unknown compression method';
                                        state.mode = BAD;
                                        break;
                                    }
                                    hold >>>= 4;
                                    bits -= 4;
                                    len = (hold & 15) + 8;
                                    if (state.wbits === 0) {
                                        state.wbits = len;
                                    } else if (len > state.wbits) {
                                        strm.msg = 'invalid window size';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.dmax = 1 << len;
                                    strm.adler = state.check = 1;
                                    state.mode = hold & 512 ? DICTID : TYPE;
                                    hold = 0;
                                    bits = 0;
                                    break;
                                case FLAGS:
                                    while (bits < 16) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    state.flags = hold;
                                    if ((state.flags & 255) !== Z_DEFLATED) {
                                        strm.msg = 'unknown compression method';
                                        state.mode = BAD;
                                        break;
                                    }
                                    if (state.flags & 57344) {
                                        strm.msg = 'unknown header flags set';
                                        state.mode = BAD;
                                        break;
                                    }
                                    if (state.head) {
                                        state.head.text = hold >> 8 & 1;
                                    }
                                    if (state.flags & 512) {
                                        hbuf[0] = hold & 255;
                                        hbuf[1] = hold >>> 8 & 255;
                                        state.check = crc32(state.check, hbuf, 2, 0);
                                    }
                                    hold = 0;
                                    bits = 0;
                                    state.mode = TIME;
                                case TIME:
                                    while (bits < 32) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    if (state.head) {
                                        state.head.time = hold;
                                    }
                                    if (state.flags & 512) {
                                        hbuf[0] = hold & 255;
                                        hbuf[1] = hold >>> 8 & 255;
                                        hbuf[2] = hold >>> 16 & 255;
                                        hbuf[3] = hold >>> 24 & 255;
                                        state.check = crc32(state.check, hbuf, 4, 0);
                                    }
                                    hold = 0;
                                    bits = 0;
                                    state.mode = OS;
                                case OS:
                                    while (bits < 16) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    if (state.head) {
                                        state.head.xflags = hold & 255;
                                        state.head.os = hold >> 8;
                                    }
                                    if (state.flags & 512) {
                                        hbuf[0] = hold & 255;
                                        hbuf[1] = hold >>> 8 & 255;
                                        state.check = crc32(state.check, hbuf, 2, 0);
                                    }
                                    hold = 0;
                                    bits = 0;
                                    state.mode = EXLEN;
                                case EXLEN:
                                    if (state.flags & 1024) {
                                        while (bits < 16) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        state.length = hold;
                                        if (state.head) {
                                            state.head.extra_len = hold;
                                        }
                                        if (state.flags & 512) {
                                            hbuf[0] = hold & 255;
                                            hbuf[1] = hold >>> 8 & 255;
                                            state.check = crc32(state.check, hbuf, 2, 0);
                                        }
                                        hold = 0;
                                        bits = 0;
                                    } else if (state.head) {
                                        state.head.extra = null;
                                    }
                                    state.mode = EXTRA;
                                case EXTRA:
                                    if (state.flags & 1024) {
                                        copy = state.length;
                                        if (copy > have) {
                                            copy = have;
                                        }
                                        if (copy) {
                                            if (state.head) {
                                                len = state.head.extra_len - state.length;
                                                if (!state.head.extra) {
                                                    state.head.extra = new Array(state.head.extra_len);
                                                }
                                                utils.arraySet(state.head.extra, input, next, copy, len);
                                            }
                                            if (state.flags & 512) {
                                                state.check = crc32(state.check, input, copy, next);
                                            }
                                            have -= copy;
                                            next += copy;
                                            state.length -= copy;
                                        }
                                        if (state.length) {
                                            break inf_leave;
                                        }
                                    }
                                    state.length = 0;
                                    state.mode = NAME;
                                case NAME:
                                    if (state.flags & 2048) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        copy = 0;
                                        do {
                                            len = input[next + copy++];
                                            if (state.head && len && state.length < 65536) {
                                                state.head.name += String.fromCharCode(len);
                                            }
                                        } while (len && copy < have);
                                        if (state.flags & 512) {
                                            state.check = crc32(state.check, input, copy, next);
                                        }
                                        have -= copy;
                                        next += copy;
                                        if (len) {
                                            break inf_leave;
                                        }
                                    } else if (state.head) {
                                        state.head.name = null;
                                    }
                                    state.length = 0;
                                    state.mode = COMMENT;
                                case COMMENT:
                                    if (state.flags & 4096) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        copy = 0;
                                        do {
                                            len = input[next + copy++];
                                            if (state.head && len && state.length < 65536) {
                                                state.head.comment += String.fromCharCode(len);
                                            }
                                        } while (len && copy < have);
                                        if (state.flags & 512) {
                                            state.check = crc32(state.check, input, copy, next);
                                        }
                                        have -= copy;
                                        next += copy;
                                        if (len) {
                                            break inf_leave;
                                        }
                                    } else if (state.head) {
                                        state.head.comment = null;
                                    }
                                    state.mode = HCRC;
                                case HCRC:
                                    if (state.flags & 512) {
                                        while (bits < 16) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        if (hold !== (state.check & 65535)) {
                                            strm.msg = 'header crc mismatch';
                                            state.mode = BAD;
                                            break;
                                        }
                                        hold = 0;
                                        bits = 0;
                                    }
                                    if (state.head) {
                                        state.head.hcrc = state.flags >> 9 & 1;
                                        state.head.done = true;
                                    }
                                    strm.adler = state.check = 0;
                                    state.mode = TYPE;
                                    break;
                                case DICTID:
                                    while (bits < 32) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    strm.adler = state.check = zswap32(hold);
                                    hold = 0;
                                    bits = 0;
                                    state.mode = DICT;
                                case DICT:
                                    if (state.havedict === 0) {
                                        strm.next_out = put;
                                        strm.avail_out = left;
                                        strm.next_in = next;
                                        strm.avail_in = have;
                                        state.hold = hold;
                                        state.bits = bits;
                                        return Z_NEED_DICT;
                                    }
                                    strm.adler = state.check = 1;
                                    state.mode = TYPE;
                                case TYPE:
                                    if (flush === Z_BLOCK || flush === Z_TREES) {
                                        break inf_leave;
                                    }
                                case TYPEDO:
                                    if (state.last) {
                                        hold >>>= bits & 7;
                                        bits -= bits & 7;
                                        state.mode = CHECK;
                                        break;
                                    }
                                    while (bits < 3) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    state.last = hold & 1;
                                    hold >>>= 1;
                                    bits -= 1;
                                    switch (hold & 3) {
                                    case 0:
                                        state.mode = STORED;
                                        break;
                                    case 1:
                                        fixedtables(state);
                                        state.mode = LEN_;
                                        if (flush === Z_TREES) {
                                            hold >>>= 2;
                                            bits -= 2;
                                            break inf_leave;
                                        }
                                        break;
                                    case 2:
                                        state.mode = TABLE;
                                        break;
                                    case 3:
                                        strm.msg = 'invalid block type';
                                        state.mode = BAD;
                                    }
                                    hold >>>= 2;
                                    bits -= 2;
                                    break;
                                case STORED:
                                    hold >>>= bits & 7;
                                    bits -= bits & 7;
                                    while (bits < 32) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                                        strm.msg = 'invalid stored block lengths';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.length = hold & 65535;
                                    hold = 0;
                                    bits = 0;
                                    state.mode = COPY_;
                                    if (flush === Z_TREES) {
                                        break inf_leave;
                                    }
                                case COPY_:
                                    state.mode = COPY;
                                case COPY:
                                    copy = state.length;
                                    if (copy) {
                                        if (copy > have) {
                                            copy = have;
                                        }
                                        if (copy > left) {
                                            copy = left;
                                        }
                                        if (copy === 0) {
                                            break inf_leave;
                                        }
                                        utils.arraySet(output, input, next, copy, put);
                                        have -= copy;
                                        next += copy;
                                        left -= copy;
                                        put += copy;
                                        state.length -= copy;
                                        break;
                                    }
                                    state.mode = TYPE;
                                    break;
                                case TABLE:
                                    while (bits < 14) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    state.nlen = (hold & 31) + 257;
                                    hold >>>= 5;
                                    bits -= 5;
                                    state.ndist = (hold & 31) + 1;
                                    hold >>>= 5;
                                    bits -= 5;
                                    state.ncode = (hold & 15) + 4;
                                    hold >>>= 4;
                                    bits -= 4;
                                    if (state.nlen > 286 || state.ndist > 30) {
                                        strm.msg = 'too many length or distance symbols';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.have = 0;
                                    state.mode = LENLENS;
                                case LENLENS:
                                    while (state.have < state.ncode) {
                                        while (bits < 3) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        state.lens[order[state.have++]] = hold & 7;
                                        hold >>>= 3;
                                        bits -= 3;
                                    }
                                    while (state.have < 19) {
                                        state.lens[order[state.have++]] = 0;
                                    }
                                    state.lencode = state.lendyn;
                                    state.lenbits = 7;
                                    opts = { bits: state.lenbits };
                                    ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                                    state.lenbits = opts.bits;
                                    if (ret) {
                                        strm.msg = 'invalid code lengths set';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.have = 0;
                                    state.mode = CODELENS;
                                case CODELENS:
                                    while (state.have < state.nlen + state.ndist) {
                                        for (;;) {
                                            here = state.lencode[hold & (1 << state.lenbits) - 1];
                                            here_bits = here >>> 24;
                                            here_op = here >>> 16 & 255;
                                            here_val = here & 65535;
                                            if (here_bits <= bits) {
                                                break;
                                            }
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        if (here_val < 16) {
                                            hold >>>= here_bits;
                                            bits -= here_bits;
                                            state.lens[state.have++] = here_val;
                                        } else {
                                            if (here_val === 16) {
                                                n = here_bits + 2;
                                                while (bits < n) {
                                                    if (have === 0) {
                                                        break inf_leave;
                                                    }
                                                    have--;
                                                    hold += input[next++] << bits;
                                                    bits += 8;
                                                }
                                                hold >>>= here_bits;
                                                bits -= here_bits;
                                                if (state.have === 0) {
                                                    strm.msg = 'invalid bit length repeat';
                                                    state.mode = BAD;
                                                    break;
                                                }
                                                len = state.lens[state.have - 1];
                                                copy = 3 + (hold & 3);
                                                hold >>>= 2;
                                                bits -= 2;
                                            } else if (here_val === 17) {
                                                n = here_bits + 3;
                                                while (bits < n) {
                                                    if (have === 0) {
                                                        break inf_leave;
                                                    }
                                                    have--;
                                                    hold += input[next++] << bits;
                                                    bits += 8;
                                                }
                                                hold >>>= here_bits;
                                                bits -= here_bits;
                                                len = 0;
                                                copy = 3 + (hold & 7);
                                                hold >>>= 3;
                                                bits -= 3;
                                            } else {
                                                n = here_bits + 7;
                                                while (bits < n) {
                                                    if (have === 0) {
                                                        break inf_leave;
                                                    }
                                                    have--;
                                                    hold += input[next++] << bits;
                                                    bits += 8;
                                                }
                                                hold >>>= here_bits;
                                                bits -= here_bits;
                                                len = 0;
                                                copy = 11 + (hold & 127);
                                                hold >>>= 7;
                                                bits -= 7;
                                            }
                                            if (state.have + copy > state.nlen + state.ndist) {
                                                strm.msg = 'invalid bit length repeat';
                                                state.mode = BAD;
                                                break;
                                            }
                                            while (copy--) {
                                                state.lens[state.have++] = len;
                                            }
                                        }
                                    }
                                    if (state.mode === BAD) {
                                        break;
                                    }
                                    if (state.lens[256] === 0) {
                                        strm.msg = 'invalid code -- missing end-of-block';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.lenbits = 9;
                                    opts = { bits: state.lenbits };
                                    ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
                                    state.lenbits = opts.bits;
                                    if (ret) {
                                        strm.msg = 'invalid literal/lengths set';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.distbits = 6;
                                    state.distcode = state.distdyn;
                                    opts = { bits: state.distbits };
                                    ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
                                    state.distbits = opts.bits;
                                    if (ret) {
                                        strm.msg = 'invalid distances set';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.mode = LEN_;
                                    if (flush === Z_TREES) {
                                        break inf_leave;
                                    }
                                case LEN_:
                                    state.mode = LEN;
                                case LEN:
                                    if (have >= 6 && left >= 258) {
                                        strm.next_out = put;
                                        strm.avail_out = left;
                                        strm.next_in = next;
                                        strm.avail_in = have;
                                        state.hold = hold;
                                        state.bits = bits;
                                        inflate_fast(strm, _out);
                                        put = strm.next_out;
                                        output = strm.output;
                                        left = strm.avail_out;
                                        next = strm.next_in;
                                        input = strm.input;
                                        have = strm.avail_in;
                                        hold = state.hold;
                                        bits = state.bits;
                                        if (state.mode === TYPE) {
                                            state.back = -1;
                                        }
                                        break;
                                    }
                                    state.back = 0;
                                    for (;;) {
                                        here = state.lencode[hold & (1 << state.lenbits) - 1];
                                        here_bits = here >>> 24;
                                        here_op = here >>> 16 & 255;
                                        here_val = here & 65535;
                                        if (here_bits <= bits) {
                                            break;
                                        }
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    if (here_op && (here_op & 240) === 0) {
                                        last_bits = here_bits;
                                        last_op = here_op;
                                        last_val = here_val;
                                        for (;;) {
                                            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                                            here_bits = here >>> 24;
                                            here_op = here >>> 16 & 255;
                                            here_val = here & 65535;
                                            if (last_bits + here_bits <= bits) {
                                                break;
                                            }
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        hold >>>= last_bits;
                                        bits -= last_bits;
                                        state.back += last_bits;
                                    }
                                    hold >>>= here_bits;
                                    bits -= here_bits;
                                    state.back += here_bits;
                                    state.length = here_val;
                                    if (here_op === 0) {
                                        state.mode = LIT;
                                        break;
                                    }
                                    if (here_op & 32) {
                                        state.back = -1;
                                        state.mode = TYPE;
                                        break;
                                    }
                                    if (here_op & 64) {
                                        strm.msg = 'invalid literal/length code';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.extra = here_op & 15;
                                    state.mode = LENEXT;
                                case LENEXT:
                                    if (state.extra) {
                                        n = state.extra;
                                        while (bits < n) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        state.length += hold & (1 << state.extra) - 1;
                                        hold >>>= state.extra;
                                        bits -= state.extra;
                                        state.back += state.extra;
                                    }
                                    state.was = state.length;
                                    state.mode = DIST;
                                case DIST:
                                    for (;;) {
                                        here = state.distcode[hold & (1 << state.distbits) - 1];
                                        here_bits = here >>> 24;
                                        here_op = here >>> 16 & 255;
                                        here_val = here & 65535;
                                        if (here_bits <= bits) {
                                            break;
                                        }
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    if ((here_op & 240) === 0) {
                                        last_bits = here_bits;
                                        last_op = here_op;
                                        last_val = here_val;
                                        for (;;) {
                                            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                                            here_bits = here >>> 24;
                                            here_op = here >>> 16 & 255;
                                            here_val = here & 65535;
                                            if (last_bits + here_bits <= bits) {
                                                break;
                                            }
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        hold >>>= last_bits;
                                        bits -= last_bits;
                                        state.back += last_bits;
                                    }
                                    hold >>>= here_bits;
                                    bits -= here_bits;
                                    state.back += here_bits;
                                    if (here_op & 64) {
                                        strm.msg = 'invalid distance code';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.offset = here_val;
                                    state.extra = here_op & 15;
                                    state.mode = DISTEXT;
                                case DISTEXT:
                                    if (state.extra) {
                                        n = state.extra;
                                        while (bits < n) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        state.offset += hold & (1 << state.extra) - 1;
                                        hold >>>= state.extra;
                                        bits -= state.extra;
                                        state.back += state.extra;
                                    }
                                    if (state.offset > state.dmax) {
                                        strm.msg = 'invalid distance too far back';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.mode = MATCH;
                                case MATCH:
                                    if (left === 0) {
                                        break inf_leave;
                                    }
                                    copy = _out - left;
                                    if (state.offset > copy) {
                                        copy = state.offset - copy;
                                        if (copy > state.whave) {
                                            if (state.sane) {
                                                strm.msg = 'invalid distance too far back';
                                                state.mode = BAD;
                                                break;
                                            }
                                        }
                                        if (copy > state.wnext) {
                                            copy -= state.wnext;
                                            from = state.wsize - copy;
                                        } else {
                                            from = state.wnext - copy;
                                        }
                                        if (copy > state.length) {
                                            copy = state.length;
                                        }
                                        from_source = state.window;
                                    } else {
                                        from_source = output;
                                        from = put - state.offset;
                                        copy = state.length;
                                    }
                                    if (copy > left) {
                                        copy = left;
                                    }
                                    left -= copy;
                                    state.length -= copy;
                                    do {
                                        output[put++] = from_source[from++];
                                    } while (--copy);
                                    if (state.length === 0) {
                                        state.mode = LEN;
                                    }
                                    break;
                                case LIT:
                                    if (left === 0) {
                                        break inf_leave;
                                    }
                                    output[put++] = state.length;
                                    left--;
                                    state.mode = LEN;
                                    break;
                                case CHECK:
                                    if (state.wrap) {
                                        while (bits < 32) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold |= input[next++] << bits;
                                            bits += 8;
                                        }
                                        _out -= left;
                                        strm.total_out += _out;
                                        state.total += _out;
                                        if (_out) {
                                            strm.adler = state.check = state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                                        }
                                        _out = left;
                                        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                                            strm.msg = 'incorrect data check';
                                            state.mode = BAD;
                                            break;
                                        }
                                        hold = 0;
                                        bits = 0;
                                    }
                                    state.mode = LENGTH;
                                case LENGTH:
                                    if (state.wrap && state.flags) {
                                        while (bits < 32) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        if (hold !== (state.total & 4294967295)) {
                                            strm.msg = 'incorrect length check';
                                            state.mode = BAD;
                                            break;
                                        }
                                        hold = 0;
                                        bits = 0;
                                    }
                                    state.mode = DONE;
                                case DONE:
                                    ret = Z_STREAM_END;
                                    break inf_leave;
                                case BAD:
                                    ret = Z_DATA_ERROR;
                                    break inf_leave;
                                case MEM:
                                    return Z_MEM_ERROR;
                                case SYNC:
                                default:
                                    return Z_STREAM_ERROR;
                                }
                            }
                        strm.next_out = put;
                        strm.avail_out = left;
                        strm.next_in = next;
                        strm.avail_in = have;
                        state.hold = hold;
                        state.bits = bits;
                        if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
                            if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
                                state.mode = MEM;
                                return Z_MEM_ERROR;
                            }
                        }
                        _in -= strm.avail_in;
                        _out -= strm.avail_out;
                        strm.total_in += _in;
                        strm.total_out += _out;
                        state.total += _out;
                        if (state.wrap && _out) {
                            strm.adler = state.check = state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
                        }
                        strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
                        if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
                            ret = Z_BUF_ERROR;
                        }
                        return ret;
                    }
                    function inflateEnd(strm) {
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        var state = strm.state;
                        if (state.window) {
                            state.window = null;
                        }
                        strm.state = null;
                        return Z_OK;
                    }
                    function inflateGetHeader(strm, head) {
                        var state;
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        if ((state.wrap & 2) === 0) {
                            return Z_STREAM_ERROR;
                        }
                        state.head = head;
                        head.done = false;
                        return Z_OK;
                    }
                    function inflateSetDictionary(strm, dictionary) {
                        var dictLength = dictionary.length;
                        var state;
                        var dictid;
                        var ret;
                        if (!strm || !strm.state) {
                            return Z_STREAM_ERROR;
                        }
                        state = strm.state;
                        if (state.wrap !== 0 && state.mode !== DICT) {
                            return Z_STREAM_ERROR;
                        }
                        if (state.mode === DICT) {
                            dictid = 1;
                            dictid = adler32(dictid, dictionary, dictLength, 0);
                            if (dictid !== state.check) {
                                return Z_DATA_ERROR;
                            }
                        }
                        ret = updatewindow(strm, dictionary, dictLength, dictLength);
                        if (ret) {
                            state.mode = MEM;
                            return Z_MEM_ERROR;
                        }
                        state.havedict = 1;
                        return Z_OK;
                    }
                    exports.inflateReset = inflateReset;
                    exports.inflateReset2 = inflateReset2;
                    exports.inflateResetKeep = inflateResetKeep;
                    exports.inflateInit = inflateInit;
                    exports.inflateInit2 = inflateInit2;
                    exports.inflate = inflate;
                    exports.inflateEnd = inflateEnd;
                    exports.inflateGetHeader = inflateGetHeader;
                    exports.inflateSetDictionary = inflateSetDictionary;
                    exports.inflateInfo = 'pako inflate (from Nodeca project)';
                },
                {
                    '../utils/common': 62,
                    './adler32': 64,
                    './crc32': 66,
                    './inffast': 69,
                    './inftrees': 71
                }
            ],
            71: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils/common');
                    var MAXBITS = 15;
                    var ENOUGH_LENS = 852;
                    var ENOUGH_DISTS = 592;
                    var CODES = 0;
                    var LENS = 1;
                    var DISTS = 2;
                    var lbase = [
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        13,
                        15,
                        17,
                        19,
                        23,
                        27,
                        31,
                        35,
                        43,
                        51,
                        59,
                        67,
                        83,
                        99,
                        115,
                        131,
                        163,
                        195,
                        227,
                        258,
                        0,
                        0
                    ];
                    var lext = [
                        16,
                        16,
                        16,
                        16,
                        16,
                        16,
                        16,
                        16,
                        17,
                        17,
                        17,
                        17,
                        18,
                        18,
                        18,
                        18,
                        19,
                        19,
                        19,
                        19,
                        20,
                        20,
                        20,
                        20,
                        21,
                        21,
                        21,
                        21,
                        16,
                        72,
                        78
                    ];
                    var dbase = [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        9,
                        13,
                        17,
                        25,
                        33,
                        49,
                        65,
                        97,
                        129,
                        193,
                        257,
                        385,
                        513,
                        769,
                        1025,
                        1537,
                        2049,
                        3073,
                        4097,
                        6145,
                        8193,
                        12289,
                        16385,
                        24577,
                        0,
                        0
                    ];
                    var dext = [
                        16,
                        16,
                        16,
                        16,
                        17,
                        17,
                        18,
                        18,
                        19,
                        19,
                        20,
                        20,
                        21,
                        21,
                        22,
                        22,
                        23,
                        23,
                        24,
                        24,
                        25,
                        25,
                        26,
                        26,
                        27,
                        27,
                        28,
                        28,
                        29,
                        29,
                        64,
                        64
                    ];
                    module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
                        var bits = opts.bits;
                        var len = 0;
                        var sym = 0;
                        var min = 0, max = 0;
                        var root = 0;
                        var curr = 0;
                        var drop = 0;
                        var left = 0;
                        var used = 0;
                        var huff = 0;
                        var incr;
                        var fill;
                        var low;
                        var mask;
                        var next;
                        var base = null;
                        var base_index = 0;
                        var end;
                        var count = new utils.Buf16(MAXBITS + 1);
                        var offs = new utils.Buf16(MAXBITS + 1);
                        var extra = null;
                        var extra_index = 0;
                        var here_bits, here_op, here_val;
                        for (len = 0; len <= MAXBITS; len++) {
                            count[len] = 0;
                        }
                        for (sym = 0; sym < codes; sym++) {
                            count[lens[lens_index + sym]]++;
                        }
                        root = bits;
                        for (max = MAXBITS; max >= 1; max--) {
                            if (count[max] !== 0) {
                                break;
                            }
                        }
                        if (root > max) {
                            root = max;
                        }
                        if (max === 0) {
                            table[table_index++] = 1 << 24 | 64 << 16 | 0;
                            table[table_index++] = 1 << 24 | 64 << 16 | 0;
                            opts.bits = 1;
                            return 0;
                        }
                        for (min = 1; min < max; min++) {
                            if (count[min] !== 0) {
                                break;
                            }
                        }
                        if (root < min) {
                            root = min;
                        }
                        left = 1;
                        for (len = 1; len <= MAXBITS; len++) {
                            left <<= 1;
                            left -= count[len];
                            if (left < 0) {
                                return -1;
                            }
                        }
                        if (left > 0 && (type === CODES || max !== 1)) {
                            return -1;
                        }
                        offs[1] = 0;
                        for (len = 1; len < MAXBITS; len++) {
                            offs[len + 1] = offs[len] + count[len];
                        }
                        for (sym = 0; sym < codes; sym++) {
                            if (lens[lens_index + sym] !== 0) {
                                work[offs[lens[lens_index + sym]]++] = sym;
                            }
                        }
                        if (type === CODES) {
                            base = extra = work;
                            end = 19;
                        } else if (type === LENS) {
                            base = lbase;
                            base_index -= 257;
                            extra = lext;
                            extra_index -= 257;
                            end = 256;
                        } else {
                            base = dbase;
                            extra = dext;
                            end = -1;
                        }
                        huff = 0;
                        sym = 0;
                        len = min;
                        next = table_index;
                        curr = root;
                        drop = 0;
                        low = -1;
                        used = 1 << root;
                        mask = used - 1;
                        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                            return 1;
                        }
                        var i = 0;
                        for (;;) {
                            i++;
                            here_bits = len - drop;
                            if (work[sym] < end) {
                                here_op = 0;
                                here_val = work[sym];
                            } else if (work[sym] > end) {
                                here_op = extra[extra_index + work[sym]];
                                here_val = base[base_index + work[sym]];
                            } else {
                                here_op = 32 + 64;
                                here_val = 0;
                            }
                            incr = 1 << len - drop;
                            fill = 1 << curr;
                            min = fill;
                            do {
                                fill -= incr;
                                table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
                            } while (fill !== 0);
                            incr = 1 << len - 1;
                            while (huff & incr) {
                                incr >>= 1;
                            }
                            if (incr !== 0) {
                                huff &= incr - 1;
                                huff += incr;
                            } else {
                                huff = 0;
                            }
                            sym++;
                            if (--count[len] === 0) {
                                if (len === max) {
                                    break;
                                }
                                len = lens[lens_index + work[sym]];
                            }
                            if (len > root && (huff & mask) !== low) {
                                if (drop === 0) {
                                    drop = root;
                                }
                                next += min;
                                curr = len - drop;
                                left = 1 << curr;
                                while (curr + drop < max) {
                                    left -= count[curr + drop];
                                    if (left <= 0) {
                                        break;
                                    }
                                    curr++;
                                    left <<= 1;
                                }
                                used += 1 << curr;
                                if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                                    return 1;
                                }
                                low = huff & mask;
                                table[low] = root << 24 | curr << 16 | next - table_index | 0;
                            }
                        }
                        if (huff !== 0) {
                            table[next + huff] = len - drop << 24 | 64 << 16 | 0;
                        }
                        opts.bits = root;
                        return 0;
                    };
                },
                { '../utils/common': 62 }
            ],
            72: [
                function (require, module, exports) {
                    'use strict';
                    module.exports = {
                        2: 'need dictionary',
                        1: 'stream end',
                        0: '',
                        '-1': 'file error',
                        '-2': 'stream error',
                        '-3': 'data error',
                        '-4': 'insufficient memory',
                        '-5': 'buffer error',
                        '-6': 'incompatible version'
                    };
                },
                {}
            ],
            73: [
                function (require, module, exports) {
                    'use strict';
                    var utils = require('../utils/common');
                    var Z_FIXED = 4;
                    var Z_BINARY = 0;
                    var Z_TEXT = 1;
                    var Z_UNKNOWN = 2;
                    function zero(buf) {
                        var len = buf.length;
                        while (--len >= 0) {
                            buf[len] = 0;
                        }
                    }
                    var STORED_BLOCK = 0;
                    var STATIC_TREES = 1;
                    var DYN_TREES = 2;
                    var MIN_MATCH = 3;
                    var MAX_MATCH = 258;
                    var LENGTH_CODES = 29;
                    var LITERALS = 256;
                    var L_CODES = LITERALS + 1 + LENGTH_CODES;
                    var D_CODES = 30;
                    var BL_CODES = 19;
                    var HEAP_SIZE = 2 * L_CODES + 1;
                    var MAX_BITS = 15;
                    var Buf_size = 16;
                    var MAX_BL_BITS = 7;
                    var END_BLOCK = 256;
                    var REP_3_6 = 16;
                    var REPZ_3_10 = 17;
                    var REPZ_11_138 = 18;
                    var extra_lbits = [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        1,
                        1,
                        1,
                        2,
                        2,
                        2,
                        2,
                        3,
                        3,
                        3,
                        3,
                        4,
                        4,
                        4,
                        4,
                        5,
                        5,
                        5,
                        5,
                        0
                    ];
                    var extra_dbits = [
                        0,
                        0,
                        0,
                        0,
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5,
                        6,
                        6,
                        7,
                        7,
                        8,
                        8,
                        9,
                        9,
                        10,
                        10,
                        11,
                        11,
                        12,
                        12,
                        13,
                        13
                    ];
                    var extra_blbits = [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        2,
                        3,
                        7
                    ];
                    var bl_order = [
                        16,
                        17,
                        18,
                        0,
                        8,
                        7,
                        9,
                        6,
                        10,
                        5,
                        11,
                        4,
                        12,
                        3,
                        13,
                        2,
                        14,
                        1,
                        15
                    ];
                    var DIST_CODE_LEN = 512;
                    var static_ltree = new Array((L_CODES + 2) * 2);
                    zero(static_ltree);
                    var static_dtree = new Array(D_CODES * 2);
                    zero(static_dtree);
                    var _dist_code = new Array(DIST_CODE_LEN);
                    zero(_dist_code);
                    var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
                    zero(_length_code);
                    var base_length = new Array(LENGTH_CODES);
                    zero(base_length);
                    var base_dist = new Array(D_CODES);
                    zero(base_dist);
                    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
                        this.static_tree = static_tree;
                        this.extra_bits = extra_bits;
                        this.extra_base = extra_base;
                        this.elems = elems;
                        this.max_length = max_length;
                        this.has_stree = static_tree && static_tree.length;
                    }
                    var static_l_desc;
                    var static_d_desc;
                    var static_bl_desc;
                    function TreeDesc(dyn_tree, stat_desc) {
                        this.dyn_tree = dyn_tree;
                        this.max_code = 0;
                        this.stat_desc = stat_desc;
                    }
                    function d_code(dist) {
                        return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
                    }
                    function put_short(s, w) {
                        s.pending_buf[s.pending++] = w & 255;
                        s.pending_buf[s.pending++] = w >>> 8 & 255;
                    }
                    function send_bits(s, value, length) {
                        if (s.bi_valid > Buf_size - length) {
                            s.bi_buf |= value << s.bi_valid & 65535;
                            put_short(s, s.bi_buf);
                            s.bi_buf = value >> Buf_size - s.bi_valid;
                            s.bi_valid += length - Buf_size;
                        } else {
                            s.bi_buf |= value << s.bi_valid & 65535;
                            s.bi_valid += length;
                        }
                    }
                    function send_code(s, c, tree) {
                        send_bits(s, tree[c * 2], tree[c * 2 + 1]);
                    }
                    function bi_reverse(code, len) {
                        var res = 0;
                        do {
                            res |= code & 1;
                            code >>>= 1;
                            res <<= 1;
                        } while (--len > 0);
                        return res >>> 1;
                    }
                    function bi_flush(s) {
                        if (s.bi_valid === 16) {
                            put_short(s, s.bi_buf);
                            s.bi_buf = 0;
                            s.bi_valid = 0;
                        } else if (s.bi_valid >= 8) {
                            s.pending_buf[s.pending++] = s.bi_buf & 255;
                            s.bi_buf >>= 8;
                            s.bi_valid -= 8;
                        }
                    }
                    function gen_bitlen(s, desc) {
                        var tree = desc.dyn_tree;
                        var max_code = desc.max_code;
                        var stree = desc.stat_desc.static_tree;
                        var has_stree = desc.stat_desc.has_stree;
                        var extra = desc.stat_desc.extra_bits;
                        var base = desc.stat_desc.extra_base;
                        var max_length = desc.stat_desc.max_length;
                        var h;
                        var n, m;
                        var bits;
                        var xbits;
                        var f;
                        var overflow = 0;
                        for (bits = 0; bits <= MAX_BITS; bits++) {
                            s.bl_count[bits] = 0;
                        }
                        tree[s.heap[s.heap_max] * 2 + 1] = 0;
                        for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
                            n = s.heap[h];
                            bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
                            if (bits > max_length) {
                                bits = max_length;
                                overflow++;
                            }
                            tree[n * 2 + 1] = bits;
                            if (n > max_code) {
                                continue;
                            }
                            s.bl_count[bits]++;
                            xbits = 0;
                            if (n >= base) {
                                xbits = extra[n - base];
                            }
                            f = tree[n * 2];
                            s.opt_len += f * (bits + xbits);
                            if (has_stree) {
                                s.static_len += f * (stree[n * 2 + 1] + xbits);
                            }
                        }
                        if (overflow === 0) {
                            return;
                        }
                        do {
                            bits = max_length - 1;
                            while (s.bl_count[bits] === 0) {
                                bits--;
                            }
                            s.bl_count[bits]--;
                            s.bl_count[bits + 1] += 2;
                            s.bl_count[max_length]--;
                            overflow -= 2;
                        } while (overflow > 0);
                        for (bits = max_length; bits !== 0; bits--) {
                            n = s.bl_count[bits];
                            while (n !== 0) {
                                m = s.heap[--h];
                                if (m > max_code) {
                                    continue;
                                }
                                if (tree[m * 2 + 1] !== bits) {
                                    s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
                                    tree[m * 2 + 1] = bits;
                                }
                                n--;
                            }
                        }
                    }
                    function gen_codes(tree, max_code, bl_count) {
                        var next_code = new Array(MAX_BITS + 1);
                        var code = 0;
                        var bits;
                        var n;
                        for (bits = 1; bits <= MAX_BITS; bits++) {
                            next_code[bits] = code = code + bl_count[bits - 1] << 1;
                        }
                        for (n = 0; n <= max_code; n++) {
                            var len = tree[n * 2 + 1];
                            if (len === 0) {
                                continue;
                            }
                            tree[n * 2] = bi_reverse(next_code[len]++, len);
                        }
                    }
                    function tr_static_init() {
                        var n;
                        var bits;
                        var length;
                        var code;
                        var dist;
                        var bl_count = new Array(MAX_BITS + 1);
                        length = 0;
                        for (code = 0; code < LENGTH_CODES - 1; code++) {
                            base_length[code] = length;
                            for (n = 0; n < 1 << extra_lbits[code]; n++) {
                                _length_code[length++] = code;
                            }
                        }
                        _length_code[length - 1] = code;
                        dist = 0;
                        for (code = 0; code < 16; code++) {
                            base_dist[code] = dist;
                            for (n = 0; n < 1 << extra_dbits[code]; n++) {
                                _dist_code[dist++] = code;
                            }
                        }
                        dist >>= 7;
                        for (; code < D_CODES; code++) {
                            base_dist[code] = dist << 7;
                            for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
                                _dist_code[256 + dist++] = code;
                            }
                        }
                        for (bits = 0; bits <= MAX_BITS; bits++) {
                            bl_count[bits] = 0;
                        }
                        n = 0;
                        while (n <= 143) {
                            static_ltree[n * 2 + 1] = 8;
                            n++;
                            bl_count[8]++;
                        }
                        while (n <= 255) {
                            static_ltree[n * 2 + 1] = 9;
                            n++;
                            bl_count[9]++;
                        }
                        while (n <= 279) {
                            static_ltree[n * 2 + 1] = 7;
                            n++;
                            bl_count[7]++;
                        }
                        while (n <= 287) {
                            static_ltree[n * 2 + 1] = 8;
                            n++;
                            bl_count[8]++;
                        }
                        gen_codes(static_ltree, L_CODES + 1, bl_count);
                        for (n = 0; n < D_CODES; n++) {
                            static_dtree[n * 2 + 1] = 5;
                            static_dtree[n * 2] = bi_reverse(n, 5);
                        }
                        static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
                        static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
                        static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
                    }
                    function init_block(s) {
                        var n;
                        for (n = 0; n < L_CODES; n++) {
                            s.dyn_ltree[n * 2] = 0;
                        }
                        for (n = 0; n < D_CODES; n++) {
                            s.dyn_dtree[n * 2] = 0;
                        }
                        for (n = 0; n < BL_CODES; n++) {
                            s.bl_tree[n * 2] = 0;
                        }
                        s.dyn_ltree[END_BLOCK * 2] = 1;
                        s.opt_len = s.static_len = 0;
                        s.last_lit = s.matches = 0;
                    }
                    function bi_windup(s) {
                        if (s.bi_valid > 8) {
                            put_short(s, s.bi_buf);
                        } else if (s.bi_valid > 0) {
                            s.pending_buf[s.pending++] = s.bi_buf;
                        }
                        s.bi_buf = 0;
                        s.bi_valid = 0;
                    }
                    function copy_block(s, buf, len, header) {
                        bi_windup(s);
                        if (header) {
                            put_short(s, len);
                            put_short(s, ~len);
                        }
                        utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
                        s.pending += len;
                    }
                    function smaller(tree, n, m, depth) {
                        var _n2 = n * 2;
                        var _m2 = m * 2;
                        return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
                    }
                    function pqdownheap(s, tree, k) {
                        var v = s.heap[k];
                        var j = k << 1;
                        while (j <= s.heap_len) {
                            if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
                                j++;
                            }
                            if (smaller(tree, v, s.heap[j], s.depth)) {
                                break;
                            }
                            s.heap[k] = s.heap[j];
                            k = j;
                            j <<= 1;
                        }
                        s.heap[k] = v;
                    }
                    function compress_block(s, ltree, dtree) {
                        var dist;
                        var lc;
                        var lx = 0;
                        var code;
                        var extra;
                        if (s.last_lit !== 0) {
                            do {
                                dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
                                lc = s.pending_buf[s.l_buf + lx];
                                lx++;
                                if (dist === 0) {
                                    send_code(s, lc, ltree);
                                } else {
                                    code = _length_code[lc];
                                    send_code(s, code + LITERALS + 1, ltree);
                                    extra = extra_lbits[code];
                                    if (extra !== 0) {
                                        lc -= base_length[code];
                                        send_bits(s, lc, extra);
                                    }
                                    dist--;
                                    code = d_code(dist);
                                    send_code(s, code, dtree);
                                    extra = extra_dbits[code];
                                    if (extra !== 0) {
                                        dist -= base_dist[code];
                                        send_bits(s, dist, extra);
                                    }
                                }
                            } while (lx < s.last_lit);
                        }
                        send_code(s, END_BLOCK, ltree);
                    }
                    function build_tree(s, desc) {
                        var tree = desc.dyn_tree;
                        var stree = desc.stat_desc.static_tree;
                        var has_stree = desc.stat_desc.has_stree;
                        var elems = desc.stat_desc.elems;
                        var n, m;
                        var max_code = -1;
                        var node;
                        s.heap_len = 0;
                        s.heap_max = HEAP_SIZE;
                        for (n = 0; n < elems; n++) {
                            if (tree[n * 2] !== 0) {
                                s.heap[++s.heap_len] = max_code = n;
                                s.depth[n] = 0;
                            } else {
                                tree[n * 2 + 1] = 0;
                            }
                        }
                        while (s.heap_len < 2) {
                            node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
                            tree[node * 2] = 1;
                            s.depth[node] = 0;
                            s.opt_len--;
                            if (has_stree) {
                                s.static_len -= stree[node * 2 + 1];
                            }
                        }
                        desc.max_code = max_code;
                        for (n = s.heap_len >> 1; n >= 1; n--) {
                            pqdownheap(s, tree, n);
                        }
                        node = elems;
                        do {
                            n = s.heap[1];
                            s.heap[1] = s.heap[s.heap_len--];
                            pqdownheap(s, tree, 1);
                            m = s.heap[1];
                            s.heap[--s.heap_max] = n;
                            s.heap[--s.heap_max] = m;
                            tree[node * 2] = tree[n * 2] + tree[m * 2];
                            s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
                            tree[n * 2 + 1] = tree[m * 2 + 1] = node;
                            s.heap[1] = node++;
                            pqdownheap(s, tree, 1);
                        } while (s.heap_len >= 2);
                        s.heap[--s.heap_max] = s.heap[1];
                        gen_bitlen(s, desc);
                        gen_codes(tree, max_code, s.bl_count);
                    }
                    function scan_tree(s, tree, max_code) {
                        var n;
                        var prevlen = -1;
                        var curlen;
                        var nextlen = tree[0 * 2 + 1];
                        var count = 0;
                        var max_count = 7;
                        var min_count = 4;
                        if (nextlen === 0) {
                            max_count = 138;
                            min_count = 3;
                        }
                        tree[(max_code + 1) * 2 + 1] = 65535;
                        for (n = 0; n <= max_code; n++) {
                            curlen = nextlen;
                            nextlen = tree[(n + 1) * 2 + 1];
                            if (++count < max_count && curlen === nextlen) {
                                continue;
                            } else if (count < min_count) {
                                s.bl_tree[curlen * 2] += count;
                            } else if (curlen !== 0) {
                                if (curlen !== prevlen) {
                                    s.bl_tree[curlen * 2]++;
                                }
                                s.bl_tree[REP_3_6 * 2]++;
                            } else if (count <= 10) {
                                s.bl_tree[REPZ_3_10 * 2]++;
                            } else {
                                s.bl_tree[REPZ_11_138 * 2]++;
                            }
                            count = 0;
                            prevlen = curlen;
                            if (nextlen === 0) {
                                max_count = 138;
                                min_count = 3;
                            } else if (curlen === nextlen) {
                                max_count = 6;
                                min_count = 3;
                            } else {
                                max_count = 7;
                                min_count = 4;
                            }
                        }
                    }
                    function send_tree(s, tree, max_code) {
                        var n;
                        var prevlen = -1;
                        var curlen;
                        var nextlen = tree[0 * 2 + 1];
                        var count = 0;
                        var max_count = 7;
                        var min_count = 4;
                        if (nextlen === 0) {
                            max_count = 138;
                            min_count = 3;
                        }
                        for (n = 0; n <= max_code; n++) {
                            curlen = nextlen;
                            nextlen = tree[(n + 1) * 2 + 1];
                            if (++count < max_count && curlen === nextlen) {
                                continue;
                            } else if (count < min_count) {
                                do {
                                    send_code(s, curlen, s.bl_tree);
                                } while (--count !== 0);
                            } else if (curlen !== 0) {
                                if (curlen !== prevlen) {
                                    send_code(s, curlen, s.bl_tree);
                                    count--;
                                }
                                send_code(s, REP_3_6, s.bl_tree);
                                send_bits(s, count - 3, 2);
                            } else if (count <= 10) {
                                send_code(s, REPZ_3_10, s.bl_tree);
                                send_bits(s, count - 3, 3);
                            } else {
                                send_code(s, REPZ_11_138, s.bl_tree);
                                send_bits(s, count - 11, 7);
                            }
                            count = 0;
                            prevlen = curlen;
                            if (nextlen === 0) {
                                max_count = 138;
                                min_count = 3;
                            } else if (curlen === nextlen) {
                                max_count = 6;
                                min_count = 3;
                            } else {
                                max_count = 7;
                                min_count = 4;
                            }
                        }
                    }
                    function build_bl_tree(s) {
                        var max_blindex;
                        scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
                        scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
                        build_tree(s, s.bl_desc);
                        for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
                            if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
                                break;
                            }
                        }
                        s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
                        return max_blindex;
                    }
                    function send_all_trees(s, lcodes, dcodes, blcodes) {
                        var rank;
                        send_bits(s, lcodes - 257, 5);
                        send_bits(s, dcodes - 1, 5);
                        send_bits(s, blcodes - 4, 4);
                        for (rank = 0; rank < blcodes; rank++) {
                            send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
                        }
                        send_tree(s, s.dyn_ltree, lcodes - 1);
                        send_tree(s, s.dyn_dtree, dcodes - 1);
                    }
                    function detect_data_type(s) {
                        var black_mask = 4093624447;
                        var n;
                        for (n = 0; n <= 31; n++, black_mask >>>= 1) {
                            if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
                                return Z_BINARY;
                            }
                        }
                        if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
                            return Z_TEXT;
                        }
                        for (n = 32; n < LITERALS; n++) {
                            if (s.dyn_ltree[n * 2] !== 0) {
                                return Z_TEXT;
                            }
                        }
                        return Z_BINARY;
                    }
                    var static_init_done = false;
                    function _tr_init(s) {
                        if (!static_init_done) {
                            tr_static_init();
                            static_init_done = true;
                        }
                        s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
                        s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
                        s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
                        s.bi_buf = 0;
                        s.bi_valid = 0;
                        init_block(s);
                    }
                    function _tr_stored_block(s, buf, stored_len, last) {
                        send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
                        copy_block(s, buf, stored_len, true);
                    }
                    function _tr_align(s) {
                        send_bits(s, STATIC_TREES << 1, 3);
                        send_code(s, END_BLOCK, static_ltree);
                        bi_flush(s);
                    }
                    function _tr_flush_block(s, buf, stored_len, last) {
                        var opt_lenb, static_lenb;
                        var max_blindex = 0;
                        if (s.level > 0) {
                            if (s.strm.data_type === Z_UNKNOWN) {
                                s.strm.data_type = detect_data_type(s);
                            }
                            build_tree(s, s.l_desc);
                            build_tree(s, s.d_desc);
                            max_blindex = build_bl_tree(s);
                            opt_lenb = s.opt_len + 3 + 7 >>> 3;
                            static_lenb = s.static_len + 3 + 7 >>> 3;
                            if (static_lenb <= opt_lenb) {
                                opt_lenb = static_lenb;
                            }
                        } else {
                            opt_lenb = static_lenb = stored_len + 5;
                        }
                        if (stored_len + 4 <= opt_lenb && buf !== -1) {
                            _tr_stored_block(s, buf, stored_len, last);
                        } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
                            send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
                            compress_block(s, static_ltree, static_dtree);
                        } else {
                            send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
                            send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
                            compress_block(s, s.dyn_ltree, s.dyn_dtree);
                        }
                        init_block(s);
                        if (last) {
                            bi_windup(s);
                        }
                    }
                    function _tr_tally(s, dist, lc) {
                        s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
                        s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
                        s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
                        s.last_lit++;
                        if (dist === 0) {
                            s.dyn_ltree[lc * 2]++;
                        } else {
                            s.matches++;
                            dist--;
                            s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
                            s.dyn_dtree[d_code(dist) * 2]++;
                        }
                        return s.last_lit === s.lit_bufsize - 1;
                    }
                    exports._tr_init = _tr_init;
                    exports._tr_stored_block = _tr_stored_block;
                    exports._tr_flush_block = _tr_flush_block;
                    exports._tr_tally = _tr_tally;
                    exports._tr_align = _tr_align;
                },
                { '../utils/common': 62 }
            ],
            74: [
                function (require, module, exports) {
                    'use strict';
                    function ZStream() {
                        this.input = null;
                        this.next_in = 0;
                        this.avail_in = 0;
                        this.total_in = 0;
                        this.output = null;
                        this.next_out = 0;
                        this.avail_out = 0;
                        this.total_out = 0;
                        this.msg = '';
                        this.state = null;
                        this.data_type = 2;
                        this.adler = 0;
                    }
                    module.exports = ZStream;
                },
                {}
            ]
        }, {}, [10])(10);
    }));
}.call(this));
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('buttons.html5', [
            'jquery',
            'jszip',
            'datatables',
            'datatables.buttons'
        ], function ($, jszip) {
            return factory($, window, document, jszip);
        });
    } else if (typeof exports === 'object') {
        module.exports = function (root, $, jszip, pdfmake) {
            if (!root) {
                root = window;
            }
            if (!$ || !$.fn.dataTable) {
                $ = require('datatables.net')(root, $).$;
            }
            if (!$.fn.dataTable.Buttons) {
                require('datatables.net-buttons')(root, $);
            }
            return factory($, root, root.document, jszip, pdfmake);
        };
    } else {
        factory(jQuery, window, document, jszip);
    }
}(function ($, window, document, jszip) {
    'use strict';
    var DataTable = $.fn.dataTable;
    function _jsZip() {
        return jszip || window.JSZip;
    }
    function _pdfMake() {
        return pdfmake || window.pdfMake;
    }
    var _saveAs = function (view) {
        'use strict';
        if (typeof view === 'undefined' || typeof navigator !== 'undefined' && /MSIE [1-9]\./.test(navigator.userAgent)) {
            return;
        }
        var doc = view.document, get_URL = function () {
                return view.URL || view.webkitURL || view;
            }, save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'), can_use_save_link = 'download' in save_link, click = function (node) {
                var event = new MouseEvent('click');
                node.dispatchEvent(event);
            }, is_safari = /constructor/i.test(view.HTMLElement) || view.safari, is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent), throw_outside = function (ex) {
                (view.setImmediate || view.setTimeout)(function () {
                    throw ex;
                }, 0);
            }, force_saveable_type = 'application/octet-stream', arbitrary_revoke_timeout = 1000 * 40, revoke = function (file) {
                var revoker = function () {
                    if (typeof file === 'string') {
                        get_URL().revokeObjectURL(file);
                    } else {
                        file.remove();
                    }
                };
                setTimeout(revoker, arbitrary_revoke_timeout);
            }, dispatch = function (filesaver, event_types, event) {
                event_types = [].concat(event_types);
                var i = event_types.length;
                while (i--) {
                    var listener = filesaver['on' + event_types[i]];
                    if (typeof listener === 'function') {
                        try {
                            listener.call(filesaver, event || filesaver);
                        } catch (ex) {
                            throw_outside(ex);
                        }
                    }
                }
            }, auto_bom = function (blob) {
                if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
                    return new Blob([
                        String.fromCharCode(65279),
                        blob
                    ], { type: blob.type });
                }
                return blob;
            }, FileSaver = function (blob, name, no_auto_bom) {
                if (!no_auto_bom) {
                    blob = auto_bom(blob);
                }
                var filesaver = this, type = blob.type, force = type === force_saveable_type, object_url, dispatch_all = function () {
                        dispatch(filesaver, 'writestart progress write writeend'.split(' '));
                    }, fs_error = function () {
                        if ((is_chrome_ios || force && is_safari) && view.FileReader) {
                            var reader = new FileReader();
                            reader.onloadend = function () {
                                var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
                                var popup = view.open(url, '_blank');
                                if (!popup)
                                    view.location.href = url;
                                url = undefined;
                                filesaver.readyState = filesaver.DONE;
                                dispatch_all();
                            };
                            reader.readAsDataURL(blob);
                            filesaver.readyState = filesaver.INIT;
                            return;
                        }
                        if (!object_url) {
                            object_url = get_URL().createObjectURL(blob);
                        }
                        if (force) {
                            view.location.href = object_url;
                        } else {
                            var opened = view.open(object_url, '_blank');
                            if (!opened) {
                                view.location.href = object_url;
                            }
                        }
                        filesaver.readyState = filesaver.DONE;
                        dispatch_all();
                        revoke(object_url);
                    };
                filesaver.readyState = filesaver.INIT;
                if (can_use_save_link) {
                    object_url = get_URL().createObjectURL(blob);
                    setTimeout(function () {
                        save_link.href = object_url;
                        save_link.download = name;
                        click(save_link);
                        dispatch_all();
                        revoke(object_url);
                        filesaver.readyState = filesaver.DONE;
                    });
                    return;
                }
                fs_error();
            }, FS_proto = FileSaver.prototype, saveAs = function (blob, name, no_auto_bom) {
                return new FileSaver(blob, name || blob.name || 'download', no_auto_bom);
            };
        if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
            return function (blob, name, no_auto_bom) {
                name = name || blob.name || 'download';
                if (!no_auto_bom) {
                    blob = auto_bom(blob);
                }
                return navigator.msSaveOrOpenBlob(blob, name);
            };
        }
        FS_proto.abort = function () {
        };
        FS_proto.readyState = FS_proto.INIT = 0;
        FS_proto.WRITING = 1;
        FS_proto.DONE = 2;
        FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;
        return saveAs;
    }(typeof self !== 'undefined' && self || typeof window !== 'undefined' && window || this.content);
    DataTable.fileSave = _saveAs;
    var _filename = function (config, incExtension) {
        var filename = config.filename === '*' && config.title !== '*' && config.title !== undefined ? config.title : config.filename;
        if (typeof filename === 'function') {
            filename = filename();
        }
        if (filename.indexOf('*') !== -1) {
            filename = $.trim(filename.replace('*', $('title').text()));
        }
        filename = filename.replace(/[^a-zA-Z0-9_\u00A1-\uFFFF\.,\-_ !\(\)]/g, '');
        return incExtension === undefined || incExtension === true ? filename + config.extension : filename;
    };
    var _sheetname = function (config) {
        var sheetName = 'Sheet1';
        if (config.sheetName) {
            sheetName = config.sheetName.replace(/[\[\]\*\/\\\?\:]/g, '');
        }
        return sheetName;
    };
    var _title = function (config) {
        var title = config.title;
        if (typeof title === 'function') {
            title = title();
        }
        return title.indexOf('*') !== -1 ? title.replace('*', $('title').text() || 'Exported data') : title;
    };
    var _newLine = function (config) {
        return config.newline ? config.newline : navigator.userAgent.match(/Windows/) ? '\r\n' : '\n';
    };
    var _exportData = function (dt, config) {
        var newLine = _newLine(config);
        var data = dt.buttons.exportData(config.exportOptions);
        var boundary = config.fieldBoundary;
        var separator = config.fieldSeparator;
        var reBoundary = new RegExp(boundary, 'g');
        var escapeChar = config.escapeChar !== undefined ? config.escapeChar : '\\';
        var join = function (a) {
            var s = '';
            for (var i = 0, ien = a.length; i < ien; i++) {
                if (i > 0) {
                    s += separator;
                }
                s += boundary ? boundary + ('' + a[i]).replace(reBoundary, escapeChar + boundary) + boundary : a[i];
            }
            return s;
        };
        var header = config.header ? join(data.header) + newLine : '';
        var footer = config.footer && data.footer ? newLine + join(data.footer) : '';
        var body = [];
        for (var i = 0, ien = data.body.length; i < ien; i++) {
            body.push(join(data.body[i]));
        }
        return {
            str: header + body.join(newLine) + footer,
            rows: body.length
        };
    };
    var _isDuffSafari = function () {
        var safari = navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1 && navigator.userAgent.indexOf('Opera') === -1;
        if (!safari) {
            return false;
        }
        var version = navigator.userAgent.match(/AppleWebKit\/(\d+\.\d+)/);
        if (version && version.length > 1 && version[1] * 1 < 603.1) {
            return true;
        }
        return false;
    };
    function createCellPos(n) {
        var ordA = 'A'.charCodeAt(0);
        var ordZ = 'Z'.charCodeAt(0);
        var len = ordZ - ordA + 1;
        var s = '';
        while (n >= 0) {
            s = String.fromCharCode(n % len + ordA) + s;
            n = Math.floor(n / len) - 1;
        }
        return s;
    }
    try {
        var _serialiser = new XMLSerializer();
        var _ieExcel;
    } catch (t) {
    }
    function _addToZip(zip, obj) {
        if (_ieExcel === undefined) {
            _ieExcel = _serialiser.serializeToString($.parseXML(excelStrings['xl/worksheets/sheet1.xml'])).indexOf('xmlns:r') === -1;
        }
        $.each(obj, function (name, val) {
            if ($.isPlainObject(val)) {
                var newDir = zip.folder(name);
                _addToZip(newDir, val);
            } else {
                if (_ieExcel) {
                    var worksheet = val.childNodes[0];
                    var i, ien;
                    var attrs = [];
                    for (i = worksheet.attributes.length - 1; i >= 0; i--) {
                        var attrName = worksheet.attributes[i].nodeName;
                        var attrValue = worksheet.attributes[i].nodeValue;
                        if (attrName.indexOf(':') !== -1) {
                            attrs.push({
                                name: attrName,
                                value: attrValue
                            });
                            worksheet.removeAttribute(attrName);
                        }
                    }
                    for (i = 0, ien = attrs.length; i < ien; i++) {
                        var attr = val.createAttribute(attrs[i].name.replace(':', '_dt_b_namespace_token_'));
                        attr.value = attrs[i].value;
                        worksheet.setAttributeNode(attr);
                    }
                }
                var str = _serialiser.serializeToString(val);
                if (_ieExcel) {
                    if (str.indexOf('<?xml') === -1) {
                        str = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + str;
                    }
                    str = str.replace(/_dt_b_namespace_token_/g, ':');
                }
                str = str.replace(/<([^<>]*?) xmlns=""([^<>]*?)>/g, '<$1 $2>');
                zip.file(name, str);
            }
        });
    }
    function _createNode(doc, nodeName, opts) {
        var tempNode = doc.createElement(nodeName);
        if (opts) {
            if (opts.attr) {
                $(tempNode).attr(opts.attr);
            }
            if (opts.children) {
                $.each(opts.children, function (key, value) {
                    tempNode.appendChild(value);
                });
            }
            if (opts.text) {
                tempNode.appendChild(doc.createTextNode(opts.text));
            }
        }
        return tempNode;
    }
    function _excelColWidth(data, col) {
        var max = data.header[col].length;
        var len, lineSplit, str;
        if (data.footer && data.footer[col].length > max) {
            max = data.footer[col].length;
        }
        for (var i = 0, ien = data.body.length; i < ien; i++) {
            var point = data.body[i][col];
            str = point !== null && point !== undefined ? point.toString() : '';
            if (str.indexOf('\n') !== -1) {
                lineSplit = str.split('\n');
                lineSplit.sort(function (a, b) {
                    return b.length - a.length;
                });
                len = lineSplit[0].length;
            } else {
                len = str.length;
            }
            if (len > max) {
                max = len;
            }
            if (max > 40) {
                return 52;
            }
        }
        max *= 1.3;
        return max > 6 ? max : 6;
    }
    var excelStrings = {
        '_rels/.rels': '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' + '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/>' + '</Relationships>',
        'xl/_rels/workbook.xml.rels': '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' + '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet1.xml"/>' + '<Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml"/>' + '</Relationships>',
        '[Content_Types].xml': '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + '<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">' + '<Default Extension="xml" ContentType="application/xml" />' + '<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" />' + '<Default Extension="jpeg" ContentType="image/jpeg" />' + '<Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" />' + '<Override PartName="/xl/worksheets/sheet1.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" />' + '<Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" />' + '</Types>',
        'xl/workbook.xml': '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + '<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">' + '<fileVersion appName="xl" lastEdited="5" lowestEdited="5" rupBuild="24816"/>' + '<workbookPr showInkAnnotation="0" autoCompressPictures="0"/>' + '<bookViews>' + '<workbookView xWindow="0" yWindow="0" windowWidth="25600" windowHeight="19020" tabRatio="500"/>' + '</bookViews>' + '<sheets>' + '<sheet name="" sheetId="1" r:id="rId1"/>' + '</sheets>' + '</workbook>',
        'xl/worksheets/sheet1.xml': '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + '<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac">' + '<sheetData/>' + '</worksheet>',
        'xl/styles.xml': '<?xml version="1.0" encoding="UTF-8"?>' + '<styleSheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac">' + '<numFmts count="6">' + '<numFmt numFmtId="164" formatCode="#,##0.00_- [$$-45C]"/>' + '<numFmt numFmtId="165" formatCode="&quot;\xA3&quot;#,##0.00"/>' + '<numFmt numFmtId="166" formatCode="[$\u20AC-2] #,##0.00"/>' + '<numFmt numFmtId="167" formatCode="0.0%"/>' + '<numFmt numFmtId="168" formatCode="#,##0;(#,##0)"/>' + '<numFmt numFmtId="169" formatCode="#,##0.00;(#,##0.00)"/>' + '</numFmts>' + '<fonts count="5" x14ac:knownFonts="1">' + '<font>' + '<sz val="11" />' + '<name val="Calibri" />' + '</font>' + '<font>' + '<sz val="11" />' + '<name val="Calibri" />' + '<color rgb="FFFFFFFF" />' + '</font>' + '<font>' + '<sz val="11" />' + '<name val="Calibri" />' + '<b />' + '</font>' + '<font>' + '<sz val="11" />' + '<name val="Calibri" />' + '<i />' + '</font>' + '<font>' + '<sz val="11" />' + '<name val="Calibri" />' + '<u />' + '</font>' + '</fonts>' + '<fills count="6">' + '<fill>' + '<patternFill patternType="none" />' + '</fill>' + '<fill/>' + '<fill>' + '<patternFill patternType="solid">' + '<fgColor rgb="FFD9D9D9" />' + '<bgColor indexed="64" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType="solid">' + '<fgColor rgb="FFD99795" />' + '<bgColor indexed="64" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType="solid">' + '<fgColor rgb="ffc6efce" />' + '<bgColor indexed="64" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType="solid">' + '<fgColor rgb="ffc6cfef" />' + '<bgColor indexed="64" />' + '</patternFill>' + '</fill>' + '</fills>' + '<borders count="2">' + '<border>' + '<left />' + '<right />' + '<top />' + '<bottom />' + '<diagonal />' + '</border>' + '<border diagonalUp="false" diagonalDown="false">' + '<left style="thin">' + '<color auto="1" />' + '</left>' + '<right style="thin">' + '<color auto="1" />' + '</right>' + '<top style="thin">' + '<color auto="1" />' + '</top>' + '<bottom style="thin">' + '<color auto="1" />' + '</bottom>' + '<diagonal />' + '</border>' + '</borders>' + '<cellStyleXfs count="1">' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" />' + '</cellStyleXfs>' + '<cellXfs count="67">' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="1" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="2" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="3" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="4" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">' + '<alignment horizontal="left"/>' + '</xf>' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">' + '<alignment horizontal="center"/>' + '</xf>' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">' + '<alignment horizontal="right"/>' + '</xf>' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">' + '<alignment horizontal="fill"/>' + '</xf>' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">' + '<alignment textRotation="90"/>' + '</xf>' + '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">' + '<alignment wrapText="1"/>' + '</xf>' + '<xf numFmtId="9"   fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="164" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="165" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="166" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="167" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="168" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="169" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="3" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="4" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="1" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '<xf numFmtId="2" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>' + '</cellXfs>' + '<cellStyles count="1">' + '<cellStyle name="Normal" xfId="0" builtinId="0" />' + '</cellStyles>' + '<dxfs count="0" />' + '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4" />' + '</styleSheet>'
    };
    var _excelSpecials = [
        {
            match: /^\-?\d+\.\d%$/,
            style: 60,
            fmt: function (d) {
                return d / 100;
            }
        },
        {
            match: /^\-?\d+\.?\d*%$/,
            style: 56,
            fmt: function (d) {
                return d / 100;
            }
        },
        {
            match: /^\-?\$[\d,]+.?\d*$/,
            style: 57
        },
        {
            match: /^\-?£[\d,]+.?\d*$/,
            style: 58
        },
        {
            match: /^\-?€[\d,]+.?\d*$/,
            style: 59
        },
        {
            match: /^\-?\d+$/,
            style: 65
        },
        {
            match: /^\-?\d+\.\d{2}$/,
            style: 66
        },
        {
            match: /^\([\d,]+\)$/,
            style: 61,
            fmt: function (d) {
                return -1 * d.replace(/[\(\)]/g, '');
            }
        },
        {
            match: /^\([\d,]+\.\d{2}\)$/,
            style: 62,
            fmt: function (d) {
                return -1 * d.replace(/[\(\)]/g, '');
            }
        },
        {
            match: /^\-?[\d,]+$/,
            style: 63
        },
        {
            match: /^\-?[\d,]+\.\d{2}$/,
            style: 64
        }
    ];
    DataTable.ext.buttons.copyHtml5 = {
        className: 'buttons-copy buttons-html5',
        text: function (dt) {
            return dt.i18n('buttons.copy', 'Copy');
        },
        action: function (e, dt, button, config) {
            this.processing(true);
            var that = this;
            var exportData = _exportData(dt, config);
            var output = exportData.str;
            var hiddenDiv = $('<div/>').css({
                height: 1,
                width: 1,
                overflow: 'hidden',
                position: 'fixed',
                top: 0,
                left: 0
            });
            if (config.customize) {
                output = config.customize(output, config);
            }
            var textarea = $('<textarea readonly/>').val(output).appendTo(hiddenDiv);
            if (document.queryCommandSupported('copy')) {
                hiddenDiv.appendTo(dt.table().container());
                textarea[0].focus();
                textarea[0].select();
                try {
                    var successful = document.execCommand('copy');
                    hiddenDiv.remove();
                    if (successful) {
                        dt.buttons.info(dt.i18n('buttons.copyTitle', 'Copy to clipboard'), dt.i18n('buttons.copySuccess', {
                            1: 'Copied one row to clipboard',
                            _: 'Copied %d rows to clipboard'
                        }, exportData.rows), 20000);
                        this.processing(false);
                        return;
                    }
                } catch (t) {
                }
            }
            var message = $('<span>' + dt.i18n('buttons.copyKeys', 'Press <i>ctrl</i> or <i>\u2318</i> + <i>C</i> to copy the table data<br>to your system clipboard.<br><br>' + 'To cancel, click this message or press escape.') + '</span>').append(hiddenDiv);
            dt.buttons.info(dt.i18n('buttons.copyTitle', 'Copy to clipboard'), message, 0);
            textarea[0].focus();
            textarea[0].select();
            var container = $(message).closest('.dt-button-info');
            var close = function () {
                container.off('click.buttons-copy');
                $(document).off('.buttons-copy');
                dt.buttons.info(false);
            };
            container.on('click.buttons-copy', close);
            $(document).on('keydown.buttons-copy', function (e) {
                if (e.keyCode === 27) {
                    close();
                    that.processing(false);
                }
            }).on('copy.buttons-copy cut.buttons-copy', function () {
                close();
                that.processing(false);
            });
        },
        exportOptions: {},
        fieldSeparator: '\t',
        fieldBoundary: '',
        header: true,
        footer: false
    };
    DataTable.ext.buttons.csvHtml5 = {
        bom: false,
        className: 'buttons-csv buttons-html5',
        available: function () {
            return window.FileReader !== undefined && window.Blob;
        },
        text: function (dt) {
            return dt.i18n('buttons.csv', 'CSV');
        },
        action: function (e, dt, button, config) {
            this.processing(true);
            var output = _exportData(dt, config).str;
            var charset = config.charset;
            if (config.customize) {
                output = config.customize(output, config);
            }
            if (charset !== false) {
                if (!charset) {
                    charset = document.characterSet || document.charset;
                }
                if (charset) {
                    charset = ';charset=' + charset;
                }
            } else {
                charset = '';
            }
            if (config.bom) {
                output = '\uFEFF' + output;
            }
            _saveAs(new Blob([output], { type: 'text/csv' + charset }), _filename(config), true);
            this.processing(false);
        },
        filename: '*',
        extension: '.csv',
        exportOptions: {},
        fieldSeparator: ',',
        fieldBoundary: '"',
        escapeChar: '"',
        charset: null,
        header: true,
        footer: false
    };
    DataTable.ext.buttons.excelHtml5 = {
        className: 'buttons-excel buttons-html5',
        available: function () {
            return window.FileReader !== undefined && _jsZip() !== undefined && !_isDuffSafari() && _serialiser;
        },
        text: function (dt) {
            return dt.i18n('buttons.excel', 'Excel');
        },
        action: function (e, dt, button, config) {
            this.processing(true);
            var that = this;
            var rowPos = 0;
            var getXml = function (type) {
                var str = excelStrings[type];
                return $.parseXML(str);
            };
            var rels = getXml('xl/worksheets/sheet1.xml');
            var relsGet = rels.getElementsByTagName('sheetData')[0];
            var xlsx = {
                _rels: { '.rels': getXml('_rels/.rels') },
                xl: {
                    _rels: { 'workbook.xml.rels': getXml('xl/_rels/workbook.xml.rels') },
                    'workbook.xml': getXml('xl/workbook.xml'),
                    'styles.xml': getXml('xl/styles.xml'),
                    'worksheets': { 'sheet1.xml': rels }
                },
                '[Content_Types].xml': getXml('[Content_Types].xml')
            };
            var data = dt.buttons.exportData(config.exportOptions);
            var currentRow, rowNode;
            var addRow = function (row) {
                currentRow = rowPos + 1;
                rowNode = _createNode(rels, 'row', { attr: { r: currentRow } });
                for (var i = 0, ien = row.length; i < ien; i++) {
                    var cellId = createCellPos(i) + '' + currentRow;
                    var cell = null;
                    if (row[i] === null || row[i] === undefined || row[i] === '') {
                        continue;
                    }
                    row[i] = $.trim(row[i]);
                    for (var j = 0, jen = _excelSpecials.length; j < jen; j++) {
                        var special = _excelSpecials[j];
                        if (row[i].match && !row[i].match(/^0\d+/) && row[i].match(special.match)) {
                            var val = row[i].replace(/[^\d\.\-]/g, '');
                            if (special.fmt) {
                                val = special.fmt(val);
                            }
                            cell = _createNode(rels, 'c', {
                                attr: {
                                    r: cellId,
                                    s: special.style
                                },
                                children: [_createNode(rels, 'v', { text: val })]
                            });
                            break;
                        }
                    }
                    if (!cell) {
                        if (typeof row[i] === 'number' || row[i].match && row[i].match(/^-?\d+(\.\d+)?$/) && !row[i].match(/^0\d+/)) {
                            cell = _createNode(rels, 'c', {
                                attr: {
                                    t: 'n',
                                    r: cellId
                                },
                                children: [_createNode(rels, 'v', { text: row[i] })]
                            });
                        } else {
                            var text = !row[i].replace ? row[i] : row[i].replace(/[\x00-\x09\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '');
                            cell = _createNode(rels, 'c', {
                                attr: {
                                    t: 'inlineStr',
                                    r: cellId
                                },
                                children: { row: _createNode(rels, 'is', { children: { row: _createNode(rels, 't', { text: text }) } }) }
                            });
                        }
                    }
                    rowNode.appendChild(cell);
                }
                relsGet.appendChild(rowNode);
                rowPos++;
            };
            $('sheets sheet', xlsx.xl['workbook.xml']).attr('name', _sheetname(config));
            if (config.customizeData) {
                config.customizeData(data);
            }
            if (config.header) {
                addRow(data.header, rowPos);
                $('row c', rels).attr('s', '2');
            }
            for (var n = 0, ie = data.body.length; n < ie; n++) {
                addRow(data.body[n], rowPos);
            }
            if (config.footer && data.footer) {
                addRow(data.footer, rowPos);
                $('row:last c', rels).attr('s', '2');
            }
            var cols = _createNode(rels, 'cols');
            $('worksheet', rels).prepend(cols);
            for (var i = 0, ien = data.header.length; i < ien; i++) {
                cols.appendChild(_createNode(rels, 'col', {
                    attr: {
                        min: i + 1,
                        max: i + 1,
                        width: _excelColWidth(data, i),
                        customWidth: 1
                    }
                }));
            }
            if (config.customize) {
                config.customize(xlsx);
            }
            var jszip = _jsZip();
            var zip = new jszip();
            var zipConfig = {
                type: 'blob',
                mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            };
            _addToZip(zip, xlsx);
            if (zip.generateAsync) {
                zip.generateAsync(zipConfig).then(function (blob) {
                    _saveAs(blob, _filename(config));
                    that.processing(false);
                });
            } else {
                _saveAs(zip.generate(zipConfig), _filename(config));
                this.processing(false);
            }
        },
        filename: '*',
        extension: '.xlsx',
        exportOptions: {},
        header: true,
        footer: false
    };
    DataTable.ext.buttons.pdfHtml5 = {
        className: 'buttons-pdf buttons-html5',
        available: function () {
            return window.FileReader !== undefined && _pdfMake();
        },
        text: function (dt) {
            return dt.i18n('buttons.pdf', 'PDF');
        },
        action: function (e, dt, button, config) {
            this.processing(true);
            var that = this;
            var data = dt.buttons.exportData(config.exportOptions);
            var rows = [];
            if (config.header) {
                rows.push($.map(data.header, function (d) {
                    return {
                        text: typeof d === 'string' ? d : d + '',
                        style: 'tableHeader'
                    };
                }));
            }
            for (var i = 0, ien = data.body.length; i < ien; i++) {
                rows.push($.map(data.body[i], function (d) {
                    return {
                        text: typeof d === 'string' ? d : d + '',
                        style: i % 2 ? 'tableBodyEven' : 'tableBodyOdd'
                    };
                }));
            }
            if (config.footer && data.footer) {
                rows.push($.map(data.footer, function (d) {
                    return {
                        text: typeof d === 'string' ? d : d + '',
                        style: 'tableFooter'
                    };
                }));
            }
            var doc = {
                pageSize: config.pageSize,
                pageOrientation: config.orientation,
                content: [{
                        table: {
                            headerRows: 1,
                            body: rows
                        },
                        layout: 'noBorders'
                    }],
                styles: {
                    tableHeader: {
                        bold: true,
                        fontSize: 11,
                        color: 'white',
                        fillColor: '#2d4154',
                        alignment: 'center'
                    },
                    tableBodyEven: {},
                    tableBodyOdd: { fillColor: '#f3f3f3' },
                    tableFooter: {
                        bold: true,
                        fontSize: 11,
                        color: 'white',
                        fillColor: '#2d4154'
                    },
                    title: {
                        alignment: 'center',
                        fontSize: 15
                    },
                    message: {}
                },
                defaultStyle: { fontSize: 10 }
            };
            if (config.message) {
                doc.content.unshift({
                    text: typeof config.message == 'function' ? config.message(dt, button, config) : config.message,
                    style: 'message',
                    margin: [
                        0,
                        0,
                        0,
                        12
                    ]
                });
            }
            if (config.title) {
                doc.content.unshift({
                    text: _title(config, false),
                    style: 'title',
                    margin: [
                        0,
                        0,
                        0,
                        12
                    ]
                });
            }
            if (config.customize) {
                config.customize(doc, config);
            }
            var pdf = _pdfMake().createPdf(doc);
            if (config.download === 'open' && !_isDuffSafari()) {
                pdf.open();
                this.processing(false);
            } else {
                pdf.getBuffer(function (buffer) {
                    var blob = new Blob([buffer], { type: 'application/pdf' });
                    _saveAs(blob, _filename(config));
                    that.processing(false);
                });
            }
        },
        title: '*',
        filename: '*',
        extension: '.pdf',
        exportOptions: {},
        orientation: 'portrait',
        pageSize: 'A4',
        header: true,
        footer: false,
        message: null,
        customize: null,
        download: 'download'
    };
    return DataTable.Buttons;
}));
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('buttons.bootstrap', [
            'jquery',
            'datatables.bootstrap',
            'datatables.buttons'
        ], function ($) {
            return factory($, window, document);
        });
    } else if (typeof exports === 'object') {
        module.exports = function (root, $) {
            if (!root) {
                root = window;
            }
            if (!$ || !$.fn.dataTable) {
                $ = require('datatables.net-bs')(root, $).$;
            }
            if (!$.fn.dataTable.Buttons) {
                require('datatables.net-buttons')(root, $);
            }
            return factory($, root, root.document);
        };
    } else {
        factory(jQuery, window, document);
    }
}(function ($, window, document, undefined) {
    'use strict';
    var DataTable = $.fn.dataTable;
    $.extend(true, DataTable.Buttons.defaults, {
        dom: {
            container: { className: 'dt-buttons btn-group' },
            button: { className: 'btn btn-default' },
            collection: {
                tag: 'ul',
                className: 'dt-button-collection dropdown-menu',
                button: {
                    tag: 'li',
                    className: 'dt-button'
                },
                buttonLiner: {
                    tag: 'a',
                    className: ''
                }
            }
        }
    });
    DataTable.ext.buttons.collection.text = function (dt) {
        return dt.i18n('buttons.collection', 'Collection <span class="caret"/>');
    };
    return DataTable.Buttons;
}));
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('datatables.fixedColumns', [
            'jquery',
            'datatables'
        ], function ($) {
            return factory($, window, document);
        });
    } else if (typeof exports === 'object') {
        module.exports = function (root, $) {
            if (!root) {
                root = window;
            }
            if (!$ || !$.fn.dataTable) {
                $ = require('datatables')(root, $).$;
            }
            return factory($, root, root.document);
        };
    } else {
        factory(jQuery, window, document);
    }
}(function ($, window, document, undefined) {
    'use strict';
    var DataTable = $.fn.dataTable;
    var _firefoxScroll;
    var FixedColumns = function (dt, init) {
        var that = this;
        if (!(this instanceof FixedColumns)) {
            alert('FixedColumns warning: FixedColumns must be initialised with the \'new\' keyword.');
            return;
        }
        if (init === undefined || init === true) {
            init = {};
        }
        var camelToHungarian = $.fn.dataTable.camelToHungarian;
        if (camelToHungarian) {
            camelToHungarian(FixedColumns.defaults, FixedColumns.defaults, true);
            camelToHungarian(FixedColumns.defaults, init);
        }
        var dtSettings = new $.fn.dataTable.Api(dt).settings()[0];
        this.s = {
            'dt': dtSettings,
            'iTableColumns': dtSettings.aoColumns.length,
            'aiOuterWidths': [],
            'aiInnerWidths': [],
            rtl: $(dtSettings.nTable).css('direction') === 'rtl'
        };
        this.dom = {
            'scroller': null,
            'header': null,
            'body': null,
            'footer': null,
            'grid': {
                'wrapper': null,
                'dt': null,
                'left': {
                    'wrapper': null,
                    'head': null,
                    'body': null,
                    'foot': null
                },
                'right': {
                    'wrapper': null,
                    'head': null,
                    'body': null,
                    'foot': null
                }
            },
            'clone': {
                'left': {
                    'header': null,
                    'body': null,
                    'footer': null
                },
                'right': {
                    'header': null,
                    'body': null,
                    'footer': null
                }
            }
        };
        if (dtSettings._oFixedColumns) {
            throw 'FixedColumns already initialised on this table';
        }
        dtSettings._oFixedColumns = this;
        if (!dtSettings._bInitComplete) {
            dtSettings.oApi._fnCallbackReg(dtSettings, 'aoInitComplete', function () {
                that._fnConstruct(init);
            }, 'FixedColumns');
        } else {
            this._fnConstruct(init);
        }
    };
    $.extend(FixedColumns.prototype, {
        'fnUpdate': function () {
            this._fnDraw(true);
        },
        'fnRedrawLayout': function () {
            this._fnColCalc();
            this._fnGridLayout();
            this.fnUpdate();
        },
        'fnRecalculateHeight': function (nTr) {
            delete nTr._DTTC_iHeight;
            nTr.style.height = 'auto';
        },
        'fnSetRowHeight': function (nTarget, iHeight) {
            nTarget.style.height = iHeight + 'px';
        },
        'fnGetPosition': function (node) {
            var idx;
            var inst = this.s.dt.oInstance;
            if (!$(node).parents('.DTFC_Cloned').length) {
                return inst.fnGetPosition(node);
            } else {
                if (node.nodeName.toLowerCase() === 'tr') {
                    idx = $(node).index();
                    return inst.fnGetPosition($('tr', this.s.dt.nTBody)[idx]);
                } else {
                    var colIdx = $(node).index();
                    idx = $(node.parentNode).index();
                    var row = inst.fnGetPosition($('tr', this.s.dt.nTBody)[idx]);
                    return [
                        row,
                        colIdx,
                        inst.oApi._fnVisibleToColumnIndex(this.s.dt, colIdx)
                    ];
                }
            }
        },
        '_fnConstruct': function (oInit) {
            var i, iLen, iWidth, that = this;
            if (typeof this.s.dt.oInstance.fnVersionCheck != 'function' || this.s.dt.oInstance.fnVersionCheck('1.8.0') !== true) {
                alert('FixedColumns ' + FixedColumns.VERSION + ' required DataTables 1.8.0 or later. ' + 'Please upgrade your DataTables installation');
                return;
            }
            if (this.s.dt.oScroll.sX === '') {
                this.s.dt.oInstance.oApi._fnLog(this.s.dt, 1, 'FixedColumns is not needed (no ' + 'x-scrolling in DataTables enabled), so no action will be taken. Use \'FixedHeader\' for ' + 'column fixing when scrolling is not enabled');
                return;
            }
            this.s = $.extend(true, this.s, FixedColumns.defaults, oInit);
            var classes = this.s.dt.oClasses;
            this.dom.grid.dt = $(this.s.dt.nTable).parents('div.' + classes.sScrollWrapper)[0];
            this.dom.scroller = $('div.' + classes.sScrollBody, this.dom.grid.dt)[0];
            this._fnColCalc();
            this._fnGridSetup();
            var mouseController;
            var mouseDown = false;
            $(this.s.dt.nTableWrapper).on('mousedown.DTFC', function () {
                mouseDown = true;
                $(document).one('mouseup', function () {
                    mouseDown = false;
                });
            });
            $(this.dom.scroller).on('mouseover.DTFC touchstart.DTFC', function () {
                if (!mouseDown) {
                    mouseController = 'main';
                }
            }).on('scroll.DTFC', function (e) {
                if (!mouseController && e.originalEvent) {
                    mouseController = 'main';
                }
                if (mouseController === 'main') {
                    if (that.s.iLeftColumns > 0) {
                        that.dom.grid.left.liner.scrollTop = that.dom.scroller.scrollTop;
                    }
                    if (that.s.iRightColumns > 0) {
                        that.dom.grid.right.liner.scrollTop = that.dom.scroller.scrollTop;
                    }
                }
            });
            var wheelType = 'onwheel' in document.createElement('div') ? 'wheel.DTFC' : 'mousewheel.DTFC';
            if (that.s.iLeftColumns > 0) {
                $(that.dom.grid.left.liner).on('mouseover.DTFC touchstart.DTFC', function () {
                    if (!mouseDown) {
                        mouseController = 'left';
                    }
                }).on('scroll.DTFC', function (e) {
                    if (!mouseController && e.originalEvent) {
                        mouseController = 'left';
                    }
                    if (mouseController === 'left') {
                        that.dom.scroller.scrollTop = that.dom.grid.left.liner.scrollTop;
                        if (that.s.iRightColumns > 0) {
                            that.dom.grid.right.liner.scrollTop = that.dom.grid.left.liner.scrollTop;
                        }
                    }
                }).on(wheelType, function (e) {
                    var xDelta = e.type === 'wheel' ? -e.originalEvent.deltaX : e.originalEvent.wheelDeltaX;
                    that.dom.scroller.scrollLeft -= xDelta;
                });
            }
            if (that.s.iRightColumns > 0) {
                $(that.dom.grid.right.liner).on('mouseover.DTFC touchstart.DTFC', function () {
                    if (!mouseDown) {
                        mouseController = 'right';
                    }
                }).on('scroll.DTFC', function (e) {
                    if (!mouseController && e.originalEvent) {
                        mouseController = 'right';
                    }
                    if (mouseController === 'right') {
                        that.dom.scroller.scrollTop = that.dom.grid.right.liner.scrollTop;
                        if (that.s.iLeftColumns > 0) {
                            that.dom.grid.left.liner.scrollTop = that.dom.grid.right.liner.scrollTop;
                        }
                    }
                }).on(wheelType, function (e) {
                    var xDelta = e.type === 'wheel' ? -e.originalEvent.deltaX : e.originalEvent.wheelDeltaX;
                    that.dom.scroller.scrollLeft -= xDelta;
                });
            }
            $(window).on('resize.DTFC', function () {
                that._fnGridLayout.call(that);
            });
            var bFirstDraw = true;
            var jqTable = $(this.s.dt.nTable);
            jqTable.on('draw.dt.DTFC', function () {
                that._fnColCalc();
                that._fnDraw.call(that, bFirstDraw);
                bFirstDraw = false;
            }).on('column-sizing.dt.DTFC', function () {
                that._fnColCalc();
                that._fnGridLayout(that);
            }).on('column-visibility.dt.DTFC', function (e, settings, column, vis, recalc) {
                if (recalc === undefined || recalc) {
                    that._fnColCalc();
                    that._fnGridLayout(that);
                    that._fnDraw(true);
                }
            }).on('select.dt.DTFC deselect.dt.DTFC', function (e, dt, type, indexes) {
                if (e.namespace === 'dt') {
                    that._fnDraw(false);
                }
            }).on('destroy.dt.DTFC', function () {
                jqTable.off('.DTFC');
                $(that.dom.scroller).off('.DTFC');
                $(window).off('.DTFC');
                $(that.s.dt.nTableWrapper).off('.DTFC');
                $(that.dom.grid.left.liner).off('.DTFC ' + wheelType);
                $(that.dom.grid.left.wrapper).remove();
                $(that.dom.grid.right.liner).off('.DTFC ' + wheelType);
                $(that.dom.grid.right.wrapper).remove();
            });
            this._fnGridLayout();
            this.s.dt.oInstance.fnDraw(false);
        },
        '_fnColCalc': function () {
            var that = this;
            var iLeftWidth = 0;
            var iRightWidth = 0;
            this.s.aiInnerWidths = [];
            this.s.aiOuterWidths = [];
            $.each(this.s.dt.aoColumns, function (i, col) {
                var th = $(col.nTh);
                var border;
                if (!th.filter(':visible').length) {
                    that.s.aiInnerWidths.push(0);
                    that.s.aiOuterWidths.push(0);
                } else {
                    var iWidth = th.outerWidth();
                    if (that.s.aiOuterWidths.length === 0) {
                        border = $(that.s.dt.nTable).css('border-left-width');
                        iWidth += typeof border === 'string' ? 1 : parseInt(border, 10);
                    }
                    if (that.s.aiOuterWidths.length === that.s.dt.aoColumns.length - 1) {
                        border = $(that.s.dt.nTable).css('border-right-width');
                        iWidth += typeof border === 'string' ? 1 : parseInt(border, 10);
                    }
                    that.s.aiOuterWidths.push(iWidth);
                    that.s.aiInnerWidths.push(th.width());
                    if (i < that.s.iLeftColumns) {
                        iLeftWidth += iWidth;
                    }
                    if (that.s.iTableColumns - that.s.iRightColumns <= i) {
                        iRightWidth += iWidth;
                    }
                }
            });
            this.s.iLeftWidth = iLeftWidth;
            this.s.iRightWidth = iRightWidth;
        },
        '_fnGridSetup': function () {
            var that = this;
            var oOverflow = this._fnDTOverflow();
            var block;
            this.dom.body = this.s.dt.nTable;
            this.dom.header = this.s.dt.nTHead.parentNode;
            this.dom.header.parentNode.parentNode.style.position = 'relative';
            var nSWrapper = $('<div class="DTFC_ScrollWrapper" style="position:relative; clear:both;">' + '<div class="DTFC_LeftWrapper" style="position:absolute; top:0; left:0;">' + '<div class="DTFC_LeftHeadWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div>' + '<div class="DTFC_LeftBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;">' + '<div class="DTFC_LeftBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div>' + '</div>' + '<div class="DTFC_LeftFootWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div>' + '</div>' + '<div class="DTFC_RightWrapper" style="position:absolute; top:0; right:0;">' + '<div class="DTFC_RightHeadWrapper" style="position:relative; top:0; left:0;">' + '<div class="DTFC_RightHeadBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div>' + '</div>' + '<div class="DTFC_RightBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;">' + '<div class="DTFC_RightBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div>' + '</div>' + '<div class="DTFC_RightFootWrapper" style="position:relative; top:0; left:0;">' + '<div class="DTFC_RightFootBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div>' + '</div>' + '</div>' + '</div>')[0];
            var nLeft = nSWrapper.childNodes[0];
            var nRight = nSWrapper.childNodes[1];
            this.dom.grid.dt.parentNode.insertBefore(nSWrapper, this.dom.grid.dt);
            nSWrapper.appendChild(this.dom.grid.dt);
            this.dom.grid.wrapper = nSWrapper;
            if (this.s.iLeftColumns > 0) {
                this.dom.grid.left.wrapper = nLeft;
                this.dom.grid.left.head = nLeft.childNodes[0];
                this.dom.grid.left.body = nLeft.childNodes[1];
                this.dom.grid.left.liner = $('div.DTFC_LeftBodyLiner', nSWrapper)[0];
                nSWrapper.appendChild(nLeft);
            }
            if (this.s.iRightColumns > 0) {
                this.dom.grid.right.wrapper = nRight;
                this.dom.grid.right.head = nRight.childNodes[0];
                this.dom.grid.right.body = nRight.childNodes[1];
                this.dom.grid.right.liner = $('div.DTFC_RightBodyLiner', nSWrapper)[0];
                nRight.style.right = oOverflow.bar + 'px';
                block = $('div.DTFC_RightHeadBlocker', nSWrapper)[0];
                block.style.width = oOverflow.bar + 'px';
                block.style.right = -oOverflow.bar + 'px';
                this.dom.grid.right.headBlock = block;
                block = $('div.DTFC_RightFootBlocker', nSWrapper)[0];
                block.style.width = oOverflow.bar + 'px';
                block.style.right = -oOverflow.bar + 'px';
                this.dom.grid.right.footBlock = block;
                nSWrapper.appendChild(nRight);
            }
            if (this.s.dt.nTFoot) {
                this.dom.footer = this.s.dt.nTFoot.parentNode;
                if (this.s.iLeftColumns > 0) {
                    this.dom.grid.left.foot = nLeft.childNodes[2];
                }
                if (this.s.iRightColumns > 0) {
                    this.dom.grid.right.foot = nRight.childNodes[2];
                }
            }
            if (this.s.rtl) {
                $('div.DTFC_RightHeadBlocker', nSWrapper).css({
                    left: -oOverflow.bar + 'px',
                    right: ''
                });
            }
        },
        '_fnGridLayout': function () {
            var that = this;
            var oGrid = this.dom.grid;
            var iWidth = $(oGrid.wrapper).width();
            var iBodyHeight = $(this.s.dt.nTable.parentNode).outerHeight();
            var iFullHeight = $(this.s.dt.nTable.parentNode.parentNode).outerHeight();
            var oOverflow = this._fnDTOverflow();
            var iLeftWidth = this.s.iLeftWidth;
            var iRightWidth = this.s.iRightWidth;
            var rtl = $(this.dom.body).css('direction') === 'rtl';
            var wrapper;
            var scrollbarAdjust = function (node, width) {
                if (!oOverflow.bar) {
                    node.style.width = width + 20 + 'px';
                    node.style.paddingRight = '20px';
                    node.style.boxSizing = 'border-box';
                } else if (that._firefoxScrollError()) {
                    if ($(node).height() > 34) {
                        node.style.width = width + oOverflow.bar + 'px';
                    }
                } else {
                    node.style.width = width + oOverflow.bar + 'px';
                }
            };
            if (oOverflow.x) {
                iBodyHeight -= oOverflow.bar;
            }
            oGrid.wrapper.style.height = iFullHeight + 'px';
            if (this.s.iLeftColumns > 0) {
                wrapper = oGrid.left.wrapper;
                wrapper.style.width = iLeftWidth + 'px';
                wrapper.style.height = '1px';
                if (rtl) {
                    wrapper.style.left = '';
                    wrapper.style.right = 0;
                } else {
                    wrapper.style.left = 0;
                    wrapper.style.right = '';
                }
                oGrid.left.body.style.height = iBodyHeight + 'px';
                if (oGrid.left.foot) {
                    oGrid.left.foot.style.top = (oOverflow.x ? oOverflow.bar : 0) + 'px';
                }
                scrollbarAdjust(oGrid.left.liner, iLeftWidth);
                oGrid.left.liner.style.height = iBodyHeight + 'px';
                oGrid.left.liner.style.maxHeight = iBodyHeight + 'px';
            }
            if (this.s.iRightColumns > 0) {
                wrapper = oGrid.right.wrapper;
                wrapper.style.width = iRightWidth + 'px';
                wrapper.style.height = '1px';
                if (this.s.rtl) {
                    wrapper.style.left = oOverflow.y ? oOverflow.bar + 'px' : 0;
                    wrapper.style.right = '';
                } else {
                    wrapper.style.left = '';
                    wrapper.style.right = oOverflow.y ? oOverflow.bar + 'px' : 0;
                }
                oGrid.right.body.style.height = iBodyHeight + 'px';
                if (oGrid.right.foot) {
                    oGrid.right.foot.style.top = (oOverflow.x ? oOverflow.bar : 0) + 'px';
                }
                scrollbarAdjust(oGrid.right.liner, iRightWidth);
                oGrid.right.liner.style.height = iBodyHeight + 'px';
                oGrid.right.liner.style.maxHeight = iBodyHeight + 'px';
                oGrid.right.headBlock.style.display = oOverflow.y ? 'block' : 'none';
                oGrid.right.footBlock.style.display = oOverflow.y ? 'block' : 'none';
            }
        },
        '_fnDTOverflow': function () {
            var nTable = this.s.dt.nTable;
            var nTableScrollBody = nTable.parentNode;
            var out = {
                'x': false,
                'y': false,
                'bar': this.s.dt.oScroll.iBarWidth
            };
            if (nTable.offsetWidth > nTableScrollBody.clientWidth) {
                out.x = true;
            }
            if (nTable.offsetHeight > nTableScrollBody.clientHeight) {
                out.y = true;
            }
            return out;
        },
        '_fnDraw': function (bAll) {
            this._fnGridLayout();
            this._fnCloneLeft(bAll);
            this._fnCloneRight(bAll);
            if (this.s.fnDrawCallback !== null) {
                this.s.fnDrawCallback.call(this, this.dom.clone.left, this.dom.clone.right);
            }
            $(this).trigger('draw.dtfc', {
                'leftClone': this.dom.clone.left,
                'rightClone': this.dom.clone.right
            });
        },
        '_fnCloneRight': function (bAll) {
            if (this.s.iRightColumns <= 0) {
                return;
            }
            var that = this, i, jq, aiColumns = [];
            for (i = this.s.iTableColumns - this.s.iRightColumns; i < this.s.iTableColumns; i++) {
                if (this.s.dt.aoColumns[i].bVisible) {
                    aiColumns.push(i);
                }
            }
            this._fnClone(this.dom.clone.right, this.dom.grid.right, aiColumns, bAll);
        },
        '_fnCloneLeft': function (bAll) {
            if (this.s.iLeftColumns <= 0) {
                return;
            }
            var that = this, i, jq, aiColumns = [];
            for (i = 0; i < this.s.iLeftColumns; i++) {
                if (this.s.dt.aoColumns[i].bVisible) {
                    aiColumns.push(i);
                }
            }
            this._fnClone(this.dom.clone.left, this.dom.grid.left, aiColumns, bAll);
        },
        '_fnCopyLayout': function (aoOriginal, aiColumns, events) {
            var aReturn = [];
            var aClones = [];
            var aCloned = [];
            for (var i = 0, iLen = aoOriginal.length; i < iLen; i++) {
                var aRow = [];
                aRow.nTr = $(aoOriginal[i].nTr).clone(events, false)[0];
                for (var j = 0, jLen = this.s.iTableColumns; j < jLen; j++) {
                    if ($.inArray(j, aiColumns) === -1) {
                        continue;
                    }
                    var iCloned = $.inArray(aoOriginal[i][j].cell, aCloned);
                    if (iCloned === -1) {
                        var nClone = $(aoOriginal[i][j].cell).clone(events, false)[0];
                        aClones.push(nClone);
                        aCloned.push(aoOriginal[i][j].cell);
                        aRow.push({
                            'cell': nClone,
                            'unique': aoOriginal[i][j].unique
                        });
                    } else {
                        aRow.push({
                            'cell': aClones[iCloned],
                            'unique': aoOriginal[i][j].unique
                        });
                    }
                }
                aReturn.push(aRow);
            }
            return aReturn;
        },
        '_fnClone': function (oClone, oGrid, aiColumns, bAll) {
            var that = this, i, iLen, j, jLen, jq, nTarget, iColumn, nClone, iIndex, aoCloneLayout, jqCloneThead, aoFixedHeader, dt = this.s.dt;
            if (bAll) {
                $(oClone.header).remove();
                oClone.header = $(this.dom.header).clone(true, false)[0];
                oClone.header.className += ' DTFC_Cloned';
                oClone.header.style.width = '100%';
                oGrid.head.appendChild(oClone.header);
                aoCloneLayout = this._fnCopyLayout(dt.aoHeader, aiColumns, true);
                jqCloneThead = $('>thead', oClone.header);
                jqCloneThead.empty();
                for (i = 0, iLen = aoCloneLayout.length; i < iLen; i++) {
                    jqCloneThead[0].appendChild(aoCloneLayout[i].nTr);
                }
                dt.oApi._fnDrawHead(dt, aoCloneLayout, true);
            } else {
                aoCloneLayout = this._fnCopyLayout(dt.aoHeader, aiColumns, false);
                aoFixedHeader = [];
                dt.oApi._fnDetectHeader(aoFixedHeader, $('>thead', oClone.header)[0]);
                for (i = 0, iLen = aoCloneLayout.length; i < iLen; i++) {
                    for (j = 0, jLen = aoCloneLayout[i].length; j < jLen; j++) {
                        aoFixedHeader[i][j].cell.className = aoCloneLayout[i][j].cell.className;
                        $('span.DataTables_sort_icon', aoFixedHeader[i][j].cell).each(function () {
                            this.className = $('span.DataTables_sort_icon', aoCloneLayout[i][j].cell)[0].className;
                        });
                    }
                }
            }
            this._fnEqualiseHeights('thead', this.dom.header, oClone.header);
            if (this.s.sHeightMatch == 'auto') {
                $('>tbody>tr', that.dom.body).css('height', 'auto');
            }
            if (oClone.body !== null) {
                $(oClone.body).remove();
                oClone.body = null;
            }
            oClone.body = $(this.dom.body).clone(true)[0];
            oClone.body.className += ' DTFC_Cloned';
            oClone.body.style.paddingBottom = dt.oScroll.iBarWidth + 'px';
            oClone.body.style.marginBottom = dt.oScroll.iBarWidth * 2 + 'px';
            if (oClone.body.getAttribute('id') !== null) {
                oClone.body.removeAttribute('id');
            }
            $('>thead>tr', oClone.body).empty();
            $('>tfoot', oClone.body).remove();
            var nBody = $('tbody', oClone.body)[0];
            $(nBody).empty();
            if (dt.aiDisplay.length > 0) {
                var nInnerThead = $('>thead>tr', oClone.body)[0];
                for (iIndex = 0; iIndex < aiColumns.length; iIndex++) {
                    iColumn = aiColumns[iIndex];
                    nClone = $(dt.aoColumns[iColumn].nTh).clone(true)[0];
                    nClone.innerHTML = '';
                    var oStyle = nClone.style;
                    oStyle.paddingTop = '0';
                    oStyle.paddingBottom = '0';
                    oStyle.borderTopWidth = '0';
                    oStyle.borderBottomWidth = '0';
                    oStyle.height = 0;
                    oStyle.width = that.s.aiInnerWidths[iColumn] + 'px';
                    nInnerThead.appendChild(nClone);
                }
                $('>tbody>tr', that.dom.body).each(function (z) {
                    var i = that.s.dt.oFeatures.bServerSide === false ? that.s.dt.aiDisplay[that.s.dt._iDisplayStart + z] : z;
                    var aTds = that.s.dt.aoData[i].anCells || $(this).children('td, th');
                    var n = this.cloneNode(false);
                    n.removeAttribute('id');
                    n.setAttribute('data-dt-row', i);
                    for (iIndex = 0; iIndex < aiColumns.length; iIndex++) {
                        iColumn = aiColumns[iIndex];
                        if (aTds.length > 0) {
                            nClone = $(aTds[iColumn]).clone(true, true)[0];
                            nClone.removeAttribute('id');
                            nClone.setAttribute('data-dt-row', i);
                            nClone.setAttribute('data-dt-column', dt.oApi._fnVisibleToColumnIndex(dt, iColumn));
                            n.appendChild(nClone);
                        }
                    }
                    nBody.appendChild(n);
                });
            } else {
                $('>tbody>tr', that.dom.body).each(function (z) {
                    nClone = this.cloneNode(true);
                    nClone.className += ' DTFC_NoData';
                    $('td', nClone).html('');
                    nBody.appendChild(nClone);
                });
            }
            oClone.body.style.width = '100%';
            oClone.body.style.margin = '0';
            oClone.body.style.padding = '0';
            if (dt.oScroller !== undefined) {
                var scrollerForcer = dt.oScroller.dom.force;
                if (!oGrid.forcer) {
                    oGrid.forcer = scrollerForcer.cloneNode(true);
                    oGrid.liner.appendChild(oGrid.forcer);
                } else {
                    oGrid.forcer.style.height = scrollerForcer.style.height;
                }
            }
            oGrid.liner.appendChild(oClone.body);
            this._fnEqualiseHeights('tbody', that.dom.body, oClone.body);
            if (dt.nTFoot !== null) {
                if (bAll) {
                    if (oClone.footer !== null) {
                        oClone.footer.parentNode.removeChild(oClone.footer);
                    }
                    oClone.footer = $(this.dom.footer).clone(true, true)[0];
                    oClone.footer.className += ' DTFC_Cloned';
                    oClone.footer.style.width = '100%';
                    oGrid.foot.appendChild(oClone.footer);
                    aoCloneLayout = this._fnCopyLayout(dt.aoFooter, aiColumns, true);
                    var jqCloneTfoot = $('>tfoot', oClone.footer);
                    jqCloneTfoot.empty();
                    for (i = 0, iLen = aoCloneLayout.length; i < iLen; i++) {
                        jqCloneTfoot[0].appendChild(aoCloneLayout[i].nTr);
                    }
                    dt.oApi._fnDrawHead(dt, aoCloneLayout, true);
                } else {
                    aoCloneLayout = this._fnCopyLayout(dt.aoFooter, aiColumns, false);
                    var aoCurrFooter = [];
                    dt.oApi._fnDetectHeader(aoCurrFooter, $('>tfoot', oClone.footer)[0]);
                    for (i = 0, iLen = aoCloneLayout.length; i < iLen; i++) {
                        for (j = 0, jLen = aoCloneLayout[i].length; j < jLen; j++) {
                            aoCurrFooter[i][j].cell.className = aoCloneLayout[i][j].cell.className;
                        }
                    }
                }
                this._fnEqualiseHeights('tfoot', this.dom.footer, oClone.footer);
            }
            var anUnique = dt.oApi._fnGetUniqueThs(dt, $('>thead', oClone.header)[0]);
            $(anUnique).each(function (i) {
                iColumn = aiColumns[i];
                this.style.width = that.s.aiInnerWidths[iColumn] + 'px';
            });
            if (that.s.dt.nTFoot !== null) {
                anUnique = dt.oApi._fnGetUniqueThs(dt, $('>tfoot', oClone.footer)[0]);
                $(anUnique).each(function (i) {
                    iColumn = aiColumns[i];
                    this.style.width = that.s.aiInnerWidths[iColumn] + 'px';
                });
            }
        },
        '_fnGetTrNodes': function (nIn) {
            var aOut = [];
            for (var i = 0, iLen = nIn.childNodes.length; i < iLen; i++) {
                if (nIn.childNodes[i].nodeName.toUpperCase() == 'TR') {
                    aOut.push(nIn.childNodes[i]);
                }
            }
            return aOut;
        },
        '_fnEqualiseHeights': function (nodeName, original, clone) {
            if (this.s.sHeightMatch == 'none' && nodeName !== 'thead' && nodeName !== 'tfoot') {
                return;
            }
            var that = this, i, iLen, iHeight, iHeight2, iHeightOriginal, iHeightClone, rootOriginal = original.getElementsByTagName(nodeName)[0], rootClone = clone.getElementsByTagName(nodeName)[0], jqBoxHack = $('>' + nodeName + '>tr:eq(0)', original).children(':first'), iBoxHack = jqBoxHack.outerHeight() - jqBoxHack.height(), anOriginal = this._fnGetTrNodes(rootOriginal), anClone = this._fnGetTrNodes(rootClone), heights = [];
            for (i = 0, iLen = anClone.length; i < iLen; i++) {
                iHeightOriginal = anOriginal[i].offsetHeight;
                iHeightClone = anClone[i].offsetHeight;
                iHeight = iHeightClone > iHeightOriginal ? iHeightClone : iHeightOriginal;
                if (this.s.sHeightMatch == 'semiauto') {
                    anOriginal[i]._DTTC_iHeight = iHeight;
                }
                heights.push(iHeight);
            }
            for (i = 0, iLen = anClone.length; i < iLen; i++) {
                anClone[i].style.height = heights[i] + 'px';
                anOriginal[i].style.height = heights[i] + 'px';
            }
        },
        _firefoxScrollError: function () {
            if (_firefoxScroll === undefined) {
                var test = $('<div/>').css({
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    height: 10,
                    width: 50,
                    overflow: 'scroll'
                }).appendTo('body');
                _firefoxScroll = test[0].clientWidth === test[0].offsetWidth && this._fnDTOverflow().bar !== 0;
                test.remove();
            }
            return _firefoxScroll;
        }
    });
    FixedColumns.defaults = {
        'iLeftColumns': 1,
        'iRightColumns': 0,
        'fnDrawCallback': null,
        'sHeightMatch': 'semiauto'
    };
    FixedColumns.version = '3.2.3';
    DataTable.Api.register('fixedColumns()', function () {
        return this;
    });
    DataTable.Api.register('fixedColumns().update()', function () {
        return this.iterator('table', function (ctx) {
            if (ctx._oFixedColumns) {
                ctx._oFixedColumns.fnUpdate();
            }
        });
    });
    DataTable.Api.register('fixedColumns().relayout()', function () {
        return this.iterator('table', function (ctx) {
            if (ctx._oFixedColumns) {
                ctx._oFixedColumns.fnRedrawLayout();
            }
        });
    });
    DataTable.Api.register('rows().recalcHeight()', function () {
        return this.iterator('row', function (ctx, idx) {
            if (ctx._oFixedColumns) {
                ctx._oFixedColumns.fnRecalculateHeight(this.row(idx).node());
            }
        });
    });
    DataTable.Api.register('fixedColumns().rowIndex()', function (row) {
        row = $(row);
        return row.parents('.DTFC_Cloned').length ? this.rows({ page: 'current' }).indexes()[row.index()] : this.row(row).index();
    });
    DataTable.Api.register('fixedColumns().cellIndex()', function (cell) {
        cell = $(cell);
        if (cell.parents('.DTFC_Cloned').length) {
            var rowClonedIdx = cell.parent().index();
            var rowIdx = this.rows({ page: 'current' }).indexes()[rowClonedIdx];
            var columnIdx;
            if (cell.parents('.DTFC_LeftWrapper').length) {
                columnIdx = cell.index();
            } else {
                var columns = this.columns().flatten().length;
                columnIdx = columns - this.context[0]._oFixedColumns.s.iRightColumns + cell.index();
            }
            return {
                row: rowIdx,
                column: this.column.index('toData', columnIdx),
                columnVisible: columnIdx
            };
        } else {
            return this.cell(cell).index();
        }
    });
    $(document).on('init.dt.fixedColumns', function (e, settings) {
        if (e.namespace !== 'dt') {
            return;
        }
        var init = settings.oInit.fixedColumns;
        var defaults = DataTable.defaults.fixedColumns;
        if (init || defaults) {
            var opts = $.extend({}, init, defaults);
            if (init !== false) {
                new FixedColumns(settings, opts);
            }
        }
    });
    $.fn.dataTable.FixedColumns = FixedColumns;
    $.fn.DataTable.FixedColumns = FixedColumns;
    return FixedColumns;
}));
define('table', [
    'jquery',
    'datatables',
    'datatables.bootstrap',
    'datatables.buttons',
    'buttons.html5',
    'buttons.bootstrap',
    'datatables.fixedColumns'
], function ($) {
    $.extend(true, $.fn.dataTable.defaults, {
        language: {
            'sProcessing': '处理中...',
            'sLengthMenu': '显示 _MENU_ 项结果',
            'sZeroRecords': '没有匹配结果',
            'sInfo': '显示第 _START_ 至 _END_ 项结果\uFF0C共 _TOTAL_ 项',
            'sInfoEmpty': '显示第 0 至 0 项结果\uFF0C共 0 项',
            'sInfoFiltered': '(由 _MAX_ 项结果过滤)',
            'sInfoPostFix': '',
            'sSearch': '搜索:',
            'sUrl': '',
            'sEmptyTable': '表中数据为空',
            'sLoadingRecords': '载入中...',
            'sInfoThousands': ',',
            'oPaginate': {
                'sFirst': '首页',
                'sPrevious': '上页',
                'sNext': '下页',
                'sLast': '末页'
            },
            'oAria': {
                'sSortAscending': ': 以升序排列此列',
                'sSortDescending': ': 以降序排列此列'
            }
        },
        dom: '<"table-tool-bar clearfix"Blf>rt<"clearfix"ip>'
    });
});
define('router-config', [
    'angular',
    'require',
    'angular-route',
    'appDirectives',
    'appServices',
    'appFactorys',
    'appTemplates',
    'appController',
    'jquery',
    'table'
], function (angular, require) {
    var app = angular.module('webapp', [
        'ngRoute',
        'app.directives',
        'app.services',
        'app.factorys',
        'app.template',
        'app.controller'
    ]);
    app.run(function ($rootScope, $location, dropdownMenuScrollbar) {
        $rootScope.$on('$routeChangeStart', function (evt, next, current) {
            $('.daterangepicker').remove();
            $rootScope.path = $location.$$path;
            console.log($rootScope.path);
        });
        $rootScope.$on('$routeChangeSuccess', function (evt, next, current) {
            if (current) {
                $rootScope.prevPath = current.originalPath;
            } else {
                $rootScope.prevPath = '/event';
            }
        });
    });
    app.directive('repeatFinish', function ($timeout) {
        return {
            link: function (scope, element, attr) {
                if (scope.$last == true) {
                    var finish = attr.repeatFinish;
                    $timeout(function () {
                        scope.$eval(finish);
                    }, 0);
                }
            }
        };
    });
    app.directive('ngIfFinish', function ($timeout) {
        return {
            link: function (scope, element, attr) {
                $timeout(function () {
                    if ($(element).is(':last-child')) {
                        var finish = attr.ngIfFinish;
                        $timeout(function () {
                            scope.$eval(finish);
                        }, 0);
                    }
                }, 0);
            }
        };
    });
    app.filter('trustHtml', function ($sce) {
        return function (input) {
            return $sce.trustAsHtml(input);
        };
    });
    app.filter('hideLeft', function () {
        return function (inputArray, hideNum) {
            var tmp = [];
            for (var i = 0; i < inputArray.length; i++) {
                if (i >= hideNum) {
                    tmp.push(inputArray[i]);
                }
            }
            return tmp;
        };
    });
    app.service('autuHeight', function ($rootScope) {
        return function () {
            var blockHeight = $('.module-block').height();
            $rootScope.wHeight = $(window).height();
            $rootScope.cHeight = $rootScope.wHeight - 50 - 40;
            if (blockHeight < $rootScope.cHeight) {
                console.log(blockHeight);
                $('.module-block').height($rootScope.cHeight);
            }
        };
    });
    app.config([
        '$routeProvider',
        '$controllerProvider',
        function ($routeProvider, $controllerProvider) {
            var routeMap = {
                '/player': {
                    path: 'static/js/controller/player.js?v=' + stamp,
                    controller: 'playerController'
                },
                '/kpi': {
                    path: 'static/js/controller/kpi.js?v=' + stamp,
                    controller: 'kpiController'
                },
                '/delivery': {
                    path: 'static/js/controller/delivery.js?v=' + stamp,
                    controller: 'deliveryController'
                },
                '/server': {
                    path: 'static/js/controller/server.js?v=' + stamp,
                    controller: 'serverController'
                },
                '/inform': {
                    path: 'static/js/controller/inform.js?v=' + stamp,
                    controller: 'informController'
                },
                '/game': {
                    path: 'static/js/controller/game.js?v=' + stamp,
                    controller: 'gameController'
                },
                '/console': {
                    path: 'static/js/controller/console.js?v=' + stamp,
                    controller: 'consoleController'
                },
                '/user': {
                    path: 'static/js/controller/user.js?v=' + stamp,
                    controller: 'userController'
                }
            };
            var defaultRoute = '/player';
            $routeProvider.otherwise({ redirectTo: defaultRoute });
            for (var key in routeMap) {
                $routeProvider.when(key, {
                    template: '',
                    controller: routeMap[key].controller,
                    resolve: { keyName: requireModule(routeMap[key].path, routeMap[key].controller, key) }
                });
            }
            function requireModule(path, controller, key) {
                return function ($route, $q, $templateCache) {
                    var deferred = $q.defer();
                    require([path], function (ret) {
                        $controllerProvider.register(controller, ret.controller);
                        $route.current.template = $templateCache.get(getTplName(key) + '.html');
                        deferred.resolve();
                    });
                    return deferred.promise;
                };
            }
            ;
            function getTplName(tpl) {
                var tmp = tpl.split('/');
                var name = '';
                tmp.shift();
                if (tmp.length > 1) {
                    name = tmp.join('-');
                } else {
                    name = tmp[0];
                }
                return name;
            }
            ;
        }
    ]);
    return app;
});
;
(function (window, factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define('waves', [], function () {
            return factory.apply(window);
        });
    } else if (typeof exports === 'object') {
        module.exports = factory.call(window);
    } else {
        window.Waves = factory.call(window);
    }
}(typeof global === 'object' ? global : this, function () {
    'use strict';
    var Waves = Waves || {};
    var $$ = document.querySelectorAll.bind(document);
    var toString = Object.prototype.toString;
    var isTouchAvailable = 'ontouchstart' in window;
    function isWindow(obj) {
        return obj !== null && obj === obj.window;
    }
    function getWindow(elem) {
        return isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    }
    function isObject(value) {
        var type = typeof value;
        return type === 'function' || type === 'object' && !!value;
    }
    function isDOMNode(obj) {
        return isObject(obj) && obj.nodeType > 0;
    }
    function getWavesElements(nodes) {
        var stringRepr = toString.call(nodes);
        if (stringRepr === '[object String]') {
            return $$(nodes);
        } else if (isObject(nodes) && /^\[object (Array|HTMLCollection|NodeList|Object)\]$/.test(stringRepr) && nodes.hasOwnProperty('length')) {
            return nodes;
        } else if (isDOMNode(nodes)) {
            return [nodes];
        }
        return [];
    }
    function offset(elem) {
        var docElem, win, box = {
                top: 0,
                left: 0
            }, doc = elem && elem.ownerDocument;
        docElem = doc.documentElement;
        if (typeof elem.getBoundingClientRect !== typeof undefined) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow(doc);
        return {
            top: box.top + win.pageYOffset - docElem.clientTop,
            left: box.left + win.pageXOffset - docElem.clientLeft
        };
    }
    function convertStyle(styleObj) {
        var style = '';
        for (var prop in styleObj) {
            if (styleObj.hasOwnProperty(prop)) {
                style += prop + ':' + styleObj[prop] + ';';
            }
        }
        return style;
    }
    var Effect = {
        duration: 750,
        delay: 200,
        show: function (e, element, velocity) {
            if (e.button === 2) {
                return false;
            }
            element = element || this;
            var ripple = document.createElement('div');
            ripple.className = 'waves-ripple waves-rippling';
            element.appendChild(ripple);
            var pos = offset(element);
            var relativeY = 0;
            var relativeX = 0;
            if ('touches' in e && e.touches.length) {
                relativeY = e.touches[0].pageY - pos.top;
                relativeX = e.touches[0].pageX - pos.left;
            } else {
                relativeY = e.pageY - pos.top;
                relativeX = e.pageX - pos.left;
            }
            relativeX = relativeX >= 0 ? relativeX : 0;
            relativeY = relativeY >= 0 ? relativeY : 0;
            var scale = 'scale(' + element.clientWidth / 100 * 3 + ')';
            var translate = 'translate(0,0)';
            if (velocity) {
                translate = 'translate(' + velocity.x + 'px, ' + velocity.y + 'px)';
            }
            ripple.setAttribute('data-hold', Date.now());
            ripple.setAttribute('data-x', relativeX);
            ripple.setAttribute('data-y', relativeY);
            ripple.setAttribute('data-scale', scale);
            ripple.setAttribute('data-translate', translate);
            var rippleStyle = {
                top: relativeY + 'px',
                left: relativeX + 'px'
            };
            ripple.classList.add('waves-notransition');
            ripple.setAttribute('style', convertStyle(rippleStyle));
            ripple.classList.remove('waves-notransition');
            rippleStyle['-webkit-transform'] = scale + ' ' + translate;
            rippleStyle['-moz-transform'] = scale + ' ' + translate;
            rippleStyle['-ms-transform'] = scale + ' ' + translate;
            rippleStyle['-o-transform'] = scale + ' ' + translate;
            rippleStyle.transform = scale + ' ' + translate;
            rippleStyle.opacity = '1';
            var duration = e.type === 'mousemove' ? 2500 : Effect.duration;
            rippleStyle['-webkit-transition-duration'] = duration + 'ms';
            rippleStyle['-moz-transition-duration'] = duration + 'ms';
            rippleStyle['-o-transition-duration'] = duration + 'ms';
            rippleStyle['transition-duration'] = duration + 'ms';
            ripple.setAttribute('style', convertStyle(rippleStyle));
        },
        hide: function (e, element) {
            element = element || this;
            var ripples = element.getElementsByClassName('waves-rippling');
            for (var i = 0, len = ripples.length; i < len; i++) {
                removeRipple(e, element, ripples[i]);
            }
        }
    };
    var TagWrapper = {
        input: function (element) {
            var parent = element.parentNode;
            if (parent.tagName.toLowerCase() === 'i' && parent.classList.contains('waves-effect')) {
                return;
            }
            var wrapper = document.createElement('i');
            wrapper.className = element.className + ' waves-input-wrapper';
            element.className = 'waves-button-input';
            parent.replaceChild(wrapper, element);
            wrapper.appendChild(element);
            var elementStyle = window.getComputedStyle(element, null);
            var color = elementStyle.color;
            var backgroundColor = elementStyle.backgroundColor;
            wrapper.setAttribute('style', 'color:' + color + ';background:' + backgroundColor);
            element.setAttribute('style', 'background-color:rgba(0,0,0,0);');
        },
        img: function (element) {
            var parent = element.parentNode;
            if (parent.tagName.toLowerCase() === 'i' && parent.classList.contains('waves-effect')) {
                return;
            }
            var wrapper = document.createElement('i');
            parent.replaceChild(wrapper, element);
            wrapper.appendChild(element);
        }
    };
    function removeRipple(e, el, ripple) {
        if (!ripple) {
            return;
        }
        ripple.classList.remove('waves-rippling');
        var relativeX = ripple.getAttribute('data-x');
        var relativeY = ripple.getAttribute('data-y');
        var scale = ripple.getAttribute('data-scale');
        var translate = ripple.getAttribute('data-translate');
        var diff = Date.now() - Number(ripple.getAttribute('data-hold'));
        var delay = 350 - diff;
        if (delay < 0) {
            delay = 0;
        }
        if (e.type === 'mousemove') {
            delay = 150;
        }
        var duration = e.type === 'mousemove' ? 2500 : Effect.duration;
        setTimeout(function () {
            var style = {
                top: relativeY + 'px',
                left: relativeX + 'px',
                opacity: '0',
                '-webkit-transition-duration': duration + 'ms',
                '-moz-transition-duration': duration + 'ms',
                '-o-transition-duration': duration + 'ms',
                'transition-duration': duration + 'ms',
                '-webkit-transform': scale + ' ' + translate,
                '-moz-transform': scale + ' ' + translate,
                '-ms-transform': scale + ' ' + translate,
                '-o-transform': scale + ' ' + translate,
                'transform': scale + ' ' + translate
            };
            ripple.setAttribute('style', convertStyle(style));
            setTimeout(function () {
                try {
                    el.removeChild(ripple);
                } catch (e) {
                    return false;
                }
            }, duration);
        }, delay);
    }
    var TouchHandler = {
        touches: 0,
        allowEvent: function (e) {
            var allow = true;
            if (/^(mousedown|mousemove)$/.test(e.type) && TouchHandler.touches) {
                allow = false;
            }
            return allow;
        },
        registerEvent: function (e) {
            var eType = e.type;
            if (eType === 'touchstart') {
                TouchHandler.touches += 1;
            } else if (/^(touchend|touchcancel)$/.test(eType)) {
                setTimeout(function () {
                    if (TouchHandler.touches) {
                        TouchHandler.touches -= 1;
                    }
                }, 500);
            }
        }
    };
    function getWavesEffectElement(e) {
        if (TouchHandler.allowEvent(e) === false) {
            return null;
        }
        var element = null;
        var target = e.target || e.srcElement;
        while (target.parentElement) {
            if (!(target instanceof SVGElement) && target.classList.contains('waves-effect')) {
                element = target;
                break;
            }
            target = target.parentElement;
        }
        return element;
    }
    function showEffect(e) {
        var element = getWavesEffectElement(e);
        if (element !== null) {
            if (element.disabled || element.getAttribute('disabled') || element.classList.contains('disabled')) {
                return;
            }
            TouchHandler.registerEvent(e);
            if (e.type === 'touchstart' && Effect.delay) {
                var hidden = false;
                var timer = setTimeout(function () {
                    timer = null;
                    Effect.show(e, element);
                }, Effect.delay);
                var hideEffect = function (hideEvent) {
                    if (timer) {
                        clearTimeout(timer);
                        timer = null;
                        Effect.show(e, element);
                    }
                    if (!hidden) {
                        hidden = true;
                        Effect.hide(hideEvent, element);
                    }
                };
                var touchMove = function (moveEvent) {
                    if (timer) {
                        clearTimeout(timer);
                        timer = null;
                    }
                    hideEffect(moveEvent);
                };
                element.addEventListener('touchmove', touchMove, false);
                element.addEventListener('touchend', hideEffect, false);
                element.addEventListener('touchcancel', hideEffect, false);
            } else {
                Effect.show(e, element);
                if (isTouchAvailable) {
                    element.addEventListener('touchend', Effect.hide, false);
                    element.addEventListener('touchcancel', Effect.hide, false);
                }
                element.addEventListener('mouseup', Effect.hide, false);
                element.addEventListener('mouseleave', Effect.hide, false);
            }
        }
    }
    Waves.init = function (options) {
        var body = document.body;
        options = options || {};
        if ('duration' in options) {
            Effect.duration = options.duration;
        }
        if ('delay' in options) {
            Effect.delay = options.delay;
        }
        if (isTouchAvailable) {
            body.addEventListener('touchstart', showEffect, false);
            body.addEventListener('touchcancel', TouchHandler.registerEvent, false);
            body.addEventListener('touchend', TouchHandler.registerEvent, false);
        }
        body.addEventListener('mousedown', showEffect, false);
    };
    Waves.attach = function (elements, classes) {
        elements = getWavesElements(elements);
        if (toString.call(classes) === '[object Array]') {
            classes = classes.join(' ');
        }
        classes = classes ? ' ' + classes : '';
        var element, tagName;
        for (var i = 0, len = elements.length; i < len; i++) {
            element = elements[i];
            tagName = element.tagName.toLowerCase();
            if ([
                    'input',
                    'img'
                ].indexOf(tagName) !== -1) {
                TagWrapper[tagName](element);
                element = element.parentElement;
            }
            if (element.className.indexOf('waves-effect') === -1) {
                element.className += ' waves-effect' + classes;
            }
        }
    };
    Waves.ripple = function (elements, options) {
        elements = getWavesElements(elements);
        var elementsLen = elements.length;
        options = options || {};
        options.wait = options.wait || 0;
        options.position = options.position || null;
        if (elementsLen) {
            var element, pos, off, centre = {}, i = 0;
            var mousedown = {
                type: 'mousedown',
                button: 1
            };
            var hideRipple = function (mouseup, element) {
                return function () {
                    Effect.hide(mouseup, element);
                };
            };
            for (; i < elementsLen; i++) {
                element = elements[i];
                pos = options.position || {
                    x: element.clientWidth / 2,
                    y: element.clientHeight / 2
                };
                off = offset(element);
                centre.x = off.left + pos.x;
                centre.y = off.top + pos.y;
                mousedown.pageX = centre.x;
                mousedown.pageY = centre.y;
                Effect.show(mousedown, element);
                if (options.wait >= 0 && options.wait !== null) {
                    var mouseup = {
                        type: 'mouseup',
                        button: 1
                    };
                    setTimeout(hideRipple(mouseup, element), options.wait);
                }
            }
        }
    };
    Waves.calm = function (elements) {
        elements = getWavesElements(elements);
        var mouseup = {
            type: 'mouseup',
            button: 1
        };
        for (var i = 0, len = elements.length; i < len; i++) {
            Effect.hide(mouseup, elements[i]);
        }
    };
    Waves.displayEffect = function (options) {
        console.error('Waves.displayEffect() has been deprecated and will be removed in future version. Please use Waves.init() to initialize Waves effect');
        Waves.init(options);
    };
    return Waves;
}));
;
(function () {
    'use strict';
    function FastClick(layer, options) {
        var oldOnClick;
        options = options || {};
        this.trackingClick = false;
        this.trackingClickStart = 0;
        this.targetElement = null;
        this.touchStartX = 0;
        this.touchStartY = 0;
        this.lastTouchIdentifier = 0;
        this.touchBoundary = options.touchBoundary || 10;
        this.layer = layer;
        this.tapDelay = options.tapDelay || 200;
        this.tapTimeout = options.tapTimeout || 700;
        if (FastClick.notNeeded(layer)) {
            return;
        }
        function bind(method, context) {
            return function () {
                return method.apply(context, arguments);
            };
        }
        var methods = [
            'onMouse',
            'onClick',
            'onTouchStart',
            'onTouchMove',
            'onTouchEnd',
            'onTouchCancel'
        ];
        var context = this;
        for (var i = 0, l = methods.length; i < l; i++) {
            context[methods[i]] = bind(context[methods[i]], context);
        }
        if (deviceIsAndroid) {
            layer.addEventListener('mouseover', this.onMouse, true);
            layer.addEventListener('mousedown', this.onMouse, true);
            layer.addEventListener('mouseup', this.onMouse, true);
        }
        layer.addEventListener('click', this.onClick, true);
        layer.addEventListener('touchstart', this.onTouchStart, false);
        layer.addEventListener('touchmove', this.onTouchMove, false);
        layer.addEventListener('touchend', this.onTouchEnd, false);
        layer.addEventListener('touchcancel', this.onTouchCancel, false);
        if (!Event.prototype.stopImmediatePropagation) {
            layer.removeEventListener = function (type, callback, capture) {
                var rmv = Node.prototype.removeEventListener;
                if (type === 'click') {
                    rmv.call(layer, type, callback.hijacked || callback, capture);
                } else {
                    rmv.call(layer, type, callback, capture);
                }
            };
            layer.addEventListener = function (type, callback, capture) {
                var adv = Node.prototype.addEventListener;
                if (type === 'click') {
                    adv.call(layer, type, callback.hijacked || (callback.hijacked = function (event) {
                        if (!event.propagationStopped) {
                            callback(event);
                        }
                    }), capture);
                } else {
                    adv.call(layer, type, callback, capture);
                }
            };
        }
        if (typeof layer.onclick === 'function') {
            oldOnClick = layer.onclick;
            layer.addEventListener('click', function (event) {
                oldOnClick(event);
            }, false);
            layer.onclick = null;
        }
    }
    var deviceIsWindowsPhone = navigator.userAgent.indexOf('Windows Phone') >= 0;
    var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;
    var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;
    var deviceIsIOS4 = deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);
    var deviceIsIOSWithBadTarget = deviceIsIOS && /OS [6-7]_\d/.test(navigator.userAgent);
    var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;
    FastClick.prototype.needsClick = function (target) {
        switch (target.nodeName.toLowerCase()) {
        case 'button':
        case 'select':
        case 'textarea':
            if (target.disabled) {
                return true;
            }
            break;
        case 'input':
            if (deviceIsIOS && target.type === 'file' || target.disabled) {
                return true;
            }
            break;
        case 'label':
        case 'iframe':
        case 'video':
            return true;
        }
        return /\bneedsclick\b/.test(target.className);
    };
    FastClick.prototype.needsFocus = function (target) {
        switch (target.nodeName.toLowerCase()) {
        case 'textarea':
            return true;
        case 'select':
            return !deviceIsAndroid;
        case 'input':
            switch (target.type) {
            case 'button':
            case 'checkbox':
            case 'file':
            case 'image':
            case 'radio':
            case 'submit':
                return false;
            }
            return !target.disabled && !target.readOnly;
        default:
            return /\bneedsfocus\b/.test(target.className);
        }
    };
    FastClick.prototype.sendClick = function (targetElement, event) {
        var clickEvent, touch;
        if (document.activeElement && document.activeElement !== targetElement) {
            document.activeElement.blur();
        }
        touch = event.changedTouches[0];
        clickEvent = document.createEvent('MouseEvents');
        clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
        clickEvent.forwardedTouchEvent = true;
        targetElement.dispatchEvent(clickEvent);
    };
    FastClick.prototype.determineEventType = function (targetElement) {
        if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
            return 'mousedown';
        }
        return 'click';
    };
    FastClick.prototype.focus = function (targetElement) {
        var length;
        if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
            length = targetElement.value.length;
            targetElement.setSelectionRange(length, length);
        } else {
            targetElement.focus();
        }
    };
    FastClick.prototype.updateScrollParent = function (targetElement) {
        var scrollParent, parentElement;
        scrollParent = targetElement.fastClickScrollParent;
        if (!scrollParent || !scrollParent.contains(targetElement)) {
            parentElement = targetElement;
            do {
                if (parentElement.scrollHeight > parentElement.offsetHeight) {
                    scrollParent = parentElement;
                    targetElement.fastClickScrollParent = parentElement;
                    break;
                }
                parentElement = parentElement.parentElement;
            } while (parentElement);
        }
        if (scrollParent) {
            scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
        }
    };
    FastClick.prototype.getTargetElementFromEventTarget = function (eventTarget) {
        if (eventTarget.nodeType === Node.TEXT_NODE) {
            return eventTarget.parentNode;
        }
        return eventTarget;
    };
    FastClick.prototype.onTouchStart = function (event) {
        var targetElement, touch, selection;
        if (event.targetTouches.length > 1) {
            return true;
        }
        targetElement = this.getTargetElementFromEventTarget(event.target);
        touch = event.targetTouches[0];
        if (deviceIsIOS) {
            selection = window.getSelection();
            if (selection.rangeCount && !selection.isCollapsed) {
                return true;
            }
            if (!deviceIsIOS4) {
                if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
                    event.preventDefault();
                    return false;
                }
                this.lastTouchIdentifier = touch.identifier;
                this.updateScrollParent(targetElement);
            }
        }
        this.trackingClick = true;
        this.trackingClickStart = event.timeStamp;
        this.targetElement = targetElement;
        this.touchStartX = touch.pageX;
        this.touchStartY = touch.pageY;
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
            event.preventDefault();
        }
        return true;
    };
    FastClick.prototype.touchHasMoved = function (event) {
        var touch = event.changedTouches[0], boundary = this.touchBoundary;
        if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
            return true;
        }
        return false;
    };
    FastClick.prototype.onTouchMove = function (event) {
        if (!this.trackingClick) {
            return true;
        }
        if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
            this.trackingClick = false;
            this.targetElement = null;
        }
        return true;
    };
    FastClick.prototype.findControl = function (labelElement) {
        if (labelElement.control !== undefined) {
            return labelElement.control;
        }
        if (labelElement.htmlFor) {
            return document.getElementById(labelElement.htmlFor);
        }
        return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
    };
    FastClick.prototype.onTouchEnd = function (event) {
        var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;
        if (!this.trackingClick) {
            return true;
        }
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
            this.cancelNextClick = true;
            return true;
        }
        if (event.timeStamp - this.trackingClickStart > this.tapTimeout) {
            return true;
        }
        this.cancelNextClick = false;
        this.lastClickTime = event.timeStamp;
        trackingClickStart = this.trackingClickStart;
        this.trackingClick = false;
        this.trackingClickStart = 0;
        if (deviceIsIOSWithBadTarget) {
            touch = event.changedTouches[0];
            targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
            targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
        }
        targetTagName = targetElement.tagName.toLowerCase();
        if (targetTagName === 'label') {
            forElement = this.findControl(targetElement);
            if (forElement) {
                this.focus(targetElement);
                if (deviceIsAndroid) {
                    return false;
                }
                targetElement = forElement;
            }
        } else if (this.needsFocus(targetElement)) {
            if (event.timeStamp - trackingClickStart > 100 || deviceIsIOS && window.top !== window && targetTagName === 'input') {
                this.targetElement = null;
                return false;
            }
            this.focus(targetElement);
            this.sendClick(targetElement, event);
            if (!deviceIsIOS || targetTagName !== 'select') {
                this.targetElement = null;
                event.preventDefault();
            }
            return false;
        }
        if (deviceIsIOS && !deviceIsIOS4) {
            scrollParent = targetElement.fastClickScrollParent;
            if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
                return true;
            }
        }
        if (!this.needsClick(targetElement)) {
            event.preventDefault();
            this.sendClick(targetElement, event);
        }
        return false;
    };
    FastClick.prototype.onTouchCancel = function () {
        this.trackingClick = false;
        this.targetElement = null;
    };
    FastClick.prototype.onMouse = function (event) {
        if (!this.targetElement) {
            return true;
        }
        if (event.forwardedTouchEvent) {
            return true;
        }
        if (!event.cancelable) {
            return true;
        }
        if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
            if (event.stopImmediatePropagation) {
                event.stopImmediatePropagation();
            } else {
                event.propagationStopped = true;
            }
            event.stopPropagation();
            event.preventDefault();
            return false;
        }
        return true;
    };
    FastClick.prototype.onClick = function (event) {
        var permitted;
        if (this.trackingClick) {
            this.targetElement = null;
            this.trackingClick = false;
            return true;
        }
        if (event.target.type === 'submit' && event.detail === 0) {
            return true;
        }
        permitted = this.onMouse(event);
        if (!permitted) {
            this.targetElement = null;
        }
        return permitted;
    };
    FastClick.prototype.destroy = function () {
        var layer = this.layer;
        if (deviceIsAndroid) {
            layer.removeEventListener('mouseover', this.onMouse, true);
            layer.removeEventListener('mousedown', this.onMouse, true);
            layer.removeEventListener('mouseup', this.onMouse, true);
        }
        layer.removeEventListener('click', this.onClick, true);
        layer.removeEventListener('touchstart', this.onTouchStart, false);
        layer.removeEventListener('touchmove', this.onTouchMove, false);
        layer.removeEventListener('touchend', this.onTouchEnd, false);
        layer.removeEventListener('touchcancel', this.onTouchCancel, false);
    };
    FastClick.notNeeded = function (layer) {
        var metaViewport;
        var chromeVersion;
        var blackberryVersion;
        var firefoxVersion;
        if (typeof window.ontouchstart === 'undefined') {
            return true;
        }
        chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [
            ,
            0
        ])[1];
        if (chromeVersion) {
            if (deviceIsAndroid) {
                metaViewport = document.querySelector('meta[name=viewport]');
                if (metaViewport) {
                    if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
                        return true;
                    }
                    if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
                        return true;
                    }
                }
            } else {
                return true;
            }
        }
        if (deviceIsBlackBerry10) {
            blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);
            if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
                metaViewport = document.querySelector('meta[name=viewport]');
                if (metaViewport) {
                    if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
                        return true;
                    }
                    if (document.documentElement.scrollWidth <= window.outerWidth) {
                        return true;
                    }
                }
            }
        }
        if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
            return true;
        }
        firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [
            ,
            0
        ])[1];
        if (firefoxVersion >= 27) {
            metaViewport = document.querySelector('meta[name=viewport]');
            if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
                return true;
            }
        }
        if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
            return true;
        }
        return false;
    };
    FastClick.attach = function (layer, options) {
        return new FastClick(layer, options);
    };
    if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
        define('fastclick', [], function () {
            return FastClick;
        });
    } else if (typeof module !== 'undefined' && module.exports) {
        module.exports = FastClick.attach;
        module.exports.FastClick = FastClick;
    } else {
        window.FastClick = FastClick;
    }
}());
;
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('nprogress', [], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.NProgress = factory();
    }
}(this, function () {
    var NProgress = {};
    NProgress.version = '0.2.0';
    var Settings = NProgress.settings = {
        minimum: 0.08,
        easing: 'ease',
        positionUsing: '',
        speed: 400,
        trickle: true,
        trickleRate: 0.02,
        trickleSpeed: 800,
        showSpinner: true,
        barSelector: '[role="bar"]',
        spinnerSelector: '[role="spinner"]',
        parent: 'body',
        template: '<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'
    };
    NProgress.configure = function (options) {
        var key, value;
        for (key in options) {
            value = options[key];
            if (value !== undefined && options.hasOwnProperty(key))
                Settings[key] = value;
        }
        return this;
    };
    NProgress.status = null;
    NProgress.set = function (n) {
        var started = NProgress.isStarted();
        n = clamp(n, Settings.minimum, 1);
        NProgress.status = n === 1 ? null : n;
        var progress = NProgress.render(!started), bar = progress.querySelector(Settings.barSelector), speed = Settings.speed, ease = Settings.easing;
        progress.offsetWidth;
        queue(function (next) {
            if (Settings.positionUsing === '')
                Settings.positionUsing = NProgress.getPositioningCSS();
            css(bar, barPositionCSS(n, speed, ease));
            if (n === 1) {
                css(progress, {
                    transition: 'none',
                    opacity: 1
                });
                progress.offsetWidth;
                setTimeout(function () {
                    css(progress, {
                        transition: 'all ' + speed + 'ms linear',
                        opacity: 0
                    });
                    setTimeout(function () {
                        NProgress.remove();
                        next();
                    }, speed);
                }, speed);
            } else {
                setTimeout(next, speed);
            }
        });
        return this;
    };
    NProgress.isStarted = function () {
        return typeof NProgress.status === 'number';
    };
    NProgress.start = function () {
        if (!NProgress.status)
            NProgress.set(0);
        var work = function () {
            setTimeout(function () {
                if (!NProgress.status)
                    return;
                NProgress.trickle();
                work();
            }, Settings.trickleSpeed);
        };
        if (Settings.trickle)
            work();
        return this;
    };
    NProgress.done = function (force) {
        if (!force && !NProgress.status)
            return this;
        return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);
    };
    NProgress.inc = function (amount) {
        var n = NProgress.status;
        if (!n) {
            return NProgress.start();
        } else {
            if (typeof amount !== 'number') {
                amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);
            }
            n = clamp(n + amount, 0, 0.994);
            return NProgress.set(n);
        }
    };
    NProgress.trickle = function () {
        return NProgress.inc(Math.random() * Settings.trickleRate);
    };
    (function () {
        var initial = 0, current = 0;
        NProgress.promise = function ($promise) {
            if (!$promise || $promise.state() === 'resolved') {
                return this;
            }
            if (current === 0) {
                NProgress.start();
            }
            initial++;
            current++;
            $promise.always(function () {
                current--;
                if (current === 0) {
                    initial = 0;
                    NProgress.done();
                } else {
                    NProgress.set((initial - current) / initial);
                }
            });
            return this;
        };
    }());
    NProgress.render = function (fromStart) {
        if (NProgress.isRendered())
            return document.getElementById('nprogress');
        addClass(document.documentElement, 'nprogress-busy');
        var progress = document.createElement('div');
        progress.id = 'nprogress';
        progress.innerHTML = Settings.template;
        var bar = progress.querySelector(Settings.barSelector), perc = fromStart ? '-100' : toBarPerc(NProgress.status || 0), parent = document.querySelector(Settings.parent), spinner;
        css(bar, {
            transition: 'all 0 linear',
            transform: 'translate3d(' + perc + '%,0,0)'
        });
        if (!Settings.showSpinner) {
            spinner = progress.querySelector(Settings.spinnerSelector);
            spinner && removeElement(spinner);
        }
        if (parent != document.body) {
            addClass(parent, 'nprogress-custom-parent');
        }
        parent.appendChild(progress);
        return progress;
    };
    NProgress.remove = function () {
        removeClass(document.documentElement, 'nprogress-busy');
        removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');
        var progress = document.getElementById('nprogress');
        progress && removeElement(progress);
    };
    NProgress.isRendered = function () {
        return !!document.getElementById('nprogress');
    };
    NProgress.getPositioningCSS = function () {
        var bodyStyle = document.body.style;
        var vendorPrefix = 'WebkitTransform' in bodyStyle ? 'Webkit' : 'MozTransform' in bodyStyle ? 'Moz' : 'msTransform' in bodyStyle ? 'ms' : 'OTransform' in bodyStyle ? 'O' : '';
        if (vendorPrefix + 'Perspective' in bodyStyle) {
            return 'translate3d';
        } else if (vendorPrefix + 'Transform' in bodyStyle) {
            return 'translate';
        } else {
            return 'margin';
        }
    };
    function clamp(n, min, max) {
        if (n < min)
            return min;
        if (n > max)
            return max;
        return n;
    }
    function toBarPerc(n) {
        return (-1 + n) * 100;
    }
    function barPositionCSS(n, speed, ease) {
        var barCSS;
        if (Settings.positionUsing === 'translate3d') {
            barCSS = { transform: 'translate3d(' + toBarPerc(n) + '%,0,0)' };
        } else if (Settings.positionUsing === 'translate') {
            barCSS = { transform: 'translate(' + toBarPerc(n) + '%,0)' };
        } else {
            barCSS = { 'margin-left': toBarPerc(n) + '%' };
        }
        barCSS.transition = 'all ' + speed + 'ms ' + ease;
        return barCSS;
    }
    var queue = function () {
        var pending = [];
        function next() {
            var fn = pending.shift();
            if (fn) {
                fn(next);
            }
        }
        return function (fn) {
            pending.push(fn);
            if (pending.length == 1)
                next();
        };
    }();
    var css = function () {
        var cssPrefixes = [
                'Webkit',
                'O',
                'Moz',
                'ms'
            ], cssProps = {};
        function camelCase(string) {
            return string.replace(/^-ms-/, 'ms-').replace(/-([\da-z])/gi, function (match, letter) {
                return letter.toUpperCase();
            });
        }
        function getVendorProp(name) {
            var style = document.body.style;
            if (name in style)
                return name;
            var i = cssPrefixes.length, capName = name.charAt(0).toUpperCase() + name.slice(1), vendorName;
            while (i--) {
                vendorName = cssPrefixes[i] + capName;
                if (vendorName in style)
                    return vendorName;
            }
            return name;
        }
        function getStyleProp(name) {
            name = camelCase(name);
            return cssProps[name] || (cssProps[name] = getVendorProp(name));
        }
        function applyCss(element, prop, value) {
            prop = getStyleProp(prop);
            element.style[prop] = value;
        }
        return function (element, properties) {
            var args = arguments, prop, value;
            if (args.length == 2) {
                for (prop in properties) {
                    value = properties[prop];
                    if (value !== undefined && properties.hasOwnProperty(prop))
                        applyCss(element, prop, value);
                }
            } else {
                applyCss(element, args[1], args[2]);
            }
        };
    }();
    function hasClass(element, name) {
        var list = typeof element == 'string' ? element : classList(element);
        return list.indexOf(' ' + name + ' ') >= 0;
    }
    function addClass(element, name) {
        var oldList = classList(element), newList = oldList + name;
        if (hasClass(oldList, name))
            return;
        element.className = newList.substring(1);
    }
    function removeClass(element, name) {
        var oldList = classList(element), newList;
        if (!hasClass(element, name))
            return;
        newList = oldList.replace(' ' + name + ' ', ' ');
        element.className = newList.substring(1, newList.length - 1);
    }
    function classList(element) {
        return (' ' + (element.className || '') + ' ').replace(/\s+/gi, ' ');
    }
    function removeElement(element) {
        element && element.parentNode && element.parentNode.removeChild(element);
    }
    return NProgress;
}));
define('bootstrap', ['jquery'], function () {
    if (typeof jQuery === 'undefined') {
        throw new Error('Bootstrap\'s JavaScript requires jQuery');
    }
    +function ($) {
        'use strict';
        var version = $.fn.jquery.split(' ')[0].split('.');
        if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {
            throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4');
        }
    }(jQuery);
    +function ($) {
        'use strict';
        function transitionEnd() {
            var el = document.createElement('bootstrap');
            var transEndEventNames = {
                WebkitTransition: 'webkitTransitionEnd',
                MozTransition: 'transitionend',
                OTransition: 'oTransitionEnd otransitionend',
                transition: 'transitionend'
            };
            for (var name in transEndEventNames) {
                if (el.style[name] !== undefined) {
                    return { end: transEndEventNames[name] };
                }
            }
            return false;
        }
        $.fn.emulateTransitionEnd = function (duration) {
            var called = false;
            var $el = this;
            $(this).one('bsTransitionEnd', function () {
                called = true;
            });
            var callback = function () {
                if (!called)
                    $($el).trigger($.support.transition.end);
            };
            setTimeout(callback, duration);
            return this;
        };
        $(function () {
            $.support.transition = transitionEnd();
            if (!$.support.transition)
                return;
            $.event.special.bsTransitionEnd = {
                bindType: $.support.transition.end,
                delegateType: $.support.transition.end,
                handle: function (e) {
                    if ($(e.target).is(this))
                        return e.handleObj.handler.apply(this, arguments);
                }
            };
        });
    }(jQuery);
    +function ($) {
        'use strict';
        var dismiss = '[data-dismiss="alert"]';
        var Alert = function (el) {
            $(el).on('click', dismiss, this.close);
        };
        Alert.VERSION = '3.3.7';
        Alert.TRANSITION_DURATION = 150;
        Alert.prototype.close = function (e) {
            var $this = $(this);
            var selector = $this.attr('data-target');
            if (!selector) {
                selector = $this.attr('href');
                selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '');
            }
            var $parent = $(selector === '#' ? [] : selector);
            if (e)
                e.preventDefault();
            if (!$parent.length) {
                $parent = $this.closest('.alert');
            }
            $parent.trigger(e = $.Event('close.bs.alert'));
            if (e.isDefaultPrevented())
                return;
            $parent.removeClass('in');
            function removeElement() {
                $parent.detach().trigger('closed.bs.alert').remove();
            }
            $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.alert');
                if (!data)
                    $this.data('bs.alert', data = new Alert(this));
                if (typeof option == 'string')
                    data[option].call($this);
            });
        }
        var old = $.fn.alert;
        $.fn.alert = Plugin;
        $.fn.alert.Constructor = Alert;
        $.fn.alert.noConflict = function () {
            $.fn.alert = old;
            return this;
        };
        $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
    }(jQuery);
    +function ($) {
        'use strict';
        var Button = function (element, options) {
            this.$element = $(element);
            this.options = $.extend({}, Button.DEFAULTS, options);
            this.isLoading = false;
        };
        Button.VERSION = '3.3.7';
        Button.DEFAULTS = { loadingText: 'loading...' };
        Button.prototype.setState = function (state) {
            var d = 'disabled';
            var $el = this.$element;
            var val = $el.is('input') ? 'val' : 'html';
            var data = $el.data();
            state += 'Text';
            if (data.resetText == null)
                $el.data('resetText', $el[val]());
            setTimeout($.proxy(function () {
                $el[val](data[state] == null ? this.options[state] : data[state]);
                if (state == 'loadingText') {
                    this.isLoading = true;
                    $el.addClass(d).attr(d, d).prop(d, true);
                } else if (this.isLoading) {
                    this.isLoading = false;
                    $el.removeClass(d).removeAttr(d).prop(d, false);
                }
            }, this), 0);
        };
        Button.prototype.toggle = function () {
            var changed = true;
            var $parent = this.$element.closest('[data-toggle="buttons"]');
            if ($parent.length) {
                var $input = this.$element.find('input');
                if ($input.prop('type') == 'radio') {
                    if ($input.prop('checked'))
                        changed = false;
                    $parent.find('.active').removeClass('active');
                    this.$element.addClass('active');
                } else if ($input.prop('type') == 'checkbox') {
                    if ($input.prop('checked') !== this.$element.hasClass('active'))
                        changed = false;
                    this.$element.toggleClass('active');
                }
                $input.prop('checked', this.$element.hasClass('active'));
                if (changed)
                    $input.trigger('change');
            } else {
                this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
                this.$element.toggleClass('active');
            }
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.button');
                var options = typeof option == 'object' && option;
                if (!data)
                    $this.data('bs.button', data = new Button(this, options));
                if (option == 'toggle')
                    data.toggle();
                else if (option)
                    data.setState(option);
            });
        }
        var old = $.fn.button;
        $.fn.button = Plugin;
        $.fn.button.Constructor = Button;
        $.fn.button.noConflict = function () {
            $.fn.button = old;
            return this;
        };
        $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
            var $btn = $(e.target).closest('.btn');
            Plugin.call($btn, 'toggle');
            if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
                e.preventDefault();
                if ($btn.is('input,button'))
                    $btn.trigger('focus');
                else
                    $btn.find('input:visible,button:visible').first().trigger('focus');
            }
        }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
            $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
        });
    }(jQuery);
    +function ($) {
        'use strict';
        var Carousel = function (element, options) {
            this.$element = $(element);
            this.$indicators = this.$element.find('.carousel-indicators');
            this.options = options;
            this.paused = null;
            this.sliding = null;
            this.interval = null;
            this.$active = null;
            this.$items = null;
            this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));
            this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
        };
        Carousel.VERSION = '3.3.7';
        Carousel.TRANSITION_DURATION = 600;
        Carousel.DEFAULTS = {
            interval: 5000,
            pause: 'hover',
            wrap: true,
            keyboard: true
        };
        Carousel.prototype.keydown = function (e) {
            if (/input|textarea/i.test(e.target.tagName))
                return;
            switch (e.which) {
            case 37:
                this.prev();
                break;
            case 39:
                this.next();
                break;
            default:
                return;
            }
            e.preventDefault();
        };
        Carousel.prototype.cycle = function (e) {
            e || (this.paused = false);
            this.interval && clearInterval(this.interval);
            this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
            return this;
        };
        Carousel.prototype.getItemIndex = function (item) {
            this.$items = item.parent().children('.item');
            return this.$items.index(item || this.$active);
        };
        Carousel.prototype.getItemForDirection = function (direction, active) {
            var activeIndex = this.getItemIndex(active);
            var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;
            if (willWrap && !this.options.wrap)
                return active;
            var delta = direction == 'prev' ? -1 : 1;
            var itemIndex = (activeIndex + delta) % this.$items.length;
            return this.$items.eq(itemIndex);
        };
        Carousel.prototype.to = function (pos) {
            var that = this;
            var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));
            if (pos > this.$items.length - 1 || pos < 0)
                return;
            if (this.sliding)
                return this.$element.one('slid.bs.carousel', function () {
                    that.to(pos);
                });
            if (activeIndex == pos)
                return this.pause().cycle();
            return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
        };
        Carousel.prototype.pause = function (e) {
            e || (this.paused = true);
            if (this.$element.find('.next, .prev').length && $.support.transition) {
                this.$element.trigger($.support.transition.end);
                this.cycle(true);
            }
            this.interval = clearInterval(this.interval);
            return this;
        };
        Carousel.prototype.next = function () {
            if (this.sliding)
                return;
            return this.slide('next');
        };
        Carousel.prototype.prev = function () {
            if (this.sliding)
                return;
            return this.slide('prev');
        };
        Carousel.prototype.slide = function (type, next) {
            var $active = this.$element.find('.item.active');
            var $next = next || this.getItemForDirection(type, $active);
            var isCycling = this.interval;
            var direction = type == 'next' ? 'left' : 'right';
            var that = this;
            if ($next.hasClass('active'))
                return this.sliding = false;
            var relatedTarget = $next[0];
            var slideEvent = $.Event('slide.bs.carousel', {
                relatedTarget: relatedTarget,
                direction: direction
            });
            this.$element.trigger(slideEvent);
            if (slideEvent.isDefaultPrevented())
                return;
            this.sliding = true;
            isCycling && this.pause();
            if (this.$indicators.length) {
                this.$indicators.find('.active').removeClass('active');
                var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
                $nextIndicator && $nextIndicator.addClass('active');
            }
            var slidEvent = $.Event('slid.bs.carousel', {
                relatedTarget: relatedTarget,
                direction: direction
            });
            if ($.support.transition && this.$element.hasClass('slide')) {
                $next.addClass(type);
                $next[0].offsetWidth;
                $active.addClass(direction);
                $next.addClass(direction);
                $active.one('bsTransitionEnd', function () {
                    $next.removeClass([
                        type,
                        direction
                    ].join(' ')).addClass('active');
                    $active.removeClass([
                        'active',
                        direction
                    ].join(' '));
                    that.sliding = false;
                    setTimeout(function () {
                        that.$element.trigger(slidEvent);
                    }, 0);
                }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
            } else {
                $active.removeClass('active');
                $next.addClass('active');
                this.sliding = false;
                this.$element.trigger(slidEvent);
            }
            isCycling && this.cycle();
            return this;
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.carousel');
                var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option);
                var action = typeof option == 'string' ? option : options.slide;
                if (!data)
                    $this.data('bs.carousel', data = new Carousel(this, options));
                if (typeof option == 'number')
                    data.to(option);
                else if (action)
                    data[action]();
                else if (options.interval)
                    data.pause().cycle();
            });
        }
        var old = $.fn.carousel;
        $.fn.carousel = Plugin;
        $.fn.carousel.Constructor = Carousel;
        $.fn.carousel.noConflict = function () {
            $.fn.carousel = old;
            return this;
        };
        var clickHandler = function (e) {
            var href;
            var $this = $(this);
            var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''));
            if (!$target.hasClass('carousel'))
                return;
            var options = $.extend({}, $target.data(), $this.data());
            var slideIndex = $this.attr('data-slide-to');
            if (slideIndex)
                options.interval = false;
            Plugin.call($target, options);
            if (slideIndex) {
                $target.data('bs.carousel').to(slideIndex);
            }
            e.preventDefault();
        };
        $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);
        $(window).on('load', function () {
            $('[data-ride="carousel"]').each(function () {
                var $carousel = $(this);
                Plugin.call($carousel, $carousel.data());
            });
        });
    }(jQuery);
    +function ($) {
        'use strict';
        var Collapse = function (element, options) {
            this.$element = $(element);
            this.options = $.extend({}, Collapse.DEFAULTS, options);
            this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
            this.transitioning = null;
            if (this.options.parent) {
                this.$parent = this.getParent();
            } else {
                this.addAriaAndCollapsedClass(this.$element, this.$trigger);
            }
            if (this.options.toggle)
                this.toggle();
        };
        Collapse.VERSION = '3.3.7';
        Collapse.TRANSITION_DURATION = 350;
        Collapse.DEFAULTS = { toggle: true };
        Collapse.prototype.dimension = function () {
            var hasWidth = this.$element.hasClass('width');
            return hasWidth ? 'width' : 'height';
        };
        Collapse.prototype.show = function () {
            if (this.transitioning || this.$element.hasClass('in'))
                return;
            var activesData;
            var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');
            if (actives && actives.length) {
                activesData = actives.data('bs.collapse');
                if (activesData && activesData.transitioning)
                    return;
            }
            var startEvent = $.Event('show.bs.collapse');
            this.$element.trigger(startEvent);
            if (startEvent.isDefaultPrevented())
                return;
            if (actives && actives.length) {
                Plugin.call(actives, 'hide');
                activesData || actives.data('bs.collapse', null);
            }
            var dimension = this.dimension();
            this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);
            this.$trigger.removeClass('collapsed').attr('aria-expanded', true);
            this.transitioning = 1;
            var complete = function () {
                this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
                this.transitioning = 0;
                this.$element.trigger('shown.bs.collapse');
            };
            if (!$.support.transition)
                return complete.call(this);
            var scrollSize = $.camelCase([
                'scroll',
                dimension
            ].join('-'));
            this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
        };
        Collapse.prototype.hide = function () {
            if (this.transitioning || !this.$element.hasClass('in'))
                return;
            var startEvent = $.Event('hide.bs.collapse');
            this.$element.trigger(startEvent);
            if (startEvent.isDefaultPrevented())
                return;
            var dimension = this.dimension();
            this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
            this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);
            this.$trigger.addClass('collapsed').attr('aria-expanded', false);
            this.transitioning = 1;
            var complete = function () {
                this.transitioning = 0;
                this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
            };
            if (!$.support.transition)
                return complete.call(this);
            this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
        };
        Collapse.prototype.toggle = function () {
            this[this.$element.hasClass('in') ? 'hide' : 'show']();
        };
        Collapse.prototype.getParent = function () {
            return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
                var $element = $(element);
                this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
            }, this)).end();
        };
        Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
            var isOpen = $element.hasClass('in');
            $element.attr('aria-expanded', isOpen);
            $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
        };
        function getTargetFromTrigger($trigger) {
            var href;
            var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '');
            return $(target);
        }
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.collapse');
                var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);
                if (!data && options.toggle && /show|hide/.test(option))
                    options.toggle = false;
                if (!data)
                    $this.data('bs.collapse', data = new Collapse(this, options));
                if (typeof option == 'string')
                    data[option]();
            });
        }
        var old = $.fn.collapse;
        $.fn.collapse = Plugin;
        $.fn.collapse.Constructor = Collapse;
        $.fn.collapse.noConflict = function () {
            $.fn.collapse = old;
            return this;
        };
        $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
            var $this = $(this);
            if (!$this.attr('data-target'))
                e.preventDefault();
            var $target = getTargetFromTrigger($this);
            var data = $target.data('bs.collapse');
            var option = data ? 'toggle' : $this.data();
            Plugin.call($target, option);
        });
    }(jQuery);
    +function ($) {
        'use strict';
        var backdrop = '.dropdown-backdrop';
        var toggle = '[data-toggle="dropdown"]';
        var Dropdown = function (element) {
            $(element).on('click.bs.dropdown', this.toggle);
        };
        Dropdown.VERSION = '3.3.7';
        function getParent($this) {
            var selector = $this.attr('data-target');
            if (!selector) {
                selector = $this.attr('href');
                selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '');
            }
            var $parent = selector && $(selector);
            return $parent && $parent.length ? $parent : $this.parent();
        }
        function clearMenus(e) {
            if (e && e.which === 3)
                return;
            $(backdrop).remove();
            $(toggle).each(function () {
                var $this = $(this);
                var $parent = getParent($this);
                var relatedTarget = { relatedTarget: this };
                if (!$parent.hasClass('open'))
                    return;
                if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target))
                    return;
                $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));
                if (e.isDefaultPrevented())
                    return;
                $this.attr('aria-expanded', 'false');
                $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget));
            });
        }
        Dropdown.prototype.toggle = function (e) {
            var $this = $(this);
            if ($this.is('.disabled, :disabled'))
                return;
            var $parent = getParent($this);
            var isActive = $parent.hasClass('open');
            clearMenus();
            if (!isActive) {
                if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
                    $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);
                }
                var relatedTarget = { relatedTarget: this };
                $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));
                if (e.isDefaultPrevented())
                    return;
                $this.trigger('focus').attr('aria-expanded', 'true');
                $parent.toggleClass('open').trigger($.Event('shown.bs.dropdown', relatedTarget));
            }
            return false;
        };
        Dropdown.prototype.keydown = function (e) {
            if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName))
                return;
            var $this = $(this);
            e.preventDefault();
            e.stopPropagation();
            if ($this.is('.disabled, :disabled'))
                return;
            var $parent = getParent($this);
            var isActive = $parent.hasClass('open');
            if (!isActive && e.which != 27 || isActive && e.which == 27) {
                if (e.which == 27)
                    $parent.find(toggle).trigger('focus');
                return $this.trigger('click');
            }
            var desc = ' li:not(.disabled):visible a';
            var $items = $parent.find('.dropdown-menu' + desc);
            if (!$items.length)
                return;
            var index = $items.index(e.target);
            if (e.which == 38 && index > 0)
                index--;
            if (e.which == 40 && index < $items.length - 1)
                index++;
            if (!~index)
                index = 0;
            $items.eq(index).trigger('focus');
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.dropdown');
                if (!data)
                    $this.data('bs.dropdown', data = new Dropdown(this));
                if (typeof option == 'string')
                    data[option].call($this);
            });
        }
        var old = $.fn.dropdown;
        $.fn.dropdown = Plugin;
        $.fn.dropdown.Constructor = Dropdown;
        $.fn.dropdown.noConflict = function () {
            $.fn.dropdown = old;
            return this;
        };
        $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
            e.stopPropagation();
        }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);
    }(jQuery);
    +function ($) {
        'use strict';
        var Modal = function (element, options) {
            this.options = options;
            this.$body = $(document.body);
            this.$element = $(element);
            this.$dialog = this.$element.find('.modal-dialog');
            this.$backdrop = null;
            this.isShown = null;
            this.originalBodyPad = null;
            this.scrollbarWidth = 0;
            this.ignoreBackdropClick = false;
            if (this.options.remote) {
                this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
                    this.$element.trigger('loaded.bs.modal');
                }, this));
            }
        };
        Modal.VERSION = '3.3.7';
        Modal.TRANSITION_DURATION = 300;
        Modal.BACKDROP_TRANSITION_DURATION = 150;
        Modal.DEFAULTS = {
            backdrop: true,
            keyboard: true,
            show: true
        };
        Modal.prototype.toggle = function (_relatedTarget) {
            return this.isShown ? this.hide() : this.show(_relatedTarget);
        };
        Modal.prototype.show = function (_relatedTarget) {
            var that = this;
            var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });
            this.$element.trigger(e);
            if (this.isShown || e.isDefaultPrevented())
                return;
            this.isShown = true;
            this.checkScrollbar();
            this.setScrollbar();
            this.$body.addClass('modal-open');
            this.escape();
            this.resize();
            this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));
            this.$dialog.on('mousedown.dismiss.bs.modal', function () {
                that.$element.one('mouseup.dismiss.bs.modal', function (e) {
                    if ($(e.target).is(that.$element))
                        that.ignoreBackdropClick = true;
                });
            });
            this.backdrop(function () {
                var transition = $.support.transition && that.$element.hasClass('fade');
                if (!that.$element.parent().length) {
                    that.$element.appendTo(that.$body);
                }
                that.$element.show().scrollTop(0);
                that.adjustDialog();
                if (transition) {
                    that.$element[0].offsetWidth;
                }
                that.$element.addClass('in');
                that.enforceFocus();
                var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });
                transition ? that.$dialog.one('bsTransitionEnd', function () {
                    that.$element.trigger('focus').trigger(e);
                }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
            });
        };
        Modal.prototype.hide = function (e) {
            if (e)
                e.preventDefault();
            e = $.Event('hide.bs.modal');
            this.$element.trigger(e);
            if (!this.isShown || e.isDefaultPrevented())
                return;
            this.isShown = false;
            this.escape();
            this.resize();
            $(document).off('focusin.bs.modal');
            this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');
            this.$dialog.off('mousedown.dismiss.bs.modal');
            $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
        };
        Modal.prototype.enforceFocus = function () {
            $(document).off('focusin.bs.modal').on('focusin.bs.modal', $.proxy(function (e) {
                if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                    this.$element.trigger('focus');
                }
            }, this));
        };
        Modal.prototype.escape = function () {
            if (this.isShown && this.options.keyboard) {
                this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
                    e.which == 27 && this.hide();
                }, this));
            } else if (!this.isShown) {
                this.$element.off('keydown.dismiss.bs.modal');
            }
        };
        Modal.prototype.resize = function () {
            if (this.isShown) {
                $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
            } else {
                $(window).off('resize.bs.modal');
            }
        };
        Modal.prototype.hideModal = function () {
            var that = this;
            this.$element.hide();
            this.backdrop(function () {
                that.$body.removeClass('modal-open');
                that.resetAdjustments();
                that.resetScrollbar();
                that.$element.trigger('hidden.bs.modal');
            });
        };
        Modal.prototype.removeBackdrop = function () {
            this.$backdrop && this.$backdrop.remove();
            this.$backdrop = null;
        };
        Modal.prototype.backdrop = function (callback) {
            var that = this;
            var animate = this.$element.hasClass('fade') ? 'fade' : '';
            if (this.isShown && this.options.backdrop) {
                var doAnimate = $.support.transition && animate;
                this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);
                this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
                    if (this.ignoreBackdropClick) {
                        this.ignoreBackdropClick = false;
                        return;
                    }
                    if (e.target !== e.currentTarget)
                        return;
                    this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
                }, this));
                if (doAnimate)
                    this.$backdrop[0].offsetWidth;
                this.$backdrop.addClass('in');
                if (!callback)
                    return;
                doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
            } else if (!this.isShown && this.$backdrop) {
                this.$backdrop.removeClass('in');
                var callbackRemove = function () {
                    that.removeBackdrop();
                    callback && callback();
                };
                $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
            } else if (callback) {
                callback();
            }
        };
        Modal.prototype.handleUpdate = function () {
            this.adjustDialog();
        };
        Modal.prototype.adjustDialog = function () {
            var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;
            this.$element.css({
                paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
                paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
            });
        };
        Modal.prototype.resetAdjustments = function () {
            this.$element.css({
                paddingLeft: '',
                paddingRight: ''
            });
        };
        Modal.prototype.checkScrollbar = function () {
            var fullWindowWidth = window.innerWidth;
            if (!fullWindowWidth) {
                var documentElementRect = document.documentElement.getBoundingClientRect();
                fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
            }
            this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
            this.scrollbarWidth = this.measureScrollbar();
        };
        Modal.prototype.setScrollbar = function () {
            var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
            this.originalBodyPad = document.body.style.paddingRight || '';
            if (this.bodyIsOverflowing)
                this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
        };
        Modal.prototype.resetScrollbar = function () {
            this.$body.css('padding-right', this.originalBodyPad);
        };
        Modal.prototype.measureScrollbar = function () {
            var scrollDiv = document.createElement('div');
            scrollDiv.className = 'modal-scrollbar-measure';
            this.$body.append(scrollDiv);
            var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            this.$body[0].removeChild(scrollDiv);
            return scrollbarWidth;
        };
        function Plugin(option, _relatedTarget) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.modal');
                var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option);
                if (!data)
                    $this.data('bs.modal', data = new Modal(this, options));
                if (typeof option == 'string')
                    data[option](_relatedTarget);
                else if (options.show)
                    data.show(_relatedTarget);
            });
        }
        var old = $.fn.modal;
        $.fn.modal = Plugin;
        $.fn.modal.Constructor = Modal;
        $.fn.modal.noConflict = function () {
            $.fn.modal = old;
            return this;
        };
        $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
            var $this = $(this);
            var href = $this.attr('href');
            var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, ''));
            var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());
            if ($this.is('a'))
                e.preventDefault();
            $target.one('show.bs.modal', function (showEvent) {
                if (showEvent.isDefaultPrevented())
                    return;
                $target.one('hidden.bs.modal', function () {
                    $this.is(':visible') && $this.trigger('focus');
                });
            });
            Plugin.call($target, option, this);
        });
    }(jQuery);
    +function ($) {
        'use strict';
        var Tooltip = function (element, options) {
            this.type = null;
            this.options = null;
            this.enabled = null;
            this.timeout = null;
            this.hoverState = null;
            this.$element = null;
            this.inState = null;
            this.init('tooltip', element, options);
        };
        Tooltip.VERSION = '3.3.7';
        Tooltip.TRANSITION_DURATION = 150;
        Tooltip.DEFAULTS = {
            animation: true,
            placement: 'top',
            selector: false,
            template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
            trigger: 'hover focus',
            title: '',
            delay: 0,
            html: false,
            container: false,
            viewport: {
                selector: 'body',
                padding: 0
            }
        };
        Tooltip.prototype.init = function (type, element, options) {
            this.enabled = true;
            this.type = type;
            this.$element = $(element);
            this.options = this.getOptions(options);
            this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
            this.inState = {
                click: false,
                hover: false,
                focus: false
            };
            if (this.$element[0] instanceof document.constructor && !this.options.selector) {
                throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');
            }
            var triggers = this.options.trigger.split(' ');
            for (var i = triggers.length; i--;) {
                var trigger = triggers[i];
                if (trigger == 'click') {
                    this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
                } else if (trigger != 'manual') {
                    var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
                    var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';
                    this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
                    this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
                }
            }
            this.options.selector ? this._options = $.extend({}, this.options, {
                trigger: 'manual',
                selector: ''
            }) : this.fixTitle();
        };
        Tooltip.prototype.getDefaults = function () {
            return Tooltip.DEFAULTS;
        };
        Tooltip.prototype.getOptions = function (options) {
            options = $.extend({}, this.getDefaults(), this.$element.data(), options);
            if (options.delay && typeof options.delay == 'number') {
                options.delay = {
                    show: options.delay,
                    hide: options.delay
                };
            }
            return options;
        };
        Tooltip.prototype.getDelegateOptions = function () {
            var options = {};
            var defaults = this.getDefaults();
            this._options && $.each(this._options, function (key, value) {
                if (defaults[key] != value)
                    options[key] = value;
            });
            return options;
        };
        Tooltip.prototype.enter = function (obj) {
            var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);
            if (!self) {
                self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
                $(obj.currentTarget).data('bs.' + this.type, self);
            }
            if (obj instanceof $.Event) {
                self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;
            }
            if (self.tip().hasClass('in') || self.hoverState == 'in') {
                self.hoverState = 'in';
                return;
            }
            clearTimeout(self.timeout);
            self.hoverState = 'in';
            if (!self.options.delay || !self.options.delay.show)
                return self.show();
            self.timeout = setTimeout(function () {
                if (self.hoverState == 'in')
                    self.show();
            }, self.options.delay.show);
        };
        Tooltip.prototype.isInStateTrue = function () {
            for (var key in this.inState) {
                if (this.inState[key])
                    return true;
            }
            return false;
        };
        Tooltip.prototype.leave = function (obj) {
            var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);
            if (!self) {
                self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
                $(obj.currentTarget).data('bs.' + this.type, self);
            }
            if (obj instanceof $.Event) {
                self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;
            }
            if (self.isInStateTrue())
                return;
            clearTimeout(self.timeout);
            self.hoverState = 'out';
            if (!self.options.delay || !self.options.delay.hide)
                return self.hide();
            self.timeout = setTimeout(function () {
                if (self.hoverState == 'out')
                    self.hide();
            }, self.options.delay.hide);
        };
        Tooltip.prototype.show = function () {
            var e = $.Event('show.bs.' + this.type);
            if (this.hasContent() && this.enabled) {
                this.$element.trigger(e);
                var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
                if (e.isDefaultPrevented() || !inDom)
                    return;
                var that = this;
                var $tip = this.tip();
                var tipId = this.getUID(this.type);
                this.setContent();
                $tip.attr('id', tipId);
                this.$element.attr('aria-describedby', tipId);
                if (this.options.animation)
                    $tip.addClass('fade');
                var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
                var autoToken = /\s?auto?\s?/i;
                var autoPlace = autoToken.test(placement);
                if (autoPlace)
                    placement = placement.replace(autoToken, '') || 'top';
                $tip.detach().css({
                    top: 0,
                    left: 0,
                    display: 'block'
                }).addClass(placement).data('bs.' + this.type, this);
                this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
                this.$element.trigger('inserted.bs.' + this.type);
                var pos = this.getPosition();
                var actualWidth = $tip[0].offsetWidth;
                var actualHeight = $tip[0].offsetHeight;
                if (autoPlace) {
                    var orgPlacement = placement;
                    var viewportDim = this.getPosition(this.$viewport);
                    placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;
                    $tip.removeClass(orgPlacement).addClass(placement);
                }
                var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
                this.applyPlacement(calculatedOffset, placement);
                var complete = function () {
                    var prevHoverState = that.hoverState;
                    that.$element.trigger('shown.bs.' + that.type);
                    that.hoverState = null;
                    if (prevHoverState == 'out')
                        that.leave(that);
                };
                $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
            }
        };
        Tooltip.prototype.applyPlacement = function (offset, placement) {
            var $tip = this.tip();
            var width = $tip[0].offsetWidth;
            var height = $tip[0].offsetHeight;
            var marginTop = parseInt($tip.css('margin-top'), 10);
            var marginLeft = parseInt($tip.css('margin-left'), 10);
            if (isNaN(marginTop))
                marginTop = 0;
            if (isNaN(marginLeft))
                marginLeft = 0;
            offset.top += marginTop;
            offset.left += marginLeft;
            $.offset.setOffset($tip[0], $.extend({
                using: function (props) {
                    $tip.css({
                        top: Math.round(props.top),
                        left: Math.round(props.left)
                    });
                }
            }, offset), 0);
            $tip.addClass('in');
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (placement == 'top' && actualHeight != height) {
                offset.top = offset.top + height - actualHeight;
            }
            var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
            if (delta.left)
                offset.left += delta.left;
            else
                offset.top += delta.top;
            var isVertical = /top|bottom/.test(placement);
            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';
            $tip.offset(offset);
            this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
        };
        Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
            this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
        };
        Tooltip.prototype.setContent = function () {
            var $tip = this.tip();
            var title = this.getTitle();
            $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
            $tip.removeClass('fade in top bottom left right');
        };
        Tooltip.prototype.hide = function (callback) {
            var that = this;
            var $tip = $(this.$tip);
            var e = $.Event('hide.bs.' + this.type);
            function complete() {
                if (that.hoverState != 'in')
                    $tip.detach();
                if (that.$element) {
                    that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
                }
                callback && callback();
            }
            this.$element.trigger(e);
            if (e.isDefaultPrevented())
                return;
            $tip.removeClass('in');
            $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
            this.hoverState = null;
            return this;
        };
        Tooltip.prototype.fixTitle = function () {
            var $e = this.$element;
            if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
                $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
            }
        };
        Tooltip.prototype.hasContent = function () {
            return this.getTitle();
        };
        Tooltip.prototype.getPosition = function ($element) {
            $element = $element || this.$element;
            var el = $element[0];
            var isBody = el.tagName == 'BODY';
            var elRect = el.getBoundingClientRect();
            if (elRect.width == null) {
                elRect = $.extend({}, elRect, {
                    width: elRect.right - elRect.left,
                    height: elRect.bottom - elRect.top
                });
            }
            var isSvg = window.SVGElement && el instanceof window.SVGElement;
            var elOffset = isBody ? {
                top: 0,
                left: 0
            } : isSvg ? null : $element.offset();
            var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
            var outerDims = isBody ? {
                width: $(window).width(),
                height: $(window).height()
            } : null;
            return $.extend({}, elRect, scroll, outerDims, elOffset);
        };
        Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
            return placement == 'bottom' ? {
                top: pos.top + pos.height,
                left: pos.left + pos.width / 2 - actualWidth / 2
            } : placement == 'top' ? {
                top: pos.top - actualHeight,
                left: pos.left + pos.width / 2 - actualWidth / 2
            } : placement == 'left' ? {
                top: pos.top + pos.height / 2 - actualHeight / 2,
                left: pos.left - actualWidth
            } : {
                top: pos.top + pos.height / 2 - actualHeight / 2,
                left: pos.left + pos.width
            };
        };
        Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
            var delta = {
                top: 0,
                left: 0
            };
            if (!this.$viewport)
                return delta;
            var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
            var viewportDimensions = this.getPosition(this.$viewport);
            if (/right|left/.test(placement)) {
                var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
                var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
                if (topEdgeOffset < viewportDimensions.top) {
                    delta.top = viewportDimensions.top - topEdgeOffset;
                } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
                    delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
                }
            } else {
                var leftEdgeOffset = pos.left - viewportPadding;
                var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
                if (leftEdgeOffset < viewportDimensions.left) {
                    delta.left = viewportDimensions.left - leftEdgeOffset;
                } else if (rightEdgeOffset > viewportDimensions.right) {
                    delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
                }
            }
            return delta;
        };
        Tooltip.prototype.getTitle = function () {
            var title;
            var $e = this.$element;
            var o = this.options;
            title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);
            return title;
        };
        Tooltip.prototype.getUID = function (prefix) {
            do
                prefix += ~~(Math.random() * 1000000);
            while (document.getElementById(prefix));
            return prefix;
        };
        Tooltip.prototype.tip = function () {
            if (!this.$tip) {
                this.$tip = $(this.options.template);
                if (this.$tip.length != 1) {
                    throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');
                }
            }
            return this.$tip;
        };
        Tooltip.prototype.arrow = function () {
            return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
        };
        Tooltip.prototype.enable = function () {
            this.enabled = true;
        };
        Tooltip.prototype.disable = function () {
            this.enabled = false;
        };
        Tooltip.prototype.toggleEnabled = function () {
            this.enabled = !this.enabled;
        };
        Tooltip.prototype.toggle = function (e) {
            var self = this;
            if (e) {
                self = $(e.currentTarget).data('bs.' + this.type);
                if (!self) {
                    self = new this.constructor(e.currentTarget, this.getDelegateOptions());
                    $(e.currentTarget).data('bs.' + this.type, self);
                }
            }
            if (e) {
                self.inState.click = !self.inState.click;
                if (self.isInStateTrue())
                    self.enter(self);
                else
                    self.leave(self);
            } else {
                self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
            }
        };
        Tooltip.prototype.destroy = function () {
            var that = this;
            clearTimeout(this.timeout);
            this.hide(function () {
                that.$element.off('.' + that.type).removeData('bs.' + that.type);
                if (that.$tip) {
                    that.$tip.detach();
                }
                that.$tip = null;
                that.$arrow = null;
                that.$viewport = null;
                that.$element = null;
            });
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.tooltip');
                var options = typeof option == 'object' && option;
                if (!data && /destroy|hide/.test(option))
                    return;
                if (!data)
                    $this.data('bs.tooltip', data = new Tooltip(this, options));
                if (typeof option == 'string')
                    data[option]();
            });
        }
        var old = $.fn.tooltip;
        $.fn.tooltip = Plugin;
        $.fn.tooltip.Constructor = Tooltip;
        $.fn.tooltip.noConflict = function () {
            $.fn.tooltip = old;
            return this;
        };
    }(jQuery);
    +function ($) {
        'use strict';
        var Popover = function (element, options) {
            this.init('popover', element, options);
        };
        if (!$.fn.tooltip)
            throw new Error('Popover requires tooltip.js');
        Popover.VERSION = '3.3.7';
        Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
            placement: 'right',
            trigger: 'click',
            content: '',
            template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
        });
        Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
        Popover.prototype.constructor = Popover;
        Popover.prototype.getDefaults = function () {
            return Popover.DEFAULTS;
        };
        Popover.prototype.setContent = function () {
            var $tip = this.tip();
            var title = this.getTitle();
            var content = this.getContent();
            $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
            $tip.find('.popover-content').children().detach().end()[this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);
            $tip.removeClass('fade top bottom left right in');
            if (!$tip.find('.popover-title').html())
                $tip.find('.popover-title').hide();
        };
        Popover.prototype.hasContent = function () {
            return this.getTitle() || this.getContent();
        };
        Popover.prototype.getContent = function () {
            var $e = this.$element;
            var o = this.options;
            return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
        };
        Popover.prototype.arrow = function () {
            return this.$arrow = this.$arrow || this.tip().find('.arrow');
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.popover');
                var options = typeof option == 'object' && option;
                if (!data && /destroy|hide/.test(option))
                    return;
                if (!data)
                    $this.data('bs.popover', data = new Popover(this, options));
                if (typeof option == 'string')
                    data[option]();
            });
        }
        var old = $.fn.popover;
        $.fn.popover = Plugin;
        $.fn.popover.Constructor = Popover;
        $.fn.popover.noConflict = function () {
            $.fn.popover = old;
            return this;
        };
    }(jQuery);
    +function ($) {
        'use strict';
        function ScrollSpy(element, options) {
            this.$body = $(document.body);
            this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
            this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
            this.selector = (this.options.target || '') + ' .nav li > a';
            this.offsets = [];
            this.targets = [];
            this.activeTarget = null;
            this.scrollHeight = 0;
            this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));
            this.refresh();
            this.process();
        }
        ScrollSpy.VERSION = '3.3.7';
        ScrollSpy.DEFAULTS = { offset: 10 };
        ScrollSpy.prototype.getScrollHeight = function () {
            return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
        };
        ScrollSpy.prototype.refresh = function () {
            var that = this;
            var offsetMethod = 'offset';
            var offsetBase = 0;
            this.offsets = [];
            this.targets = [];
            this.scrollHeight = this.getScrollHeight();
            if (!$.isWindow(this.$scrollElement[0])) {
                offsetMethod = 'position';
                offsetBase = this.$scrollElement.scrollTop();
            }
            this.$body.find(this.selector).map(function () {
                var $el = $(this);
                var href = $el.data('target') || $el.attr('href');
                var $href = /^#./.test(href) && $(href);
                return $href && $href.length && $href.is(':visible') && [[
                        $href[offsetMethod]().top + offsetBase,
                        href
                    ]] || null;
            }).sort(function (a, b) {
                return a[0] - b[0];
            }).each(function () {
                that.offsets.push(this[0]);
                that.targets.push(this[1]);
            });
        };
        ScrollSpy.prototype.process = function () {
            var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
            var scrollHeight = this.getScrollHeight();
            var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
            var offsets = this.offsets;
            var targets = this.targets;
            var activeTarget = this.activeTarget;
            var i;
            if (this.scrollHeight != scrollHeight) {
                this.refresh();
            }
            if (scrollTop >= maxScroll) {
                return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
            }
            if (activeTarget && scrollTop < offsets[0]) {
                this.activeTarget = null;
                return this.clear();
            }
            for (i = offsets.length; i--;) {
                activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
            }
        };
        ScrollSpy.prototype.activate = function (target) {
            this.activeTarget = target;
            this.clear();
            var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
            var active = $(selector).parents('li').addClass('active');
            if (active.parent('.dropdown-menu').length) {
                active = active.closest('li.dropdown').addClass('active');
            }
            active.trigger('activate.bs.scrollspy');
        };
        ScrollSpy.prototype.clear = function () {
            $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.scrollspy');
                var options = typeof option == 'object' && option;
                if (!data)
                    $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
                if (typeof option == 'string')
                    data[option]();
            });
        }
        var old = $.fn.scrollspy;
        $.fn.scrollspy = Plugin;
        $.fn.scrollspy.Constructor = ScrollSpy;
        $.fn.scrollspy.noConflict = function () {
            $.fn.scrollspy = old;
            return this;
        };
        $(window).on('load.bs.scrollspy.data-api', function () {
            $('[data-spy="scroll"]').each(function () {
                var $spy = $(this);
                Plugin.call($spy, $spy.data());
            });
        });
    }(jQuery);
    +function ($) {
        'use strict';
        var Tab = function (element) {
            this.element = $(element);
        };
        Tab.VERSION = '3.3.7';
        Tab.TRANSITION_DURATION = 150;
        Tab.prototype.show = function () {
            var $this = this.element;
            var $ul = $this.closest('ul:not(.dropdown-menu)');
            var selector = $this.data('target');
            if (!selector) {
                selector = $this.attr('href');
                selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '');
            }
            if ($this.parent('li').hasClass('active'))
                return;
            var $previous = $ul.find('.active:last a');
            var hideEvent = $.Event('hide.bs.tab', { relatedTarget: $this[0] });
            var showEvent = $.Event('show.bs.tab', { relatedTarget: $previous[0] });
            $previous.trigger(hideEvent);
            $this.trigger(showEvent);
            if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented())
                return;
            var $target = $(selector);
            this.activate($this.closest('li'), $ul);
            this.activate($target, $target.parent(), function () {
                $previous.trigger({
                    type: 'hidden.bs.tab',
                    relatedTarget: $this[0]
                });
                $this.trigger({
                    type: 'shown.bs.tab',
                    relatedTarget: $previous[0]
                });
            });
        };
        Tab.prototype.activate = function (element, container, callback) {
            var $active = container.find('> .active');
            var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);
            function next() {
                $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);
                element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);
                if (transition) {
                    element[0].offsetWidth;
                    element.addClass('in');
                } else {
                    element.removeClass('fade');
                }
                if (element.parent('.dropdown-menu').length) {
                    element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
                }
                callback && callback();
            }
            $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();
            $active.removeClass('in');
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.tab');
                if (!data)
                    $this.data('bs.tab', data = new Tab(this));
                if (typeof option == 'string')
                    data[option]();
            });
        }
        var old = $.fn.tab;
        $.fn.tab = Plugin;
        $.fn.tab.Constructor = Tab;
        $.fn.tab.noConflict = function () {
            $.fn.tab = old;
            return this;
        };
        var clickHandler = function (e) {
            e.preventDefault();
            Plugin.call($(this), 'show');
        };
        $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
    }(jQuery);
    +function ($) {
        'use strict';
        var Affix = function (element, options) {
            this.options = $.extend({}, Affix.DEFAULTS, options);
            this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));
            this.$element = $(element);
            this.affixed = null;
            this.unpin = null;
            this.pinnedOffset = null;
            this.checkPosition();
        };
        Affix.VERSION = '3.3.7';
        Affix.RESET = 'affix affix-top affix-bottom';
        Affix.DEFAULTS = {
            offset: 0,
            target: window
        };
        Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
            var scrollTop = this.$target.scrollTop();
            var position = this.$element.offset();
            var targetHeight = this.$target.height();
            if (offsetTop != null && this.affixed == 'top')
                return scrollTop < offsetTop ? 'top' : false;
            if (this.affixed == 'bottom') {
                if (offsetTop != null)
                    return scrollTop + this.unpin <= position.top ? false : 'bottom';
                return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
            }
            var initializing = this.affixed == null;
            var colliderTop = initializing ? scrollTop : position.top;
            var colliderHeight = initializing ? targetHeight : height;
            if (offsetTop != null && scrollTop <= offsetTop)
                return 'top';
            if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom)
                return 'bottom';
            return false;
        };
        Affix.prototype.getPinnedOffset = function () {
            if (this.pinnedOffset)
                return this.pinnedOffset;
            this.$element.removeClass(Affix.RESET).addClass('affix');
            var scrollTop = this.$target.scrollTop();
            var position = this.$element.offset();
            return this.pinnedOffset = position.top - scrollTop;
        };
        Affix.prototype.checkPositionWithEventLoop = function () {
            setTimeout($.proxy(this.checkPosition, this), 1);
        };
        Affix.prototype.checkPosition = function () {
            if (!this.$element.is(':visible'))
                return;
            var height = this.$element.height();
            var offset = this.options.offset;
            var offsetTop = offset.top;
            var offsetBottom = offset.bottom;
            var scrollHeight = Math.max($(document).height(), $(document.body).height());
            if (typeof offset != 'object')
                offsetBottom = offsetTop = offset;
            if (typeof offsetTop == 'function')
                offsetTop = offset.top(this.$element);
            if (typeof offsetBottom == 'function')
                offsetBottom = offset.bottom(this.$element);
            var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);
            if (this.affixed != affix) {
                if (this.unpin != null)
                    this.$element.css('top', '');
                var affixType = 'affix' + (affix ? '-' + affix : '');
                var e = $.Event(affixType + '.bs.affix');
                this.$element.trigger(e);
                if (e.isDefaultPrevented())
                    return;
                this.affixed = affix;
                this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;
                this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
            }
            if (affix == 'bottom') {
                this.$element.offset({ top: scrollHeight - height - offsetBottom });
            }
        };
        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.affix');
                var options = typeof option == 'object' && option;
                if (!data)
                    $this.data('bs.affix', data = new Affix(this, options));
                if (typeof option == 'string')
                    data[option]();
            });
        }
        var old = $.fn.affix;
        $.fn.affix = Plugin;
        $.fn.affix.Constructor = Affix;
        $.fn.affix.noConflict = function () {
            $.fn.affix = old;
            return this;
        };
        $(window).on('load', function () {
            $('[data-spy="affix"]').each(function () {
                var $spy = $(this);
                var data = $spy.data();
                data.offset = data.offset || {};
                if (data.offsetBottom != null)
                    data.offset.bottom = data.offsetBottom;
                if (data.offsetTop != null)
                    data.offset.top = data.offsetTop;
                Plugin.call($spy, data);
            });
        });
    }(jQuery);
    return;
});
define('app', [
    'waves',
    'fastclick',
    'nprogress',
    'js.cookie',
    'jquery',
    'bootstrap',
    'Ps'
], function (Waves, FastClick, NProgress, Cookies) {
    Waves.init();
    Waves.attach('#sidebar-menu li', [
        'waves-block',
        'waves-green'
    ]);
    $('.main_container>.left_col').perfectScrollbar({ suppressScrollX: true });
    NProgress.start();
    var userInfo = Cookies.getJSON('user') ? Cookies.getJSON('user') : {};
    $('.top_nav').find('.user').text(userInfo.userName);
    (function ($, sr) {
        var debounce = function (func, threshold, execAsap) {
            var timeout;
            return function debounced() {
                var obj = this, args = arguments;
                function delayed() {
                    if (!execAsap)
                        func.apply(obj, args);
                    timeout = null;
                }
                if (timeout)
                    clearTimeout(timeout);
                else if (execAsap)
                    func.apply(obj, args);
                timeout = setTimeout(delayed, threshold || 100);
            };
        };
        jQuery.fn[sr] = function (fn) {
            return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr);
        };
    }(jQuery, 'smartresize'));
    var CURRENT_URL = window.location.href.split('#')[0].split('?')[0], $BODY = $('body'), $MENU_TOGGLE = $('#menu_toggle'), $SIDEBAR_MENU = $('#sidebar-menu'), $SIDEBAR_FOOTER = $('.sidebar-footer'), $LEFT_COL = $('.left_col'), $RIGHT_COL = $('.right_col'), $NAV_MENU = $('.nav_menu'), $FOOTER = $('footer');
    function init_sidebar() {
        var setContentHeight = function () {
            $RIGHT_COL.css('min-height', $(window).height());
            var bodyHeight = $BODY.outerHeight(), footerHeight = $BODY.hasClass('footer_fixed') ? -10 : $FOOTER.height(), leftColHeight = $LEFT_COL.eq(1).height() + $SIDEBAR_FOOTER.height(), contentHeight = bodyHeight < leftColHeight ? leftColHeight : bodyHeight;
            $RIGHT_COL.css('min-height', contentHeight);
        };
        $SIDEBAR_MENU.find('a').on('click', function (ev) {
            console.log('clicked - sidebar_menu');
            var $li = $(this).parent();
            if ($li.data('toggle') != 'collapse') {
                $li.addClass('active');
            } else {
                if ($li.is('.active')) {
                    $li.removeClass('active active-sm');
                    $('ul:first', $li).slideUp(function () {
                        setContentHeight();
                    });
                } else {
                    if (!$li.parent().is('.child_menu')) {
                        $SIDEBAR_MENU.find('li').removeClass('active active-sm');
                        $SIDEBAR_MENU.find('li ul').slideUp();
                    } else {
                        if ($BODY.is('.nav-sm')) {
                            $SIDEBAR_MENU.find('li').removeClass('active active-sm');
                            $SIDEBAR_MENU.find('li ul').slideUp();
                        }
                    }
                    $li.addClass('active');
                    $('ul:first', $li).slideDown(function () {
                        setContentHeight();
                    });
                }
            }
            ;
        });
        $MENU_TOGGLE.on('click', function () {
            console.log('clicked - menu toggle');
            if ($BODY.hasClass('nav-md')) {
                $SIDEBAR_MENU.find('li.active ul').hide();
                $SIDEBAR_MENU.find('li.active').addClass('active-sm').removeClass('active');
            } else {
                $SIDEBAR_MENU.find('li.active-sm ul').show();
                $SIDEBAR_MENU.find('li.active-sm').addClass('active').removeClass('active-sm');
            }
            $BODY.toggleClass('nav-md nav-sm');
            setContentHeight();
        });
        $SIDEBAR_MENU.find('a[href="' + CURRENT_URL + '"]').parent('li').addClass('current-page');
        $SIDEBAR_MENU.find('a').filter(function () {
            return this.href == CURRENT_URL;
        }).parent('li').addClass('current-page').parents('ul').slideDown(function () {
            setContentHeight();
        }).parent().addClass('active');
        $(window).smartresize(function () {
            setContentHeight();
        });
        setContentHeight();
        if ($.fn.mCustomScrollbar) {
            $('.menu_fixed').mCustomScrollbar({
                autoHideScrollbar: true,
                theme: 'minimal',
                mouseWheel: { preventDefault: true }
            });
        }
    }
    ;
    var randNum = function () {
        return Math.floor(Math.random() * (1 + 40 - 20)) + 20;
    };
    $(document).ready(function () {
        $('.collapse-link').on('click', function () {
            var $BOX_PANEL = $(this).closest('.x_panel'), $ICON = $(this).find('i'), $BOX_CONTENT = $BOX_PANEL.find('.x_content');
            if ($BOX_PANEL.attr('style')) {
                $BOX_CONTENT.slideToggle(200, function () {
                    $BOX_PANEL.removeAttr('style');
                });
            } else {
                $BOX_CONTENT.slideToggle(200);
                $BOX_PANEL.css('height', 'auto');
            }
            $ICON.toggleClass('fa-chevron-up fa-chevron-down');
        });
        $('.close-link').click(function () {
            var $BOX_PANEL = $(this).closest('.x_panel');
            $BOX_PANEL.remove();
        });
    });
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip({ container: 'body' });
    });
    if ($('.progress .progress-bar')[0]) {
        $('.progress .progress-bar').progressbar();
    }
    $(document).ready(function () {
        if ($('.js-switch')[0]) {
            var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));
            elems.forEach(function (html) {
                var switchery = new Switchery(html, { color: '#26B99A' });
            });
        }
    });
    $(document).ready(function () {
        if ($('input.flat')[0]) {
            $(document).ready(function () {
                $('input.flat').iCheck({
                    checkboxClass: 'icheckbox_flat-green',
                    radioClass: 'iradio_flat-green'
                });
            });
        }
    });
    $('table input').on('ifChecked', function () {
        checkState = '';
        $(this).parent().parent().parent().addClass('selected');
        countChecked();
    });
    $('table input').on('ifUnchecked', function () {
        checkState = '';
        $(this).parent().parent().parent().removeClass('selected');
        countChecked();
    });
    var checkState = '';
    $('.bulk_action input').on('ifChecked', function () {
        checkState = '';
        $(this).parent().parent().parent().addClass('selected');
        countChecked();
    });
    $('.bulk_action input').on('ifUnchecked', function () {
        checkState = '';
        $(this).parent().parent().parent().removeClass('selected');
        countChecked();
    });
    $('.bulk_action input#check-all').on('ifChecked', function () {
        checkState = 'all';
        countChecked();
    });
    $('.bulk_action input#check-all').on('ifUnchecked', function () {
        checkState = 'none';
        countChecked();
    });
    function countChecked() {
        if (checkState === 'all') {
            $('.bulk_action input[name=\'table_records\']').iCheck('check');
        }
        if (checkState === 'none') {
            $('.bulk_action input[name=\'table_records\']').iCheck('uncheck');
        }
        var checkCount = $('.bulk_action input[name=\'table_records\']:checked').length;
        if (checkCount) {
            $('.column-title').hide();
            $('.bulk-actions').show();
            $('.action-cnt').html(checkCount + ' Records Selected');
        } else {
            $('.column-title').show();
            $('.bulk-actions').hide();
        }
    }
    var originalLeave = $.fn.popover.Constructor.prototype.leave;
    $.fn.popover.Constructor.prototype.leave = function (obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type);
        var container, timeout;
        originalLeave.call(this, obj);
        if (obj.currentTarget) {
            container = $(obj.currentTarget).siblings('.popover');
            timeout = self.timeout;
            container.one('mouseenter', function () {
                clearTimeout(timeout);
                container.one('mouseleave', function () {
                    $.fn.popover.Constructor.prototype.leave.call(self, self);
                });
            });
        }
    };
    $('body').popover({
        selector: '[data-popover]',
        trigger: 'click hover',
        delay: {
            show: 50,
            hide: 400
        }
    });
    function gd(year, month, day) {
        return new Date(year, month - 1, day).getTime();
    }
    function init_flot_chart() {
        if (typeof $.plot === 'undefined') {
            return;
        }
        console.log('init_flot_chart');
        var arr_data1 = [
            [
                gd(2012, 1, 1),
                17
            ],
            [
                gd(2012, 1, 2),
                74
            ],
            [
                gd(2012, 1, 3),
                6
            ],
            [
                gd(2012, 1, 4),
                39
            ],
            [
                gd(2012, 1, 5),
                20
            ],
            [
                gd(2012, 1, 6),
                85
            ],
            [
                gd(2012, 1, 7),
                7
            ]
        ];
        var arr_data2 = [
            [
                gd(2012, 1, 1),
                82
            ],
            [
                gd(2012, 1, 2),
                23
            ],
            [
                gd(2012, 1, 3),
                66
            ],
            [
                gd(2012, 1, 4),
                9
            ],
            [
                gd(2012, 1, 5),
                119
            ],
            [
                gd(2012, 1, 6),
                6
            ],
            [
                gd(2012, 1, 7),
                9
            ]
        ];
        var arr_data3 = [
            [
                0,
                1
            ],
            [
                1,
                9
            ],
            [
                2,
                6
            ],
            [
                3,
                10
            ],
            [
                4,
                5
            ],
            [
                5,
                17
            ],
            [
                6,
                6
            ],
            [
                7,
                10
            ],
            [
                8,
                7
            ],
            [
                9,
                11
            ],
            [
                10,
                35
            ],
            [
                11,
                9
            ],
            [
                12,
                12
            ],
            [
                13,
                5
            ],
            [
                14,
                3
            ],
            [
                15,
                4
            ],
            [
                16,
                9
            ]
        ];
        var chart_plot_02_data = [];
        var chart_plot_03_data = [
            [
                0,
                1
            ],
            [
                1,
                9
            ],
            [
                2,
                6
            ],
            [
                3,
                10
            ],
            [
                4,
                5
            ],
            [
                5,
                17
            ],
            [
                6,
                6
            ],
            [
                7,
                10
            ],
            [
                8,
                7
            ],
            [
                9,
                11
            ],
            [
                10,
                35
            ],
            [
                11,
                9
            ],
            [
                12,
                12
            ],
            [
                13,
                5
            ],
            [
                14,
                3
            ],
            [
                15,
                4
            ],
            [
                16,
                9
            ]
        ];
        for (var i = 0; i < 30; i++) {
            chart_plot_02_data.push([
                new Date(Date.today().add(i).days()).getTime(),
                randNum() + i + i + 10
            ]);
        }
        var chart_plot_01_settings = {
            series: {
                lines: {
                    show: false,
                    fill: true
                },
                splines: {
                    show: true,
                    tension: 0.4,
                    lineWidth: 1,
                    fill: 0.4
                },
                points: {
                    radius: 0,
                    show: true
                },
                shadowSize: 2
            },
            grid: {
                verticalLines: true,
                hoverable: true,
                clickable: true,
                tickColor: '#d5d5d5',
                borderWidth: 1,
                color: '#fff'
            },
            colors: [
                'rgba(38, 185, 154, 0.38)',
                'rgba(3, 88, 106, 0.38)'
            ],
            xaxis: {
                tickColor: 'rgba(51, 51, 51, 0.06)',
                mode: 'time',
                tickSize: [
                    1,
                    'day'
                ],
                axisLabel: 'Date',
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 10
            },
            yaxis: {
                ticks: 8,
                tickColor: 'rgba(51, 51, 51, 0.06)'
            },
            tooltip: false
        };
        var chart_plot_02_settings = {
            grid: {
                show: true,
                aboveData: true,
                color: '#3f3f3f',
                labelMargin: 10,
                axisMargin: 0,
                borderWidth: 0,
                borderColor: null,
                minBorderMargin: 5,
                clickable: true,
                hoverable: true,
                autoHighlight: true,
                mouseActiveRadius: 100
            },
            series: {
                lines: {
                    show: true,
                    fill: true,
                    lineWidth: 2,
                    steps: false
                },
                points: {
                    show: true,
                    radius: 4.5,
                    symbol: 'circle',
                    lineWidth: 3
                }
            },
            legend: {
                position: 'ne',
                margin: [
                    0,
                    -25
                ],
                noColumns: 0,
                labelBoxBorderColor: null,
                labelFormatter: function (label, series) {
                    return label + '&nbsp;&nbsp;';
                },
                width: 40,
                height: 1
            },
            colors: [
                '#96CA59',
                '#3F97EB',
                '#72c380',
                '#6f7a8a',
                '#f7cb38',
                '#5a8022',
                '#2c7282'
            ],
            shadowSize: 0,
            tooltip: true,
            tooltipOpts: {
                content: '%s: %y.0',
                xDateFormat: '%d/%m',
                shifts: {
                    x: -30,
                    y: -50
                },
                defaultTheme: false
            },
            yaxis: { min: 0 },
            xaxis: {
                mode: 'time',
                minTickSize: [
                    1,
                    'day'
                ],
                timeformat: '%d/%m/%y',
                min: chart_plot_02_data[0][0],
                max: chart_plot_02_data[20][0]
            }
        };
        var chart_plot_03_settings = {
            series: {
                curvedLines: {
                    apply: true,
                    active: true,
                    monotonicFit: true
                }
            },
            colors: ['#26B99A'],
            grid: {
                borderWidth: {
                    top: 0,
                    right: 0,
                    bottom: 1,
                    left: 1
                },
                borderColor: {
                    bottom: '#7F8790',
                    left: '#7F8790'
                }
            }
        };
        if ($('#chart_plot_01').length) {
            console.log('Plot1');
            $.plot($('#chart_plot_01'), [
                arr_data1,
                arr_data2
            ], chart_plot_01_settings);
        }
        if ($('#chart_plot_02').length) {
            console.log('Plot2');
            $.plot($('#chart_plot_02'), [{
                    label: 'Email Sent',
                    data: chart_plot_02_data,
                    lines: { fillColor: 'rgba(150, 202, 89, 0.12)' },
                    points: { fillColor: '#fff' }
                }], chart_plot_02_settings);
        }
        if ($('#chart_plot_03').length) {
            console.log('Plot3');
            $.plot($('#chart_plot_03'), [{
                    label: 'Registrations',
                    data: chart_plot_03_data,
                    lines: { fillColor: 'rgba(150, 202, 89, 0.12)' },
                    points: { fillColor: '#fff' }
                }], chart_plot_03_settings);
        }
        ;
    }
    function init_starrr() {
        if (typeof starrr === 'undefined') {
            return;
        }
        console.log('init_starrr');
        $('.stars').starrr();
        $('.stars-existing').starrr({ rating: 4 });
        $('.stars').on('starrr:change', function (e, value) {
            $('.stars-count').html(value);
        });
        $('.stars-existing').on('starrr:change', function (e, value) {
            $('.stars-count-existing').html(value);
        });
    }
    ;
    function init_JQVmap() {
        if (typeof jQuery.fn.vectorMap === 'undefined') {
            return;
        }
        console.log('init_JQVmap');
        if ($('#world-map-gdp').length) {
            $('#world-map-gdp').vectorMap({
                map: 'world_en',
                backgroundColor: null,
                color: '#ffffff',
                hoverOpacity: 0.7,
                selectedColor: '#666666',
                enableZoom: true,
                showTooltip: true,
                values: sample_data,
                scaleColors: [
                    '#E6F2F0',
                    '#149B7E'
                ],
                normalizeFunction: 'polynomial'
            });
        }
        if ($('#usa_map').length) {
            $('#usa_map').vectorMap({
                map: 'usa_en',
                backgroundColor: null,
                color: '#ffffff',
                hoverOpacity: 0.7,
                selectedColor: '#666666',
                enableZoom: true,
                showTooltip: true,
                values: sample_data,
                scaleColors: [
                    '#E6F2F0',
                    '#149B7E'
                ],
                normalizeFunction: 'polynomial'
            });
        }
    }
    ;
    function init_skycons() {
        if (typeof Skycons === 'undefined') {
            return;
        }
        console.log('init_skycons');
        var icons = new Skycons({ 'color': '#73879C' }), list = [
                'clear-day',
                'clear-night',
                'partly-cloudy-day',
                'partly-cloudy-night',
                'cloudy',
                'rain',
                'sleet',
                'snow',
                'wind',
                'fog'
            ], i;
        for (i = list.length; i--;)
            icons.set(list[i], list[i]);
        icons.play();
    }
    function init_chart_doughnut() {
        if (typeof Chart === 'undefined') {
            return;
        }
        console.log('init_chart_doughnut');
        if ($('.canvasDoughnut').length) {
            var chart_doughnut_settings = {
                type: 'doughnut',
                tooltipFillColor: 'rgba(51, 51, 51, 0.55)',
                data: {
                    labels: [
                        'Symbian',
                        'Blackberry',
                        'Other',
                        'Android',
                        'IOS'
                    ],
                    datasets: [{
                            data: [
                                15,
                                20,
                                30,
                                10,
                                30
                            ],
                            backgroundColor: [
                                '#BDC3C7',
                                '#9B59B6',
                                '#E74C3C',
                                '#26B99A',
                                '#3498DB'
                            ],
                            hoverBackgroundColor: [
                                '#CFD4D8',
                                '#B370CF',
                                '#E95E4F',
                                '#36CAAB',
                                '#49A9EA'
                            ]
                        }]
                },
                options: {
                    legend: false,
                    responsive: false
                }
            };
            $('.canvasDoughnut').each(function () {
                var chart_element = $(this);
                var chart_doughnut = new Chart(chart_element, chart_doughnut_settings);
            });
        }
    }
    function init_gauge() {
        if (typeof Gauge === 'undefined') {
            return;
        }
        console.log('init_gauge [' + $('.gauge-chart').length + ']');
        console.log('init_gauge');
        var chart_gauge_settings = {
            lines: 12,
            angle: 0,
            lineWidth: 0.4,
            pointer: {
                length: 0.75,
                strokeWidth: 0.042,
                color: '#1D212A'
            },
            limitMax: 'false',
            colorStart: '#1ABC9C',
            colorStop: '#1ABC9C',
            strokeColor: '#F0F3F3',
            generateGradient: true
        };
        if ($('#chart_gauge_01').length) {
            var chart_gauge_01_elem = document.getElementById('chart_gauge_01');
            var chart_gauge_01 = new Gauge(chart_gauge_01_elem).setOptions(chart_gauge_settings);
        }
        if ($('#gauge-text').length) {
            chart_gauge_01.maxValue = 6000;
            chart_gauge_01.animationSpeed = 32;
            chart_gauge_01.set(3200);
            chart_gauge_01.setTextField(document.getElementById('gauge-text'));
        }
        if ($('#chart_gauge_02').length) {
            var chart_gauge_02_elem = document.getElementById('chart_gauge_02');
            var chart_gauge_02 = new Gauge(chart_gauge_02_elem).setOptions(chart_gauge_settings);
        }
        if ($('#gauge-text2').length) {
            chart_gauge_02.maxValue = 9000;
            chart_gauge_02.animationSpeed = 32;
            chart_gauge_02.set(2400);
            chart_gauge_02.setTextField(document.getElementById('gauge-text2'));
        }
    }
    function init_sparklines() {
        if (typeof jQuery.fn.sparkline === 'undefined') {
            return;
        }
        console.log('init_sparklines');
        $('.sparkline_one').sparkline([
            2,
            4,
            3,
            4,
            5,
            4,
            5,
            4,
            3,
            4,
            5,
            6,
            4,
            5,
            6,
            3,
            5,
            4,
            5,
            4,
            5,
            4,
            3,
            4,
            5,
            6,
            7,
            5,
            4,
            3,
            5,
            6
        ], {
            type: 'bar',
            height: '125',
            barWidth: 13,
            colorMap: { '7': '#a1a1a1' },
            barSpacing: 2,
            barColor: '#26B99A'
        });
        $('.sparkline_two').sparkline([
            2,
            4,
            3,
            4,
            5,
            4,
            5,
            4,
            3,
            4,
            5,
            6,
            7,
            5,
            4,
            3,
            5,
            6
        ], {
            type: 'bar',
            height: '40',
            barWidth: 9,
            colorMap: { '7': '#a1a1a1' },
            barSpacing: 2,
            barColor: '#26B99A'
        });
        $('.sparkline_three').sparkline([
            2,
            4,
            3,
            4,
            5,
            4,
            5,
            4,
            3,
            4,
            5,
            6,
            7,
            5,
            4,
            3,
            5,
            6
        ], {
            type: 'line',
            width: '200',
            height: '40',
            lineColor: '#26B99A',
            fillColor: 'rgba(223, 223, 223, 0.57)',
            lineWidth: 2,
            spotColor: '#26B99A',
            minSpotColor: '#26B99A'
        });
        $('.sparkline11').sparkline([
            2,
            4,
            3,
            4,
            5,
            4,
            5,
            4,
            3,
            4,
            6,
            2,
            4,
            3,
            4,
            5,
            4,
            5,
            4,
            3
        ], {
            type: 'bar',
            height: '40',
            barWidth: 8,
            colorMap: { '7': '#a1a1a1' },
            barSpacing: 2,
            barColor: '#26B99A'
        });
        $('.sparkline22').sparkline([
            2,
            4,
            3,
            4,
            7,
            5,
            4,
            3,
            5,
            6,
            2,
            4,
            3,
            4,
            5,
            4,
            5,
            4,
            3,
            4,
            6
        ], {
            type: 'line',
            height: '40',
            width: '200',
            lineColor: '#26B99A',
            fillColor: '#ffffff',
            lineWidth: 3,
            spotColor: '#34495E',
            minSpotColor: '#34495E'
        });
        $('.sparkline_bar').sparkline([
            2,
            4,
            3,
            4,
            5,
            4,
            5,
            4,
            3,
            4,
            5,
            6,
            4,
            5,
            6,
            3,
            5
        ], {
            type: 'bar',
            colorMap: { '7': '#a1a1a1' },
            barColor: '#26B99A'
        });
        $('.sparkline_area').sparkline([
            5,
            6,
            7,
            9,
            9,
            5,
            3,
            2,
            2,
            4,
            6,
            7
        ], {
            type: 'line',
            lineColor: '#26B99A',
            fillColor: '#26B99A',
            spotColor: '#4578a0',
            minSpotColor: '#728fb2',
            maxSpotColor: '#6d93c4',
            highlightSpotColor: '#ef5179',
            highlightLineColor: '#8ba8bf',
            spotRadius: 2.5,
            width: 85
        });
        $('.sparkline_line').sparkline([
            2,
            4,
            3,
            4,
            5,
            4,
            5,
            4,
            3,
            4,
            5,
            6,
            4,
            5,
            6,
            3,
            5
        ], {
            type: 'line',
            lineColor: '#26B99A',
            fillColor: '#ffffff',
            width: 85,
            spotColor: '#34495E',
            minSpotColor: '#34495E'
        });
        $('.sparkline_pie').sparkline([
            1,
            1,
            2,
            1
        ], {
            type: 'pie',
            sliceColors: [
                '#26B99A',
                '#ccc',
                '#75BCDD',
                '#D66DE2'
            ]
        });
        $('.sparkline_discreet').sparkline([
            4,
            6,
            7,
            7,
            4,
            3,
            2,
            1,
            4,
            4,
            2,
            4,
            3,
            7,
            8,
            9,
            7,
            6,
            4,
            3
        ], {
            type: 'discrete',
            barWidth: 3,
            lineColor: '#26B99A',
            width: '85'
        });
    }
    ;
    function init_autocomplete() {
        if (typeof autocomplete === 'undefined') {
            return;
        }
        console.log('init_autocomplete');
        var countries = {
            AD: 'Andorra',
            A2: 'Andorra Test',
            AE: 'United Arab Emirates',
            AF: 'Afghanistan',
            AG: 'Antigua and Barbuda',
            AI: 'Anguilla',
            AL: 'Albania',
            AM: 'Armenia',
            AN: 'Netherlands Antilles',
            AO: 'Angola',
            AQ: 'Antarctica',
            AR: 'Argentina',
            AS: 'American Samoa',
            AT: 'Austria',
            AU: 'Australia',
            AW: 'Aruba',
            AX: 'Åland Islands',
            AZ: 'Azerbaijan',
            BA: 'Bosnia and Herzegovina',
            BB: 'Barbados',
            BD: 'Bangladesh',
            BE: 'Belgium',
            BF: 'Burkina Faso',
            BG: 'Bulgaria',
            BH: 'Bahrain',
            BI: 'Burundi',
            BJ: 'Benin',
            BL: 'Saint Barthélemy',
            BM: 'Bermuda',
            BN: 'Brunei',
            BO: 'Bolivia',
            BQ: 'British Antarctic Territory',
            BR: 'Brazil',
            BS: 'Bahamas',
            BT: 'Bhutan',
            BV: 'Bouvet Island',
            BW: 'Botswana',
            BY: 'Belarus',
            BZ: 'Belize',
            CA: 'Canada',
            CC: 'Cocos [Keeling] Islands',
            CD: 'Congo - Kinshasa',
            CF: 'Central African Republic',
            CG: 'Congo - Brazzaville',
            CH: 'Switzerland',
            CI: 'Côte d\u2019Ivoire',
            CK: 'Cook Islands',
            CL: 'Chile',
            CM: 'Cameroon',
            CN: 'China',
            CO: 'Colombia',
            CR: 'Costa Rica',
            CS: 'Serbia and Montenegro',
            CT: 'Canton and Enderbury Islands',
            CU: 'Cuba',
            CV: 'Cape Verde',
            CX: 'Christmas Island',
            CY: 'Cyprus',
            CZ: 'Czech Republic',
            DD: 'East Germany',
            DE: 'Germany',
            DJ: 'Djibouti',
            DK: 'Denmark',
            DM: 'Dominica',
            DO: 'Dominican Republic',
            DZ: 'Algeria',
            EC: 'Ecuador',
            EE: 'Estonia',
            EG: 'Egypt',
            EH: 'Western Sahara',
            ER: 'Eritrea',
            ES: 'Spain',
            ET: 'Ethiopia',
            FI: 'Finland',
            FJ: 'Fiji',
            FK: 'Falkland Islands',
            FM: 'Micronesia',
            FO: 'Faroe Islands',
            FQ: 'French Southern and Antarctic Territories',
            FR: 'France',
            FX: 'Metropolitan France',
            GA: 'Gabon',
            GB: 'United Kingdom',
            GD: 'Grenada',
            GE: 'Georgia',
            GF: 'French Guiana',
            GG: 'Guernsey',
            GH: 'Ghana',
            GI: 'Gibraltar',
            GL: 'Greenland',
            GM: 'Gambia',
            GN: 'Guinea',
            GP: 'Guadeloupe',
            GQ: 'Equatorial Guinea',
            GR: 'Greece',
            GS: 'South Georgia and the South Sandwich Islands',
            GT: 'Guatemala',
            GU: 'Guam',
            GW: 'Guinea-Bissau',
            GY: 'Guyana',
            HK: 'Hong Kong SAR China',
            HM: 'Heard Island and McDonald Islands',
            HN: 'Honduras',
            HR: 'Croatia',
            HT: 'Haiti',
            HU: 'Hungary',
            ID: 'Indonesia',
            IE: 'Ireland',
            IL: 'Israel',
            IM: 'Isle of Man',
            IN: 'India',
            IO: 'British Indian Ocean Territory',
            IQ: 'Iraq',
            IR: 'Iran',
            IS: 'Iceland',
            IT: 'Italy',
            JE: 'Jersey',
            JM: 'Jamaica',
            JO: 'Jordan',
            JP: 'Japan',
            JT: 'Johnston Island',
            KE: 'Kenya',
            KG: 'Kyrgyzstan',
            KH: 'Cambodia',
            KI: 'Kiribati',
            KM: 'Comoros',
            KN: 'Saint Kitts and Nevis',
            KP: 'North Korea',
            KR: 'South Korea',
            KW: 'Kuwait',
            KY: 'Cayman Islands',
            KZ: 'Kazakhstan',
            LA: 'Laos',
            LB: 'Lebanon',
            LC: 'Saint Lucia',
            LI: 'Liechtenstein',
            LK: 'Sri Lanka',
            LR: 'Liberia',
            LS: 'Lesotho',
            LT: 'Lithuania',
            LU: 'Luxembourg',
            LV: 'Latvia',
            LY: 'Libya',
            MA: 'Morocco',
            MC: 'Monaco',
            MD: 'Moldova',
            ME: 'Montenegro',
            MF: 'Saint Martin',
            MG: 'Madagascar',
            MH: 'Marshall Islands',
            MI: 'Midway Islands',
            MK: 'Macedonia',
            ML: 'Mali',
            MM: 'Myanmar [Burma]',
            MN: 'Mongolia',
            MO: 'Macau SAR China',
            MP: 'Northern Mariana Islands',
            MQ: 'Martinique',
            MR: 'Mauritania',
            MS: 'Montserrat',
            MT: 'Malta',
            MU: 'Mauritius',
            MV: 'Maldives',
            MW: 'Malawi',
            MX: 'Mexico',
            MY: 'Malaysia',
            MZ: 'Mozambique',
            NA: 'Namibia',
            NC: 'New Caledonia',
            NE: 'Niger',
            NF: 'Norfolk Island',
            NG: 'Nigeria',
            NI: 'Nicaragua',
            NL: 'Netherlands',
            NO: 'Norway',
            NP: 'Nepal',
            NQ: 'Dronning Maud Land',
            NR: 'Nauru',
            NT: 'Neutral Zone',
            NU: 'Niue',
            NZ: 'New Zealand',
            OM: 'Oman',
            PA: 'Panama',
            PC: 'Pacific Islands Trust Territory',
            PE: 'Peru',
            PF: 'French Polynesia',
            PG: 'Papua New Guinea',
            PH: 'Philippines',
            PK: 'Pakistan',
            PL: 'Poland',
            PM: 'Saint Pierre and Miquelon',
            PN: 'Pitcairn Islands',
            PR: 'Puerto Rico',
            PS: 'Palestinian Territories',
            PT: 'Portugal',
            PU: 'U.S. Miscellaneous Pacific Islands',
            PW: 'Palau',
            PY: 'Paraguay',
            PZ: 'Panama Canal Zone',
            QA: 'Qatar',
            RE: 'Réunion',
            RO: 'Romania',
            RS: 'Serbia',
            RU: 'Russia',
            RW: 'Rwanda',
            SA: 'Saudi Arabia',
            SB: 'Solomon Islands',
            SC: 'Seychelles',
            SD: 'Sudan',
            SE: 'Sweden',
            SG: 'Singapore',
            SH: 'Saint Helena',
            SI: 'Slovenia',
            SJ: 'Svalbard and Jan Mayen',
            SK: 'Slovakia',
            SL: 'Sierra Leone',
            SM: 'San Marino',
            SN: 'Senegal',
            SO: 'Somalia',
            SR: 'Suriname',
            ST: 'São Tomé and Príncipe',
            SU: 'Union of Soviet Socialist Republics',
            SV: 'El Salvador',
            SY: 'Syria',
            SZ: 'Swaziland',
            TC: 'Turks and Caicos Islands',
            TD: 'Chad',
            TF: 'French Southern Territories',
            TG: 'Togo',
            TH: 'Thailand',
            TJ: 'Tajikistan',
            TK: 'Tokelau',
            TL: 'Timor-Leste',
            TM: 'Turkmenistan',
            TN: 'Tunisia',
            TO: 'Tonga',
            TR: 'Turkey',
            TT: 'Trinidad and Tobago',
            TV: 'Tuvalu',
            TW: 'Taiwan',
            TZ: 'Tanzania',
            UA: 'Ukraine',
            UG: 'Uganda',
            UM: 'U.S. Minor Outlying Islands',
            US: 'United States',
            UY: 'Uruguay',
            UZ: 'Uzbekistan',
            VA: 'Vatican City',
            VC: 'Saint Vincent and the Grenadines',
            VD: 'North Vietnam',
            VE: 'Venezuela',
            VG: 'British Virgin Islands',
            VI: 'U.S. Virgin Islands',
            VN: 'Vietnam',
            VU: 'Vanuatu',
            WF: 'Wallis and Futuna',
            WK: 'Wake Island',
            WS: 'Samoa',
            YD: 'People\'s Democratic Republic of Yemen',
            YE: 'Yemen',
            YT: 'Mayotte',
            ZA: 'South Africa',
            ZM: 'Zambia',
            ZW: 'Zimbabwe',
            ZZ: 'Unknown or Invalid Region'
        };
        var countriesArray = $.map(countries, function (value, key) {
            return {
                value: value,
                data: key
            };
        });
        $('#autocomplete-custom-append').autocomplete({ lookup: countriesArray });
    }
    ;
    function init_autosize() {
        if (typeof $.fn.autosize !== 'undefined') {
            autosize($('.resizable_textarea'));
        }
    }
    ;
    function init_parsley() {
        if (typeof parsley === 'undefined') {
            return;
        }
        console.log('init_parsley');
        $('parsley:field:validate', function () {
            validateFront();
        });
        $('#demo-form .btn').on('click', function () {
            $('#demo-form').parsley().validate();
            validateFront();
        });
        var validateFront = function () {
            if (true === $('#demo-form').parsley().isValid()) {
                $('.bs-callout-info').removeClass('hidden');
                $('.bs-callout-warning').addClass('hidden');
            } else {
                $('.bs-callout-info').addClass('hidden');
                $('.bs-callout-warning').removeClass('hidden');
            }
        };
        $('parsley:field:validate', function () {
            validateFront();
        });
        $('#demo-form2 .btn').on('click', function () {
            $('#demo-form2').parsley().validate();
            validateFront();
        });
        var validateFront = function () {
            if (true === $('#demo-form2').parsley().isValid()) {
                $('.bs-callout-info').removeClass('hidden');
                $('.bs-callout-warning').addClass('hidden');
            } else {
                $('.bs-callout-info').addClass('hidden');
                $('.bs-callout-warning').removeClass('hidden');
            }
        };
        try {
            hljs.initHighlightingOnLoad();
        } catch (err) {
        }
    }
    ;
    function onAddTag(tag) {
        alert('Added a tag: ' + tag);
    }
    function onRemoveTag(tag) {
        alert('Removed a tag: ' + tag);
    }
    function onChangeTag(input, tag) {
        alert('Changed a tag: ' + tag);
    }
    function init_TagsInput() {
        if (typeof $.fn.tagsInput !== 'undefined') {
            $('#tags_1').tagsInput({ width: 'auto' });
        }
    }
    ;
    function init_select2() {
        if (typeof select2 === 'undefined') {
            return;
        }
        console.log('init_toolbox');
        $('.select2_single').select2({
            placeholder: 'Select a state',
            allowClear: true
        });
        $('.select2_group').select2({});
        $('.select2_multiple').select2({
            maximumSelectionLength: 4,
            placeholder: 'With Max Selection limit 4',
            allowClear: true
        });
    }
    ;
    function init_wysiwyg() {
        if (typeof $.fn.wysiwyg === 'undefined') {
            return;
        }
        console.log('init_wysiwyg');
        function init_ToolbarBootstrapBindings() {
            var fonts = [
                    'Serif',
                    'Sans',
                    'Arial',
                    'Arial Black',
                    'Courier',
                    'Courier New',
                    'Comic Sans MS',
                    'Helvetica',
                    'Impact',
                    'Lucida Grande',
                    'Lucida Sans',
                    'Tahoma',
                    'Times',
                    'Times New Roman',
                    'Verdana'
                ], fontTarget = $('[title=Font]').siblings('.dropdown-menu');
            $.each(fonts, function (idx, fontName) {
                fontTarget.append($('<li><a data-edit="fontName ' + fontName + '" style="font-family:\'' + fontName + '\'">' + fontName + '</a></li>'));
            });
            $('a[title]').tooltip({ container: 'body' });
            $('.dropdown-menu input').click(function () {
                return false;
            }).change(function () {
                $(this).parent('.dropdown-menu').siblings('.dropdown-toggle').dropdown('toggle');
            }).keydown('esc', function () {
                this.value = '';
                $(this).change();
            });
            $('[data-role=magic-overlay]').each(function () {
                var overlay = $(this), target = $(overlay.data('target'));
                overlay.css('opacity', 0).css('position', 'absolute').offset(target.offset()).width(target.outerWidth()).height(target.outerHeight());
            });
            if ('onwebkitspeechchange' in document.createElement('input')) {
                var editorOffset = $('#editor').offset();
                $('.voiceBtn').css('position', 'absolute').offset({
                    top: editorOffset.top,
                    left: editorOffset.left + $('#editor').innerWidth() - 35
                });
            } else {
                $('.voiceBtn').hide();
            }
        }
        function showErrorAlert(reason, detail) {
            var msg = '';
            if (reason === 'unsupported-file-type') {
                msg = 'Unsupported format ' + detail;
            } else {
                console.log('error uploading file', reason, detail);
            }
            $('<div class="alert"> <button type="button" class="close" data-dismiss="alert">&times;</button>' + '<strong>File upload error</strong> ' + msg + ' </div>').prependTo('#alerts');
        }
        $('.editor-wrapper').each(function () {
            var id = $(this).attr('id');
            $(this).wysiwyg({
                toolbarSelector: '[data-target="#' + id + '"]',
                fileUploadError: showErrorAlert
            });
        });
        window.prettyPrint;
        prettyPrint();
    }
    ;
    function init_cropper() {
        if (typeof $.fn.cropper === 'undefined') {
            return;
        }
        console.log('init_cropper');
        var $image = $('#image');
        var $download = $('#download');
        var $dataX = $('#dataX');
        var $dataY = $('#dataY');
        var $dataHeight = $('#dataHeight');
        var $dataWidth = $('#dataWidth');
        var $dataRotate = $('#dataRotate');
        var $dataScaleX = $('#dataScaleX');
        var $dataScaleY = $('#dataScaleY');
        var options = {
            aspectRatio: 16 / 9,
            preview: '.img-preview',
            crop: function (e) {
                $dataX.val(Math.round(e.x));
                $dataY.val(Math.round(e.y));
                $dataHeight.val(Math.round(e.height));
                $dataWidth.val(Math.round(e.width));
                $dataRotate.val(e.rotate);
                $dataScaleX.val(e.scaleX);
                $dataScaleY.val(e.scaleY);
            }
        };
        $('[data-toggle="tooltip"]').tooltip();
        $image.on({
            'build.cropper': function (e) {
                console.log(e.type);
            },
            'built.cropper': function (e) {
                console.log(e.type);
            },
            'cropstart.cropper': function (e) {
                console.log(e.type, e.action);
            },
            'cropmove.cropper': function (e) {
                console.log(e.type, e.action);
            },
            'cropend.cropper': function (e) {
                console.log(e.type, e.action);
            },
            'crop.cropper': function (e) {
                console.log(e.type, e.x, e.y, e.width, e.height, e.rotate, e.scaleX, e.scaleY);
            },
            'zoom.cropper': function (e) {
                console.log(e.type, e.ratio);
            }
        }).cropper(options);
        if (!$.isFunction(document.createElement('canvas').getContext)) {
            $('button[data-method="getCroppedCanvas"]').prop('disabled', true);
        }
        if (typeof document.createElement('cropper').style.transition === 'undefined') {
            $('button[data-method="rotate"]').prop('disabled', true);
            $('button[data-method="scale"]').prop('disabled', true);
        }
        if (typeof $download[0].download === 'undefined') {
            $download.addClass('disabled');
        }
        $('.docs-toggles').on('change', 'input', function () {
            var $this = $(this);
            var name = $this.attr('name');
            var type = $this.prop('type');
            var cropBoxData;
            var canvasData;
            if (!$image.data('cropper')) {
                return;
            }
            if (type === 'checkbox') {
                options[name] = $this.prop('checked');
                cropBoxData = $image.cropper('getCropBoxData');
                canvasData = $image.cropper('getCanvasData');
                options.built = function () {
                    $image.cropper('setCropBoxData', cropBoxData);
                    $image.cropper('setCanvasData', canvasData);
                };
            } else if (type === 'radio') {
                options[name] = $this.val();
            }
            $image.cropper('destroy').cropper(options);
        });
        $('.docs-buttons').on('click', '[data-method]', function () {
            var $this = $(this);
            var data = $this.data();
            var $target;
            var result;
            if ($this.prop('disabled') || $this.hasClass('disabled')) {
                return;
            }
            if ($image.data('cropper') && data.method) {
                data = $.extend({}, data);
                if (typeof data.target !== 'undefined') {
                    $target = $(data.target);
                    if (typeof data.option === 'undefined') {
                        try {
                            data.option = JSON.parse($target.val());
                        } catch (e) {
                            console.log(e.message);
                        }
                    }
                }
                result = $image.cropper(data.method, data.option, data.secondOption);
                switch (data.method) {
                case 'scaleX':
                case 'scaleY':
                    $(this).data('option', -data.option);
                    break;
                case 'getCroppedCanvas':
                    if (result) {
                        $('#getCroppedCanvasModal').modal().find('.modal-body').html(result);
                        if (!$download.hasClass('disabled')) {
                            $download.attr('href', result.toDataURL());
                        }
                    }
                    break;
                }
                if ($.isPlainObject(result) && $target) {
                    try {
                        $target.val(JSON.stringify(result));
                    } catch (e) {
                        console.log(e.message);
                    }
                }
            }
        });
        $(document.body).on('keydown', function (e) {
            if (!$image.data('cropper') || this.scrollTop > 300) {
                return;
            }
            switch (e.which) {
            case 37:
                e.preventDefault();
                $image.cropper('move', -1, 0);
                break;
            case 38:
                e.preventDefault();
                $image.cropper('move', 0, -1);
                break;
            case 39:
                e.preventDefault();
                $image.cropper('move', 1, 0);
                break;
            case 40:
                e.preventDefault();
                $image.cropper('move', 0, 1);
                break;
            }
        });
        var $inputImage = $('#inputImage');
        var URL = window.URL || window.webkitURL;
        var blobURL;
        if (URL) {
            $inputImage.change(function () {
                var files = this.files;
                var file;
                if (!$image.data('cropper')) {
                    return;
                }
                if (files && files.length) {
                    file = files[0];
                    if (/^image\/\w+$/.test(file.type)) {
                        blobURL = URL.createObjectURL(file);
                        $image.one('built.cropper', function () {
                            URL.revokeObjectURL(blobURL);
                        }).cropper('reset').cropper('replace', blobURL);
                        $inputImage.val('');
                    } else {
                        window.alert('Please choose an image file.');
                    }
                }
            });
        } else {
            $inputImage.prop('disabled', true).parent().addClass('disabled');
        }
    }
    ;
    function init_knob() {
        if (typeof $.fn.knob === 'undefined') {
            return;
        }
        console.log('init_knob');
        $('.knob').knob({
            change: function (value) {
            },
            release: function (value) {
                console.log('release : ' + value);
            },
            cancel: function () {
                console.log('cancel : ', this);
            },
            draw: function () {
                if (this.$.data('skin') == 'tron') {
                    this.cursorExt = 0.3;
                    var a = this.arc(this.cv), pa, r = 1;
                    this.g.lineWidth = this.lineWidth;
                    if (this.o.displayPrevious) {
                        pa = this.arc(this.v);
                        this.g.beginPath();
                        this.g.strokeStyle = this.pColor;
                        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, pa.s, pa.e, pa.d);
                        this.g.stroke();
                    }
                    this.g.beginPath();
                    this.g.strokeStyle = r ? this.o.fgColor : this.fgColor;
                    this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, a.s, a.e, a.d);
                    this.g.stroke();
                    this.g.lineWidth = 2;
                    this.g.beginPath();
                    this.g.strokeStyle = this.o.fgColor;
                    this.g.arc(this.xy, this.xy, this.radius - this.lineWidth + 1 + this.lineWidth * 2 / 3, 0, 2 * Math.PI, false);
                    this.g.stroke();
                    return false;
                }
            }
        });
        var v, up = 0, down = 0, i = 0, $idir = $('div.idir'), $ival = $('div.ival'), incr = function () {
                i++;
                $idir.show().html('+').fadeOut();
                $ival.html(i);
            }, decr = function () {
                i--;
                $idir.show().html('-').fadeOut();
                $ival.html(i);
            };
        $('input.infinite').knob({
            min: 0,
            max: 20,
            stopper: false,
            change: function () {
                if (v > this.cv) {
                    if (up) {
                        decr();
                        up = 0;
                    } else {
                        up = 1;
                        down = 0;
                    }
                } else {
                    if (v < this.cv) {
                        if (down) {
                            incr();
                            down = 0;
                        } else {
                            down = 1;
                            up = 0;
                        }
                    }
                }
                v = this.cv;
            }
        });
    }
    ;
    function init_InputMask() {
        if (typeof $.fn.inputmask === 'undefined') {
            return;
        }
        console.log('init_InputMask');
        $(':input').inputmask();
    }
    ;
    function init_ColorPicker() {
        if (typeof $.fn.colorpicker === 'undefined') {
            return;
        }
        console.log('init_ColorPicker');
        $('.demo1').colorpicker();
        $('.demo2').colorpicker();
        $('#demo_forceformat').colorpicker({
            format: 'rgba',
            horizontal: true
        });
        $('#demo_forceformat3').colorpicker({ format: 'rgba' });
        $('.demo-auto').colorpicker();
    }
    ;
    function init_IonRangeSlider() {
        if (typeof $.fn.ionRangeSlider === 'undefined') {
            return;
        }
        console.log('init_IonRangeSlider');
        $('#range_27').ionRangeSlider({
            type: 'double',
            min: 1000000,
            max: 2000000,
            grid: true,
            force_edges: true
        });
        $('#range').ionRangeSlider({
            hide_min_max: true,
            keyboard: true,
            min: 0,
            max: 5000,
            from: 1000,
            to: 4000,
            type: 'double',
            step: 1,
            prefix: '$',
            grid: true
        });
        $('#range_25').ionRangeSlider({
            type: 'double',
            min: 1000000,
            max: 2000000,
            grid: true
        });
        $('#range_26').ionRangeSlider({
            type: 'double',
            min: 0,
            max: 10000,
            step: 500,
            grid: true,
            grid_snap: true
        });
        $('#range_31').ionRangeSlider({
            type: 'double',
            min: 0,
            max: 100,
            from: 30,
            to: 70,
            from_fixed: true
        });
        $('.range_min_max').ionRangeSlider({
            type: 'double',
            min: 0,
            max: 100,
            from: 30,
            to: 70,
            max_interval: 50
        });
        $('.range_time24').ionRangeSlider({
            min: +moment().subtract(12, 'hours').format('X'),
            max: +moment().format('X'),
            from: +moment().subtract(6, 'hours').format('X'),
            grid: true,
            force_edges: true,
            prettify: function (num) {
                var m = moment(num, 'X');
                return m.format('Do MMMM, HH:mm');
            }
        });
    }
    ;
    function init_daterangepicker() {
        if (typeof $.fn.daterangepicker === 'undefined') {
            return;
        }
        console.log('init_daterangepicker');
        var cb = function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
            $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
        };
        var optionSet1 = {
            startDate: moment().subtract(29, 'days'),
            endDate: moment(),
            minDate: '01/01/2012',
            maxDate: '12/31/2015',
            dateLimit: { days: 60 },
            showDropdowns: true,
            showWeekNumbers: true,
            timePicker: false,
            timePickerIncrement: 1,
            timePicker12Hour: true,
            ranges: {
                'Today': [
                    moment(),
                    moment()
                ],
                'Yesterday': [
                    moment().subtract(1, 'days'),
                    moment().subtract(1, 'days')
                ],
                'Last 7 Days': [
                    moment().subtract(6, 'days'),
                    moment()
                ],
                'Last 30 Days': [
                    moment().subtract(29, 'days'),
                    moment()
                ],
                'This Month': [
                    moment().startOf('month'),
                    moment().endOf('month')
                ],
                'Last Month': [
                    moment().subtract(1, 'month').startOf('month'),
                    moment().subtract(1, 'month').endOf('month')
                ]
            },
            opens: 'left',
            buttonClasses: ['btn btn-default'],
            applyClass: 'btn-small btn-primary',
            cancelClass: 'btn-small',
            format: 'MM/DD/YYYY',
            separator: ' to ',
            locale: {
                applyLabel: 'Submit',
                cancelLabel: 'Clear',
                fromLabel: 'From',
                toLabel: 'To',
                customRangeLabel: 'Custom',
                daysOfWeek: [
                    'Su',
                    'Mo',
                    'Tu',
                    'We',
                    'Th',
                    'Fr',
                    'Sa'
                ],
                monthNames: [
                    'January',
                    'February',
                    'March',
                    'April',
                    'May',
                    'June',
                    'July',
                    'August',
                    'September',
                    'October',
                    'November',
                    'December'
                ],
                firstDay: 1
            }
        };
        $('#reportrange span').html(moment().subtract(29, 'days').format('MMMM D, YYYY') + ' - ' + moment().format('MMMM D, YYYY'));
        $('#reportrange').daterangepicker(optionSet1, cb);
        $('#reportrange').on('show.daterangepicker', function () {
            console.log('show event fired');
        });
        $('#reportrange').on('hide.daterangepicker', function () {
            console.log('hide event fired');
        });
        $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
            console.log('apply event fired, start/end dates are ' + picker.startDate.format('MMMM D, YYYY') + ' to ' + picker.endDate.format('MMMM D, YYYY'));
        });
        $('#reportrange').on('cancel.daterangepicker', function (ev, picker) {
            console.log('cancel event fired');
        });
        $('#options1').click(function () {
            $('#reportrange').data('daterangepicker').setOptions(optionSet1, cb);
        });
        $('#options2').click(function () {
            $('#reportrange').data('daterangepicker').setOptions(optionSet2, cb);
        });
        $('#destroy').click(function () {
            $('#reportrange').data('daterangepicker').remove();
        });
    }
    function init_daterangepicker_right() {
        if (typeof $.fn.daterangepicker === 'undefined') {
            return;
        }
        console.log('init_daterangepicker_right');
        var cb = function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
            $('#reportrange_right span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
        };
        var optionSet1 = {
            startDate: moment().subtract(29, 'days'),
            endDate: moment(),
            minDate: '01/01/2012',
            maxDate: '12/31/2020',
            dateLimit: { days: 60 },
            showDropdowns: true,
            showWeekNumbers: true,
            timePicker: false,
            timePickerIncrement: 1,
            timePicker12Hour: true,
            ranges: {
                'Today': [
                    moment(),
                    moment()
                ],
                'Yesterday': [
                    moment().subtract(1, 'days'),
                    moment().subtract(1, 'days')
                ],
                'Last 7 Days': [
                    moment().subtract(6, 'days'),
                    moment()
                ],
                'Last 30 Days': [
                    moment().subtract(29, 'days'),
                    moment()
                ],
                'This Month': [
                    moment().startOf('month'),
                    moment().endOf('month')
                ],
                'Last Month': [
                    moment().subtract(1, 'month').startOf('month'),
                    moment().subtract(1, 'month').endOf('month')
                ]
            },
            opens: 'right',
            buttonClasses: ['btn btn-default'],
            applyClass: 'btn-small btn-primary',
            cancelClass: 'btn-small',
            format: 'MM/DD/YYYY',
            separator: ' to ',
            locale: {
                applyLabel: 'Submit',
                cancelLabel: 'Clear',
                fromLabel: 'From',
                toLabel: 'To',
                customRangeLabel: 'Custom',
                daysOfWeek: [
                    'Su',
                    'Mo',
                    'Tu',
                    'We',
                    'Th',
                    'Fr',
                    'Sa'
                ],
                monthNames: [
                    'January',
                    'February',
                    'March',
                    'April',
                    'May',
                    'June',
                    'July',
                    'August',
                    'September',
                    'October',
                    'November',
                    'December'
                ],
                firstDay: 1
            }
        };
        $('#reportrange_right span').html(moment().subtract(29, 'days').format('MMMM D, YYYY') + ' - ' + moment().format('MMMM D, YYYY'));
        $('#reportrange_right').daterangepicker(optionSet1, cb);
        $('#reportrange_right').on('show.daterangepicker', function () {
            console.log('show event fired');
        });
        $('#reportrange_right').on('hide.daterangepicker', function () {
            console.log('hide event fired');
        });
        $('#reportrange_right').on('apply.daterangepicker', function (ev, picker) {
            console.log('apply event fired, start/end dates are ' + picker.startDate.format('MMMM D, YYYY') + ' to ' + picker.endDate.format('MMMM D, YYYY'));
        });
        $('#reportrange_right').on('cancel.daterangepicker', function (ev, picker) {
            console.log('cancel event fired');
        });
        $('#options1').click(function () {
            $('#reportrange_right').data('daterangepicker').setOptions(optionSet1, cb);
        });
        $('#options2').click(function () {
            $('#reportrange_right').data('daterangepicker').setOptions(optionSet2, cb);
        });
        $('#destroy').click(function () {
            $('#reportrange_right').data('daterangepicker').remove();
        });
    }
    function init_daterangepicker_single_call() {
        if (typeof $.fn.daterangepicker === 'undefined') {
            return;
        }
        console.log('init_daterangepicker_single_call');
        $('#single_cal1').daterangepicker({
            singleDatePicker: true,
            singleClasses: 'picker_1'
        }, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
        });
        $('#single_cal2').daterangepicker({
            singleDatePicker: true,
            singleClasses: 'picker_2'
        }, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
        });
        $('#single_cal3').daterangepicker({
            singleDatePicker: true,
            singleClasses: 'picker_3'
        }, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
        });
        $('#single_cal4').daterangepicker({
            singleDatePicker: true,
            singleClasses: 'picker_4'
        }, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
        });
    }
    function init_daterangepicker_reservation() {
        if (typeof $.fn.daterangepicker === 'undefined') {
            return;
        }
        console.log('init_daterangepicker_reservation');
        $('#reservation').daterangepicker(null, function (start, end, label) {
            console.log(start.toISOString(), end.toISOString(), label);
        });
        $('#reservation-time').daterangepicker({
            timePicker: true,
            timePickerIncrement: 30,
            locale: { format: 'MM/DD/YYYY h:mm A' }
        });
    }
    function init_SmartWizard() {
        if (typeof $.fn.smartWizard === 'undefined') {
            return;
        }
        console.log('init_SmartWizard');
        $('#wizard').smartWizard();
        $('#wizard_verticle').smartWizard({ transitionEffect: 'slide' });
        $('.buttonNext').addClass('btn btn-success');
        $('.buttonPrevious').addClass('btn btn-primary');
        $('.buttonFinish').addClass('btn btn-default');
    }
    ;
    function init_validator() {
        if (typeof validator === 'undefined') {
            return;
        }
        console.log('init_validator');
        validator.message.date = 'not a real date';
        $('form').on('blur', 'input[required], input.optional, select.required', validator.checkField).on('change', 'select.required', validator.checkField).on('keypress', 'input[required][pattern]', validator.keypress);
        $('.multi.required').on('keyup blur', 'input', function () {
            validator.checkField.apply($(this).siblings().last()[0]);
        });
        $('form').submit(function (e) {
            e.preventDefault();
            var submit = true;
            if (!validator.checkAll($(this))) {
                submit = false;
            }
            if (submit)
                this.submit();
            return false;
        });
    }
    ;
    function init_PNotify() {
        if (typeof PNotify === 'undefined') {
            return;
        }
        console.log('init_PNotify');
        new PNotify({
            title: 'PNotify',
            type: 'info',
            text: 'Welcome. Try hovering over me. You can click things behind me, because I\'m non-blocking.',
            nonblock: { nonblock: true },
            addclass: 'dark',
            styling: 'bootstrap3',
            hide: false,
            before_close: function (PNotify) {
                PNotify.update({
                    title: PNotify.options.title + ' - Enjoy your Stay',
                    before_close: null
                });
                PNotify.queueRemove();
                return false;
            }
        });
    }
    ;
    function init_CustomNotification() {
        console.log('run_customtabs');
        if (typeof CustomTabs === 'undefined') {
            return;
        }
        console.log('init_CustomTabs');
        var cnt = 10;
        TabbedNotification = function (options) {
            var message = '<div id=\'ntf' + cnt + '\' class=\'text alert-' + options.type + '\' style=\'display:none\'><h2><i class=\'fa fa-bell\'></i> ' + options.title + '</h2><div class=\'close\'><a href=\'javascript:;\' class=\'notification_close\'><i class=\'fa fa-close\'></i></a></div><p>' + options.text + '</p></div>';
            if (!document.getElementById('custom_notifications')) {
                alert('doesnt exists');
            } else {
                $('#custom_notifications ul.notifications').append('<li><a id=\'ntlink' + cnt + '\' class=\'alert-' + options.type + '\' href=\'#ntf' + cnt + '\'><i class=\'fa fa-bell animated shake\'></i></a></li>');
                $('#custom_notifications #notif-group').append(message);
                cnt++;
                CustomTabs(options);
            }
        };
        CustomTabs = function (options) {
            $('.tabbed_notifications > div').hide();
            $('.tabbed_notifications > div:first-of-type').show();
            $('#custom_notifications').removeClass('dsp_none');
            $('.notifications a').click(function (e) {
                e.preventDefault();
                var $this = $(this), tabbed_notifications = '#' + $this.parents('.notifications').data('tabbed_notifications'), others = $this.closest('li').siblings().children('a'), target = $this.attr('href');
                others.removeClass('active');
                $this.addClass('active');
                $(tabbed_notifications).children('div').hide();
                $(target).show();
            });
        };
        CustomTabs();
        var tabid = idname = '';
        $(document).on('click', '.notification_close', function (e) {
            idname = $(this).parent().parent().attr('id');
            tabid = idname.substr(-2);
            $('#ntf' + tabid).remove();
            $('#ntlink' + tabid).parent().remove();
            $('.notifications a').first().addClass('active');
            $('#notif-group div').first().css('display', 'block');
        });
    }
    ;
    function init_EasyPieChart() {
        if (typeof $.fn.easyPieChart === 'undefined') {
            return;
        }
        console.log('init_EasyPieChart');
        $('.chart').easyPieChart({
            easing: 'easeOutElastic',
            delay: 3000,
            barColor: '#26B99A',
            trackColor: '#fff',
            scaleColor: false,
            lineWidth: 20,
            trackWidth: 16,
            lineCap: 'butt',
            onStep: function (from, to, percent) {
                $(this.el).find('.percent').text(Math.round(percent));
            }
        });
        var chart = window.chart = $('.chart').data('easyPieChart');
        $('.js_update').on('click', function () {
            chart.update(Math.random() * 200 - 100);
        });
        var originalLeave = $.fn.popover.Constructor.prototype.leave;
        $.fn.popover.Constructor.prototype.leave = function (obj) {
            var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type);
            var container, timeout;
            originalLeave.call(this, obj);
            if (obj.currentTarget) {
                container = $(obj.currentTarget).siblings('.popover');
                timeout = self.timeout;
                container.one('mouseenter', function () {
                    clearTimeout(timeout);
                    container.one('mouseleave', function () {
                        $.fn.popover.Constructor.prototype.leave.call(self, self);
                    });
                });
            }
        };
        $('body').popover({
            selector: '[data-popover]',
            trigger: 'click hover',
            delay: {
                show: 50,
                hide: 400
            }
        });
    }
    ;
    function init_charts() {
        console.log('run_charts  typeof [' + typeof Chart + ']');
        if (typeof Chart === 'undefined') {
            return;
        }
        console.log('init_charts');
        Chart.defaults.global.legend = { enabled: false };
        if ($('#canvas_line').length) {
            var canvas_line_00 = new Chart(document.getElementById('canvas_line'), {
                type: 'line',
                data: {
                    labels: [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July'
                    ],
                    datasets: [
                        {
                            label: 'My First dataset',
                            backgroundColor: 'rgba(38, 185, 154, 0.31)',
                            borderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBorderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBackgroundColor: 'rgba(38, 185, 154, 0.7)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(220,220,220,1)',
                            pointBorderWidth: 1,
                            data: [
                                31,
                                74,
                                6,
                                39,
                                20,
                                85,
                                7
                            ]
                        },
                        {
                            label: 'My Second dataset',
                            backgroundColor: 'rgba(3, 88, 106, 0.3)',
                            borderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBorderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBackgroundColor: 'rgba(3, 88, 106, 0.70)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(151,187,205,1)',
                            pointBorderWidth: 1,
                            data: [
                                82,
                                23,
                                66,
                                9,
                                99,
                                4,
                                2
                            ]
                        }
                    ]
                }
            });
        }
        if ($('#canvas_line1').length) {
            var canvas_line_01 = new Chart(document.getElementById('canvas_line1'), {
                type: 'line',
                data: {
                    labels: [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July'
                    ],
                    datasets: [
                        {
                            label: 'My First dataset',
                            backgroundColor: 'rgba(38, 185, 154, 0.31)',
                            borderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBorderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBackgroundColor: 'rgba(38, 185, 154, 0.7)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(220,220,220,1)',
                            pointBorderWidth: 1,
                            data: [
                                31,
                                74,
                                6,
                                39,
                                20,
                                85,
                                7
                            ]
                        },
                        {
                            label: 'My Second dataset',
                            backgroundColor: 'rgba(3, 88, 106, 0.3)',
                            borderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBorderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBackgroundColor: 'rgba(3, 88, 106, 0.70)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(151,187,205,1)',
                            pointBorderWidth: 1,
                            data: [
                                82,
                                23,
                                66,
                                9,
                                99,
                                4,
                                2
                            ]
                        }
                    ]
                }
            });
        }
        if ($('#canvas_line2').length) {
            var canvas_line_02 = new Chart(document.getElementById('canvas_line2'), {
                type: 'line',
                data: {
                    labels: [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July'
                    ],
                    datasets: [
                        {
                            label: 'My First dataset',
                            backgroundColor: 'rgba(38, 185, 154, 0.31)',
                            borderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBorderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBackgroundColor: 'rgba(38, 185, 154, 0.7)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(220,220,220,1)',
                            pointBorderWidth: 1,
                            data: [
                                31,
                                74,
                                6,
                                39,
                                20,
                                85,
                                7
                            ]
                        },
                        {
                            label: 'My Second dataset',
                            backgroundColor: 'rgba(3, 88, 106, 0.3)',
                            borderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBorderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBackgroundColor: 'rgba(3, 88, 106, 0.70)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(151,187,205,1)',
                            pointBorderWidth: 1,
                            data: [
                                82,
                                23,
                                66,
                                9,
                                99,
                                4,
                                2
                            ]
                        }
                    ]
                }
            });
        }
        if ($('#canvas_line3').length) {
            var canvas_line_03 = new Chart(document.getElementById('canvas_line3'), {
                type: 'line',
                data: {
                    labels: [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July'
                    ],
                    datasets: [
                        {
                            label: 'My First dataset',
                            backgroundColor: 'rgba(38, 185, 154, 0.31)',
                            borderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBorderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBackgroundColor: 'rgba(38, 185, 154, 0.7)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(220,220,220,1)',
                            pointBorderWidth: 1,
                            data: [
                                31,
                                74,
                                6,
                                39,
                                20,
                                85,
                                7
                            ]
                        },
                        {
                            label: 'My Second dataset',
                            backgroundColor: 'rgba(3, 88, 106, 0.3)',
                            borderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBorderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBackgroundColor: 'rgba(3, 88, 106, 0.70)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(151,187,205,1)',
                            pointBorderWidth: 1,
                            data: [
                                82,
                                23,
                                66,
                                9,
                                99,
                                4,
                                2
                            ]
                        }
                    ]
                }
            });
        }
        if ($('#canvas_line4').length) {
            var canvas_line_04 = new Chart(document.getElementById('canvas_line4'), {
                type: 'line',
                data: {
                    labels: [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July'
                    ],
                    datasets: [
                        {
                            label: 'My First dataset',
                            backgroundColor: 'rgba(38, 185, 154, 0.31)',
                            borderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBorderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBackgroundColor: 'rgba(38, 185, 154, 0.7)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(220,220,220,1)',
                            pointBorderWidth: 1,
                            data: [
                                31,
                                74,
                                6,
                                39,
                                20,
                                85,
                                7
                            ]
                        },
                        {
                            label: 'My Second dataset',
                            backgroundColor: 'rgba(3, 88, 106, 0.3)',
                            borderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBorderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBackgroundColor: 'rgba(3, 88, 106, 0.70)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(151,187,205,1)',
                            pointBorderWidth: 1,
                            data: [
                                82,
                                23,
                                66,
                                9,
                                99,
                                4,
                                2
                            ]
                        }
                    ]
                }
            });
        }
        if ($('#lineChart').length) {
            var ctx = document.getElementById('lineChart');
            var lineChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July'
                    ],
                    datasets: [
                        {
                            label: 'My First dataset',
                            backgroundColor: 'rgba(38, 185, 154, 0.31)',
                            borderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBorderColor: 'rgba(38, 185, 154, 0.7)',
                            pointBackgroundColor: 'rgba(38, 185, 154, 0.7)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(220,220,220,1)',
                            pointBorderWidth: 1,
                            data: [
                                31,
                                74,
                                6,
                                39,
                                20,
                                85,
                                7
                            ]
                        },
                        {
                            label: 'My Second dataset',
                            backgroundColor: 'rgba(3, 88, 106, 0.3)',
                            borderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBorderColor: 'rgba(3, 88, 106, 0.70)',
                            pointBackgroundColor: 'rgba(3, 88, 106, 0.70)',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(151,187,205,1)',
                            pointBorderWidth: 1,
                            data: [
                                82,
                                23,
                                66,
                                9,
                                99,
                                4,
                                2
                            ]
                        }
                    ]
                }
            });
        }
        if ($('#mybarChart').length) {
            var ctx = document.getElementById('mybarChart');
            var mybarChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July'
                    ],
                    datasets: [
                        {
                            label: '# of Votes',
                            backgroundColor: '#26B99A',
                            data: [
                                51,
                                30,
                                40,
                                28,
                                92,
                                50,
                                45
                            ]
                        },
                        {
                            label: '# of Votes',
                            backgroundColor: '#03586A',
                            data: [
                                41,
                                56,
                                25,
                                48,
                                72,
                                34,
                                12
                            ]
                        }
                    ]
                },
                options: { scales: { yAxes: [{ ticks: { beginAtZero: true } }] } }
            });
        }
        if ($('#canvasDoughnut').length) {
            var ctx = document.getElementById('canvasDoughnut');
            var data = {
                labels: [
                    'Dark Grey',
                    'Purple Color',
                    'Gray Color',
                    'Green Color',
                    'Blue Color'
                ],
                datasets: [{
                        data: [
                            120,
                            50,
                            140,
                            180,
                            100
                        ],
                        backgroundColor: [
                            '#455C73',
                            '#9B59B6',
                            '#BDC3C7',
                            '#26B99A',
                            '#3498DB'
                        ],
                        hoverBackgroundColor: [
                            '#34495E',
                            '#B370CF',
                            '#CFD4D8',
                            '#36CAAB',
                            '#49A9EA'
                        ]
                    }]
            };
            var canvasDoughnut = new Chart(ctx, {
                type: 'doughnut',
                tooltipFillColor: 'rgba(51, 51, 51, 0.55)',
                data: data
            });
        }
        if ($('#canvasRadar').length) {
            var ctx = document.getElementById('canvasRadar');
            var data = {
                labels: [
                    'Eating',
                    'Drinking',
                    'Sleeping',
                    'Designing',
                    'Coding',
                    'Cycling',
                    'Running'
                ],
                datasets: [
                    {
                        label: 'My First dataset',
                        backgroundColor: 'rgba(3, 88, 106, 0.2)',
                        borderColor: 'rgba(3, 88, 106, 0.80)',
                        pointBorderColor: 'rgba(3, 88, 106, 0.80)',
                        pointBackgroundColor: 'rgba(3, 88, 106, 0.80)',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(220,220,220,1)',
                        data: [
                            65,
                            59,
                            90,
                            81,
                            56,
                            55,
                            40
                        ]
                    },
                    {
                        label: 'My Second dataset',
                        backgroundColor: 'rgba(38, 185, 154, 0.2)',
                        borderColor: 'rgba(38, 185, 154, 0.85)',
                        pointColor: 'rgba(38, 185, 154, 0.85)',
                        pointStrokeColor: '#fff',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(151,187,205,1)',
                        data: [
                            28,
                            48,
                            40,
                            19,
                            96,
                            27,
                            100
                        ]
                    }
                ]
            };
            var canvasRadar = new Chart(ctx, {
                type: 'radar',
                data: data
            });
        }
        if ($('#pieChart').length) {
            var ctx = document.getElementById('pieChart');
            var data = {
                datasets: [{
                        data: [
                            120,
                            50,
                            140,
                            180,
                            100
                        ],
                        backgroundColor: [
                            '#455C73',
                            '#9B59B6',
                            '#BDC3C7',
                            '#26B99A',
                            '#3498DB'
                        ],
                        label: 'My dataset'
                    }],
                labels: [
                    'Dark Gray',
                    'Purple',
                    'Gray',
                    'Green',
                    'Blue'
                ]
            };
            var pieChart = new Chart(ctx, {
                data: data,
                type: 'pie',
                otpions: { legend: false }
            });
        }
        if ($('#polarArea').length) {
            var ctx = document.getElementById('polarArea');
            var data = {
                datasets: [{
                        data: [
                            120,
                            50,
                            140,
                            180,
                            100
                        ],
                        backgroundColor: [
                            '#455C73',
                            '#9B59B6',
                            '#BDC3C7',
                            '#26B99A',
                            '#3498DB'
                        ],
                        label: 'My dataset'
                    }],
                labels: [
                    'Dark Gray',
                    'Purple',
                    'Gray',
                    'Green',
                    'Blue'
                ]
            };
            var polarArea = new Chart(ctx, {
                data: data,
                type: 'polarArea',
                options: { scale: { ticks: { beginAtZero: true } } }
            });
        }
    }
    function init_compose() {
        if (typeof $.fn.slideToggle === 'undefined') {
            return;
        }
        console.log('init_compose');
        $('#compose, .compose-close').click(function () {
            $('.compose').slideToggle();
        });
    }
    ;
    function init_calendar() {
        if (typeof $.fn.fullCalendar === 'undefined') {
            return;
        }
        console.log('init_calendar');
        var date = new Date(), d = date.getDate(), m = date.getMonth(), y = date.getFullYear(), started, categoryClass;
        var calendar = $('#calendar').fullCalendar({
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay,listMonth'
            },
            selectable: true,
            selectHelper: true,
            select: function (start, end, allDay) {
                $('#fc_create').click();
                started = start;
                ended = end;
                $('.antosubmit').on('click', function () {
                    var title = $('#title').val();
                    if (end) {
                        ended = end;
                    }
                    categoryClass = $('#event_type').val();
                    if (title) {
                        calendar.fullCalendar('renderEvent', {
                            title: title,
                            start: started,
                            end: end,
                            allDay: allDay
                        }, true);
                    }
                    $('#title').val('');
                    calendar.fullCalendar('unselect');
                    $('.antoclose').click();
                    return false;
                });
            },
            eventClick: function (calEvent, jsEvent, view) {
                $('#fc_edit').click();
                $('#title2').val(calEvent.title);
                categoryClass = $('#event_type').val();
                $('.antosubmit2').on('click', function () {
                    calEvent.title = $('#title2').val();
                    calendar.fullCalendar('updateEvent', calEvent);
                    $('.antoclose2').click();
                });
                calendar.fullCalendar('unselect');
            },
            editable: true,
            events: [
                {
                    title: 'All Day Event',
                    start: new Date(y, m, 1)
                },
                {
                    title: 'Long Event',
                    start: new Date(y, m, d - 5),
                    end: new Date(y, m, d - 2)
                },
                {
                    title: 'Meeting',
                    start: new Date(y, m, d, 10, 30),
                    allDay: false
                },
                {
                    title: 'Lunch',
                    start: new Date(y, m, d + 14, 12, 0),
                    end: new Date(y, m, d, 14, 0),
                    allDay: false
                },
                {
                    title: 'Birthday Party',
                    start: new Date(y, m, d + 1, 19, 0),
                    end: new Date(y, m, d + 1, 22, 30),
                    allDay: false
                },
                {
                    title: 'Click for Google',
                    start: new Date(y, m, 28),
                    end: new Date(y, m, 29),
                    url: 'http://google.com/'
                }
            ]
        });
    }
    ;
    function init_DataTables() {
        console.log('run_datatables');
        if (typeof $.fn.DataTable === 'undefined') {
            return;
        }
        console.log('init_DataTables');
        var handleDataTableButtons = function () {
            if ($('#datatable-buttons').length) {
                $('#datatable-buttons').DataTable({
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            extend: 'copy',
                            className: 'btn-sm'
                        },
                        {
                            extend: 'csv',
                            className: 'btn-sm'
                        },
                        {
                            extend: 'excel',
                            className: 'btn-sm'
                        },
                        {
                            extend: 'pdfHtml5',
                            className: 'btn-sm'
                        },
                        {
                            extend: 'print',
                            className: 'btn-sm'
                        }
                    ],
                    responsive: true
                });
            }
        };
        TableManageButtons = function () {
            'use strict';
            return {
                init: function () {
                    handleDataTableButtons();
                }
            };
        }();
        $('#datatable').dataTable();
        $('#datatable-keytable').DataTable({ keys: true });
        $('#datatable-responsive').DataTable();
        $('#datatable-scroller').DataTable({
            ajax: 'js/datatables/json/scroller-demo.json',
            deferRender: true,
            scrollY: 380,
            scrollCollapse: true,
            scroller: true
        });
        $('#datatable-fixed-header').DataTable({ fixedHeader: true });
        var $datatable = $('#datatable-checkbox');
        $datatable.dataTable({
            'order': [[
                    1,
                    'asc'
                ]],
            'columnDefs': [{
                    orderable: false,
                    targets: [0]
                }]
        });
        $datatable.on('draw.dt', function () {
            $('checkbox input').iCheck({ checkboxClass: 'icheckbox_flat-green' });
        });
        TableManageButtons.init();
    }
    ;
    $(document).ready(function () {
        init_sidebar();
    });
});
define('common', [
    'angular',
    'require',
    'js.cookie',
    'moment',
    'angular-route',
    'appDirectives',
    'appServices',
    'appFactorys',
    'appTemplates',
    'jquery',
    'Ps',
    'daterange',
    'waves',
    'sweetalert',
    'bootstrap',
    'nprogress'
], function () {
});
(function (win) {
    require([
        'angular',
        'router-config',
        'app',
        'common'
    ], function (angular) {
        angular.bootstrap(document, ['webapp']);
    });
}(window));
define('start', [
    'angular',
    'router-config',
    'app',
    'common'
], function () {
    return;
});